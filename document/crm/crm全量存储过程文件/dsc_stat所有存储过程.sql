CREATE OR REPLACE PROCEDURE DSC_STAT.P_GATHER_STAT(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN INT,
                                                   I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
       项目名称：   NDSC-数据服务中心
       用户名：     DSC_STAT
       过程名称:    P_GATHER_STAT_Y
       功能简述：   表分区分析
       参数：
                英文名称            中文名称                可能取值
                O_N_CODE            返回代码                0 正常；-1 异常
                O_S_NOTE            返回信息                字符串信息
                I_N_STATDATE        统计日期
                I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

       返回：



       算法：



       注意事项：

             分区表分析是在每个月的第一个交易日执行的
             现进行分析的有T_STAT_KHZC_Y/T_STAT_KHZC_R/T_STAT_KHJYSR_Y/T_STAT_KHJYSR_R

       数据源：



       修改记录;
       ------------------------------------------------------------------------
       操作人      操作时间                   操作
       胡丹丹      2015/04/30    2.0.0.1      创建
       胡丹丹      2016/10/14    2.0.0.2      修改：即使不分析表也要写日志
    */
 IS
    VA_TAB       PUB_SYS.TYPE_STR_ARR := PUB_SYS.TYPE_STR_ARR('DSC_STAT.T_STAT_KHZC_Y',
                                                              'DSC_STAT.T_STAT_KHZC_R',
                                                              'DSC_STAT.T_STAT_KHJYSR_R',
                                                              'DSC_STAT.T_STAT_KHJYSR_Y');
    VS_PART      VARCHAR2(15) := 'PY_' || SUBSTR(I_N_TJRQ, 1, 6);
    VN_QC        INT := SUBSTR(I_N_TJRQ, 1, 6) || '01';
    VS_OWNER     VARCHAR2(30);
    VS_TAB       VARCHAR2(30);
    VN_DOT_POS   INT;
    VN_MIN_JYR   INT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_USER      VARCHAR2(30);
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
BEGIN
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER => VS_USER, I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    SELECT MIN(JYR)
      INTO VN_MIN_JYR
      FROM DSC_CFG.T_XTJYR A
     WHERE A.JYR BETWEEN VN_QC AND I_N_TJRQ;
    --20200408 HZY 表分析改为每日执行
    /*IF VN_MIN_JYR <> I_N_TJRQ THEN
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        RETURN;
    ELSE*/
    FOR I IN 1 .. VA_TAB.COUNT LOOP
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '分析表[' || VA_TAB(I) || '],分区为：' ||
                                                        VS_PART || '!',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        VN_DOT_POS := INSTR(VA_TAB(I), '.');
        VS_OWNER   := SUBSTR(VA_TAB(I), 1, VN_DOT_POS - 1);
        VS_TAB     := SUBSTR(VA_TAB(I), VN_DOT_POS + 1);
        DBMS_STATS.GATHER_TABLE_STATS(OWNNAME          => VS_OWNER,
                                      TABNAME          => VS_TAB,
                                      PARTNAME         => VS_PART,
                                      ESTIMATE_PERCENT => DBMS_STATS.AUTO_SAMPLE_SIZE,
                                      DEGREE           => DBMS_STATS.DEFAULT_DEGREE,
                                      CASCADE          => TRUE,
                                      FORCE            => TRUE,
                                      GRANULARITY      => 'PARTITION');

        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '分析表[' || VA_TAB(I) || '],分区为：' ||
                                                        VS_PART || '!',
                                  I_S_CHANGEDESC     => '分析完成',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END LOOP;
    --END IF;
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_GATHER_STAT;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_CPDM_JRCP_R(O_N_CODE OUT INT,
                                                        O_S_NOTE OUT VARCHAR2,
                                                        I_N_TJRQ IN INT,
                                                        I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_CPDM_JRCP_R
         功能简述：   金融产品_产品日统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做     1：重做
         返回：

         算法：


         注意事项：


         数据源：
                 DSC_BAS.T_FP_JGMXLS      ：基金交割流水
                 DSC_HIS.T_FP_JGMXLS_HIS  : 基金交割流水历史
                 DSC_BAS.T_FP_CPFE        : 基金份额
                 DSC_HIS.T_FP_CPFE_HIS    : 基金份额历史

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                    操作
         胡丹丹      2015/07/23                  创建
         刘官勤      2016/07/27                  修改：表DSC_STAT.T_STAT_CPDM_JRCP_R中新增KHS_MR，KHS_MC两个字段的取值
    */
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期

BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_KHJYSR_R';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --重做删除原数据
    IF I_N_REDO = 1 THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_CPDM_JRCP_R]目标表，日期：=' ||
                                                        VN_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_CPDM_JRCP_R WHERE RQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_CPDM_JRCP_R]目标表，日期：=' ||
                                                        VN_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_CPDM_JRCP_R]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_CPDM_JRCP_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_CPDM_JRCP_R';
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_CPDM_JRCP_R]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_T_STAT_CPDM_JRCP_R]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10001-1】';
    --金融产品成交情况
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品成交情况，插入临时表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_CPDM_JRCP_R
        (RQ,
         CPDM,
         CPFL,
         APP_ID,
         YYB,
         CJBS,
         CJSL,
         CJJE,
         CJSL_RG,
         CJJE_RG,
         CJJG_RG,
         CJSL_SG,
         CJJE_SG,
         CJJG_SG,
         CJBS_SH,
         CJSL_SH,
         CJJE_SH,
         CJJG_SH,
         CJSL_QZ,
         CJJE_QZ,
         CJSL_QJ,
         CJJE_QJ,
         FHJE,
         ZRSL,
         ZRJE,
         ZCSL,
         ZCJE,
         KHS_MR,
         KHS_MC)
        SELECT VN_TJRQ AS RQ,
               CPDM,
               NVL(CPFL, 1) AS CPFL,
               APP_ID,
               YYB,
               SUM(CASE
                       WHEN YWDM IN ('122', '123', '124', '125', '139', '142', '130') THEN
                        1
                       ELSE
                        0
                   END) CJBS,
               SUM(CASE
                       WHEN YWDM IN ('122', '123', '124', '125', '139', '142', '130') THEN
                        QRFE
                       ELSE
                        0
                   END) CJSL,
               SUM(CASE
                       WHEN YWDM IN ('122', '123', '124', '125', '139', '142', '130') THEN
                        QRJE
                       ELSE
                        0
                   END) CJJE,
               SUM(CASE
                       WHEN YWDM IN ('130') THEN
                        QRFE
                       ELSE
                        0
                   END) CJSL_RG,
               SUM(CASE
                       WHEN YWDM IN ('130') THEN
                        QRJE
                       ELSE
                        0
                   END) CJJE_RG,
               CASE
                   WHEN SUM(DECODE(YWDM, '130', 1, 0)) = 0 THEN
                    0
                   ELSE
                    SUM(DECODE(YWDM, '130', CPJZ, 0)) / SUM(DECODE(YWDM, '130', 1, 0))
               END CJJG_RG,
               SUM(CASE
                       WHEN YWDM IN ('122', '123') THEN
                        QRFE
                       ELSE
                        0
                   END) CJSL_SG,
               SUM(CASE
                       WHEN YWDM IN ('122', '123') THEN
                        QRJE
                       ELSE
                        0
                   END) CJJE_SG,
               CASE
                   WHEN SUM(DECODE(YWDM, '122', 1, '123', 1, 0)) = 0 THEN
                    0
                   ELSE
                    SUM(DECODE(YWDM, '122', CPJZ, '123', CPJZ, 0)) /
                    SUM(DECODE(YWDM, '122', 1, '123', 1, 0))
               END CJJG_SG,
               SUM(CASE
                       WHEN YWDM IN ('124', '125', '142') THEN
                        1
                       ELSE
                        0
                   END) CJBS_SH,
               SUM(CASE
                       WHEN YWDM IN ('124', '125', '142') THEN
                        QRFE
                       ELSE
                        0
                   END) CJSL_SH,
               SUM(CASE
                       WHEN YWDM IN ('124', '125', '142') THEN
                        QRJE
                       ELSE
                        0
                   END) CJJE_SH,
               CASE
                   WHEN SUM(DECODE(YWDM, '124', 1, '125', 1, '142', 1, 0)) = 0 THEN
                    0
                   ELSE
                    SUM(DECODE(YWDM, '124', CPJZ, '125', CPJZ, '142', CPJZ, 0)) /
                    SUM(DECODE(YWDM, '124', 1, '125', 1, '142', 1, 0))
               END CJJG_SH,
               SUM(CASE
                       WHEN YWDM IN ('144') THEN
                        QRFE
                       ELSE
                        0
                   END) CJSL_QZ,
               SUM(CASE
                       WHEN YWDM IN ('144') THEN
                        QRJE
                       ELSE
                        0
                   END) CJJE_QZ,
               SUM(CASE
                       WHEN YWDM IN ('145') THEN
                        QRFE
                       ELSE
                        0
                   END) CJSL_QJ,
               SUM(CASE
                       WHEN YWDM IN ('145') THEN
                        QRJE
                       ELSE
                        0
                   END) CJJE_QJ,
               SUM(CASE
                       WHEN YWDM IN ('143') THEN
                        QRJE
                       ELSE
                        0
                   END) FHJE,
               SUM(CASE
                       WHEN YWDM IN ('137') THEN
                        QRFE
                       ELSE
                        0
                   END) ZRSL,
               SUM(CASE
                       WHEN YWDM IN ('137') THEN
                        QRJE
                       ELSE
                        0
                   END) ZRJE,
               SUM(CASE
                       WHEN YWDM IN ('138') THEN
                        QRFE
                       ELSE
                        0
                   END) ZCSL,
               SUM(CASE
                       WHEN YWDM IN ('138') THEN
                        QRJE
                       ELSE
                        0
                   END) ZCJE,
               COUNT(DISTINCT CASE
                         WHEN YWDM IN ('122', '123', '130', '139') THEN
                          T.KHH
                         ELSE
                          NULL
                     END) KHS_MR,
               COUNT(DISTINCT CASE
                         WHEN YWDM IN ('124', '125', '142') THEN
                          T.KHH
                         ELSE
                          NULL
                     END) KHS_MC
          FROM (SELECT QRRQ, CPDM, CPFL, APP_ID, YYB, YWDM, QRFE, QRJE, CPJZ, KHH
                  FROM DSC_BAS.T_FP_JGMXLS
                UNION ALL
                SELECT QRRQ, CPDM, CPFL, APP_ID, YYB, YWDM, QRFE, QRJE, CPJZ, KHH
                  FROM DSC_HIS.T_FP_JGMXLS_HIS) T
         WHERE YWDM IN ('122',
                        '123',
                        '124',
                        '125',
                        '139',
                        '142',
                        '130',
                        '144',
                        '145',
                        '143',
                        '137',
                        '138')
           AND T.QRRQ = VN_TJRQ
         GROUP BY CPDM, CPFL, APP_ID, YYB;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品成交情况，插入临时表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10001-2】';
    --金融产品持有情况及市值
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品持有情况及市值数据，插入临时表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_CPDM_JRCP_R
        (RQ,
         CPDM,
         CPFL,
         APP_ID,
         YYB,
         CYRS,
         JGCYRS,
         GRCYRS,
         CYSL,
         JGCYSL,
         GRCYSL,
         CYSZ,
         JGCYSZ,
         GRCYSZ)
        SELECT VN_TJRQ AS RQ,
               A.CPDM,
               NVL(A.CPFL, 1) CPFL,
               A.APP_ID,
               A.YYB,
               COUNT(A.KHH) CYRS,
               COUNT(CASE
                         WHEN NVL(B.GRJG, 0) = 1 THEN
                          A.KHH
                         ELSE
                          NULL
                     END) JGCYRS,
               COUNT(CASE
                         WHEN NVL(B.GRJG, 0) = 0 THEN
                          A.KHH
                         ELSE
                          NULL
                     END) GRCYRS,
               SUM(A.CPSL) CYSL,
               SUM(CASE
                       WHEN NVL(B.GRJG, 0) = 1 THEN
                        A.CPSL
                       ELSE
                        0
                   END) JGCYSL,
               SUM(CASE
                       WHEN NVL(B.GRJG, 0) = 0 THEN
                        A.CPSL
                       ELSE
                        0
                   END) GRCYSL,
               SUM(A.ZXSZ) CYSZ,
               SUM(CASE
                       WHEN NVL(B.GRJG, 0) = 1 THEN
                        A.ZXSZ
                       ELSE
                        0
                   END) JGCYSZ,
               SUM(CASE
                       WHEN NVL(B.GRJG, 0) = 0 THEN
                        A.ZXSZ
                       ELSE
                        0
                   END) GRCYSZ
          FROM (SELECT RQ, KHH, YYB, CPDM, CPSL, ZXSZ, CPFL, APP_ID
                  FROM DSC_BAS.T_FP_CPFE
                UNION ALL
                SELECT RQ, KHH, YYB, CPDM, CPSL, ZXSZ, CPFL, APP_ID
                  FROM DSC_HIS.T_FP_CPFE_HIS) A,
               (SELECT *
                  FROM DSC_BAS.T_KHXX T
                 WHERE EXISTS (SELECT 1 FROM DSC_BAS.T_FP_JRCPZH WHERE KHH = T.KHH)) B
         WHERE A.KHH = B.KHH(+)
           AND A.RQ = VN_TJRQ
         GROUP BY A.CPDM, A.CPFL, A.APP_ID, A.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品持有情况及市值数据，插入临时表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10002】';
    ------------写入结果表-----------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_R]进行汇总统计，插入目标表[DSC_STAT.T_STAT_CPDM_JRCP_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_STAT_CPDM_JRCP_R
        (RQ,
         CPDM,
         CPFL,
         CPLX,
         APP_ID,
         YYB,
         CJBS,
         CJSL,
         CJJE,
         CJSL_RG,
         CJJE_RG,
         CJJG_RG,
         CJSL_SG,
         CJJE_SG,
         CJJG_SG,
         CJBS_SH,
         CJSL_SH,
         CJJE_SH,
         CJJG_SH,
         CJSL_QZ,
         CJJE_QZ,
         CJSL_QJ,
         CJJE_QJ,
         FHJE,
         ZRSL,
         ZRJE,
         ZCSL,
         ZCJE,
         CYRS,
         JGCYRS,
         GRCYRS,
         CYSL,
         JGCYSL,
         GRCYSL,
         CYSZ,
         JGCYSZ,
         GRCYSZ,
         CJSL_XYMR,
         CJJE_XYMR,
         CJBS_XYMR,
         CJSL_XYMC,
         CJJE_XYMC,
         CJBS_XYMC,
         CJSL_BJMR,
         CJJE_BJMR,
         CJBS_BJMR,
         CJSL_BJMC,
         CJJE_BJMC,
         CJBS_BJMC,
         CJSL_ZSSMR,
         CJJE_ZSSMR,
         CJBS_ZSSMR,
         CJSL_ZSSMC,
         CJJE_ZSSMC,
         CJBS_ZSSMC,
         KHS_MR,
         KHS_MC)
        SELECT T.RQ,
               T.CPDM,
               T.CPFL,
               T1.CPLB,
               T.APP_ID,
               T.YYB,
               SUM(NVL(T.CJBS, 0)) AS CJBS,
               SUM(NVL(T.CJSL, 0)) AS CJSL,
               SUM(NVL(T.CJJE, 0)) AS CJJE,
               SUM(NVL(T.CJSL_RG, 0)) AS CJSL_RG,
               SUM(NVL(T.CJJE_RG, 0)) AS CJJE_RG,
               SUM(NVL(T.CJJG_RG, 0)) AS CJJG_RG,
               SUM(NVL(T.CJSL_SG, 0)) AS CJSL_SG,
               SUM(NVL(T.CJJE_SG, 0)) AS CJJE_SG,
               SUM(NVL(T.CJJG_SG, 0)) AS CJJG_SG,
               SUM(NVL(T.CJBS_SH, 0)) AS KHS_SH,
               SUM(NVL(T.CJSL_SH, 0)) AS CJSL_SH,
               SUM(NVL(T.CJJE_SH, 0)) AS CJJE_SH,
               SUM(NVL(T.CJJG_SH, 0)) AS CJJG_SH,
               SUM(NVL(T.CJSL_QZ, 0)) AS CJSL_QZ,
               SUM(NVL(T.CJJE_QZ, 0)) AS CJJE_QZ,
               SUM(NVL(T.CJSL_QJ, 0)) AS CJSL_QJ,
               SUM(NVL(T.CJJE_QJ, 0)) AS CJJE_QJ,
               SUM(NVL(T.FHJE, 0)) AS FHJE,
               SUM(NVL(T.ZRSL, 0)) AS ZRSL,
               SUM(NVL(T.ZRJE, 0)) AS ZRJE,
               SUM(NVL(T.ZCSL, 0)) AS ZCSL,
               SUM(NVL(T.ZCJE, 0)) AS ZCJE,
               SUM(NVL(T.CYRS, 0)) AS CYRS,
               SUM(NVL(T.JGCYRS, 0)) AS JGCYRS,
               SUM(NVL(T.GRCYRS, 0)) AS GRCYRS,
               SUM(NVL(T.CYSL, 0)) AS CYSL,
               SUM(NVL(T.JGCYSL, 0)) AS JGCYSL,
               SUM(NVL(T.GRCYSL, 0)) AS GRCYSL,
               SUM(NVL(T.CYSZ, 0)) AS CYSZ,
               SUM(NVL(T.JGCYSZ, 0)) AS JGCYSZ,
               SUM(NVL(T.GRCYSZ, 0)) AS GRCYSZ,
               SUM(NVL(T.CJSL_XYMR, 0)) AS CJSL_XYMR,
               SUM(NVL(T.CJJE_XYMR, 0)) AS CJJE_XYMR,
               SUM(NVL(T.CJBS_XYMR, 0)) AS CJBS_XYMR,
               SUM(NVL(T.CJSL_XYMC, 0)) AS CJSL_XYMC,
               SUM(NVL(T.CJJE_XYMC, 0)) AS CJJE_XYMC,
               SUM(NVL(T.CJBS_XYMC, 0)) AS CJBS_XYMC,
               SUM(NVL(T.CJSL_BJMR, 0)) AS CJSL_BJMR,
               SUM(NVL(T.CJJE_BJMR, 0)) AS CJJE_BJMR,
               SUM(NVL(T.CJBS_BJMR, 0)) AS CJBS_BJMR,
               SUM(NVL(T.CJSL_BJMC, 0)) AS CJSL_BJMC,
               SUM(NVL(T.CJJE_BJMC, 0)) AS CJJE_BJMC,
               SUM(NVL(T.CJBS_BJMC, 0)) AS CJBS_BJMC,
               SUM(NVL(T.CJSL_ZSSMR, 0)) AS CJSL_ZSSMR,
               SUM(NVL(T.CJJE_ZSSMR, 0)) AS CJJE_ZSSMR,
               SUM(NVL(T.CJBS_ZSSMR, 0)) AS CJBS_ZSSMR,
               SUM(NVL(T.CJSL_ZSSMC, 0)) AS CJSL_ZSSMC,
               SUM(NVL(T.CJJE_ZSSMC, 0)) AS CJJE_ZSSMC,
               SUM(NVL(T.CJBS_ZSSMC, 0)) AS CJBS_ZSSMC,
               SUM(NVL(T.KHS_MR, 0)) AS KHS_MR,
               SUM(NVL(T.KHS_MC, 0)) AS KHS_MC
          FROM DSC_STAT.TMP_T_STAT_CPDM_JRCP_R T, DSC_CFG.T_JRCPDM T1
         WHERE T.CPDM = T1.CPDM(+)
           AND T.APP_ID = T1.APP_ID(+)
         GROUP BY T.RQ, T.CPDM, T.CPFL, T1.CPLB, T.APP_ID, T.YYB;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_R]进行汇总统计，插入目标表[DSC_STAT.T_STAT_CPDM_JRCP_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_CPDM_JRCP_R';

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_CPDM_JRCP_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_CPDM_JRCP_SYL_R(O_N_CODE OUT INT,
                                                            O_S_NOTE OUT VARCHAR2,
                                                            I_N_TJRQ IN INT,
                                                            I_N_REDO IN NUMBER DEFAULT 0) IS
    /*-----------------------------------------------------------------------
     项目名称：   NDSC-数据服务中心
     用户名  ：   DSC_STAT
     过程名称：   P_STAT_CPDM_JRCP_SYL_R
     功能简述：   金融产品_收益率日表
     参数：
              英文名称            中文名称                可能取值
              O_N_CODE            返回代码                0 正常；-1 异常
              O_S_NOTE            返回信息                字符串信息
              I_N_TJRQ            统计日期
              I_N_REDO            0：不重做     1：重做
    返回：

     算法：

     注意事项：

     数据源：


     修改记录;
     ------------------------------------------------------------------------
     操作人       操作时间                   操作
     吴邦杰       2015/09/07                 创建
    汤德强(现场)  2016/10/28                 修改：上个月，近三个月，近半年，近1,2,3年时间区间的取值
    */
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_TJRQ      NUMBER(8) := I_N_TJRQ;
    --VN_YF              NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --月份
    --VN_FIRSTDAY_OF_MON NUMBER(8) := VN_YF * 100 + 1; --月初
    VN_LOGID    INT; --LOG 表记录ID
    VN_ROWCOUNT INT; --记录数
    VN_STEP     INT; --动作步数
    VN_PROC_NO  PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER     VARCHAR2(30);
    VN_TJRQ2    DATE := TO_DATE(I_N_TJRQ, 'YYYYMMDD'); --
    VN_JYR_SR   NUMBER(8); --上一个交易日
    --
    V_7R NUMBER(8) := TO_CHAR(VN_TJRQ2 - 6, 'YYYYMMDD'); ----统计日
    /*V_1M NUMBER(8) := SUBSTR(TO_CHAR(ADD_MONTHS(VN_TJRQ2, -1), 'YYYYMMDD'), 1, 6); ---上个月
    V_3M NUMBER(8) := SUBSTR(TO_CHAR(ADD_MONTHS(VN_TJRQ2, -3), 'YYYYMMDD'), 1, 6); ---3个月
    V_6M NUMBER(8) := SUBSTR(TO_CHAR(ADD_MONTHS(VN_TJRQ2, -6), 'YYYYMMDD'), 1, 6); ---6个月*/
    V_1M NUMBER(8) := SUBSTR(TO_CHAR(ADD_MONTHS(VN_TJRQ2, -1), 'YYYYMMDD') + 1, 1, 8); ---上个月
    V_3M NUMBER(8) := SUBSTR(TO_CHAR(ADD_MONTHS(VN_TJRQ2, -3), 'YYYYMMDD') + 1, 1, 8); ---3个月
    V_6M NUMBER(8) := SUBSTR(TO_CHAR(ADD_MONTHS(VN_TJRQ2, -6), 'YYYYMMDD') + 1, 1, 8); ---6个月
    V_JN NUMBER(4) := SUBSTR(VN_TJRQ, 1, 4); ---今年
    /*V_1N NUMBER(8) := SUBSTR(TO_CHAR(ADD_MONTHS(VN_TJRQ2, -12), 'YYYYMMDD'), 1, 4); ---1年
    V_2N NUMBER(8) := SUBSTR(TO_CHAR(ADD_MONTHS(VN_TJRQ2, -24), 'YYYYMMDD'), 1, 4); ---2年
    V_3N NUMBER(8) := SUBSTR(TO_CHAR(ADD_MONTHS(VN_TJRQ2, -36), 'YYYYMMDD'), 1, 4); ---3年*/
    V_1N NUMBER(8) := SUBSTR(TO_CHAR(ADD_MONTHS(VN_TJRQ2, -12), 'YYYYMMDD') + 1, 1, 8); ---1年
    V_2N NUMBER(8) := SUBSTR(TO_CHAR(ADD_MONTHS(VN_TJRQ2, -24), 'YYYYMMDD') + 1, 1, 8); ---2年
    V_3N NUMBER(8) := SUBSTR(TO_CHAR(ADD_MONTHS(VN_TJRQ2, -36), 'YYYYMMDD') + 1, 1, 8); ---3年

    --V_RQ       NUMBER(8) := VN_TJRQ;
    /*V_1M_BEGIN NUMBER(8) := V_1M || '01'; ---上月初
    V_END      NUMBER(8) := V_1M || '31'; ---上月末
    V_3M_BEGIN NUMBER(8) := V_3M || '01'; ---3月初
    V_6M_BEGIN NUMBER(8) := V_6M || '01'; ---6月初*/
    V_1M_BEGIN NUMBER(8) := V_1M; ---上月初
    V_END      NUMBER(8) := VN_TJRQ; ---上月末
    V_3M_BEGIN NUMBER(8) := V_3M; ---3月初
    V_6M_BEGIN NUMBER(8) := V_6M; ---6月初
    V_JN_BEGIN NUMBER(8) := V_JN || '0101'; ---今年初
    V_JN_END   NUMBER(8) := VN_TJRQ; ---今年末
    /*V_1N_BEGIN NUMBER(8) := V_1N || '0101'; ---1年初
    V_1N_END   NUMBER(8) := V_1N || '1231'; ---1年末
    V_2N_BEGIN NUMBER(8) := V_2N || '0101'; ---2年初
    V_3N_END   NUMBER(8) := V_1N || '1231'; ---2年末
    V_3N_BEGIN NUMBER(8) := V_3N || '0101'; ---5年初
    V_3N_END   NUMBER(8) := V_1N || '1231'; ---5年末*/
    V_1N_BEGIN NUMBER(8) := V_1N; ---1年初
    V_1N_END   NUMBER(8) := VN_TJRQ; ---1年末
    V_2N_BEGIN NUMBER(8) := V_2N; ---2年初
    V_2N_END   NUMBER(8) := VN_TJRQ; ---2年末
    V_3N_BEGIN NUMBER(8) := V_3N; ---5年初
    V_3N_END   NUMBER(8) := VN_TJRQ; ---5年末

BEGIN

    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    SELECT MAX(D.JYR) INTO VN_JYR_SR FROM DSC_CFG.T_XTJYR D WHERE D.JYR < VN_TJRQ;
    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);

    O_S_NOTE := '【ERROR-10000】';
    --重做删除原数据
    IF I_N_REDO IN (0, 1, 2) THEN
        --分区删除
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_CPDM_JRCP_SYL_R]，日期：=' ||
                                                        VN_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE DSC_STAT.T_STAT_CPDM_JRCP_SYL_R WHERE RQ = I_N_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;

        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_CPDM_JRCP_SYL_R]，日期：=' ||
                                                        VN_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_CPDM_JRCP_SYL_R]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    ---
    O_S_NOTE := '【ERROR-10001】';

    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_近7日收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R
        (CPFL, CPDM, APP_ID, SYL_7R)
        SELECT C.CPFL,
               C.CPDM,
               C.APP_ID,
               CASE
                   WHEN CPJZ_KS = 0 THEN
                    0
                   ELSE
                    (CPJZ_JS - CPJZ_KS) / CPJZ_KS
               END SYL_7R
          FROM (SELECT B.CPFL,
                       B.CPDM,
                       B.APP_ID,
                       MAX(CASE
                               WHEN RQ_ASC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_KS,
                       MAX(CASE
                               WHEN RQ_DESC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_JS
                  FROM (SELECT CPFL,
                               CPDM,
                               APP_ID,
                               ZXJZ,
                               RQ,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ) RQ_ASC,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ DESC) RQ_DESC
                          FROM (SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_BAS.T_JRCPHQ
                                UNION ALL
                                SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_HIS.T_JRCPJZ_HIS) A
                         WHERE RQ BETWEEN V_7R AND VN_TJRQ) B
                 GROUP BY B.CPFL, B.CPDM, B.APP_ID) C;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_近7日收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    ---近1月收益率
    O_S_NOTE := '【ERROR-10001】';

    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_近1月收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R
        (CPFL, CPDM, APP_ID, SYL_1M)
        SELECT C.CPFL,
               C.CPDM,
               C.APP_ID,
               CASE
                   WHEN CPJZ_KS = 0 THEN
                    0
                   ELSE
                    (CPJZ_JS - CPJZ_KS) / CPJZ_KS
               END SYL_1M
          FROM (SELECT B.CPFL,
                       B.CPDM,
                       B.APP_ID,
                       MAX(CASE
                               WHEN RQ_ASC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_KS,
                       MAX(CASE
                               WHEN RQ_DESC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_JS
                  FROM (SELECT CPFL,
                               CPDM,
                               APP_ID,
                               ZXJZ,
                               RQ,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ) RQ_ASC,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ DESC) RQ_DESC
                          FROM (SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_BAS.T_JRCPHQ
                                UNION ALL
                                SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_HIS.T_JRCPJZ_HIS) A
                         WHERE RQ BETWEEN V_1M_BEGIN AND V_END) B
                 GROUP BY B.CPFL, B.CPDM, B.APP_ID) C;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_近1月收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    ---近3月收益率
    O_S_NOTE := '【ERROR-10001】';

    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_近3月收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R
        (CPFL, CPDM, APP_ID, SYL_3M)
        SELECT C.CPFL,
               C.CPDM,
               C.APP_ID,
               CASE
                   WHEN CPJZ_KS = 0 THEN
                    0
                   ELSE
                    (CPJZ_JS - CPJZ_KS) / CPJZ_KS
               END SYL_3M
          FROM (SELECT B.CPFL,
                       B.CPDM,
                       B.APP_ID,
                       MAX(CASE
                               WHEN RQ_ASC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_KS,
                       MAX(CASE
                               WHEN RQ_DESC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_JS
                  FROM (SELECT CPFL,
                               CPDM,
                               APP_ID,
                               ZXJZ,
                               RQ,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ) RQ_ASC,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ DESC) RQ_DESC
                          FROM (SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_BAS.T_JRCPHQ
                                UNION ALL
                                SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_HIS.T_JRCPJZ_HIS) A
                         WHERE RQ BETWEEN V_3M_BEGIN AND V_END) B
                 GROUP BY B.CPFL, B.CPDM, B.APP_ID) C;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_近3月收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    ---近半年收益率
    O_S_NOTE := '【ERROR-10001】';

    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_近半年收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R
        (CPFL, CPDM, APP_ID, SYL_6M)
        SELECT C.CPFL,
               C.CPDM,
               C.APP_ID,
               CASE
                   WHEN CPJZ_KS = 0 THEN
                    0
                   ELSE
                    (CPJZ_JS - CPJZ_KS) / CPJZ_KS
               END SYL_6M
          FROM (SELECT B.CPFL,
                       B.CPDM,
                       B.APP_ID,
                       MAX(CASE
                               WHEN RQ_ASC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_KS,
                       MAX(CASE
                               WHEN RQ_DESC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_JS
                  FROM (SELECT CPFL,
                               CPDM,
                               APP_ID,
                               ZXJZ,
                               RQ,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ) RQ_ASC,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ DESC) RQ_DESC
                          FROM (SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_BAS.T_JRCPHQ
                                UNION ALL
                                SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_HIS.T_JRCPJZ_HIS) A
                         WHERE RQ BETWEEN V_6M_BEGIN AND V_END) B
                 GROUP BY B.CPFL, B.CPDM, B.APP_ID) C;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_近半年收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    ---今年以来收益率
    O_S_NOTE := '【ERROR-10001】';

    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_今年以来收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R
        (CPFL, CPDM, APP_ID, SYL_JN)
        SELECT C.CPFL,
               C.CPDM,
               C.APP_ID,
               CASE
                   WHEN CPJZ_KS = 0 THEN
                    0
                   ELSE
                    (CPJZ_JS - CPJZ_KS) / CPJZ_KS
               END SYL_JN
          FROM (SELECT B.CPFL,
                       B.CPDM,
                       B.APP_ID,
                       MAX(CASE
                               WHEN RQ_ASC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_KS,
                       MAX(CASE
                               WHEN RQ_DESC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_JS
                  FROM (SELECT CPFL,
                               CPDM,
                               APP_ID,
                               ZXJZ,
                               RQ,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ) RQ_ASC,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ DESC) RQ_DESC
                          FROM (SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_BAS.T_JRCPHQ
                                UNION ALL
                                SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_HIS.T_JRCPJZ_HIS) A
                         WHERE RQ BETWEEN V_JN_BEGIN AND V_JN_END) B
                 GROUP BY B.CPFL, B.CPDM, B.APP_ID) C;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_今年以来收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    ---近一年收益率
    O_S_NOTE := '【ERROR-10001】';

    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_近一年收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R
        (CPFL, CPDM, APP_ID, SYL_1N)
        SELECT C.CPFL,
               C.CPDM,
               C.APP_ID,
               CASE
                   WHEN CPJZ_KS = 0 THEN
                    0
                   ELSE
                    (CPJZ_JS - CPJZ_KS) / CPJZ_KS
               END SYL_1N
          FROM (SELECT B.CPFL,
                       B.CPDM,
                       B.APP_ID,
                       MAX(CASE
                               WHEN RQ_ASC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_KS,
                       MAX(CASE
                               WHEN RQ_DESC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_JS
                  FROM (SELECT CPFL,
                               CPDM,
                               APP_ID,
                               ZXJZ,
                               RQ,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ) RQ_ASC,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ DESC) RQ_DESC
                          FROM (SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_BAS.T_JRCPHQ
                                UNION ALL
                                SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_HIS.T_JRCPJZ_HIS) A
                         WHERE RQ BETWEEN V_1N_BEGIN AND V_1N_END) B
                 GROUP BY B.CPFL, B.CPDM, B.APP_ID) C;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_近一年收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    ---近2年收益率
    O_S_NOTE := '【ERROR-10001】';

    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_近2年收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R
        (CPFL, CPDM, APP_ID, SYL_2N)
        SELECT C.CPFL,
               C.CPDM,
               C.APP_ID,
               CASE
                   WHEN CPJZ_KS = 0 THEN
                    0
                   ELSE
                    (CPJZ_JS - CPJZ_KS) / CPJZ_KS
               END SYL_2N
          FROM (SELECT B.CPFL,
                       B.CPDM,
                       B.APP_ID,
                       MAX(CASE
                               WHEN RQ_ASC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_KS,
                       MAX(CASE
                               WHEN RQ_DESC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_JS
                  FROM (SELECT CPFL,
                               CPDM,
                               APP_ID,
                               ZXJZ,
                               RQ,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ) RQ_ASC,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ DESC) RQ_DESC
                          FROM (SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_BAS.T_JRCPHQ
                                UNION ALL
                                SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_HIS.T_JRCPJZ_HIS) A
                         WHERE RQ BETWEEN V_2N_BEGIN AND V_2N_END) B
                 GROUP BY B.CPFL, B.CPDM, B.APP_ID) C;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_近2年收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    ---近3年收益率
    O_S_NOTE := '【ERROR-10001】';

    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_近3年收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R
        (CPFL, CPDM, APP_ID, SYL_3N)
        SELECT C.CPFL,
               C.CPDM,
               C.APP_ID,
               CASE
                   WHEN CPJZ_KS = 0 THEN
                    0
                   ELSE
                    (CPJZ_JS - CPJZ_KS) / CPJZ_KS
               END SYL_3N
          FROM (SELECT B.CPFL,
                       B.CPDM,
                       B.APP_ID,
                       MAX(CASE
                               WHEN RQ_ASC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_KS,
                       MAX(CASE
                               WHEN RQ_DESC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_JS
                  FROM (SELECT CPFL,
                               CPDM,
                               APP_ID,
                               ZXJZ,
                               RQ,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ) RQ_ASC,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ DESC) RQ_DESC
                          FROM (SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_BAS.T_JRCPHQ
                                UNION ALL
                                SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_HIS.T_JRCPJZ_HIS) A
                         WHERE RQ BETWEEN V_3N_BEGIN AND V_1N_END) B
                 GROUP BY B.CPFL, B.CPDM, B.APP_ID) C;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_近3年收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    ---累计收益率
    O_S_NOTE := '【ERROR-10001】';

    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_累计收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R
        (CPFL, CPDM, APP_ID, SYL_LJ)
        SELECT C.CPFL,
               C.CPDM,
               C.APP_ID,
               CASE
                   WHEN CPJZ_KS = 0 THEN
                    0
                   ELSE
                    (CPJZ_JS - CPJZ_KS) / CPJZ_KS
               END SYL_LJ
          FROM (SELECT B.CPFL,
                       B.CPDM,
                       B.APP_ID,
                       MAX(CASE
                               WHEN RQ_ASC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_KS,
                       MAX(CASE
                               WHEN RQ_DESC = 1 THEN
                                ZXJZ
                               ELSE
                                NULL
                           END) CPJZ_JS
                  FROM (SELECT CPFL,
                               CPDM,
                               APP_ID,
                               ZXJZ,
                               RQ,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ) RQ_ASC,
                               RANK() OVER(PARTITION BY CPFL, CPDM, APP_ID ORDER BY RQ DESC) RQ_DESC
                          FROM (SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_BAS.T_JRCPHQ
                                UNION ALL
                                SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                                  FROM DSC_HIS.T_JRCPJZ_HIS) A) B
                 GROUP BY B.CPFL, B.CPDM, B.APP_ID) C;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_累计收益率数据到表[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --数据生成到目标表
    O_S_NOTE := '【ERROR-10001】';

    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]到表[DSC_STAT.T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_CPDM_JRCP_SYL_R
        (RQ,
         CPDM,
         CPFL,
         APP_ID,
         JGDM,
         CPJZ_SR,
         CPJZ,
         LJJZ,
         SYL_7R,
         PM_7R,
         SYL_1M,
         PM_1M,
         SYL_3M,
         PM_3M,
         SYL_6M,
         PM_6M,
         SYL_JN,
         PM_JN,
         SYL_1N,
         PM_1N,
         SYL_2N,
         PM_2N,
         SYL_3N,
         PM_3N,
         SYL_LJ,
         PM_LJ)

        SELECT VN_TJRQ RQ,
               A.CPDM,
               A.CPFL,
               A.APP_ID,
               A.JRJGDM JGDM,
               NVL(B.ZXJZ, 0) CPJZ_SR,
               A.ZXJZ CPJZ,
               A.LJJZ,
               SYL_7R,
               PM_7R,
               SYL_1M,
               PM_1M,
               SYL_3M,
               PM_3M,
               SYL_6M,
               PM_6M,
               SYL_JN,
               PM_JN,
               SYL_1N,
               PM_1N,
               SYL_2N,
               PM_2N,
               SYL_3N,
               PM_3N,
               SYL_LJ,
               PM_LJ
          FROM (SELECT CPFL, CPDM, APP_ID, JRJGDM, ZXJZ, LJJZ, RQ
                  FROM DSC_BAS.T_JRCPHQ
                UNION ALL
                SELECT CPFL, CPDM, APP_ID, JRJGDM, ZXJZ, LJJZ, RQ
                  FROM DSC_HIS.T_JRCPJZ_HIS) A,
               (SELECT CPFL, CPDM, APP_ID, ZXJZ, RQ
                  FROM DSC_HIS.T_JRCPJZ_HIS
                 WHERE RQ = VN_JYR_SR) B,
               (SELECT CPDM,
                       CPFL,
                       APP_ID,
                       SYL_7R,
                       ROW_NUMBER() OVER(ORDER BY SYL_7R DESC) PM_7R,
                       SYL_1M,
                       ROW_NUMBER() OVER(ORDER BY SYL_1M DESC) PM_1M,
                       SYL_3M,
                       ROW_NUMBER() OVER(ORDER BY SYL_3M DESC) PM_3M,
                       SYL_6M,
                       ROW_NUMBER() OVER(ORDER BY SYL_6M DESC) PM_6M,
                       SYL_JN,
                       ROW_NUMBER() OVER(ORDER BY SYL_JN DESC) PM_JN,
                       SYL_1N,
                       ROW_NUMBER() OVER(ORDER BY SYL_1N DESC) PM_1N,
                       SYL_2N,
                       ROW_NUMBER() OVER(ORDER BY SYL_2N DESC) PM_2N,
                       SYL_3N,
                       ROW_NUMBER() OVER(ORDER BY SYL_3N DESC) PM_3N,
                       SYL_LJ,
                       ROW_NUMBER() OVER(ORDER BY SYL_LJ DESC) PM_LJ
                  FROM (SELECT CPDM,
                               CPFL,
                               APP_ID,
                               SUM(NVL(SYL_7R, 0)) SYL_7R,
                               SUM(NVL(SYL_1M, 0)) SYL_1M,
                               SUM(NVL(SYL_3M, 0)) SYL_3M,
                               SUM(NVL(SYL_6M, 0)) SYL_6M,
                               SUM(NVL(SYL_JN, 0)) SYL_JN,
                               SUM(NVL(SYL_1N, 0)) SYL_1N,
                               SUM(NVL(SYL_2N, 0)) SYL_2N,
                               SUM(NVL(SYL_3N, 0)) SYL_3N,
                               SUM(NVL(SYL_LJ, 0)) SYL_LJ
                          FROM DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R
                         GROUP BY CPDM, CPFL, APP_ID)) C
         WHERE A.RQ = VN_TJRQ
           AND A.CPFL = B.CPFL(+)
           AND A.CPDM = B.CPDM(+)
           AND A.APP_ID = B.APP_ID(+)
           AND A.CPFL = C.CPFL(+)
           AND A.CPDM = C.CPDM(+)
           AND A.APP_ID = C.APP_ID(+);

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计[DSC_STAT.TMP_T_STAT_CPDM_JRCP_SYL_R]到表[DSC_STAT.T_STAT_CPDM_JRCP_SYL_R]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_CPDM_JRCP_SYL_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_CPDM_JRCP_Y(O_N_CODE OUT INT,
                                                        O_S_NOTE OUT VARCHAR2,
                                                        I_N_TJRQ IN INT,
                                                        I_N_REDO IN NUMBER DEFAULT 0) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_CPDM_JRCP_Y
         功能简述：   金融产品_产品月统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做     1：重做
        返回：

         算法：

         注意事项：

         数据源：
                 DSC_STAT.T_STAT_CPDM_JRCP_R：金融产品_产品日统计


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡丹丹      2015/07/23                 创建
    */
    VS_PROC_NAME       VARCHAR2(100) := $$PLSQL_UNIT;
    VN_TJRQ            NUMBER(8) := I_N_TJRQ;
    VN_YF              NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --月份
    VN_FIRSTDAY_OF_MON NUMBER(8) := VN_YF * 100 + 1; --月初
    VN_LOGID           INT; --LOG 表记录ID
    VN_ROWCOUNT        INT; --记录数
    VN_STEP            INT; --动作步数
    VN_PROC_NO         PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER            VARCHAR2(30);

BEGIN

    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);

    O_S_NOTE := '【ERROR-10000】';
    --重做删除原数据
    IF I_N_REDO IN (0, 1, 2) THEN
        --分区删除
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_CPDM_JRCP_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        EXECUTE IMMEDIATE 'ALTER TABLE DSC_STAT.T_STAT_CPDM_JRCP_Y TRUNCATE PARTITION PY_' ||
                          VN_YF || '  UPDATE GLOBAL INDEXES';
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_CPDM_JRCP_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_CPDM_JRCP_Y]分区数据删除成功！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    O_S_NOTE := '【ERROR-10001】';

    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_产品日统计数据到表[DSC_STAT.T_STAT_CPDM_JRCP_Y]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_STAT_CPDM_JRCP_Y
        (YF,
         CPDM,
         CPFL,
         CPLX,
         APP_ID,
         YYB,
         CJBS,
         CJSL,
         CJJE,
         CJSL_RG,
         CJJE_RG,
         CJJG_RG,
         CJSL_SG,
         CJJE_SG,
         CJJG_SG,
         CJBS_SH,
         CJSL_SH,
         CJJE_SH,
         CJJG_SH,
         CJSL_QZ,
         CJJE_QZ,
         CJSL_QJ,
         CJJE_QJ,
         FHJE,
         ZRSL,
         ZRJE,
         ZCSL,
         ZCJE,
         CYRS,
         JGCYRS,
         GRCYRS,
         CYSL,
         JGCYSL,
         GRCYSL,
         CYSZ,
         JGCYSZ,
         GRCYSZ,
         CJSL_XYMR,
         CJJE_XYMR,
         CJBS_XYMR,
         CJSL_XYMC,
         CJJE_XYMC,
         CJBS_XYMC,
         CJSL_BJMR,
         CJJE_BJMR,
         CJBS_BJMR,
         CJSL_BJMC,
         CJJE_BJMC,
         CJBS_BJMC,
         CJSL_ZSSMR,
         CJJE_ZSSMR,
         CJBS_ZSSMR,
         CJSL_ZSSMC,
         CJJE_ZSSMC,
         CJBS_ZSSMC)
        SELECT VN_YF YF,
               CPDM,
               CPFL,
               CPLX,
               APP_ID,
               YYB,
               SUM(NVL(CJBS, 0)) AS CJBS,
               SUM(NVL(CJSL, 0)) AS CJSL,
               SUM(NVL(CJJE, 0)) AS CJJE,
               SUM(NVL(CJSL_RG, 0)) AS CJSL_RG,
               SUM(NVL(CJJE_RG, 0)) AS CJJE_RG,
               SUM(NVL(CJJG_RG, 0)) AS CJJG_RG,
               SUM(NVL(CJSL_SG, 0)) AS CJSL_SG,
               SUM(NVL(CJJE_SG, 0)) AS CJJE_SG,
               SUM(NVL(CJJG_SG, 0)) AS CJJG_SG,
               SUM(NVL(CJBS_SH, 0)) AS CJBS_SH,
               SUM(NVL(CJSL_SH, 0)) AS CJSL_SH,
               SUM(NVL(CJJE_SH, 0)) AS CJJE_SH,
               SUM(NVL(CJJG_SH, 0)) AS CJJG_SH,
               SUM(NVL(CJSL_QZ, 0)) AS CJSL_QZ,
               SUM(NVL(CJJE_QZ, 0)) AS CJJE_QZ,
               SUM(NVL(CJSL_QJ, 0)) AS CJSL_QJ,
               SUM(NVL(CJJE_QJ, 0)) AS CJJE_QJ,
               SUM(NVL(FHJE, 0)) AS FHJE,
               SUM(NVL(ZRSL, 0)) AS ZRSL,
               SUM(NVL(ZRJE, 0)) AS ZRJE,
               SUM(NVL(ZCSL, 0)) AS ZCSL,
               SUM(NVL(ZCJE, 0)) AS ZCJE,
               SUM(CASE
                       WHEN RQ = I_N_TJRQ THEN
                        NVL(CYRS, 0)
                       ELSE
                        0
                   END) AS CYRS,
               SUM(CASE
                       WHEN RQ = I_N_TJRQ THEN
                        NVL(JGCYRS, 0)
                       ELSE
                        0
                   END) AS JGCYRS,
               SUM(CASE
                       WHEN RQ = I_N_TJRQ THEN
                        NVL(GRCYRS, 0)
                       ELSE
                        0
                   END) AS GRCYRS,
               SUM(CASE
                       WHEN RQ = I_N_TJRQ THEN
                        NVL(CYSL, 0)
                       ELSE
                        0
                   END) AS CYSL,
               SUM(CASE
                       WHEN RQ = I_N_TJRQ THEN
                        NVL(JGCYSL, 0)
                       ELSE
                        0
                   END) AS JGCYSL,
               SUM(CASE
                       WHEN RQ = I_N_TJRQ THEN
                        NVL(GRCYSL, 0)
                       ELSE
                        0
                   END) AS GRCYSL,
               SUM(CASE
                       WHEN RQ = I_N_TJRQ THEN
                        NVL(CYSZ, 0)
                       ELSE
                        0
                   END) AS CYSZ,
               SUM(CASE
                       WHEN RQ = I_N_TJRQ THEN
                        NVL(JGCYSZ, 0)
                       ELSE
                        0
                   END) AS JGCYSZ,
               SUM(CASE
                       WHEN RQ = I_N_TJRQ THEN
                        NVL(GRCYSZ, 0)
                       ELSE
                        0
                   END) AS GRCYSZ,
               SUM(NVL(CJSL_XYMR, 0)) AS CJSL_XYMR,
               SUM(NVL(CJJE_XYMR, 0)) AS CJJE_XYMR,
               SUM(NVL(CJBS_XYMR, 0)) AS CJBS_XYMR,
               SUM(NVL(CJSL_XYMC, 0)) AS CJSL_XYMC,
               SUM(NVL(CJJE_XYMC, 0)) AS CJJE_XYMC,
               SUM(NVL(CJBS_XYMC, 0)) AS CJBS_XYMC,
               SUM(NVL(CJSL_BJMR, 0)) AS CJSL_BJMR,
               SUM(NVL(CJJE_BJMR, 0)) AS CJJE_BJMR,
               SUM(NVL(CJBS_BJMR, 0)) AS CJBS_BJMR,
               SUM(NVL(CJSL_BJMC, 0)) AS CJSL_BJMC,
               SUM(NVL(CJJE_BJMC, 0)) AS CJJE_BJMC,
               SUM(NVL(CJBS_BJMC, 0)) AS CJBS_BJMC,
               SUM(NVL(CJSL_ZSSMR, 0)) AS CJSL_ZSSMR,
               SUM(NVL(CJJE_ZSSMR, 0)) AS CJJE_ZSSMR,
               SUM(NVL(CJBS_ZSSMR, 0)) AS CJBS_ZSSMR,
               SUM(NVL(CJSL_ZSSMC, 0)) AS CJSL_ZSSMC,
               SUM(NVL(CJJE_ZSSMC, 0)) AS CJJE_ZSSMC,
               SUM(NVL(CJBS_ZSSMC, 0)) AS CJBS_ZSSMC
          FROM DSC_STAT.T_STAT_CPDM_JRCP_R
         WHERE RQ BETWEEN VN_FIRSTDAY_OF_MON AND VN_TJRQ
         GROUP BY CPDM, CPFL, CPLX, APP_ID, YYB;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_产品日统计数据到表[DSC_STAT.T_STAT_CPDM_JRCP_Y]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_CPDM_JRCP_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_GENERATE_YXKHGX(O_N_CODE OUT INT,
                                                            O_S_NOTE OUT VARCHAR2,
                                                            I_N_TJRQ IN NUMBER,
                                                            I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
    -- CREATED ON 2013/05/29 BY LUZHIFEI ,APEXSOFT
    -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_GENERATE_YXKHGX
      功能简述：   生成在特定日期有效的客户关系
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
         1)本过程主要是为大量非客户级别的统计（和关系有一定关系的）过程服务，
           这些过程反复过滤khgx，没有必要.
           本过程可以为它们做好准备，这些过程只要访问视图
           VW_KHGX_TJRQ即可。。
         2)生成的临时关系只适用于截止特定日期有效的关系，但不适合于一段时间内有效，
           所以在应用的时候需要格外小心。

      数据源：

      修改记录;
      ----------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/29 14:52:05               新增
      黄玉钰   2013/09/06                        修改：补上记录日志——开始
      吴邦杰   2015/03/04                        修改：在计算团队的一些统计过程中，使用到TMP_T_KHGX或TMP_T_KHGX_UNIQUE和DSC_BAS.T_TDCY关联之后，
                                                       再和统计表关联，效率很慢，所以直接将客户的团队关系放在此过程下计算
      陈德铸   2015/06/07                        修改：在TMP_T_KHGX_*表中增加人员归属营业部和团队归属营业部的处理机制
                                                       在TMP_T_TD_*表增加团队归属营业部的处理机制


    */
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME   VARCHAR2(100);
    --VS_zbdm      varchar2(60);

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    -----------------------------------------------------------------------------------------
    ---1.1 构建期末有效客户关系
    VN_STEP    := 1;
    VS_TABNAME := 'DSC_STAT.TMP_T_KHGX';
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '插入[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '生成有效关系',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || VS_TABNAME;

    INSERT INTO DSC_STAT.TMP_T_KHGX
        (YYB,
         RYXX_ID,
         TD_ID,
         KHH,
         GXLX,
         YWLX,
         TJRQ,
         SXRQ,
         ZXRQ,
         JZRQ,
         JZRQ2,
         SYQZ,
         ZT,
         GXSJ,
         RYXX_YYB,
         TD_YYB)
        SELECT GX.YYB,
               GX.RYXX,
               GX.TD_ID,
               GX.KHH,
               GX.GXLX,
               GX.YWLX,
               GX.TJRQ,
               GX.SXRQ,
               GX.ZXRQ,
               NVL(GX.JZRQ, 30000101) JZRQ,
               NVL(GX.JZRQ, 30000101) JZRQ2,
               GX.SYQZ,
               GX.ZT,
               SYSDATE,
               NVL(RY.ORGID, '-1') AS RYXX_YYB, --当关联为空时候，取-1值,表示未知
               NVL(TD.YYB, '-1') AS TD_YYB --当关联为空时候，取-1值,表示未知
          FROM DSC_STAT.VW_KHGX_ALL GX, DSC_BAS.T_RYXX RY, DSC_BAS.T_TDBM TD
         WHERE GX.RYXX = RY.ID(+)
           AND GX.TD_ID = TD.ID(+)
           AND GX.RYXX IS NOT NULL --过滤掉没有人员而只有团队的情况.
           AND GX.SXRQ <= VN_TJRQ
           AND (GX.JZRQ IS NULL OR GX.JZRQ >= VN_TJRQ);

    VN_ROWCOUNT := SQL%ROWCOUNT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '插入[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    -----------------------------------------------------------------------------------------
    ---1.2 构建期末团队有效客户关系
    VN_STEP    := VN_STEP + 1;
    VS_TABNAME := 'DSC_STAT.TMP_T_TD_KHGX';
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '插入[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '生成团队有效客户关系',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || VS_TABNAME;

    INSERT INTO DSC_STAT.TMP_T_TD_KHGX
        (TD_ID, GXLX, KHH, SYQZ, TJRQ, TD_YYB)
        SELECT B.TD_ID AS N1,
               A.GXLX AS N2,
               A.KHH AS KHH,
               LEAST(SUM(A.SYQZ), 1) AS SYQZ,
               VN_TJRQ,
               NVL(TD.YYB, -1) AS TD_YYB
          FROM DSC_STAT.TMP_T_KHGX A
          JOIN DSC_BAS.T_TDCY B ON B.RYXX = A.RYXX_ID
                               AND A.JZRQ > VN_TJRQ
          LEFT JOIN DSC_BAS.T_TDBM TD ON B.TD_ID = TD.ID
         WHERE B.SXRQ <= VN_TJRQ
           AND NVL(B.JZRQ, 30000101) > VN_TJRQ
         GROUP BY B.TD_ID, A.GXLX, A.KHH, NVL(TD.YYB, -1);

    VN_ROWCOUNT := SQL%ROWCOUNT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '插入[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    -----------------------------------------------------------------------
    --1.3 构建唯一有效客户关系
    VS_TABNAME := 'DSC_STAT.TMP_T_KHGX_UNIQUE';
    VN_STEP    := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '插入[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '生成有效关系',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || VS_TABNAME;

    /*
      由于目前的统计模式，其实可以不需要取最小的那个sx日期
      但这样做也没有什么问题。
    */

    INSERT INTO DSC_STAT.TMP_T_KHGX_UNIQUE
        (YYB,
         RYXX_ID,
         TD_ID,
         KHH,
         GXLX,
         YWLX,
         TJRQ,
         SXRQ,
         ZXRQ,
         JZRQ,
         JZRQ2,
         YXLB,
         SYQZ,
         KHH_DC,
         ZT,
         GXSJ,
         RYXX_YYB,
         TD_YYB)
        SELECT X.YYB,
               X.RYXX_ID,
               X.TD_ID,
               X.KHH,
               X.GXLX,
               X.YWLX,
               X.TJRQ,
               X.SXRQ,
               X.ZXRQ,
               X.JZRQ,
               X.JZRQ2,
               X.YXLB,
               X.SYQZ,
               X.KHH_DC,
               X.ZT,
               SYSDATE GXSJ,
               NVL(RY.ORGID, '-1') AS RYXX_YYB, --当关联为空时候，取-1值,表示未知
               NVL(TD.YYB, '-1') AS TD_YYB --当关联为空时候，取-1值,表示未知
          FROM DSC_STAT.TMP_T_KHGX X
          JOIN (SELECT MIN(A.ROWID) RID
                  FROM DSC_STAT.TMP_T_KHGX A
                  JOIN (SELECT RYXX_ID, KHH, MIN(SXRQ) SXRQ
                         FROM DSC_STAT.TMP_T_KHGX
                        GROUP BY RYXX_ID, KHH) B ON B.RYXX_ID = A.RYXX_ID
                                                AND B.KHH = A.KHH
                                                AND B.SXRQ = A.SXRQ
                 GROUP BY A.RYXX_ID, A.KHH) Y ON Y.RID = X.ROWID
          LEFT JOIN DSC_BAS.T_RYXX RY ON X.RYXX_ID = RY.ID
          LEFT JOIN DSC_BAS.T_TDBM TD ON X.TD_ID = TD.ID;

    VN_ROWCOUNT := SQL%ROWCOUNT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '插入[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    -----------------------------------------------------------------------------------------
    ---1.4 构建团队唯一客户关系
    VN_STEP    := VN_STEP + 1;
    VS_TABNAME := 'DSC_STAT.TMP_T_TD_KHGX_UNIQUE';
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '插入[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '生成团队有效客户关系',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || VS_TABNAME;

    INSERT INTO DSC_STAT.TMP_T_TD_KHGX_UNIQUE
        (TD_ID, KHH, SYQZ, TJRQ, TD_YYB)
        SELECT B.TD_ID,
               A.KHH,
               LEAST(SUM(A.SYQZ), 1) SYQZ,
               VN_TJRQ AS TJRQ,
               NVL(TD.YYB, -1) AS TD_YYB
          FROM DSC_STAT.TMP_T_KHGX_UNIQUE A
          JOIN DSC_BAS.T_TDCY B ON B.RYXX = A.RYXX_ID
                               AND A.JZRQ > VN_TJRQ
          LEFT JOIN DSC_BAS.T_TDBM TD ON B.TD_ID = TD.ID
         WHERE B.SXRQ <= VN_TJRQ
           AND NVL(B.JZRQ, 30000101) > VN_TJRQ
         GROUP BY B.TD_ID, A.KHH, NVL(TD.YYB, -1);

    VN_ROWCOUNT := SQL%ROWCOUNT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '插入[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_GENERATE_YXKHGX;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_GGQQ_R(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN INT,
                                                   I_N_REDO IN NUMBER DEFAULT 0) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_GGQQ_R
         功能简述：   个股期权综合状况日表
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
        返回：

         算法：


         注意事项：

         数据源：
                 DSC_BAS.T_SO_JGMXLS      ：个股期权交割明细流水
                 DSC_HIS.T_SO_JGMXLS_HIS  ：个股期权交割明细流水历史
                 DSC_BAS.T_SO_ZJYE        ：个股期权资金余额
                 DSC_HIS.T_SO_ZJYELS      ：个股期权资金余额历史
                 DSC_BAS.T_SO_ZQYE        ：个股期权证券余额(合约持仓)
                 DSC_HIS.T_SO_ZQYELS      ：个股期权证券余额(合约持仓)历史
                 DSC_BAS.T_SO_ZJMXLS      ：个股期权资金明细流水表
                 DSC_HIS.T_SO_ZJMXLS_HIS  ：个股期权资金明细流水表历史

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡丹丹      2015/01/06     2.0.0.1     创建
         胡丹丹      2015/04/30     2.0.0.2     修改：调整盈亏的算法
         胡丹丹      2015/07/14     2.0.0.3     修改：调整证券市值的算法，权力仓市值取正，义务仓取负
         刘官勤      2016/11/15     2.0.0.4     修改: 对于个股期权计算市值时的正负号进行完善处理
         胡丹丹      2016/12/21     2.0.0.5     修改: 调整净佣金的算法，直接取jyj字段
    */

    VN_JYR       NUMBER(8) := I_N_TJRQ; --交易日
    VN_HL_HKD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_USER      VARCHAR2(30);
    VN_T_DATE    NUMBER(8) := DSC_CFG.F_GET_JYR_DATE(VN_TJRQ, -1); --T-1日

BEGIN

    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);

    --重做删除原数据
    --月分区日资产无法做分区删除
    IF I_N_REDO = 1 THEN
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_GGQQ_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE DSC_STAT.T_STAT_GGQQ_R WHERE RQ = I_N_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_GGQQ_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_GGQQ_R]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_GGQQ_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_GGQQ_R';
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_GGQQ_R]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_T_STAT_GGQQ_R]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10000-1】';
    --获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;

    O_S_NOTE := '【ERROR-10001】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计交割明细指标到[DSC_STAT.TMP_T_STAT_GGQQ_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --统计交割明细指标
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_GGQQ_R
        (RQ,
         KHH,
         YYB,
         JYL,
         JYL_MRKC,
         JYL_MCKC,
         JYL_MCPC,
         JYL_MRPC,
         JYL_BDKC,
         JYL_BDPC,
         JYL_GP,
         JYL_ETF,
         YJSR,
         JYJ,
         JYBS,
         JYFY,
         CJSL_MRKC,
         CJSL_MCKC,
         CJSL_MCPC,
         CJSL_MRPC,
         CJSL_BDKC,
         CJSL_BDPC,
         CJSL)
        SELECT I_N_TJRQ AS RQ,
               KHH,
               YYB,
               SUM(CJJE) AS JYL,
               SUM(CASE
                       WHEN T.MMFX = '1' AND T.KPBZ = 'O' AND T.BDBQ = '0' THEN
                        T.CJJE
                       ELSE
                        0
                   END) JYL_MRKC,
               SUM(CASE
                       WHEN T.MMFX = '2' AND T.KPBZ = 'O' AND T.BDBQ = '0' THEN
                        T.CJJE
                       ELSE
                        0
                   END) JYL_MCKC,
               SUM(CASE
                       WHEN T.MMFX = '2' AND T.KPBZ = 'C' AND T.BDBQ = '0' THEN
                        T.CJJE
                       ELSE
                        0
                   END) JYL_MCPC,
               SUM(CASE
                       WHEN T.MMFX = '1' AND T.KPBZ = 'C' AND T.BDBQ = '0' THEN
                        T.CJJE
                       ELSE
                        0
                   END) JYL_MRPC,
               SUM(CASE
                       WHEN T.KPBZ = 'O' AND T.BDBQ = '1' THEN
                        T.CJJE
                       ELSE
                        0
                   END) JYL_BDKC,
               SUM(CASE
                       WHEN T.KPBZ = 'C' AND T.BDBQ = '1' THEN
                        T.CJJE
                       ELSE
                        0
                   END) JYL_BDPC,
               SUM(CASE
                       WHEN T.ZQLX = 'ASH' THEN
                        T.CJJE
                       ELSE
                        0
                   END) JYL_GP,
               SUM(CASE
                       WHEN T.ZQLX = 'EBS' THEN
                        T.CJJE
                       ELSE
                        0
                   END) JYL_ETF,
               SUM(S1) AS YJSR,
               SUM(JYJ) AS JYJ,
               COUNT(1) AS JYBS,
               SUM((S1 + S2 + S3 + S4 + S5 + S6)) AS JYFY,
               SUM(CASE
                       WHEN T.MMFX = '1' AND T.KPBZ = 'O' AND T.BDBQ = '0' THEN
                        T.CJSL
                       ELSE
                        0
                   END) CJSL_MRKC,
               SUM(CASE
                       WHEN T.MMFX = '2' AND T.KPBZ = 'O' AND T.BDBQ = '0' THEN
                        T.CJSL
                       ELSE
                        0
                   END) CJSL_MCKC,
               SUM(CASE
                       WHEN T.MMFX = '2' AND T.KPBZ = 'C' AND T.BDBQ = '0' THEN
                        T.CJSL
                       ELSE
                        0
                   END) CJSL_MCPC,
               SUM(CASE
                       WHEN T.MMFX = '1' AND T.KPBZ = 'C' AND T.BDBQ = '0' THEN
                        T.CJSL
                       ELSE
                        0
                   END) CJSL_MRPC,
               SUM(CASE
                       WHEN T.KPBZ = 'O' AND T.BDBQ = '1' THEN
                        T.CJSL
                       ELSE
                        0
                   END) CJSL_BDKC,
               SUM(CASE
                       WHEN T.KPBZ = 'C' AND T.BDBQ = '1' THEN
                        T.CJSL
                       ELSE
                        0
                   END) CJSL_BDPC,
               SUM(CJSL) AS CJSL
          FROM (SELECT KHH,
                       YYB,
                       ZQLX,
                       CJRQ,
                       BZ,
                       MMFX,
                       KPBZ,
                       BDBQ,
                       CJSL,
                       CJJE,
                       S1,
                       S2,
                       S3,
                       S4,
                       S5,
                       S6,
                       JYJ
                  FROM DSC_BAS.T_SO_JGMXLS
                UNION ALL
                SELECT KHH,
                       YYB,
                       ZQLX,
                       CJRQ,
                       BZ,
                       MMFX,
                       KPBZ,
                       BDBQ,
                       CJSL,
                       CJJE,
                       S1,
                       S2,
                       S3,
                       S4,
                       S5,
                       S6,
                       JYJ
                  FROM DSC_HIS.T_SO_JGMXLS_HIS) T
         WHERE T.KPBZ IN ('O', 'C')
           AND T.CJRQ = I_N_TJRQ
         GROUP BY T.CJRQ, T.KHH, T.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计交割明细指标到[DSC_STAT.TMP_T_STAT_GGQQ_R]临时表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10002】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计资金余额指标到[DSC_STAT.TMP_T_STAT_GGQQ_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    -- 计算资金余额
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_GGQQ_R
        (RQ, KHH, YYB, ZJYE)
        SELECT I_N_TJRQ AS RQ,
               KHH,
               YYB,
               SUM(CASE
                       WHEN BZ = '2' THEN
                        ZHYE * VN_HL_HKD
                       WHEN BZ = '3' THEN
                        ZHYE * VN_HL_USD
                       ELSE
                        ZHYE
                   END) AS ZJYE
          FROM (SELECT RQ, KHH, YYB, ZHYE, BZ
                  FROM DSC_BAS.T_SO_ZJYE
                UNION ALL
                SELECT RQ, KHH, YYB, ZHYE, BZ FROM DSC_HIS.T_SO_ZJYELS) A
         WHERE A.RQ = VN_TJRQ
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计资金余额指标到[DSC_STAT.TMP_T_STAT_GGQQ_R]临时表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10003】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计证券市值指标到[DSC_STAT.TMP_T_STAT_GGQQ_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    -- 计算证券市值
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_GGQQ_R
        (RQ,
         KHH,
         YYB,
         ZQSZ,
         ZQSZ_GP,
         ZQSZ_ETF,
         CCCB,
         ZYBZJ,
         SXYK,
         ZQSZ_QLC,
         ZQSZ_YWC,
         ZQSL_QLC,
         ZQSL_YWC)
        SELECT I_N_TJRQ AS RQ,
               KHH,
               YYB,
               SUM(CASE
                       WHEN CCFX = '1' THEN
                        ZXSZ
                       ELSE
                        ABS(ZXSZ) * -1
                   END) AS ZQSZ,
               SUM(CASE
                       WHEN ZQLX = 'ASH' AND CCFX = '1' THEN
                        ZXSZ
                       WHEN ZQLX = 'ASH' AND CCFX = '2' THEN
                        ABS(ZXSZ) * -1
                       ELSE
                        0
                   END) ZQSZ_GP,
               SUM(CASE
                       WHEN ZQLX = 'EBS' AND CCFX = '1' THEN
                        ZXSZ
                       WHEN ZQLX = 'EBS' AND CCFX = '2' THEN
                        ABS(ZXSZ) * -1
                       ELSE
                        0
                   END) ZQSZ_ETF,
               SUM(CASE
                       WHEN BZ = '2' THEN
                        CCCB * VN_HL_HKD
                       WHEN BZ = '3' THEN
                        CCCB * VN_HL_USD
                       ELSE
                        CCCB
                   END) AS CCCB,
               SUM(BZJ) AS ZYBZJ,
               SUM(SXYK) AS SXYK,
               SUM(CASE
                       WHEN CCFX = '1' THEN
                        ZXSZ
                       ELSE
                        0
                   END) ZQSZ_QLC,
               SUM(CASE
                       WHEN CCFX = '2' THEN
                        ZXSZ
                       ELSE
                        0
                   END) ZQSZ_YWC,
               SUM(CASE
                       WHEN CCFX = '1' THEN
                        ZQSL
                       ELSE
                        0
                   END) ZQSL_QLC,
               SUM(CASE
                       WHEN CCFX = '2' THEN
                        ZQSL
                       ELSE
                        0
                   END) ZQSL_YWC
          FROM (SELECT RQ, KHH, YYB, ZQLX, ZXSZ, CCCB, BZJ, SXYK, BZ, CCFX, ZQSL
                  FROM DSC_BAS.T_SO_ZQYE
                UNION ALL
                SELECT RQ, KHH, YYB, ZQLX, ZXSZ, CCCB, BZJ, SXYK, BZ, CCFX, ZQSL
                  FROM DSC_HIS.T_SO_ZQYELS)
         WHERE RQ = VN_TJRQ
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计证券市值指标到[DSC_STAT.TMP_T_STAT_GGQQ_R]临时表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10004】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计资金转入转出指标到[DSC_STAT.TMP_T_STAT_GGQQ_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --资金转入转出
    --业务科目为：102，101开头的
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_GGQQ_R
        (RQ, KHH, YYB, CRJE, QCJE)
        SELECT RQ,
               KHH,
               YYB,
               SUM(CASE
                       WHEN YWKM IN (SELECT C.PARAM_VALUE
                                       FROM T_PARAM_VALUE C
                                      WHERE C.PARAM_KIND = '01') THEN
                        (SRJE - FCJE) * DECODE(BZ, '2', VN_HL_HKD, '3', VN_HL_USD, 1)
                       ELSE
                        0
                   END) AS CRJE,
               SUM(CASE
                       WHEN YWKM IN (SELECT C.PARAM_VALUE
                                       FROM T_PARAM_VALUE C
                                      WHERE C.PARAM_KIND = '02') THEN
                        (FCJE - SRJE) * DECODE(BZ, '2', VN_HL_HKD, '3', VN_HL_USD, 1)
                       ELSE
                        0
                   END) AS QCJE
          FROM (SELECT RQ, KHH, YYB, YWKM, BZ, FCJE, SRJE
                  FROM DSC_BAS.T_SO_ZJMXLS
                UNION ALL
                SELECT RQ, KHH, YYB, YWKM, BZ, FCJE, SRJE FROM DSC_HIS.T_SO_ZJMXLS_HIS)
         WHERE RQ = I_N_TJRQ
           AND YWKM IN (SELECT C.PARAM_VALUE
                          FROM T_PARAM_VALUE C
                         WHERE C.PARAM_KIND IN ('01', '02'))
         GROUP BY RQ, KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计资金转入转出指标到[DSC_STAT.TMP_T_STAT_GGQQ_R]临时表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10005】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计上日资产到[DSC_STAT.TMP_T_STAT_GGQQ_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --上日资产
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_GGQQ_R
        (RQ, KHH, YYB, SRZZC)
        SELECT VN_TJRQ AS RQ, KHH, YYB, ZZC AS SRZZC
          FROM DSC_STAT.T_STAT_GGQQ_R
         WHERE RQ = VN_T_DATE;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计上日资产到[DSC_STAT.TMP_T_STAT_GGQQ_R]临时表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10006】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表[DSC_STAT.TMP_T_STAT_GGQQ_R]结果汇总统计到[DSC_STAT.T_STAT_GGQQ_R]日资产表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --表修改为不写日志
    EXECUTE IMMEDIATE 'alter table dsc_stat.t_stat_ggqq_r NOLOGGING';
    INSERT INTO DSC_STAT.T_STAT_GGQQ_R
        (RQ,
         KHH,
         YYB,
         JYL,
         JYL_MRKC,
         JYL_MCKC,
         JYL_MCPC,
         JYL_MRPC,
         JYL_BDKC,
         JYL_BDPC,
         JYL_GP,
         JYL_ETF,
         YJSR,
         JYJ,
         JYBS,
         JYFY,
         ZZC,
         ZQSZ,
         ZQSZ_GP,
         ZQSZ_ETF,
         ZJYE,
         CCCB,
         ZYBZJ,
         SXYK,
         CRJE,
         QCJE,
         ZQSZ_QLC,
         ZQSZ_YWC,
         CJSL_MRKC,
         CJSL_MCKC,
         CJSL_MCPC,
         CJSL_MRPC,
         CJSL_BDKC,
         CJSL_BDPC,
         CJSL,
         ZQSL_QLC,
         ZQSL_YWC)
        SELECT VN_JYR AS RQ,
               A.KHH,
               A.YYB,
               NVL(B.JYL, 0) AS JYL,
               NVL(B.JYL_MRKC, 0) AS JYL_MRKC,
               NVL(B.JYL_MCKC, 0) AS JYL_MCKC,
               NVL(B.JYL_MCPC, 0) AS JYL_MCPC,
               NVL(B.JYL_MRPC, 0) AS JYL_MRPC,
               NVL(B.JYL_BDKC, 0) AS JYL_BDKC,
               NVL(B.JYL_BDPC, 0) AS JYL_BDPC,
               NVL(B.JYL_GP, 0) AS JYL_GP,
               NVL(B.JYL_ETF, 0) AS JYL_ETF,
               NVL(B.YJSR, 0) AS YJSR,
               NVL(B.JYJ, 0) AS JYJ,
               NVL(B.JYBS, 0) AS JYBS,
               NVL(B.JYFY, 0) AS JYFY,
               NVL(B.ZQSZ, 0) + NVL(B.ZJYE, 0) AS ZZC,
               NVL(B.ZQSZ, 0) AS ZQSZ,
               NVL(B.ZQSZ_GP, 0) AS ZQSZ_GP,
               NVL(B.ZQSZ_ETF, 0) AS ZQSZ_ETF,
               NVL(B.ZJYE, 0) AS ZJYE,
               NVL(B.CCCB, 0) AS CCCB,
               NVL(B.ZYBZJ, 0) AS ZYBZJ,
               (NVL(B.ZQSZ, 0) + NVL(B.ZJYE, 0) - NVL(B.SRZZC, 0)) -
               (NVL(B.CRJE, 0) - NVL(B.QCJE, 0)) AS SXYK,
               NVL(B.CRJE, 0) AS CRJE,
               NVL(B.QCJE, 0) AS QCJE,
               NVL(B.ZQSZ_QLC, 0) AS ZQSZ_QLC,
               NVL(B.ZQSZ_YWC, 0) AS ZQSZ_YWC,
               NVL(B.CJSL_MRKC, 0) AS CJSL_MRKC,
               NVL(B.CJSL_MCKC, 0) AS CJSL_MCKC,
               NVL(B.CJSL_MCPC, 0) AS CJSL_MCPC,
               NVL(B.CJSL_MRPC, 0) AS CJSL_MRPC,
               NVL(B.CJSL_BDKC, 0) AS CJSL_BDKC,
               NVL(B.CJSL_BDPC, 0) AS CJSL_BDPC,
               NVL(B.CJSL, 0) AS CJSL,
               NVL(B.ZQSL_QLC, 0) AS ZQSL_QLC,
               NVL(B.ZQSL_YWC, 0) AS ZQSL_YWC
          FROM DSC_BAS.T_KHXX_GGQQ A,
               (SELECT KHH,
                       SUM(NVL(JYL, 0)) AS JYL,
                       SUM(NVL(JYL_MRKC, 0)) AS JYL_MRKC,
                       SUM(NVL(JYL_MCKC, 0)) AS JYL_MCKC,
                       SUM(NVL(JYL_MCPC, 0)) AS JYL_MCPC,
                       SUM(NVL(JYL_MRPC, 0)) AS JYL_MRPC,
                       SUM(NVL(JYL_BDKC, 0)) AS JYL_BDKC,
                       SUM(NVL(JYL_BDPC, 0)) AS JYL_BDPC,
                       SUM(NVL(JYL_GP, 0)) AS JYL_GP,
                       SUM(NVL(JYL_ETF, 0)) AS JYL_ETF,
                       SUM(NVL(YJSR, 0)) AS YJSR,
                       SUM(NVL(JYJ, 0)) AS JYJ,
                       SUM(NVL(JYBS, 0)) AS JYBS,
                       SUM(NVL(JYFY, 0)) AS JYFY,
                       SUM(NVL(ZZC, 0)) AS ZZC,
                       SUM(NVL(ZQSZ, 0)) AS ZQSZ,
                       SUM(NVL(ZQSZ_GP, 0)) AS ZQSZ_GP,
                       SUM(NVL(ZQSZ_ETF, 0)) AS ZQSZ_ETF,
                       SUM(NVL(ZJYE, 0)) AS ZJYE,
                       SUM(NVL(CCCB, 0)) AS CCCB,
                       SUM(NVL(ZYBZJ, 0)) AS ZYBZJ,
                       --SUM(NVL(SXYK, 0)) AS SXYK,
                       SUM(NVL(CRJE, 0)) AS CRJE,
                       SUM(NVL(QCJE, 0)) AS QCJE,
                       SUM(NVL(ZQSZ_QLC, 0)) AS ZQSZ_QLC,
                       SUM(NVL(ZQSZ_YWC, 0)) AS ZQSZ_YWC,
                       SUM(NVL(SRZZC, 0)) AS SRZZC,
                       SUM(NVL(CJSL_MRKC, 0)) AS CJSL_MRKC,
                       SUM(NVL(CJSL_MCKC, 0)) AS CJSL_MCKC,
                       SUM(NVL(CJSL_MCPC, 0)) AS CJSL_MCPC,
                       SUM(NVL(CJSL_MRPC, 0)) AS CJSL_MRPC,
                       SUM(NVL(CJSL_BDKC, 0)) AS CJSL_BDKC,
                       SUM(NVL(CJSL_BDPC, 0)) AS CJSL_BDPC,
                       SUM(NVL(CJSL, 0)) AS CJSL,
                       SUM(NVL(ZQSL_QLC, 0)) AS ZQSL_QLC,
                       SUM(NVL(ZQSL_YWC, 0)) AS ZQSL_YWC
                  FROM TMP_T_STAT_GGQQ_R
                 GROUP BY KHH) B
         WHERE A.KHH = B.KHH(+)
           AND A.KHRQ <= VN_JYR
           AND (A.KHZT != 3 OR (A.KHZT = 3 AND A.XHRQ >= VN_JYR)); --TJRQ在开户日期和消户日期之间（非消户日期为30000000）
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表[DSC_STAT.TMP_T_STAT_GGQQ_R]结果汇总统计到[DSC_STAT.T_STAT_GGQQ_R]日资产表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_GGQQ_R';

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_GGQQ_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_GGQQ_Y(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN INT,
                                                   I_N_REDO IN NUMBER DEFAULT 0) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_GGQQ_Y
         功能简述：   个股期权综合状况月表
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
        返回：

         算法：
                  1、涉及到外币的已乘汇率
                  2、日均资产=日资产之和/月有效交易日开户天数

         注意事项：

         数据源：
                 DSC_STAT.T_STAT_GGQQ_R   ：个股期权综合状况日表
                 DSC_CFG.T_LCCS           ：利差参数
                 DSC_CFG.T_HLCS           ：汇率参数

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡丹丹      2015/01/06     2.0.0.1     创建
    */
    VS_PROC_NAME     VARCHAR2(100) := $$PLSQL_UNIT;
    VN_TJRQ          NUMBER(8) := I_N_TJRQ;
    VN_YF            NUMBER(6) := PUB_SYS.F_GET_DATE(I_N_TJRQ, 2); --月份
    VN_FIRST_DAY     NUMBER(8); --期初交易日
    VN_LAST_DAY      NUMBER(8); --期末交易日
    VN_LAST_MONTHDAY NUMBER(8); --月末日期
    --VN_LAST_MONTHJYR NUMBER(8); --月末交易日
    VN_LLC      DSC_CFG.T_LCCS.LLC%TYPE; --利率差
    VN_HL_HKD   DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD   DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_LOGID    INT; --LOG 表记录ID
    VN_ROWCOUNT INT; --记录数
    VN_STEP     INT; --动作步数
    VN_PROC_NO  PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER     VARCHAR2(30);
    VN_QC_RQ    NUMBER(8) := PUB_SYS.F_GET_DATE(VN_TJRQ, 7); --上月月末自然日（期初）
    VN_QC_YF    NUMBER(6) := PUB_SYS.F_GET_DATE(VN_TJRQ, 3); --上月月份（期初）

BEGIN

    --变量初始化

    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);

    O_S_NOTE := '【ERROR-10001】';
    --重做删除原数据
    IF I_N_REDO IN (0, 1, 2) THEN
        --分区删除
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_GGQQ_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        EXECUTE IMMEDIATE 'ALTER TABLE DSC_STAT.T_STAT_GGQQ_Y TRUNCATE PARTITION PY_' ||
                          VN_YF || '  UPDATE GLOBAL INDEXES';
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_GGQQ_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_GGQQ_Y]分区数据删除成功！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;
    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_GGQQ_Y]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_GGQQ_Y';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_GGQQ_Y_RJ';
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_GGQQ_Y]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_T_STAT_GGQQ_Y]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10001-2】';
    --期初日期（上月月末交易日）
    BEGIN
        SELECT MAX(JYR) INTO VN_QC_RQ FROM DSC_CFG.T_XTJYR WHERE NY = VN_QC_YF;
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '查找不到：' || VN_QC_YF || '对应的交易日！';
    END;
    --月初
    VN_FIRST_DAY := PUB_SYS.F_GET_DATE(VN_TJRQ, 0);
    --期末日期
    VN_LAST_DAY := I_N_TJRQ;
    --月末日期
    --SELECT MAX(ZRR) INTO VN_LAST_MONTHDAY FROM DSC_CFG.T_XTJYR T WHERE T.NY = VN_YF;
    SELECT MAX(ZRR)
      INTO VN_LAST_MONTHDAY
      FROM DSC_CFG.T_XTJYR T
     WHERE T.NY = VN_YF
       AND T.JYR = VN_LAST_DAY;
    --月末交易日
    --SELECT MAX(JYR) INTO VN_LAST_MONTHJYR FROM DSC_CFG.T_XTJYR T WHERE T.NY = VN_YF;
    --利率差
    BEGIN
        SELECT A.LLC
          INTO VN_LLC
          FROM DSC_CFG.T_LCCS A
         WHERE I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ
           AND BZ = '1';
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '没有维护利率差！';
    END;

    --获取期初汇率
    --港币
    BEGIN
        SELECT A.GSBL
          INTO VN_HL_HKD
          FROM DSC_CFG.T_HLCS A
         WHERE A.BZ = '2'
           AND VN_QC_RQ BETWEEN A.KSRQ AND A.JSRQ;
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '没有维护“港币”汇率！';
    END;
    BEGIN
        --美元
        SELECT A.GSBL
          INTO VN_HL_USD
          FROM DSC_CFG.T_HLCS A
         WHERE A.BZ = '3'
           AND VN_QC_RQ BETWEEN A.KSRQ AND A.JSRQ;
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '没有维护“美元”汇率！';
    END;

    O_S_NOTE := '【ERROR-10002】';
    --记录日志明细——开始
    --月初到统计日总和
    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计本月总资产的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_GGQQ_Y_RJ]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_GGQQ_Y_RJ
        (YF,
         KHH,
         YYB,
         JYL,
         JYL_MRKC,
         JYL_MCKC,
         JYL_MCPC,
         JYL_MRPC,
         JYL_BDKC,
         JYL_BDPC,
         JYL_GP,
         JYL_ETF,
         YJSR,
         JYJ,
         JYBS,
         JYFY,
         RJZZC,
         RJZQSZ,
         RJZJYE,
         CRJE,
         QCJE,
         CJSL_MRKC,
         CJSL_MCKC,
         CJSL_MCPC,
         CJSL_MRPC,
         CJSL_BDKC,
         CJSL_BDPC,
         CJSL)
        SELECT VN_YF,
               KHH,
               YYB,
               SUM(JYL) AS JYL,
               SUM(JYL_MRKC) AS JYL_MRKC,
               SUM(JYL_MCKC) AS JYL_MCKC,
               SUM(JYL_MCPC) AS JYL_MCPC,
               SUM(JYL_MRPC) AS JYL_MRPC,
               SUM(JYL_BDKC) AS JYL_BDKC,
               SUM(JYL_BDPC) AS JYL_BDPC,
               SUM(JYL_GP) AS JYL_GP,
               SUM(JYL_ETF) AS JYL_ETF,
               SUM(YJSR) AS YJSR,
               SUM(JYJ) AS JYJ,
               SUM(JYBS) AS JYBS,
               SUM(JYFY) AS JYFY,
               SUM(ZZC) AS RJZZC,
               SUM(ZQSZ) AS RJZQSZ,
               SUM(ZJYE) AS RJZJYE,
               SUM(CRJE) AS CRJE,
               SUM(QCJE) AS QCJE,
               SUM(CJSL_MRKC) AS CJSL_MRKC,
               SUM(CJSL_MCKC) AS CJSL_MCKC,
               SUM(CJSL_MCPC) AS CJSL_MCPC,
               SUM(CJSL_MRPC) AS CJSL_MRPC,
               SUM(CJSL_BDKC) AS CJSL_BDKC,
               SUM(CJSL_BDPC) AS CJSL_BDPC,
               SUM(CJSL) AS CJSL
          FROM (SELECT KHH,
                       YYB,
                       SUM(JYL) AS JYL,
                       SUM(JYL_MRKC) AS JYL_MRKC,
                       SUM(JYL_MCKC) AS JYL_MCKC,
                       SUM(JYL_MCPC) AS JYL_MCPC,
                       SUM(JYL_MRPC) AS JYL_MRPC,
                       SUM(JYL_BDKC) AS JYL_BDKC,
                       SUM(JYL_BDPC) AS JYL_BDPC,
                       SUM(JYL_GP) AS JYL_GP,
                       SUM(JYL_ETF) AS JYL_ETF,
                       SUM(YJSR) AS YJSR,
                       SUM(JYJ) AS JYJ,
                       SUM(JYBS) AS JYBS,
                       SUM(JYFY) AS JYFY,
                       SUM(ZZC) AS ZZC,
                       SUM(ZQSZ) AS ZQSZ,
                       SUM(ZJYE) AS ZJYE,
                       SUM(CRJE) AS CRJE,
                       SUM(QCJE) AS QCJE,
                       SUM(CJSL_MRKC) AS CJSL_MRKC,
                       SUM(CJSL_MCKC) AS CJSL_MCKC,
                       SUM(CJSL_MCPC) AS CJSL_MCPC,
                       SUM(CJSL_MRPC) AS CJSL_MRPC,
                       SUM(CJSL_BDKC) AS CJSL_BDKC,
                       SUM(CJSL_BDPC) AS CJSL_BDPC,
                       SUM(CJSL) AS CJSL
                  FROM DSC_STAT.T_STAT_GGQQ_R A
                 WHERE RQ BETWEEN VN_FIRST_DAY AND VN_LAST_DAY
                 GROUP BY A.KHH, A.YYB
                UNION ALL
                --取非交易日的资产，即非交易日的上个交易日资产
                SELECT A.KHH,
                       A.YYB,
                       0 AS JYL,
                       0 AS JYL_MRKC,
                       0 AS JYL_MCKC,
                       0 AS JYL_MCPC,
                       0 AS JYL_MRPC,
                       0 AS JYL_BDKC,
                       0 AS JYL_BDPC,
                       0 AS JYL_GP,
                       0 AS JYL_ETF,
                       0 AS YJSR,
                       0 AS JYJ,
                       0 AS JYBS,
                       0 AS JYFY,
                       SUM(ZZC) AS ZZC,
                       SUM(ZQSZ) AS ZQSZ,
                       SUM(ZJYE) AS ZJYE,
                       0 AS CRJE,
                       0 AS QCJE,
                       0 AS CJSL_MRKC,
                       0 AS CJSL_MCKC,
                       0 AS CJSL_MCPC,
                       0 AS CJSL_MRPC,
                       0 AS CJSL_BDKC,
                       0 AS CJSL_BDPC,
                       0 AS CJSL
                  FROM DSC_STAT.T_STAT_GGQQ_R A
                  JOIN (SELECT T1.KHH, T2.ZRR, T2.JYR
                          FROM DSC_BAS.T_KHXX_GGQQ T1
                         INNER JOIN DSC_CFG.T_XTJYR T2 ON T2.ZRR BETWEEN T1.KHRQ AND
                                                          T1.XHRQ
                         WHERE T2.ZRR BETWEEN VN_FIRST_DAY AND VN_LAST_MONTHDAY
                           AND T2.ZRR > T2.JYR) T ON T.KHH = A.KHH
                                                 AND T.JYR = A.RQ
                 WHERE A.RQ BETWEEN VN_QC_RQ AND VN_LAST_DAY
                 GROUP BY A.KHH, A.YYB)
         GROUP BY KHH, YYB;
    COMMIT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计本月总资产的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_GGQQ_Y_RJ]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '【ERROR-10003】';
    --记录日志明细——开始
    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计日均资产的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_GGQQ_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --日均
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_GGQQ_Y
        (YF,
         KHH,
         YYB,
         JYL,
         JYL_MRKC,
         JYL_MCKC,
         JYL_MCPC,
         JYL_MRPC,
         JYL_BDKC,
         JYL_BDPC,
         JYL_GP,
         JYL_ETF,
         YJSR,
         JYJ,
         JYBS,
         JYFY,
         RJZZC,
         RJZQSZ,
         RJZJYE,
         CRJE,
         QCJE,
         BYZRTS,
         BYJYRTS,
         CJSL_MRKC,
         CJSL_MCKC,
         CJSL_MCPC,
         CJSL_MRPC,
         CJSL_BDKC,
         CJSL_BDPC,
         CJSL)
        SELECT VN_YF,
               A.KHH,
               A.YYB,
               A.JYL,
               A.JYL_MRKC,
               A.JYL_MCKC,
               A.JYL_MCPC,
               A.JYL_MRPC,
               A.JYL_BDKC,
               A.JYL_BDPC,
               A.JYL_GP,
               A.JYL_ETF,
               A.YJSR,
               A.JYJ,
               A.JYBS,
               A.JYFY,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZZC / B.ZRRTS
               END AS RJZZC,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ / B.ZRRTS
               END AS RJZQSZ,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZJYE / B.ZRRTS
               END AS RJZJYE,
               A.CRJE,
               A.QCJE,
               B.ZRRTS AS BYZRTS,
               B.TS AS BYJYRTS,
               A.CJSL_MRKC,
               A.CJSL_MCKC,
               A.CJSL_MCPC,
               A.CJSL_MRPC,
               A.CJSL_BDKC,
               A.CJSL_BDPC,
               A.CJSL
          FROM DSC_STAT.TMP_T_STAT_GGQQ_Y_RJ A,
               (SELECT KHH,
                       (SELECT COUNT(DISTINCT ZRR)
                          FROM DSC_CFG.T_XTJYR
                         WHERE ZRR BETWEEN VN_FIRST_DAY AND VN_LAST_MONTHDAY
                           AND ZRR BETWEEN C.KHRQ AND C.XHRQ) AS ZRRTS,
                       (SELECT COUNT(DISTINCT JYR)
                          FROM DSC_CFG.T_XTJYR
                         WHERE JYR BETWEEN VN_FIRST_DAY AND VN_TJRQ
                           AND JYR BETWEEN C.KHRQ AND C.XHRQ) AS TS --本月在线交易日天数
                  FROM DSC_BAS.T_KHXX_GGQQ C) B
         WHERE A.KHH = B.KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计日均资产的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_GGQQ_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10004】';
    VN_STEP  := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计期初资产的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_GGQQ_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --期未
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_GGQQ_Y
        (YF, KHH, YYB, QCZZC)
        SELECT VN_YF AS YF, KHH, YYB, ZZC AS QCZZC
          FROM DSC_STAT.T_STAT_GGQQ_R A
         WHERE RQ = VN_QC_RQ
           AND NOT EXISTS (SELECT 1
                  FROM DSC_BAS.T_KHXX_GGQQ B
                 WHERE A.KHH = B.KHH
                   AND B.KHZT = 3
                   AND B.XHRQ = VN_QC_RQ);
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计期初资产的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_GGQQ_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10005】';
    VN_STEP  := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计期末资产的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_GGQQ_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --期未
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_GGQQ_Y
        (YF,
         KHH,
         YYB,
         QMZZC,
         QMZQSZ,
         QMZQSZ_GP,
         QMZQSZ_ETF,
         QMZJYE,
         CCCB,
         ZYBZJ,
         --SXYK,
         QMZQSZ_QLC,
         QMZQSZ_YWC,
         QMZQSL_QLC,
         QMZQSL_YWC)
        SELECT VN_YF AS YF,
               KHH,
               YYB,
               ZZC AS QMZZC,
               ZQSZ AS QMZQSZ,
               ZQSZ_GP AS QMZQSZ_GP,
               ZQSZ_ETF AS QMZQSZ_ETF,
               ZJYE AS QMZJYE,
               CCCB,
               ZYBZJ,
               --SXYK,
               ZQSZ_QLC AS QMZQSZ_QLC,
               ZQSZ_YWC AS QMZQSZ_YWC,
               ZQSL_QLC AS QMZQSL_QLC,
               ZQSL_YWC AS QMZQSL_YWC
          FROM DSC_STAT.T_STAT_GGQQ_R
         WHERE RQ = VN_LAST_DAY;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计期末资产的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_GGQQ_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10006】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_GGQQ_Y]进行汇总统计，插入目标表[DSC_STAT.T_STAT_GGQQ_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    EXECUTE IMMEDIATE 'ALTER TABLE DSC_STAT.T_STAT_GGQQ_Y NOLOGGING';
    --写入结果表
    INSERT /*+ APPEND*/
    INTO DSC_STAT.T_STAT_GGQQ_Y
        (YF,
         KHH,
         YYB,
         JYL,
         JYL_MRKC,
         JYL_MCKC,
         JYL_MCPC,
         JYL_MRPC,
         JYL_BDKC,
         JYL_BDPC,
         JYL_GP,
         JYL_ETF,
         YJSR,
         JYJ,
         JYBS,
         JYFY,
         QCZZC,
         QMZZC,
         QMZQSZ,
         QMZQSZ_GP,
         QMZQSZ_ETF,
         QMZJYE,
         RJZZC,
         RJZQSZ,
         RJZJYE,
         CCCB,
         ZYBZJ,
         SXYK,
         CRJE,
         QCJE,
         QMZQSZ_QLC,
         QMZQSZ_YWC,
         BYZRTS,
         BYJYRTS,
         CJSL_MRKC,
         CJSL_MCKC,
         CJSL_MCPC,
         CJSL_MRPC,
         CJSL_BDKC,
         CJSL_BDPC,
         CJSL,
         QMZQSL_QLC,
         QMZQSL_YWC)
        SELECT VN_YF AS YF,
               B.KHH,
               B.YYB,
               A.JYL,
               A.JYL_MRKC,
               A.JYL_MCKC,
               A.JYL_MCPC,
               A.JYL_MRPC,
               A.JYL_BDKC,
               A.JYL_BDPC,
               A.JYL_GP,
               A.JYL_ETF,
               A.YJSR,
               A.JYJ,
               A.JYBS,
               A.JYFY,
               A.QCZZC,
               A.QMZZC,
               A.QMZQSZ,
               A.QMZQSZ_GP,
               A.QMZQSZ_ETF,
               A.QMZJYE,
               A.RJZZC,
               A.RJZQSZ,
               A.RJZJYE,
               A.CCCB,
               A.ZYBZJ,
               A.SXYK,
               A.CRJE,
               A.QCJE,
               A.QMZQSZ_QLC,
               A.QMZQSZ_YWC,
               A.BYZRTS,
               A.BYJYRTS,
               A.CJSL_MRKC,
               A.CJSL_MCKC,
               A.CJSL_MCPC,
               A.CJSL_MRPC,
               A.CJSL_BDKC,
               A.CJSL_BDPC,
               A.CJSL,
               A.QMZQSL_QLC,
               A.QMZQSL_YWC
          FROM (SELECT KHH,
                       SUM(JYL) AS JYL,
                       SUM(JYL_MRKC) AS JYL_MRKC,
                       SUM(JYL_MCKC) AS JYL_MCKC,
                       SUM(JYL_MCPC) AS JYL_MCPC,
                       SUM(JYL_MRPC) AS JYL_MRPC,
                       SUM(JYL_BDKC) AS JYL_BDKC,
                       SUM(JYL_BDPC) AS JYL_BDPC,
                       SUM(JYL_GP) AS JYL_GP,
                       SUM(JYL_ETF) AS JYL_ETF,
                       SUM(YJSR) AS YJSR,
                       SUM(JYJ) AS JYJ,
                       SUM(JYBS) AS JYBS,
                       SUM(JYFY) AS JYFY,
                       SUM(QCZZC) AS QCZZC,
                       SUM(QMZZC) AS QMZZC,
                       SUM(QMZQSZ) AS QMZQSZ,
                       SUM(QMZQSZ_GP) AS QMZQSZ_GP,
                       SUM(QMZQSZ_ETF) AS QMZQSZ_ETF,
                       SUM(QMZJYE) AS QMZJYE,
                       SUM(RJZZC) AS RJZZC,
                       SUM(RJZQSZ) AS RJZQSZ,
                       SUM(RJZJYE) AS RJZJYE,
                       SUM(CCCB) AS CCCB,
                       SUM(ZYBZJ) AS ZYBZJ,
                       SUM(NVL(QMZZC, 0) - NVL(QCZZC, 0) - (NVL(CRJE, 0) - NVL(QCJE, 0))) AS SXYK,
                       SUM(CRJE) AS CRJE,
                       SUM(QCJE) AS QCJE,
                       SUM(QMZQSZ_QLC) AS QMZQSZ_QLC,
                       SUM(QMZQSZ_YWC) AS QMZQSZ_YWC,
                       MAX(NVL(BYZRTS, 0)) AS BYZRTS,
                       MAX(NVL(BYJYRTS, 0)) AS BYJYRTS,
                       SUM(CJSL_MRKC) AS CJSL_MRKC,
                       SUM(CJSL_MCKC) AS CJSL_MCKC,
                       SUM(CJSL_MCPC) AS CJSL_MCPC,
                       SUM(CJSL_MRPC) AS CJSL_MRPC,
                       SUM(CJSL_BDKC) AS CJSL_BDKC,
                       SUM(CJSL_BDPC) AS CJSL_BDPC,
                       SUM(CJSL) AS CJSL,
                       SUM(QMZQSL_QLC) AS QMZQSL_QLC,
                       SUM(QMZQSL_YWC) AS QMZQSL_YWC
                  FROM TMP_T_STAT_GGQQ_Y
                 GROUP BY KHH) A
         INNER JOIN DSC_BAS.T_KHXX_GGQQ B ON A.KHH = B.KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_GGQQ_Y]进行汇总统计，插入目标表[DSC_STAT.T_STAT_GGQQ_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_GGQQ_Y';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_GGQQ_Y_RJ';

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_GGQQ_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_GPZYHG_R(O_N_CODE OUT INT,
                                                     O_S_NOTE OUT VARCHAR2,
                                                     I_N_TJRQ IN INT,
                                                     I_N_REDO IN NUMBER DEFAULT 0) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_GPZYHG_R
         功能简述：   股票质押回购客户统计日表算法
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
        返回：

         算法：


         注意事项：1、涉及到外币已经换算成人民币

         数据源：
                 DSC_BAS.T_JGMXLS           ：交割明细流水当前表
                 DSC_HIS.T_JGMXLS_HIS       ：交割明细流水历史表
                 DSC_BAS.T_GPZY_DHGHY       ：股票质押回购待购回合约表
                 DSC_BAS.T_GPZY_JYED        ：股票质押回购交易额度

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         黄玉钰      2013/09/25                 创建
         胡丹丹      2016/12/02                 修改：增加小微贷相关字段赋值
    */

    VN_HL_HKD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_USER      VARCHAR2(30);

BEGIN

    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';

    --获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);

    --重做删除原数据
    IF I_N_REDO = 1 THEN
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_GPZYHG_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE DSC_STAT.T_STAT_GPZYHG_R WHERE RQ = I_N_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_GPZYHG_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_GPZYHG_R]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_GPZYHG_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_GPZYHG_R';
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_GPZYHG_R]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_T_STAT_GPZYHG_R]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计交易量，佣金指标到[DSC_STAT.TMP_T_STAT_GPZYHG_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --交易量，佣金指标值
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_GPZYHG_R
        (RQ, KHH, YYB, JYL_CS, JYL_HG, YJSR)
        SELECT T.CJRQ RQ,
               T.KHH,
               T.YYB,
               SUM(CASE
                       WHEN T.JYLB IN ('53', '54') THEN --股票回购(初始交易)
                        DECODE(T.BZ, 1, T.CJJE, 2, T.CJJE * VN_HL_HKD, 3, T.CJJE * VN_HL_USD)
                       ELSE
                        0
                   END) JYL_CS,
               SUM(CASE
                       WHEN T.JYLB = '84' THEN --股票购回(购回交易)
                        DECODE(T.BZ, 1, T.CJJE, 2, T.CJJE * VN_HL_HKD, 3, T.CJJE * VN_HL_USD)
                       ELSE
                        0
                   END) JYL_HG,
               SUM(CASE
                       WHEN T.JYLB IN ('53', '54') THEN --佣金收入（指质押费用）
                        DECODE(T.BZ, 1, T.S1, 2, T.S1 * VN_HL_HKD, 3, T.S1 * VN_HL_USD)
                       ELSE
                        0
                   END) YJSR
          FROM (SELECT *
                  FROM DSC_BAS.T_JGMXLS
                UNION ALL
                SELECT * FROM DSC_HIS.T_JGMXLS_HIS) T
         WHERE T.CJRQ = I_N_TJRQ
           AND T.JYLB IN ('53', '54', '84')
         GROUP BY T.CJRQ, T.KHH, T.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计交易量，佣金指标到[DSC_STAT.TMP_T_STAT_GPZYHG_R]临时表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计股票质押回购金额，抵押市值指标到[DSC_STAT.TMP_T_STAT_GPZYHG_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --股票质押回购金额，抵押市值指标值
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_GPZYHG_R
        (RQ,
         KHH,
         YYB,
         DYSZ,
         LXSR,
         DHGZQSZ,
         DHGJE,
         DHGYJLXSR,
         XZDHGLX,
         DYSZ_WD,
         LXSR_WD,
         DHGZQSZ_WD,
         DHGJE_WD,
         DHGYJLXSR_WD,
         XZDHGLX_WD)
        SELECT I_N_TJRQ RQ,
               A.KHH,
               A.YYB,
               SUM(A.DYSZ) DYSZ,
               SUM(CASE
                       WHEN A.JSBZ = 1 AND I_N_TJRQ = A.JSRQ THEN
                        A.JSJE - A.CJJE
                       ELSE
                        0
                   END) LXSR,
               SUM(CASE
                       WHEN A.JSBZ = 0 OR (I_N_TJRQ >= A.CJRQ AND I_N_TJRQ < A.JSRQ) THEN
                        A.DYSZ
                       ELSE
                        0
                   END) DGHZQSZ,
               SUM(CASE
                       WHEN A.JSBZ = 0 OR (I_N_TJRQ >= A.CJRQ AND I_N_TJRQ < A.JSRQ) THEN
                        A.GHJE
                       ELSE
                        0
                   END) DGHJE,
               SUM(CASE
                       WHEN A.JSBZ = 0 OR (I_N_TJRQ >= A.CJRQ AND I_N_TJRQ < A.JSRQ) THEN
                        A.GHJE - A.CJJE
                       ELSE
                        0
                   END) DGHYJLXSR,
               SUM(CASE
                       WHEN A.CJRQ = I_N_TJRQ THEN
                        A.GHJE - A.CJJE
                       ELSE
                        0
                   END) XZDGHLX,
               SUM(CASE
                       WHEN A.SFWD = 1 THEN
                        DYSZ
                       ELSE
                        0
                   END) DYSZ_WD,
               SUM(CASE
                       WHEN A.JSBZ = 1 AND I_N_TJRQ = A.JSRQ AND A.SFWD = 1 THEN
                        A.JSJE - A.CJJE
                       ELSE
                        0
                   END) LXSR_WD,
               SUM(CASE
                       WHEN (A.JSBZ = 0 OR (I_N_TJRQ >= A.CJRQ AND I_N_TJRQ < A.JSRQ)) AND
                            A.SFWD = 1 THEN
                        A.DYSZ
                       ELSE
                        0
                   END) DHGZQSZ_WD,
               SUM(CASE
                       WHEN (A.JSBZ = 0 OR (I_N_TJRQ >= A.CJRQ AND I_N_TJRQ < A.JSRQ)) AND
                            A.SFWD = 1 THEN
                        A.GHJE
                       ELSE
                        0
                   END) DHGJE_WD,
               SUM(CASE
                       WHEN (A.JSBZ = 0 OR (I_N_TJRQ >= A.CJRQ AND I_N_TJRQ < A.JSRQ)) AND
                            A.SFWD = 1 THEN
                        A.GHJE - A.CJJE
                       ELSE
                        0
                   END) DHGYJLXSR_WD,
               SUM(CASE
                       WHEN A.CJRQ = I_N_TJRQ AND A.SFWD = 1 THEN
                        A.GHJE - A.CJJE
                       ELSE
                        0
                   END) XZDHGLX_WD
          FROM DSC_BAS.T_GPZY_DHGHY A
         WHERE A.CJRQ <= I_N_TJRQ
         GROUP BY A.CJRQ, A.KHH, A.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计股票质押回购金额，抵押市值指标到[DSC_STAT.TMP_T_STAT_GPZYHG_R]临时表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计授权额度，使用额度指标到[DSC_STAT.TMP_T_STAT_GPZYHG_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --授权额度，使用额度
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_GPZYHG_R
        (RQ, KHH, YYB, SQED, SYED)
        SELECT I_N_TJRQ AS RQ, A.KHH, A.YYB, SUM(A.SQED) SQED, SUM(A.SYED) SYED
          FROM DSC_BAS.T_GPZY_JYED A
         GROUP BY A.DJRQ, A.KHH, A.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计授权额度，使用额度指标到[DSC_STAT.TMP_T_STAT_GPZYHG_R]临时表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表[DSC_STAT.TMP_T_STAT_GPZYHG_R]结果汇总统计到[DSC_STAT.T_STAT_GPZYHG_R]股票质押回购日统计表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --将临时表汇总到目标表
    INSERT INTO DSC_STAT.T_STAT_GPZYHG_R
        (RQ,
         KHH,
         YYB,
         DYSZ,
         JYL_CS,
         JYL_HG,
         YJSR,
         LXSR,
         DHGZQSZ,
         DHGJE,
         DHGYJLXSR,
         SQED,
         SYED,
         XZDHGLX,
         DYSZ_WD,
         LXSR_WD,
         DHGZQSZ_WD,
         DHGJE_WD,
         DHGYJLXSR_WD,
         XZDHGLX_WD)
        SELECT RQ,
               KHH,
               YYB,
               NVL(SUM(DYSZ), 0) AS DYSZ,
               NVL(SUM(JYL_CS), 0) AS JYL_CS,
               NVL(SUM(JYL_HG), 0) AS JYL_HG,
               NVL(SUM(YJSR), 0) AS YJSR,
               NVL(SUM(LXSR), 0) AS LXSR,
               NVL(SUM(DHGZQSZ), 0) AS DHGZQSZ,
               NVL(SUM(DHGJE), 0) AS DHGJE,
               NVL(SUM(DHGYJLXSR), 0) AS DHGYJLXSR,
               NVL(SUM(SQED), 0) AS SQED,
               NVL(SUM(SYED), 0) AS SYED,
               NVL(SUM(XZDHGLX), 0) AS XZDHGLX,
               NVL(SUM(DYSZ_WD), 0) AS DYSZ_WD,
               NVL(SUM(LXSR_WD), 0) AS LXSR_WD,
               NVL(SUM(DHGZQSZ_WD), 0) AS DHGZQSZ_WD,
               NVL(SUM(DHGJE_WD), 0) AS DHGJE_WD,
               NVL(SUM(DHGYJLXSR_WD), 0) AS DHGYJLXSR_WD,
               NVL(SUM(XZDHGLX_WD), 0) AS XZDHGLX_WD
          FROM DSC_STAT.TMP_T_STAT_GPZYHG_R A
         GROUP BY RQ, KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表[DSC_STAT.TMP_T_STAT_GPZYHG_R]结果汇总统计到[DSC_STAT.T_STAT_GPZYHG_R]股票质押回购日统计表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_GPZYHG_R';

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_GPZYHG_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_GPZYHG_Y(O_N_CODE OUT INT,
                                                     O_S_NOTE OUT VARCHAR2,
                                                     I_N_TJRQ IN INT,
                                                     I_N_REDO IN NUMBER DEFAULT 0) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   股票质押回购客户统计月表算法
         功能简述：   股票质押回购客户统计月表算法
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
        返回：

         算法：
                  1、日均抵押市值=在线自然日市值总和/在线自然日综合

         注意事项：

         数据源：
                 DSC_STAT.T_STAT_GPZYHG_R     ：股票质押回购客户日统计表
                 DSC_CFG.T_HLCS             ：汇率参数

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         黄玉钰      2013/09/25                 创建
         黄玉钰      2014/06/11                 修改：按客户号汇总之后，关联客户信息表获取营业部，确保一个月一个客户仅有一条记录
         胡丹丹      2016/12/02                 修改：增加小微贷相关字段赋值
         黄宏峰      2017/03/07                 修改：修改ZRRTS算法
    */
    VS_PROC_NAME     VARCHAR2(100) := $$PLSQL_UNIT;
    VN_TJRQ          NUMBER(8) := I_N_TJRQ;
    VN_YF            NUMBER(6) := PUB_SYS.F_GET_DATE(I_N_TJRQ, 2); --月份
    VN_FIRST_DAY     NUMBER(8); --期初交易日
    VN_LAST_DAY      NUMBER(8); --期末交易日
    VN_LAST_MONTHDAY NUMBER(8); --月末日期
    --VN_LAST_MONTHJYR NUMBER(8); --月末交易日
    VN_HL_HKD   DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD   DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_LOGID    INT; --LOG 表记录ID
    VN_ROWCOUNT INT; --记录数
    VN_STEP     INT; --动作步数
    VN_PROC_NO  PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER     VARCHAR2(30);
    VN_QC_RQ    NUMBER(8); --上月月末交易日（期初）
    VN_QC_YF    NUMBER(6) := PUB_SYS.F_GET_DATE(VN_TJRQ, 3); --上月月份（期初）

BEGIN

    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --期初日期（上月月末交易日）
    BEGIN
        SELECT MAX(JYR) INTO VN_QC_RQ FROM DSC_CFG.T_XTJYR WHERE NY = VN_QC_YF;
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '查找不到：' || VN_QC_YF || '对应的交易日！';
    END;
    --月初
    VN_FIRST_DAY := PUB_SYS.F_GET_DATE(VN_TJRQ, 0);
    --期末日期
    VN_LAST_DAY := I_N_TJRQ;
    --月末日期
    SELECT MAX(ZRR)
      INTO VN_LAST_MONTHDAY
      FROM DSC_CFG.T_XTJYR T
     WHERE T.NY = VN_YF
       AND T.JYR = VN_LAST_DAY;
    /*    --月末交易日
    SELECT MAX(JYR) INTO VN_LAST_MONTHJYR FROM DSC_CFG.T_XTJYR T WHERE T.NY = VN_YF;*/

    --获取期初汇率
    --港币
    BEGIN
        SELECT A.GSBL
          INTO VN_HL_HKD
          FROM DSC_CFG.T_HLCS A
         WHERE A.BZ = '2'
           AND VN_FIRST_DAY BETWEEN A.KSRQ AND A.JSRQ;
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '没有维护“港币”汇率！';
    END;
    BEGIN
        --美元
        SELECT A.GSBL
          INTO VN_HL_USD
          FROM DSC_CFG.T_HLCS A
         WHERE A.BZ = '3'
           AND VN_FIRST_DAY BETWEEN A.KSRQ AND A.JSRQ;
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '没有维护“美元”汇率！';
    END;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);

    O_S_NOTE := '【ERROR-10000】';
    --重做删除原数据
    IF I_N_REDO IN (0, 1, 2) THEN
        --分区删除
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_GPZYHG_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        EXECUTE IMMEDIATE 'ALTER TABLE DSC_STAT.T_STAT_GPZYHG_Y TRUNCATE PARTITION PY_' ||
                          VN_YF || '  UPDATE GLOBAL INDEXES';
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_GPZYHG_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_GPZYHG_Y]分区数据删除成功！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;
    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_GPZYHG_Y]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_GPZYHG_Y';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_GPZYHG_Y_RJ';
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_GPZYHG_Y]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_T_STAT_GPZYHG_Y]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10001】';
    --月初到统计日总和
    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计月初到统计日总和数据到临时表[DSC_STAT.TMP_T_STAT_GPZYHG_Y_RJ]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_GPZYHG_Y_RJ
        (KHH,
         YYB,
         RJDYSZ,
         JYL_CS,
         JYL_HG,
         YJSR,
         LXSR,
         XZDHGLX,
         RJDYSZ_WD,
         LXSR_WD,
         XZDHGLX_WD)
        SELECT KHH,
               YYB,
               SUM(RJDYSZ) RJDYSZ,
               SUM(JYL_CS) JYL_CS,
               SUM(JYL_HG) JYL_HG,
               SUM(YJSR) YJSR,
               SUM(LXSR) LXSR,
               SUM(XZDHGLX) XZDHGLX,
               SUM(DYSZ_WD) RJDYSZ_WD,
               SUM(LXSR_WD) LXSR_WD,
               SUM(XZDHGLX_WD) XZDHGLX_WD
          FROM (SELECT A.KHH,
                       A.YYB,
                       SUM(DYSZ) RJDYSZ,
                       SUM(JYL_CS) JYL_CS,
                       SUM(JYL_HG) JYL_HG,
                       SUM(YJSR) YJSR,
                       SUM(LXSR) LXSR,
                       SUM(XZDHGLX) XZDHGLX,
                       SUM(DYSZ_WD) DYSZ_WD,
                       SUM(LXSR_WD) LXSR_WD,
                       SUM(XZDHGLX_WD) XZDHGLX_WD
                  FROM DSC_STAT.T_STAT_GPZYHG_R A
                 WHERE RQ BETWEEN VN_FIRST_DAY AND VN_LAST_DAY
                 GROUP BY A.KHH, A.YYB
                UNION ALL
                --取非交易日的资产，即非交易日的上个交易日数据
                SELECT A.KHH,
                       A.YYB,
                       SUM(DYSZ) RJDYSZ,
                       0 JYL_CS,
                       0 JYL_HG,
                       0 YJSR,
                       0 LXSR,
                       0 XZDHGLX,
                       SUM(DYSZ_WD) RJDYSZ_WD,
                       0 LXSR_WD,
                       0 XZDHGLX_WD
                  FROM DSC_STAT.T_STAT_GPZYHG_R A
                  JOIN (SELECT *
                         FROM DSC_CFG.T_XTJYR T
                        WHERE T.ZRR BETWEEN VN_FIRST_DAY AND VN_LAST_MONTHDAY
                          AND T.ZRR > T.JYR) T1
                    ON A.RQ = T1.JYR
                 WHERE RQ BETWEEN VN_QC_RQ AND VN_LAST_DAY
                 GROUP BY A.KHH, A.YYB)
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计月初到统计日总和数据到临时表[DSC_STAT.TMP_T_STAT_GPZYHG_Y_RJ]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '【ERROR-10002】';
    --记录日志明细——开始
    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计日均购回的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_GPZYHG_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --日均
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_GPZYHG_Y
        (YF,
         KHH,
         YYB,
         RJDYSZ,
         JYL_CS,
         JYL_HG,
         YJSR,
         LXSR,
         XZDHGLX,
         RJDYSZ_WD,
         LXSR_WD,
         XZDHGLX_WD)
        SELECT VN_YF AS YF,
               A.KHH,
               A.YYB,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJDYSZ / B.ZRRTS
               END AS RJDYSZ, --日均总资产
               JYL_CS,
               JYL_HG,
               YJSR,
               LXSR,
               XZDHGLX,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJDYSZ_WD / B.ZRRTS
               END AS RJDYSZ_WD,
               LXSR_WD,
               XZDHGLX_WD
          FROM DSC_STAT.TMP_T_STAT_GPZYHG_Y_RJ A,
               (SELECT KHH,
                       (SELECT COUNT(DISTINCT ZRR)
                          FROM DSC_CFG.T_XTJYR
                         WHERE ZRR BETWEEN VN_FIRST_DAY AND VN_LAST_MONTHDAY
                           AND ZRR BETWEEN C.KHRQ AND C.XHRQ) AS ZRRTS,
                       (SELECT COUNT(DISTINCT JYR)
                          FROM DSC_CFG.T_XTJYR
                         WHERE JYR BETWEEN VN_FIRST_DAY AND VN_TJRQ
                           AND JYR BETWEEN C.KHRQ AND C.XHRQ) AS TS --本月在线交易日天数
                  FROM DSC_BAS.T_KHXX_JJYW C) B
         WHERE A.KHH = B.KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计日均购回的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_GPZYHG_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10003】';
    VN_STEP  := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计期末购回的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_GPZYHG_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --期未
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_GPZYHG_Y
        (YF,
         KHH,
         YYB,
         DHGZQSZ,
         DHGJE,
         DHGYJLXSR,
         SQED,
         SYED,
         DHGZQSZ_WD,
         DHGJE_WD,
         DHGYJLXSR_WD)
        SELECT VN_YF AS YF,
               KHH,
               YYB,
               DHGZQSZ,
               DHGJE,
               DHGYJLXSR,
               SQED,
               SYED,
               DHGZQSZ_WD,
               DHGJE_WD,
               DHGYJLXSR_WD
          FROM DSC_STAT.T_STAT_GPZYHG_R
         WHERE RQ = VN_LAST_DAY;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计期末购回的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_GPZYHG_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10004】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_GPZYHG_Y]进行汇总统计，插入目标表[DSC_STAT.T_STAT_GPZYHG_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --写入结果表
    INSERT /*+ APPEND*/
    INTO DSC_STAT.T_STAT_GPZYHG_Y
        (YF,
         KHH,
         YYB,
         RJDYSZ,
         JYL_CS,
         JYL_HG,
         YJSR,
         LXSR,
         DHGZQSZ,
         DHGJE,
         DHGYJLXSR,
         SQED,
         SYED,
         XZDHGLX,
         RJDYSZ_WD,
         LXSR_WD,
         DHGZQSZ_WD,
         DHGJE_WD,
         DHGYJLXSR_WD,
         XZDHGLX_WD)
        SELECT YF,
               B.KHH,
               B.YYB,
               RJDYSZ,
               JYL_CS,
               JYL_HG,
               YJSR,
               LXSR,
               DHGZQSZ,
               DHGJE,
               DHGYJLXSR,
               SQED,
               SYED,
               XZDHGLX,
               RJDYSZ_WD,
               LXSR_WD,
               DHGZQSZ_WD,
               DHGJE_WD,
               DHGYJLXSR_WD,
               XZDHGLX_WD
          FROM (SELECT VN_YF AS YF,
                       KHH,
                       /*YYB,*/
                       NVL(SUM(RJDYSZ), 0) RJDYSZ,
                       NVL(SUM(JYL_CS), 0) JYL_CS,
                       NVL(SUM(JYL_HG), 0) JYL_HG,
                       NVL(SUM(YJSR), 0) YJSR,
                       NVL(SUM(LXSR), 0) LXSR,
                       NVL(SUM(DHGZQSZ), 0) DHGZQSZ,
                       NVL(SUM(DHGJE), 0) DHGJE,
                       NVL(SUM(DHGYJLXSR), 0) DHGYJLXSR,
                       NVL(SUM(SQED), 0) SQED,
                       NVL(SUM(SYED), 0) SYED,
                       NVL(SUM(XZDHGLX), 0) XZDHGLX,
                       NVL(SUM(RJDYSZ_WD), 0) RJDYSZ_WD,
                       NVL(SUM(LXSR_WD), 0) LXSR_WD,
                       NVL(SUM(DHGZQSZ_WD), 0) DHGZQSZ_WD,
                       NVL(SUM(DHGJE_WD), 0) DHGJE_WD,
                       NVL(SUM(DHGYJLXSR_WD), 0) DHGYJLXSR_WD,
                       NVL(SUM(XZDHGLX_WD), 0) XZDHGLX_WD
                  FROM TMP_T_STAT_GPZYHG_Y
                 GROUP BY KHH /*, YYB*/
                ) A
         INNER JOIN DSC_BAS.T_KHXX_JJYW B
            ON A.KHH = B.KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_GPZYHG_Y]进行汇总统计，插入目标表[DSC_STAT.T_STAT_GPZYHG_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_GPZYHG_Y';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_GPZYHG_Y_RJ';

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_GPZYHG_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_JRCP_R(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN INT,
                                                   I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   客户金融产品日统计
         功能简述：   客户金融产品日统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
              1、代销基金的业务代码120-认购   122-申购   124-赎回  139-定时定额投资

         注意事项：


         数据源：
                 DSC_BAS.T_FP_JGMXLS      ：基金交割流水
                 DSC_HIS.T_FP_JGMXLS_HIS  : 基金交割流水历史
                 DSC_BAS.T_FP_CPFE        : 基金份额
                 DSC_HIS.T_FP_CPFE_HIS      : 基金份额历史

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                    操作
         林伟        2013/05/22                  创建
         胡阳明      2013/06/24                  修改：新增产品分类分组条件,及ZQPZ字段
         金石        2015/05/12                  修改：认购数据只要计算130 业务代码的，取消120,121代码
    */
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期

BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_KHJYSR_R';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --重做删除原数据
    IF I_N_REDO = 1 THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_JRCP_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_JRCP_R WHERE RQ = I_N_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_JRCP_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_KHJYSR_R]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_JRCP_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_JRCP_R';
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_JRCP_R]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_T_STAT_JRCP_R]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10001-1】';
    --代销基金金融产品部分的成交金额和手续费
    --120-认购   122-申购   124-赎回  139-定时定额投资
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计代销基金金融产品成交金额和手续费数据，插入临时表[DSC_STAT.TMP_T_STAT_JRCP_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_JRCP_R
        (RQ, KHH, YYB, CPFL, ZQPZ, CJJE_SG, CJJE_RG, CJJE_DSDT, CJJE_SH, SXF)
        SELECT T.QRRQ AS RQ,
               KHH,
               YYB,
               NVL(CPFL, 1) AS CPFL,
               ZQPZ,
               SUM(CASE
                       WHEN YWDM IN ('122', '123') THEN
                        QRJE
                       ELSE
                        0
                   END) CJJE_SG,
               SUM(CASE
                       WHEN YWDM IN ( '130') THEN
                        QRJE
                       ELSE
                        0
                   END) CJJE_RG,
               SUM(CASE
                       WHEN YWDM IN ('139') THEN
                        QRJE
                       ELSE
                        0
                   END) CJJE_DSDT,
               SUM(CASE
                       WHEN YWDM IN ('124', '125', '142') THEN
                        QRJE
                       ELSE
                        0
                   END) CJJE_SH,
               SUM(SXF) AS SXF
          FROM (SELECT *
                  FROM DSC_BAS.T_FP_JGMXLS
                UNION ALL
                SELECT * FROM DSC_HIS.T_FP_JGMXLS_HIS) T
         WHERE YWDM IN ( '122', '123', '124', '125', '139', '142', '130')
           AND T.QRRQ = VN_TJRQ
         GROUP BY KHH, YYB, T.QRRQ, ZQPZ, T.CPFL;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计代销基金金融产品成交金额和手续费数据，插入临时表[DSC_STAT.TMP_T_STAT_JRCP_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10001-2】';
    --代销基金金融产品部分的产品保有量(基金市值)
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计代销基金金融产品保有量数据，插入临时表[DSC_STAT.TMP_T_STAT_JRCP_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_JRCP_R
        (RQ, KHH, YYB, CPFL, ZQPZ, CPBYL)
        SELECT I_N_TJRQ AS RQ, A.KHH, A.YYB, NVL(CPFL, 1), ZQPZ, SUM(ZXSZ) AS CPBYL
          FROM (SELECT RQ, KHH, YYB, CPDM, ZXSZ, CPFL, ZQPZ
                  FROM DSC_BAS.T_FP_CPFE
                UNION ALL
                SELECT RQ, KHH, YYB, CPDM, ZXSZ, CPFL, ZQPZ FROM DSC_HIS.T_FP_CPFE_HIS) A
         WHERE A.RQ = VN_TJRQ
         GROUP BY KHH, YYB, CPFL, ZQPZ;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计代销基金金融产品保有量数据，插入临时表[DSC_STAT.TMP_T_STAT_JRCP_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10002】';
    ------------写入结果表-----------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_JRCP_R]进行汇总统计，插入目标表[DSC_STAT.T_STAT_JRCP_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_STAT_JRCP_R
        (RQ,
         KHH,
         YYB,
         GRJG,
         CPFL,
         ZQPZ,
         CPBYL,
         CJJE_SG,
         CJJE_RG,
         CJJE_DSDT,
         CJJE_SH,
         SXF)
        SELECT RQ,
               A.KHH,
               A.YYB,
               NVL(B.GRJG, 0) AS GRJG,
               CPFL,
               ZQPZ,
               CPBYL,
               CJJE_SG,
               CJJE_RG,
               CJJE_DSDT,
               CJJE_SH,
               SXF
          FROM (SELECT RQ,
                       KHH,
                       YYB,
                       CPFL,
                       ZQPZ,
                       SUM(NVL(CPBYL, 0)) AS CPBYL,
                       SUM(NVL(CJJE_SG, 0)) AS CJJE_SG,
                       SUM(NVL(CJJE_RG, 0)) AS CJJE_RG,
                       SUM(NVL(CJJE_DSDT, 0)) AS CJJE_DSDT,
                       SUM(NVL(CJJE_SH, 0)) AS CJJE_SH,
                       SUM(NVL(SXF, 0)) AS SXF
                  FROM DSC_STAT.TMP_T_STAT_JRCP_R
                 GROUP BY KHH, YYB, RQ, CPFL, ZQPZ) A,
               DSC_BAS.T_KHXX_JJYW B
         WHERE A.KHH = B.KHH(+);

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_JRCP_R]进行汇总统计，插入目标表[DSC_STAT.T_STAT_JRCP_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_JRCP_R';

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_JRCP_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_JRCP_Y(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN INT,
                                                   I_N_REDO IN NUMBER DEFAULT 0) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   客户金融产品月统计
         功能简述：   客户金融产品月统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
        返回：

         算法：
                  1、日均产品保有量=到统计日的在线自然日保有量总和/到统计日的在线自然日总天数

         注意事项：

         数据源：
                 DSC_STAT.T_STAT_JRCP_R     ：客户金融产品日统计表

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         林伟        2013/05/22                 创建
         胡阳明      2013/06/24                 修改：新增产品分类分组条件,及ZQPZ字段
         陈德铸      2015/12/09                 修改：1)对于客户存在营业部内转情况予以完善处理
                                                      2)增加月初表分析处理
         黄宏峰      2017/03/07                 修改：修改ZRRTS算法

    */
    VS_PROC_NAME     VARCHAR2(100) := $$PLSQL_UNIT;
    VN_TJRQ          NUMBER(8) := I_N_TJRQ;
    VN_YF            NUMBER(6) := PUB_SYS.F_GET_DATE(I_N_TJRQ, 2); --月份
    VN_FIRST_DAY     NUMBER(8); --期初交易日
    VN_LAST_DAY      NUMBER(8); --期末交易日
    VN_LAST_MONTHDAY NUMBER(8); --月末日期
    --VN_LAST_MONTHJYR NUMBER(8); --月末交易日
    VN_LOGID    INT; --LOG 表记录ID
    VN_ROWCOUNT INT; --记录数
    VN_STEP     INT; --动作步数
    VN_PROC_NO  PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER     VARCHAR2(30);
    VN_QC_RQ    NUMBER(8); --上月月末交易日（期初）
    VN_QC_YF    NUMBER(6) := PUB_SYS.F_GET_DATE(VN_TJRQ, 3); --上月月份（期初）

    VN_CODE NUMBER;
    VS_NOTE VARCHAR2(500);
    VS_PART VARCHAR2(15) := 'PY_' || SUBSTR(I_N_TJRQ, 1, 6);

BEGIN

    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --期初日期（上月月末交易日）
    BEGIN
        SELECT MAX(JYR) INTO VN_QC_RQ FROM DSC_CFG.T_XTJYR WHERE NY = VN_QC_YF;
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '查找不到：' || VN_QC_YF || '对应的交易日！';
    END;
    --月初
    VN_FIRST_DAY := PUB_SYS.F_GET_DATE(VN_TJRQ, 0);
    --期末日期
    VN_LAST_DAY := I_N_TJRQ;
    --月末日期
    SELECT MAX(ZRR)
      INTO VN_LAST_MONTHDAY
      FROM DSC_CFG.T_XTJYR T
     WHERE T.NY = VN_YF
       AND T.JYR = VN_LAST_DAY;
    /*    --月末交易日
    SELECT MAX(JYR) INTO VN_LAST_MONTHJYR FROM DSC_CFG.T_XTJYR T WHERE T.NY = VN_YF;*/

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);

    O_S_NOTE := '【ERROR-10000】';
    --重做删除原数据
    IF I_N_REDO IN (0, 1, 2) THEN
        --分区删除
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_JRCP_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        EXECUTE IMMEDIATE 'ALTER TABLE DSC_STAT.T_STAT_JRCP_y TRUNCATE PARTITION PY_' ||
                          VN_YF || '  UPDATE GLOBAL INDEXES';
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_JRCP_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_YDGH_Y]分区数据删除成功！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;
    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_JRCP_Y]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE  DSC_STAT.TMP_T_STAT_JRCP_Y';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE  DSC_STAT.TMP_T_STAT_JRCP_Y_RJ';
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_JRCP_Y]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_T_STAT_JRCP_Y]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10001】';
    --月初到统计日总和
    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计月初到统计日总和数据到临时表[DSC_STAT.TMP_T_STAT_JRCP_Y_RJ]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_JRCP_Y_RJ
        (KHH, YYB, GRJG, CPFL, ZQPZ, RJCPBYL, CJJE_SG, CJJE_RG, CJJE_DSDT, CJJE_SH, SXF)
        SELECT KHH,
               YYB,
               GRJG,
               CPFL,
               ZQPZ,
               SUM(RJCPBYL) RJCPBYL,
               SUM(CJJE_SG) CJJE_SG,
               SUM(CJJE_RG) CJJE_RG,
               SUM(CJJE_DSDT) CJJE_DSDT,
               SUM(CJJE_SH) CJJE_SH,
               SUM(SXF) SXF
          FROM (SELECT KHH,
                       YYB,
                       GRJG,
                       CPFL,
                       ZQPZ,
                       SUM(CPBYL) RJCPBYL,
                       SUM(CJJE_SG) CJJE_SG,
                       SUM(CJJE_RG) CJJE_RG,
                       SUM(CJJE_DSDT) CJJE_DSDT,
                       SUM(CJJE_SH) CJJE_SH,
                       SUM(SXF) SXF
                  FROM DSC_STAT.T_STAT_JRCP_R A
                 WHERE RQ BETWEEN VN_FIRST_DAY AND VN_LAST_DAY
                 GROUP BY A.KHH, A.YYB, A.GRJG, A.CPFL, A.ZQPZ
                UNION ALL
                --取非交易日的数据，即非交易日的上个交易日数据
                SELECT A.KHH,
                       A.YYB,
                       GRJG,
                       CPFL,
                       ZQPZ,
                       SUM(CPBYL) RJCPBYL,
                       0 CJJE_SG,
                       0 CJJE_RG,
                       0 CJJE_DSDT,
                       0 CJJE_SH,
                       0 SXF
                  FROM DSC_STAT.T_STAT_JRCP_R A
                  JOIN (SELECT *
                         FROM DSC_CFG.T_XTJYR T
                        WHERE T.ZRR BETWEEN VN_FIRST_DAY AND VN_LAST_MONTHDAY
                          AND T.ZRR > T.JYR) T1
                    ON A.RQ = T1.JYR
                 WHERE RQ BETWEEN VN_QC_RQ AND VN_LAST_DAY
                 GROUP BY A.KHH, A.YYB, A.GRJG, A.CPFL, A.ZQPZ)
         GROUP BY KHH, YYB, GRJG, CPFL, ZQPZ;
    VN_ROWCOUNT := SQL%ROWCOUNT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计月初到统计日总和数据到临时表[DSC_STAT.TMP_T_STAT_JRCP_Y_RJ]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '【ERROR-10002】';
    --记录日志明细——开始
    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计日均金融产品保有量数据，插入临时表[DSC_STAT.TMP_T_STAT_JRCP_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --日均
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_JRCP_Y
        (YF,
         KHH,
         YYB,
         GRJG,
         CPFL,
         ZQPZ,
         RJCPBYL,
         CJJE_SG,
         CJJE_RG,
         CJJE_DSDT,
         CJJE_SH,
         SXF)
        SELECT VN_YF AS YF,
               A.KHH,
               A.YYB,
               A.GRJG,
               A.CPFL,
               A.ZQPZ,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    A.RJCPBYL / B.ZRRTS
               END AS RJCPBYL, --日均产品保有量
               CJJE_SG,
               CJJE_RG,
               CJJE_DSDT,
               CJJE_SH,
               SXF
          FROM DSC_STAT.TMP_T_STAT_JRCP_Y_RJ A,
               (SELECT KHH,
                       (SELECT COUNT(DISTINCT ZRR)
                          FROM DSC_CFG.T_XTJYR
                         WHERE ZRR BETWEEN VN_FIRST_DAY AND VN_LAST_MONTHDAY
                           AND ZRR BETWEEN C.KHRQ AND C.XHRQ) AS ZRRTS,
                       (SELECT COUNT(DISTINCT JYR)
                          FROM DSC_CFG.T_XTJYR
                         WHERE JYR BETWEEN VN_FIRST_DAY AND VN_TJRQ
                           AND JYR BETWEEN C.KHRQ AND C.XHRQ) AS TS --本月在线交易日天数
                  FROM DSC_BAS.T_KHXX_JJYW C) B
         WHERE A.KHH = B.KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计日均金融产品保有量数据，插入临时表[DSC_STAT.TMP_T_STAT_JRCP_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10003】';
    VN_STEP  := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计期末金融产品保有量指标数据，插入临时表[DSC_STAT.TMP_T_STAT_JRCP_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --期未
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_JRCP_Y
        (YF, KHH, YYB, GRJG, CPFL, ZQPZ, YMCPBYL)
        SELECT VN_YF AS YF, KHH, YYB, GRJG, CPFL, ZQPZ, CPBYL AS YMCPBYL
          FROM DSC_STAT.T_STAT_JRCP_R
         WHERE RQ = VN_LAST_DAY;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计期末金融产品保有量指标数据，插入临时表[DSC_STAT.TMP_T_STAT_JRCP_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10004】';
    VN_STEP  := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计期初金融产品保有量指标数据，插入临时表[DSC_STAT.TMP_T_STAT_JRCP_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --期初
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_JRCP_Y
        (YF, KHH, YYB, GRJG, CPFL, ZQPZ, YCCPBYL)
        SELECT VN_YF AS YF, KHH, YYB, GRJG, CPFL, ZQPZ, CPBYL AS YMCPBYL
          FROM DSC_STAT.T_STAT_JRCP_R A
         WHERE RQ = VN_QC_RQ
           AND NOT EXISTS (SELECT 1
                  FROM DSC_BAS.T_KHXX_JJYW B
                 WHERE A.KHH = B.KHH
                   AND B.KHZT = 3
                   AND B.XHRQ = VN_QC_RQ);
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计期初金融产品保有量指标数据，插入临时表[DSC_STAT.TMP_T_STAT_JRCP_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10005】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_JRCP_Y]进行汇总统计，插入目标表[DSC_STAT.T_STAT_JRCP_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --写入结果表
    INSERT /*+ APPEND*/
    INTO DSC_STAT.T_STAT_JRCP_Y
        (YF,
         KHH,
         YYB,
         GRJG,
         CPFL,
         ZQPZ,
         YCCPBYL,
         YMCPBYL,
         RJCPBYL,
         CJJE_SG,
         CJJE_RG,
         CJJE_DSDT,
         CJJE_SH,
         SXF)
        SELECT VN_YF AS YF,
               B.KHH,
               B.YYB,
               B.GRJG,
               A.CPFL,
               A.ZQPZ,
               SUM(NVL(A.YCCPBYL, 0)) AS YCCPBYL,
               SUM(NVL(A.YMCPBYL, 0)) AS YMCPBYL,
               SUM(NVL(A.RJCPBYL, 0)) AS RJCPBYL,
               SUM(NVL(A.CJJE_SG, 0)) AS CJJE_SG,
               SUM(NVL(A.CJJE_RG, 0)) AS CJJE_RG,
               SUM(NVL(A.CJJE_DSDT, 0)) AS CJJE_DSDT,
               SUM(NVL(A.CJJE_SH, 0)) AS CJJE_SH,
               SUM(NVL(A.SXF, 0)) AS SXF
          FROM TMP_T_STAT_JRCP_Y A, DSC_BAS.T_KHXX_JJYW B
         WHERE A.KHH = B.KHH
         GROUP BY B.KHH, B.YYB, B.GRJG, A.CPFL, A.ZQPZ;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_JRCP_Y]进行汇总统计，插入目标表[DSC_STAT.T_STAT_JRCP_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_JRCP_Y';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_JRCP_Y_RJ';

    --月初做表分析
    --记录日志明细——开始
    O_S_NOTE := '【ERROR-10006】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '对表[DSC_STAT.T_STAT_JRCP_Y]' ||
                                                    VS_PART || '分区进行分析！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    PUB_SYS.P_GATHER_STATS(O_N_CODE    => VN_CODE,
                           O_S_NOTE    => VS_NOTE,
                           I_N_TJRQ    => I_N_TJRQ,
                           I_N_MODE    => 'YC',
                           I_S_OWNER   => 'DSC_STAT',
                           I_S_TABNAME => 'T_STAT_JRCP_Y',
                           I_S_PART    => VS_PART);
    --记录日志明细——结束
    IF VN_CODE = 2 THEN
        VS_NOTE  := '未分析';
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL;
        O_S_NOTE := '运行正常';
    ELSIF VN_CODE = 0 THEN
        VS_NOTE  := '分析完成';
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL;
        O_S_NOTE := '运行正常';
    END IF;

    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '对表[DSC_STAT.T_STAT_JRCP_Y]' ||
                                                    VS_PART || '进行分析！',
                              I_S_CHANGEDESC     => VS_NOTE,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_JRCP_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_KHJYSR_R(O_N_CODE OUT INT,
                                                     O_S_NOTE OUT VARCHAR2,
                                                     I_N_TJRQ IN INT,
                                                     I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   客户交易与收入日统计
         功能简述：   客户交易与收入日统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
              1、净佣金=实收佣金-(一级费用_经手费 +一级费用_证管费+一级费用_过户费+一级费用_结算费+一级费用_风险基金)
              2、通过 应收金额（YSJE）的正负来判断买卖的方向。
              3、代销基金的业务代码120-认购   122-申购   124-赎回  139-定时定额投资

         注意事项：
                计算交易量的交易类别：
                -----------------
                1--买入
                2--卖出
                4--融资
                5--融券
                14--配售申购
                29--ETF申购
                30--ETF赎回
                32--现金认购
                33--股票认购
                39--LOF申购
                40--LOF赎回
                41--基金认购
                42--基金申购
                43--基金赎回
                46--基金转换
                47--基金分拆
                48--基金合并
                61--融资买入
                62--卖券还款
                63--买券还券
                64--融券卖出
                71--融资强平
                72--融券强平
                80--缴申购款

         数据源：
                 DSC_BAS.T_JGMXLS         ：机构明细流水
                 DSC_BAS.T_FP_JGMXLS      ：基金交割流水
                 DSC_CFG.T_ZQPZ_DY        ：证券品种对应
                 DSC_BAS.T_KHXX_JJYW      ：客户信息-经纪业务
                 DSC_CFG.T_HLCS           ：汇率参数
                 DSC_STAT.T_ZJMXLS        ：资金明细流水

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                    操作
         胡阳明      2012/03/13                  创建
         胡阳明      2012/09/25                  修改：基金流水取值WTRQ改为QRRQ,增加认购，申购，赎回的类别
         胡阳明      2013/01/30                  修改：成交金额不够底佣5元时造成买卖方向相反的解决。
         胡阳明      2013/03/14                  修改：新增服务佣金
         黄玉钰      2013/03/28                  修改：新增开放式基金130-认购结果业务
         林伟        2013/04/19                  修改：增加远程委托方式交易量,以及在现场委托方式中增加远程委托交易量
         黄玉钰      2013/06/24                  修改：新增_JRCP相关字段的赋值
         黄玉钰      2013/09/18                  修改：取服务佣金时，限制业务科目的Param_Kind为'03'
         胡阳明      2013/10/21                  修改：净佣金算法提取清洗层，本层只要直接取“交割明细流水”的JYJ即可
         陈德铸      2014/07/29                  修改：1):交易笔数按照一条交割流水记录处理为一笔的方式
                                                       2):对于存在一个客户同一天在多个营业部发生交易的情况，在生成最终数据表进行取DSC_BAS.T_KHXX_JJYW表的YYB字段进行处理
         吴邦杰      2014/09/09                  修改：增加港股通业务字段YJSR_GGT(佣金收入_港股通), JYJ_GGT(净佣金收入_港股通), JYL_GGT(交易量_港股通), JYL_GGT_MR(交易量_港股通_买入),
                                                                         JYL_GGT_MC(交易量_港股通_卖出), JYBS_GGT(交易笔数_港股通)，JYFY_GGT(交易费用_港股通)
         金石        2015/05/12                  修改：认购数据只要计算130 业务代码的，取消120,121代码
         陈德铸      2015/07/12                  修改：存在部分交易类别计算佣金，但不计算交易量的情况，通过DSC_CFG.T_JYLB的IS_JSJYL和IS_JSYJ进行分别控制
                                                       交易量和交易笔数通过IS_JSJYL控制，佣金、净佣金、交易费用通过IS_JSYJ来控制
         胡丹丹      2015/08/12                  修改：生成表数据之后进行表分析
         胡丹丹      2015/10/13                  修改：更改表分析部分的日志明细标识
         洪国力      2015/12/10                  修改：新增银行和其他委托方式交易量、交易笔数，现场委托方式交易笔数中新增远程子项
         洪国力      2015/12/22                  修改：委托方式计算交易量改为币种折算后的，合计与总交易量保持一致
         张功德      2016/09/07                  修改：增加深港通业务字段YJSR_SGT(佣金收入_深港通), JYJ_SGT(净佣金收入_深港通), JYL_SGT(交易量_深港通), JYL_SGT_MR(交易量_深港通_买入),
                                                                         JYL_SGT_MC(交易量_深港通_卖出), JYBS_SGT(交易笔数_深港通)，JYFY_SGT(交易费用_深港通)
		 刘官勤      2017/07/13                  修改：YJSR_HAZB别名重复调整为YJSR_SAZB
         zhangbc     2019/06/27                  修改：新增科创板数据统计
    */
    VN_HL_HKD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_PART      VARCHAR2(15) := 'PY_' || SUBSTR(I_N_TJRQ, 1, 6);
    VN_CODE      NUMBER;
    VS_NOTE      VARCHAR2(500);

BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_KHJYSR_R';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --重做删除原数据
    IF I_N_REDO = 1 THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHJYSR_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_KHJYSR_R WHERE RQ = I_N_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;

        --分区删除
        COMMIT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHJYSR_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_KHJYSR_R]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_KHJYSR_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_KHJYSR_R';
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_KHJYSR_R]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_T_STAT_KHJYSR_R]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10001-1】';
    --获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;

    O_S_NOTE := '【ERROR-10001-2】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计:服务佣金数据，插入临时表[DSC_STAT.TMP_T_STAT_KHJYSR_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_KHJYSR_R
        (RQ, KHH, YYB, FWYJ)
        SELECT VN_TJRQ,
               KHH,
               YYB,
               SUM(CASE BZ
                       WHEN '1' THEN
                        FWYJ
                       WHEN '2' THEN
                        FWYJ * VN_HL_HKD
                       WHEN '3' THEN
                        FWYJ * VN_HL_USD
                       ELSE
                        0
                   END) AS FWYJ
          FROM (SELECT RQ, KHH, YYB, BZ, SRJE + FCJE AS FWYJ, YWKM
                  FROM DSC_BAS.T_ZJMXLS
                UNION ALL
                SELECT RQ, KHH, YYB, BZ, SRJE + FCJE AS FWYJ, YWKM
                  FROM DSC_HIS.T_ZJMXLS_HIS)
         WHERE RQ = VN_TJRQ
           AND YWKM IN
               (SELECT PARAM_VALUE FROM DSC_STAT.T_PARAM_VALUE WHERE PARAM_KIND = '03')
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计:服务佣金数据，插入临时表[DSC_STAT.TMP_T_STAT_KHJYSR_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10001】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计除中小板外的品种数据，插入临时表[DSC_STAT.TMP_T_STAT_KHJYSR_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --排除中小板的品种数据
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_KHJYSR_R
        (RQ,
         KHH,
         YYB,
         GRJG,
         ZSR,
         YJSR,
         YJSR_HAZB,
         YJSR_SAZB,
         YJSR_ZXB,
         YJSR_CYB,
         YJSR_HB,
         YJSR_SB,
         YJSR_SB_A,
         YJSR_SB_B,
         YJSR_FBSJJ,
         YJSR_ETF,
         YJSR_LOF,
         YJSR_SZJJT,
         YJSR_DXJJ,
         YJSR_QZ,
         YJSR_GZ,
         YJSR_GSQYZ,
         YJSR_KZZ,
         YJSR_HG,
         YJSR_SG,
         YJSR_QT,
         JYJ,
         JYJ_HAZB,
         JYJ_SAZB,
         JYJ_ZXB,
         JYJ_CYB,
         JYJ_HB,
         JYJ_SB,
         JYJ_SB_A,
         JYJ_SB_B,
         JYJ_FBSJJ,
         JYJ_ETF,
         JYJ_LOF,
         JYJ_SZJJT,
         JYJ_DXJJ,
         JYJ_QZ,
         JYJ_GZ,
         JYJ_GSQYZ,
         JYJ_KZZ,
         JYJ_HG,
         JYJ_SG,
         JYJ_QT,
         JYL,
         JYL_MR,
         JYL_MC,
         JYL_HAZB,
         JYL_HAZB_MR,
         JYL_HAZB_MC,
         JYL_SAZB,
         JYL_SAZB_MR,
         JYL_SAZB_MC,
         JYL_ZXB,
         JYL_ZXB_MR,
         JYL_ZXB_MC,
         JYL_CYB,
         JYL_CYB_MR,
         JYL_CYB_MC,
         JYL_HB,
         JYL_HB_MR,
         JYL_HB_MC,
         JYL_SB,
         JYL_SB_MR,
         JYL_SB_MC,
         JYL_SB_A,
         JYL_SB_A_MR,
         JYL_SB_A_MC,
         JYL_SB_B,
         JYL_SB_B_MR,
         JYL_SB_B_MC,
         JYL_FBSJJ,
         JYL_FBSJJ_MR,
         JYL_FBSJJ_MC,
         JYL_ETF,
         JYL_ETF_MR,
         JYL_ETF_MC,
         JYL_LOF,
         JYL_LOF_MR,
         JYL_LOF_MC,
         JYL_SZJJT,
         JYL_SZJJT_MR,
         JYL_SZJJT_MC,
         JYL_DXJJ,
         JYL_DXJJ_SG,
         JYL_DXJJ_RG,
         JYL_DXJJ_SH,
         JYL_QZ,
         JYL_QZ_MR,
         JYL_QZ_MC,
         JYL_GZ,
         JYL_GZ_MR,
         JYL_GZ_MC,
         JYL_GSQYZ,
         JYL_GSQYZ_MR,
         JYL_GSQYZ_MC,
         JYL_KZZ,
         JYL_KZZ_MR,
         JYL_KZZ_MC,
         JYL_HG,
         JYL_HG_MR,
         JYL_HG_MC,
         JYL_SG,
         JYL_SG_MR,
         JYL_SG_MC,
         JYL_QT,
         JYL_QT_MR,
         JYL_QT_MC,
         JYL_ST,
         JYL_ST_MR,
         JYL_ST_MC,
         JYL_XC,
         JYL_CK,
         JYL_RJ,
         JYL_GT,
         JYL_SJ,
         JYL_DH,
         JYL_HLW,
         JYL_YC,
         JYL_YH,
         JYL_QIT,
         JYFY,
         JYFY_HAZB,
         JYFY_SAZB,
         JYFY_ZXB,
         JYFY_CYB,
         JYFY_HB,
         JYFY_SB,
         JYFY_SB_A,
         JYFY_SB_B,
         JYFY_FBSJJ,
         JYFY_ETF,
         JYFY_LOF,
         JYFY_SZJJT,
         JYFY_DXJJ,
         JYFY_QZ,
         JYFY_GZ,
         JYFY_GSQYZ,
         JYFY_KZZ,
         JYFY_HG,
         JYFY_SG,
         JYFY_QT,
         JYBS,
         JYBS_HAZB,
         JYBS_SAZB,
         JYBS_ZXB,
         JYBS_CYB,
         JYBS_HB,
         JYBS_SB,
         JYBS_SB_A,
         JYBS_SB_B,
         JYBS_FBSJJ,
         JYBS_ETF,
         JYBS_LOF,
         JYBS_SZJJT,
         JYBS_DXJJ,
         JYBS_QZ,
         JYBS_GZ,
         JYBS_GSQYZ,
         JYBS_KZZ,
         JYBS_HG,
         JYBS_SG,
         JYBS_QT,
         JYBS_XC,
         JYBS_CK,
         JYBS_RJ,
         JYBS_GT,
         JYBS_SJ,
         JYBS_DH,
         JYBS_HLW,
         JYBS_YC,
         JYBS_YH,
         JYBS_QIT,
         JYL_ZD,
         JYL_CZD,
         JYL_ZTGZR,
         JYL_ZTGZC,
         HLCS_HKD,
         HLCS_USD,
         YJSR_GGT,
         JYJ_GGT,
         JYL_GGT,
         JYL_GGT_MR,
         JYL_GGT_MC,
         JYBS_GGT,
         JYFY_GGT,
         YJSR_SGT,
         JYJ_SGT,
         JYL_SGT,
         JYL_SGT_MR,
         JYL_SGT_MC,
         JYBS_SGT,
         JYFY_SGT,
         YJSR_KCB,
         JYJ_KCB,
         JYL_KCB,
         JYL_KCB_MR,
         JYL_KCB_MC,
         JYBS_KCB,
         JYFY_KCB)
        SELECT T.CJRQ,
               T.KHH,
               T.YYB,
               NULL AS GRJG,
               NULL AS ZSR,
               NULL AS YJSR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '110' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_HAZB, --泸A主板
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '111' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_SAZB, --深A主板
               NULL AS YJSR_ZXB, --中小板单独取值
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '113' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_CYB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '121' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_HB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '122' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_SB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '131' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_SB_A,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '132' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_SB_B,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '211' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_FBSJJ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '221' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_ETF,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '231' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_LOF,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '232' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_SZJJT,
               NULL YJSR_DXJJ, --代销基金单独取值
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '311' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_QZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '411' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_GZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '431' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_GSQYZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '441' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_KZZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '511' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_HG,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '611' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_SG,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '999' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_QT,
               NULL JYJ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '110' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_HAZB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '111' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_SAZB,
               NULL AS JYJ_ZXB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '113' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_CYB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '121' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_HB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '122' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_SB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '131' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_SB_A,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '132' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_SB_B,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '211' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_FBSJJ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '221' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_ETF,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '231' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_LOF,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '232' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_SZJJT,
               NULL JYJ_DXJJ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '311' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_QZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '411' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_GZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '431' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_GSQYZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '441' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_KZZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '511' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_HG,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '611' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_SG,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '999' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_QT,
               NULL JYL,
               NULL JYL_MR,
               NULL JYL_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '110' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_HAZB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '110' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_HAZB_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '110' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_HAZB_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '111' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_SAZB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '111' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_SAZB_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '111' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_SAZB_MC,
               NULL JYL_ZXB,
               NULL JYL_ZXB_MR,
               NULL JYL_ZXB_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '113' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_CYB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '113' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_CYB_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '113' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_CYB_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '121' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_HB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '121' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_HB_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '121' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_HB_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '122' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_SB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '122' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_SB_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '122' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_SB_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '131' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_SB_A,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '131' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_SB_A_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '131' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_SB_A_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '132' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_SB_B,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '132' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_SB_B_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '132' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_SB_B_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '211' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_FBSJJ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '211' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_FBSJJ_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '211' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_FBSJJ_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '221' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_ETF,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '221' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_ETF_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '221' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_ETF_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '231' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_LOF,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '231' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_LOF_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '231' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_LOF_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '232' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_SZJJT,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '232' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_SZJJT_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '232' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_SZJJT_MC,
               NULL JYL_DXJJ,
               NULL JYL_DXJJ_SG,
               NULL JYL_DXJJ_RG,
               NULL JYL_DXJJ_SH,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '311' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_QZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '311' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_QZ_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '311' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_QZ_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '411' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_GZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '411' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_GZ_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '411' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_GZ_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '431' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_GSQYZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '431' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_GSQYZ_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '431' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_GSQYZ_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '441' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_KZZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '441' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_KZZ_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '441' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_KZZ_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '511' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_HG,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '511' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_HG_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '511' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_HG_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '611' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_SG,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '611' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_SG_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '611' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_SG_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '999' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_QT,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '999' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_QT_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '999' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_QT_MC,
               SUM(CASE
                       WHEN T.BZ = '1' AND (T.ZQMC LIKE '%ST%') AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_ST,
               SUM(CASE
                       WHEN T.BZ = '1' AND (T.ZQMC LIKE '%ST%') AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_ST_MR,
               SUM(CASE
                       WHEN T.BZ = '1' AND (T.ZQMC LIKE '%ST%') AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_ST_MC,
               SUM(CASE
                       WHEN T.WTFS IN ('2', '4', '8', '16') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_XC, --现场为：柜台，磁卡，热键，新增远程
               SUM(CASE
                       WHEN T.WTFS IN ('2') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) AS JYL_CK,
               SUM(CASE
                       WHEN T.WTFS IN ('4') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_RJ,
               SUM(CASE
                       WHEN T.WTFS IN ('8') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_GT,
               SUM(CASE
                       WHEN T.WTFS IN ('64') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_SJ,
               SUM(CASE
                       WHEN T.WTFS IN ('1') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_DH,
               SUM(CASE
                       WHEN T.WTFS IN ('32') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_HLW,
               SUM(CASE
                       WHEN T.WTFS IN ('16') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_YC,
               SUM(CASE
                       WHEN T.WTFS IN ('128') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_YH,
               SUM(CASE
                       WHEN (T.WTFS NOT IN ('1', '2', '4', '8', '16', '32', '64', '128') OR
                            TRIM(T.WTFS) IS NULL) AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_QIT,
               NULL JYFY,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '110' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_HAZB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '111' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_SAZB,
               NULL JYFY_ZXB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '113' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_CYB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '121' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_HB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '122' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_SB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '131' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_SB_A,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '132' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_SB_B,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '211' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_FBSJJ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '221' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_ETF,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '231' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_LOF,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '232' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_SZJJT,
               NULL JYFY_DXJJ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '311' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_QZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '411' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_GZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '431' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_GSQYZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '441' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_KZZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '511' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_HG,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '611' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_SG,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '999' AND T2.IS_JSYJ = '1' THEN
                        (S2 + S3 + S4 + S5 + S6)
                   END) JYFY_QT,
               NULL JYBS,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '110' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_HAZB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '111' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_SAZB,
               NULL JYBS_ZXB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '113' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_CYB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '121' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_HB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '122' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_SB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '131' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_SB_A,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '132' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_SB_B,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '211' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_FBSJJ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '221' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_ETF,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '231' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_LOF,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '232' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_SZJJT,
               NULL AS JYBS_DXJJ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '311' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_QZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '411' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_GZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '431' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_GSQYZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '441' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_KZZ,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '511' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_HG,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '611' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_SG,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '999' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_QT,
               SUM(CASE
                       WHEN T.WTFS IN ('2', '4', '8', '16') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_XC,
               SUM(CASE
                       WHEN T.WTFS IN ('2') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_CK,
               SUM(CASE
                       WHEN T.WTFS IN ('4') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_RJ,
               SUM(CASE
                       WHEN T.WTFS IN ('8') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_GT,
               SUM(CASE
                       WHEN T.WTFS IN ('64') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_SJ,
               SUM(CASE
                       WHEN T.WTFS IN ('1') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_DH,
               SUM(CASE
                       WHEN T.WTFS IN ('32') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_HLW,
               SUM(CASE
                       WHEN T.WTFS IN ('16') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_YC,
               SUM(CASE
                       WHEN T.WTFS IN ('128') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_YH,
               SUM(CASE
                       WHEN (T.WTFS NOT IN ('1', '2', '4', '8', '16', '32', '64', '128') OR
                            TRIM(T.WTFS) IS NULL) AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_QIT,
               NULL JYL_ZD,
               NULL JYL_CZD,
               NULL JYL_ZTGZR,
               NULL JYL_ZTGZC,
               NULL HLCS_HKD,
               NULL HLCS_USD,
               --新增港股通，20140905
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '114' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_GGT,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '114' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_GGT,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '114' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_GGT,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '114' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_GGT_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '114' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_GGT_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '114' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_GGT,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '114' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_GGT,
               --新增深港通，20160907
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '115' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_SGT,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '115' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_SGT,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '115' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_SGT,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '115' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_SGT_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '115' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_SGT_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '115' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_SGT,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '115' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_SGT,
               --新增科创板，20190626
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '141' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) YJSR_KCB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '141' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) JYJ_KCB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '141' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_KCB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '141' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_KCB_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '141' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_KCB_MC,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '141' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_KCB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '141' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_KCB
          FROM (SELECT A.*,
                       CASE BZ
                           WHEN '1' THEN
                            CJJE
                           WHEN '2' THEN
                            CJJE * VN_HL_HKD
                           WHEN '3' THEN
                            CJJE * VN_HL_USD
                           ELSE
                            0
                       END AS ZS_CJJE
                  FROM DSC_BAS.T_JGMXLS A
                UNION ALL
                SELECT A1.*,
                       CASE BZ
                           WHEN '1' THEN
                            CJJE
                           WHEN '2' THEN
                            CJJE * VN_HL_HKD
                           WHEN '3' THEN
                            CJJE * VN_HL_USD
                           ELSE
                            0
                       END AS ZS_CJJE
                  FROM DSC_HIS.T_JGMXLS_HIS A1) T,
               (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ
                  FROM DSC_CFG.T_ZQPZ_DY D
                 WHERE JB3_ZQPZ <> '112'
                   AND D.IS_VALID = 1) T1,
               (SELECT JYLB, IS_JSJYL, IS_JSYJ
                  FROM DSC_CFG.T_JYLB
                 WHERE IS_JSJYL = '1'
                    OR IS_JSYJ = '1') T2
         WHERE T.CJRQ = I_N_TJRQ
              --申购算   中签还款（只能算单边）
              --默认计算品种交易量的类别：1, 2, 4, 5, 14, 29, 30, 32, 33, 41, 42, 43, 46, 47, 48, 80
           AND T.JYLB IN (SELECT JYLB
                            FROM DSC_CFG.T_JYLB
                           WHERE IS_JSJYL = '1'
                              OR IS_JSYJ = '1')
           AND T.JYS = T1.JYS(+)
           AND T.ZQLB = T1.ZQLB(+)
           AND T.JYLB = T2.JYLB
           AND NOT (T.ZQDM LIKE '002%' AND T.ZQLB = 'A0' AND T.JYS = '1') --排除中小板数据（002开头的有申购 ZQLB=A3 的数据）
         GROUP BY T.KHH, T.YYB, T.CJRQ, T.WTFS, NVL(T1.JB3_ZQPZ, 999);

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计除中小板外的品种数据，插入临时表[DSC_STAT.TMP_T_STAT_KHJYSR_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    ------------------------------------------------------------------

    O_S_NOTE := '【ERROR-10003】';
    --计算中小板
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计中小板品种数据，插入临时表[DSC_STAT.TMP_T_STAT_KHJYSR_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_KHJYSR_R
        (RQ,
         KHH,
         YYB,
         GRJG,
         YJSR_ZXB,
         JYJ_ZXB,
         JYL_ZXB,
         JYL_ZXB_MR,
         JYL_ZXB_MC,
         JYL_ST,
         JYL_ST_MR,
         JYL_ST_MC,
         JYL_XC,
         JYL_CK,
         JYL_RJ,
         JYL_GT,
         JYL_SJ,
         JYL_DH,
         JYL_HLW,
         JYL_YC,
         JYL_YH,
         JYL_QIT,
         JYFY_ZXB,
         JYBS_ZXB,
         JYBS_XC,
         JYBS_CK,
         JYBS_RJ,
         JYBS_GT,
         JYBS_SJ,
         JYBS_DH,
         JYBS_HLW,
         JYBS_YC,
         JYBS_YH,
         JYBS_QIT)
        SELECT T.CJRQ,
               T.KHH,
               T.YYB,
               NULL AS GRJG,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '112' AND T2.IS_JSYJ = '1' THEN
                        S1
                   END) AS YJSR_ZXB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '112' AND T2.IS_JSYJ = '1' THEN
                        T.JYJ
                   END) AS JYJ_ZXB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '112' AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_ZXB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '112' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_ZXB_MR,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '112' AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_ZXB_MC,

               SUM(CASE
                       WHEN T.BZ = '1' AND (T.ZQMC LIKE '%ST%') AND T2.IS_JSJYL = '1' THEN
                        T.CJJE
                   END) JYL_ST,
               SUM(CASE
                       WHEN T.BZ = '1' AND (T.ZQMC LIKE '%ST%') AND T2.IS_JSJYL = '1' AND
                            (T.YSJE < 0 AND T.JYLB <> '2') THEN
                        T.CJJE
                   END) JYL_ST_MR,
               SUM(CASE
                       WHEN T.BZ = '1' AND (T.ZQMC LIKE '%ST%') AND T2.IS_JSJYL = '1' AND
                            (T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2')) THEN
                        T.CJJE
                   END) JYL_ST_MC,
               SUM(CASE
                       WHEN T.WTFS IN ('2', '4', '8', '16') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_XC, --现场为：柜台，磁卡，热键，新增远程
               SUM(CASE
                       WHEN T.WTFS IN ('2') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) AS JYL_CK,
               SUM(CASE
                       WHEN T.WTFS IN ('4') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_RJ,
               SUM(CASE
                       WHEN T.WTFS IN ('8') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_GT,
               SUM(CASE
                       WHEN T.WTFS IN ('64') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_SJ,
               SUM(CASE
                       WHEN T.WTFS IN ('1') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_DH,
               SUM(CASE
                       WHEN T.WTFS IN ('32') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_HLW,
               SUM(CASE
                       WHEN T.WTFS IN ('16') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_YC,
               SUM(CASE
                       WHEN T.WTFS IN ('128') AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_YH,
               SUM(CASE
                       WHEN (T.WTFS NOT IN ('1', '2', '4', '8', '16', '32', '64', '128') OR
                            TRIM(T.WTFS) IS NULL) AND T2.IS_JSJYL = '1' THEN
                        T.ZS_CJJE
                   END) JYL_QIT,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '112' AND T2.IS_JSYJ = '1' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6)
                   END) JYFY_ZXB,
               SUM(CASE
                       WHEN T1.JB3_ZQPZ = '112' AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_ZXB,

               SUM(CASE
                       WHEN T.WTFS IN ('2', '4', '8', '16') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_XC,
               SUM(CASE
                       WHEN T.WTFS IN ('2') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_CK,
               SUM(CASE
                       WHEN T.WTFS IN ('4') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_RJ,
               SUM(CASE
                       WHEN T.WTFS IN ('8') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_GT,
               SUM(CASE
                       WHEN T.WTFS IN ('64') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_SJ,
               SUM(CASE
                       WHEN T.WTFS IN ('1') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_DH,
               SUM(CASE
                       WHEN T.WTFS IN ('32') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_HLW,
               SUM(CASE
                       WHEN T.WTFS IN ('16') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_YC,
               SUM(CASE
                       WHEN T.WTFS IN ('128') AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_YH,
               SUM(CASE
                       WHEN (T.WTFS NOT IN ('1', '2', '4', '8', '16', '32', '64', '128') OR
                            TRIM(T.WTFS) IS NULL) AND T2.IS_JSJYL = '1' THEN
                        1
                       ELSE
                        0
                   END) JYBS_QIT
          FROM (SELECT A.*,
                       CASE BZ
                           WHEN '1' THEN
                            CJJE
                           WHEN '2' THEN
                            CJJE * VN_HL_HKD
                           WHEN '3' THEN
                            CJJE * VN_HL_USD
                           ELSE
                            0
                       END AS ZS_CJJE
                  FROM DSC_BAS.T_JGMXLS A
                UNION ALL
                SELECT A1.*,
                       CASE BZ
                           WHEN '1' THEN
                            CJJE
                           WHEN '2' THEN
                            CJJE * VN_HL_HKD
                           WHEN '3' THEN
                            CJJE * VN_HL_USD
                           ELSE
                            0
                       END AS ZS_CJJE
                  FROM DSC_HIS.T_JGMXLS_HIS A1) T,
               (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ
                  FROM DSC_CFG.T_ZQPZ_DY D
                 WHERE JB3_ZQPZ = '112'
                   AND D.IS_VALID = 1) T1,
               (SELECT JYLB, IS_JSJYL, IS_JSYJ
                  FROM DSC_CFG.T_JYLB
                 WHERE IS_JSJYL = '1'
                    OR IS_JSYJ = '1') T2
         WHERE T.CJRQ = I_N_TJRQ
           AND T.JYLB IN (SELECT JYLB
                            FROM DSC_CFG.T_JYLB
                           WHERE IS_JSJYL = '1'
                              OR IS_JSYJ = '1')
           AND T.JYS = T1.JYS(+)
           AND T.ZQLB = T1.ZQLB(+)
           AND T.JYLB = T2.JYLB
           AND (T.ZQDM LIKE '002%' AND T.ZQLB = 'A0' AND T.JYS = '1')
         GROUP BY T.KHH, T.YYB, T.CJRQ, T.WTFS, NVL(T1.JB3_ZQPZ, 999);

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计中小板品种数据，插入临时表[DSC_STAT.TMP_T_STAT_KHJYSR_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --------------------------------------------

    O_S_NOTE := '【ERROR-10004】';
    --计算 ：7转托转出，9指定，10撤指，15转托转入
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计：7转托转出，9指定，10撤指，15转托转入 的数据，插入临时表[DSC_STAT.TMP_T_STAT_KHJYSR_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_KHJYSR_R
        (RQ, KHH, YYB, JYL_ZD, JYL_CZD, JYL_ZTGZR, JYL_ZTGZC)
        SELECT T.CJRQ,
               T.KHH,
               T.YYB,
               SUM(CASE
                       WHEN T.JYLB = '9' THEN
                        T.CJJE
                   END) AS JYL_ZD,
               SUM(CASE
                       WHEN T.JYLB = '10' THEN
                        T.CJJE
                   END) AS JYL_CZD,
               SUM(CASE
                       WHEN T.JYLB = '15' THEN
                        T.CJJE
                   END) AS JYL_ZTGZR,
               SUM(CASE
                       WHEN T.JYLB = '7' THEN
                        T.CJJE
                   END) AS JYL_ZTGZR
          FROM (SELECT *
                  FROM DSC_BAS.T_JGMXLS
                UNION ALL
                SELECT *
                  FROM DSC_HIS.T_JGMXLS_HIS) T
         WHERE T.CJRQ = VN_TJRQ
           AND T.JYLB IN ('7', '9', '10', '15') -- 7转托转出，9指定，10撤指，15转托转入
         GROUP BY T.KHH, T.YYB, T.CJRQ;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计：7转托转出，9指定，10撤指，15转托转入 的数据，插入临时表[DSC_STAT.TMP_T_STAT_KHJYSR_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10005】';
    --代销基金相关
    --120-认购   122-申购   124-赎回  139-定时定额投资
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计开放式基金品种数据，插入临时表[DSC_STAT.TMP_T_STAT_KHJYSR_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_KHJYSR_R
        (RQ,
         KHH,
         YYB,
         YJSR_DXJJ,
         JYJ_DXJJ, --净佣金,
         JYL_DXJJ, --交易量
         JYL_DXJJ_SG,
         JYL_DXJJ_RG,
         JYL_DXJJ_DSDT,
         JYL_DXJJ_SH,
         JYFY_DXJJ,
         JYBS_DXJJ,
         YJSR_JRCP,
         JYJ_JRCP,
         JYL_JRCP,
         JYL_JRCP_SG,
         JYL_JRCP_RG,
         JYL_JRCP_DSDT,
         JYL_JRCP_SH,
         JYFY_JRCP,
         JYBS_JRCP)
        SELECT T.QRRQ AS RQ,
               KHH,
               YYB,
               SUM(CASE
                       WHEN T.CPFL = '1' THEN
                        SXF
                       ELSE
                        0
                   END) AS YJSR_DXJJ, --佣金
               SUM(CASE
                       WHEN T.CPFL = '1' THEN
                        SXF
                       ELSE
                        0
                   END) AS JYJ_DXJJ, --净佣金
               SUM(CASE
                       WHEN T.CPFL = '1' AND
                            YWDM IN ('122', '123', '124', '125', '139', '142', '130') THEN
                        QRJE
                       ELSE
                        0
                   END) JYL_DXJJ,
               SUM(CASE
                       WHEN T.CPFL = '1' AND YWDM IN ('122', '123') THEN
                        QRJE
                       ELSE
                        0
                   END) JYL_DXJJ_SG,
               SUM(CASE
                       WHEN T.CPFL = '1' AND YWDM IN ('130') THEN
                        QRJE
                       ELSE
                        0
                   END) JYL_DXJJ_RG,
               SUM(CASE
                       WHEN T.CPFL = '1' AND YWDM IN ('139') THEN
                        QRJE
                       ELSE
                        0
                   END) JYL_DXJJ_DSDT,
               SUM(CASE
                       WHEN T.CPFL = '1' AND YWDM IN ('124', '125', '142') THEN
                        QRJE
                       ELSE
                        0
                   END) JYL_DXJJ_SH,
               SUM(CASE
                       WHEN T.CPFL = '1' THEN
                        SXF
                       ELSE
                        0
                   END) AS JYFY_DXJJ, --总交易费用
               SUM(CASE
                       WHEN T.CPFL = '1' AND SXF > 0 THEN
                        1
                       ELSE
                        0
                   END) AS JYBS_DXJJ,
               SUM(CASE
                       WHEN T.CPFL <> '1' THEN
                        SXF
                       ELSE
                        0
                   END) AS YJSR_JRCP, --佣金
               SUM(CASE
                       WHEN T.CPFL <> '1' THEN
                        SXF
                       ELSE
                        0
                   END) AS JYJ_JRCP, --净佣金
               SUM(CASE
                       WHEN T.CPFL <> '1' AND
                            YWDM IN ('122', '123', '124', '125', '139', '142', '130') THEN
                        QRJE
                       ELSE
                        0
                   END) JYL_JRCP,
               SUM(CASE
                       WHEN T.CPFL <> '1' AND YWDM IN ('122', '123') THEN
                        QRJE
                       ELSE
                        0
                   END) JYL_JRCP_SG,
               SUM(CASE
                       WHEN T.CPFL <> '1' AND YWDM IN ('130') THEN
                        QRJE
                       ELSE
                        0
                   END) JYL_JRCP_RG,
               SUM(CASE
                       WHEN T.CPFL <> '1' AND YWDM IN ('139') THEN
                        QRJE
                       ELSE
                        0
                   END) JYL_JRCP_DSDT,
               SUM(CASE
                       WHEN T.CPFL <> '1' AND YWDM IN ('124', '125', '142') THEN
                        QRJE
                       ELSE
                        0
                   END) JYL_JRCP_SH,
               SUM(CASE
                       WHEN T.CPFL <> '1' THEN
                        SXF
                       ELSE
                        0
                   END) AS JYFY_JRCP,
               SUM(CASE
                       WHEN T.CPFL <> '1' AND SXF > 0 THEN
                        1
                       ELSE
                        0
                   END) AS JYBS_JRCP
          FROM (SELECT *
                  FROM DSC_BAS.T_FP_JGMXLS
                UNION ALL
                SELECT *
                  FROM DSC_HIS.T_FP_JGMXLS_HIS) T
         WHERE YWDM IN ('122', '123', '124', '125', '139', '142', '130')
           AND T.QRRQ = VN_TJRQ
         GROUP BY KHH, YYB, T.QRRQ;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计开放式基金品种数据，插入临时表[DSC_STAT.TMP_T_STAT_KHJYSR_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10006】';

    ------------写入结果表-----------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_KHJYSR_R]进行汇总统计，插入目标表[DSC_STAT.T_STAT_KHJYSR_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_STAT_KHJYSR_R
        (RQ,
         KHH,
         YYB,
         GRJG,
         ZSR,
         YJSR,
         YJSR_HAZB,
         YJSR_SAZB,
         YJSR_ZXB,
         YJSR_CYB,
         YJSR_HB,
         YJSR_SB,
         YJSR_SB_A,
         YJSR_SB_B,
         YJSR_FBSJJ,
         YJSR_ETF,
         YJSR_LOF,
         YJSR_SZJJT,
         YJSR_DXJJ,
         YJSR_JRCP,
         YJSR_QZ,
         YJSR_GZ,
         YJSR_GSQYZ,
         YJSR_KZZ,
         YJSR_HG,
         YJSR_SG,
         YJSR_QT,
         JYJ,
         JYJ_HAZB,
         JYJ_SAZB,
         JYJ_ZXB,
         JYJ_CYB,
         JYJ_HB,
         JYJ_SB,
         JYJ_SB_A,
         JYJ_SB_B,
         JYJ_FBSJJ,
         JYJ_ETF,
         JYJ_LOF,
         JYJ_SZJJT,
         JYJ_DXJJ,
         JYJ_JRCP,
         JYJ_QZ,
         JYJ_GZ,
         JYJ_GSQYZ,
         JYJ_KZZ,
         JYJ_HG,
         JYJ_SG,
         JYJ_QT,
         JYL,
         JYL_MR,
         JYL_MC,
         JYL_HAZB,
         JYL_HAZB_MR,
         JYL_HAZB_MC,
         JYL_SAZB,
         JYL_SAZB_MR,
         JYL_SAZB_MC,
         JYL_ZXB,
         JYL_ZXB_MR,
         JYL_ZXB_MC,
         JYL_CYB,
         JYL_CYB_MR,
         JYL_CYB_MC,
         JYL_HB,
         JYL_HB_MR,
         JYL_HB_MC,
         JYL_SB,
         JYL_SB_MR,
         JYL_SB_MC,
         JYL_SB_A,
         JYL_SB_A_MR,
         JYL_SB_A_MC,
         JYL_SB_B,
         JYL_SB_B_MR,
         JYL_SB_B_MC,
         JYL_FBSJJ,
         JYL_FBSJJ_MR,
         JYL_FBSJJ_MC,
         JYL_ETF,
         JYL_ETF_MR,
         JYL_ETF_MC,
         JYL_LOF,
         JYL_LOF_MR,
         JYL_LOF_MC,
         JYL_SZJJT,
         JYL_SZJJT_MR,
         JYL_SZJJT_MC,
         JYL_DXJJ,
         JYL_DXJJ_SG,
         JYL_DXJJ_RG,
         JYL_DXJJ_DSDT,
         JYL_DXJJ_SH,
         JYL_JRCP,
         JYL_JRCP_SG,
         JYL_JRCP_RG,
         JYL_JRCP_DSDT,
         JYL_JRCP_SH,
         JYL_QZ,
         JYL_QZ_MR,
         JYL_QZ_MC,
         JYL_GZ,
         JYL_GZ_MR,
         JYL_GZ_MC,
         JYL_GSQYZ,
         JYL_GSQYZ_MR,
         JYL_GSQYZ_MC,
         JYL_KZZ,
         JYL_KZZ_MR,
         JYL_KZZ_MC,
         JYL_HG,
         JYL_HG_MR,
         JYL_HG_MC,
         JYL_SG,
         JYL_SG_MR,
         JYL_SG_MC,
         JYL_QT,
         JYL_QT_MR,
         JYL_QT_MC,
         JYL_ST,
         JYL_ST_MR,
         JYL_ST_MC,
         JYL_XC,
         JYL_CK,
         JYL_RJ,
         JYL_GT,
         JYL_SJ,
         JYL_DH,
         JYL_HLW,
         JYL_YC,
         JYL_YH,
         JYL_QIT,
         JYFY,
         JYFY_HAZB,
         JYFY_SAZB,
         JYFY_ZXB,
         JYFY_CYB,
         JYFY_HB,
         JYFY_SB,
         JYFY_SB_A,
         JYFY_SB_B,
         JYFY_FBSJJ,
         JYFY_ETF,
         JYFY_LOF,
         JYFY_SZJJT,
         JYFY_DXJJ,
         JYFY_JRCP,
         JYFY_QZ,
         JYFY_GZ,
         JYFY_GSQYZ,
         JYFY_KZZ,
         JYFY_HG,
         JYFY_SG,
         JYFY_QT,
         JYBS,
         JYBS_HAZB,
         JYBS_SAZB,
         JYBS_ZXB,
         JYBS_CYB,
         JYBS_HB,
         JYBS_SB,
         JYBS_SB_A,
         JYBS_SB_B,
         JYBS_FBSJJ,
         JYBS_ETF,
         JYBS_LOF,
         JYBS_SZJJT,
         JYBS_DXJJ,
         JYBS_JRCP,
         JYBS_QZ,
         JYBS_GZ,
         JYBS_GSQYZ,
         JYBS_KZZ,
         JYBS_HG,
         JYBS_SG,
         JYBS_QT,
         JYBS_XC,
         JYBS_CK,
         JYBS_RJ,
         JYBS_GT,
         JYBS_SJ,
         JYBS_DH,
         JYBS_HLW,
         JYBS_YC,
         JYBS_YH,
         JYBS_QIT,
         JYL_ZD,
         JYL_CZD,
         JYL_ZTGZR,
         JYL_ZTGZC,
         HLCS_HKD,
         HLCS_USD,
         FWYJ,
         YJSR_GGT,
         JYJ_GGT,
         JYL_GGT,
         JYL_GGT_MR,
         JYL_GGT_MC,
         JYBS_GGT,
         JYFY_GGT,
         YJSR_SGT,
         JYJ_SGT,
         JYL_SGT,
         JYL_SGT_MR,
         JYL_SGT_MC,
         JYBS_SGT,
         JYFY_SGT,
         YJSR_KCB,
         JYJ_KCB,
         JYL_KCB,
         JYL_KCB_MR,
         JYL_KCB_MC,
         JYBS_KCB,
         JYFY_KCB)
        SELECT RQ,
               A.KHH,
               NVL(B.YYB, 0) AS YYB,
               NVL(B.GRJG, 0) AS GRJG,
               ZSR,
               YJSR,
               YJSR_HAZB,
               YJSR_SAZB,
               YJSR_ZXB,
               YJSR_CYB,
               YJSR_HB,
               YJSR_SB,
               YJSR_SB_A,
               YJSR_SB_B,
               YJSR_FBSJJ,
               YJSR_ETF,
               YJSR_LOF,
               YJSR_SZJJT,
               YJSR_DXJJ,
               YJSR_JRCP,
               YJSR_QZ,
               YJSR_GZ,
               YJSR_GSQYZ,
               YJSR_KZZ,
               YJSR_HG,
               YJSR_SG,
               YJSR_QT,
               JYJ,
               JYJ_HAZB,
               JYJ_SAZB,
               JYJ_ZXB,
               JYJ_CYB,
               JYJ_HB,
               JYJ_SB,
               JYJ_SB_A,
               JYJ_SB_B,
               JYJ_FBSJJ,
               JYJ_ETF,
               JYJ_LOF,
               JYJ_SZJJT,
               JYJ_DXJJ,
               JYJ_JRCP,
               JYJ_QZ,
               JYJ_GZ,
               JYJ_GSQYZ,
               JYJ_KZZ,
               JYJ_HG,
               JYJ_SG,
               JYJ_QT,
               JYL,
               JYL_MR,
               JYL_MC,
               JYL_HAZB,
               JYL_HAZB_MR,
               JYL_HAZB_MC,
               JYL_SAZB,
               JYL_SAZB_MR,
               JYL_SAZB_MC,
               JYL_ZXB,
               JYL_ZXB_MR,
               JYL_ZXB_MC,
               JYL_CYB,
               JYL_CYB_MR,
               JYL_CYB_MC,
               JYL_HB,
               JYL_HB_MR,
               JYL_HB_MC,
               JYL_SB,
               JYL_SB_MR,
               JYL_SB_MC,
               JYL_SB_A,
               JYL_SB_A_MR,
               JYL_SB_A_MC,
               JYL_SB_B,
               JYL_SB_B_MR,
               JYL_SB_B_MC,
               JYL_FBSJJ,
               JYL_FBSJJ_MR,
               JYL_FBSJJ_MC,
               JYL_ETF,
               JYL_ETF_MR,
               JYL_ETF_MC,
               JYL_LOF,
               JYL_LOF_MR,
               JYL_LOF_MC,
               JYL_SZJJT,
               JYL_SZJJT_MR,
               JYL_SZJJT_MC,
               JYL_DXJJ,
               JYL_DXJJ_SG,
               JYL_DXJJ_RG,
               JYL_DXJJ_DSDT,
               JYL_DXJJ_SH,
               JYL_JRCP,
               JYL_JRCP_SG,
               JYL_JRCP_RG,
               JYL_JRCP_DSDT,
               JYL_JRCP_SH,
               JYL_QZ,
               JYL_QZ_MR,
               JYL_QZ_MC,
               JYL_GZ,
               JYL_GZ_MR,
               JYL_GZ_MC,
               JYL_GSQYZ,
               JYL_GSQYZ_MR,
               JYL_GSQYZ_MC,
               JYL_KZZ,
               JYL_KZZ_MR,
               JYL_KZZ_MC,
               JYL_HG,
               JYL_HG_MR,
               JYL_HG_MC,
               JYL_SG,
               JYL_SG_MR,
               JYL_SG_MC,
               JYL_QT,
               JYL_QT_MR,
               JYL_QT_MC,
               JYL_ST,
               JYL_ST_MR,
               JYL_ST_MC,
               JYL_XC,
               JYL_CK,
               JYL_RJ,
               JYL_GT,
               JYL_SJ,
               JYL_DH,
               JYL_HLW,
               JYL_YC,
               JYL_YH,
               JYL_QIT,
               JYFY,
               JYFY_HAZB,
               JYFY_SAZB,
               JYFY_ZXB,
               JYFY_CYB,
               JYFY_HB,
               JYFY_SB,
               JYFY_SB_A,
               JYFY_SB_B,
               JYFY_FBSJJ,
               JYFY_ETF,
               JYFY_LOF,
               JYFY_SZJJT,
               JYFY_DXJJ,
               JYFY_JRCP,
               JYFY_QZ,
               JYFY_GZ,
               JYFY_GSQYZ,
               JYFY_KZZ,
               JYFY_HG,
               JYFY_SG,
               JYFY_QT,
               JYBS,
               JYBS_HAZB,
               JYBS_SAZB,
               JYBS_ZXB,
               JYBS_CYB,
               JYBS_HB,
               JYBS_SB,
               JYBS_SB_A,
               JYBS_SB_B,
               JYBS_FBSJJ,
               JYBS_ETF,
               JYBS_LOF,
               JYBS_SZJJT,
               JYBS_DXJJ,
               JYBS_JRCP,
               JYBS_QZ,
               JYBS_GZ,
               JYBS_GSQYZ,
               JYBS_KZZ,
               JYBS_HG,
               JYBS_SG,
               JYBS_QT,
               JYBS_XC,
               JYBS_CK,
               JYBS_RJ,
               JYBS_GT,
               JYBS_SJ,
               JYBS_DH,
               JYBS_HLW,
               JYBS_YC,
               JYBS_YH,
               JYBS_QIT,
               JYL_ZD,
               JYL_CZD,
               JYL_ZTGZR,
               JYL_ZTGZC,
               VN_HL_HKD HLCS_HKD,
               VN_HL_USD HLCS_USD,
               FWYJ,
               YJSR_GGT,
               JYJ_GGT,
               JYL_GGT,
               JYL_GGT_MR,
               JYL_GGT_MC,
               JYBS_GGT,
               JYFY_GGT,
               YJSR_SGT,
               JYJ_SGT,
               JYL_SGT,
               JYL_SGT_MR,
               JYL_SGT_MC,
               JYBS_SGT,
               JYFY_SGT,
               YJSR_KCB,
               JYJ_KCB,
               JYL_KCB,
               JYL_KCB_MR,
               JYL_KCB_MC,
               JYBS_KCB,
               JYFY_KCB
          FROM (SELECT RQ,
                       KHH,
                       /*YYB,*/
                       SUM(NVL(YJSR_HAZB, 0) + NVL(YJSR_SAZB, 0) + NVL(YJSR_ZXB, 0) +
                           NVL(YJSR_CYB, 0) + NVL(YJSR_HB, 0) * VN_HL_USD +
                           NVL(YJSR_SB, 0) * VN_HL_HKD + NVL(YJSR_SB_A, 0) +
                           NVL(YJSR_SB_B, 0) * VN_HL_USD + NVL(YJSR_FBSJJ, 0) +
                           NVL(YJSR_ETF, 0) + NVL(YJSR_LOF, 0) + NVL(YJSR_SZJJT, 0) +
                           NVL(YJSR_DXJJ, 0) + NVL(YJSR_QZ, 0) + NVL(YJSR_GZ, 0) +
                           NVL(YJSR_GSQYZ, 0) + NVL(YJSR_KZZ, 0) + NVL(YJSR_HG, 0) +
                           NVL(YJSR_SG, 0) + NVL(YJSR_QT, 0) + NVL(YJSR_JRCP, 0) +
                           NVL(YJSR_GGT, 0) + NVL(YJSR_SGT, 0)+ NVL(YJSR_KCB, 0)) AS ZSR,
                       --佣金收入+利差，其中利差在资产表中所以这里的总收入即为佣金收入
                       SUM(NVL(YJSR_HAZB, 0) + NVL(YJSR_SAZB, 0) + NVL(YJSR_ZXB, 0) +
                           NVL(YJSR_CYB, 0) + NVL(YJSR_HB, 0) * VN_HL_USD +
                           NVL(YJSR_SB, 0) * VN_HL_HKD + NVL(YJSR_SB_A, 0) +
                           NVL(YJSR_SB_B, 0) * VN_HL_USD + NVL(YJSR_FBSJJ, 0) +
                           NVL(YJSR_ETF, 0) + NVL(YJSR_LOF, 0) + NVL(YJSR_SZJJT, 0) +
                           NVL(YJSR_DXJJ, 0) + NVL(YJSR_QZ, 0) + NVL(YJSR_GZ, 0) +
                           NVL(YJSR_GSQYZ, 0) + NVL(YJSR_KZZ, 0) + NVL(YJSR_HG, 0) +
                           NVL(YJSR_SG, 0) + NVL(YJSR_QT, 0) + NVL(YJSR_JRCP, 0) +
                           NVL(YJSR_GGT, 0) + NVL(YJSR_SGT, 0)+ NVL(YJSR_KCB, 0)) AS YJSR, --总佣金收入
                       SUM(NVL(YJSR_HAZB, 0)) AS YJSR_HAZB,
                       SUM(NVL(YJSR_SAZB, 0)) AS YJSR_SAZB,
                       SUM(NVL(YJSR_ZXB, 0)) AS YJSR_ZXB,
                       SUM(NVL(YJSR_CYB, 0)) AS YJSR_CYB,
                       SUM(NVL(YJSR_HB, 0)) AS YJSR_HB,
                       SUM(NVL(YJSR_SB, 0)) AS YJSR_SB,
                       SUM(NVL(YJSR_SB_A, 0)) AS YJSR_SB_A,
                       SUM(NVL(YJSR_SB_B, 0)) AS YJSR_SB_B,
                       SUM(NVL(YJSR_FBSJJ, 0)) AS YJSR_FBSJJ,
                       SUM(NVL(YJSR_ETF, 0)) AS YJSR_ETF,
                       SUM(NVL(YJSR_LOF, 0)) AS YJSR_LOF,
                       SUM(NVL(YJSR_SZJJT, 0)) AS YJSR_SZJJT,
                       SUM(NVL(YJSR_DXJJ, 0)) AS YJSR_DXJJ,
                       SUM(NVL(YJSR_JRCP, 0)) AS YJSR_JRCP,
                       SUM(NVL(YJSR_QZ, 0)) AS YJSR_QZ,
                       SUM(NVL(YJSR_GZ, 0)) AS YJSR_GZ,
                       SUM(NVL(YJSR_GSQYZ, 0)) AS YJSR_GSQYZ,
                       SUM(NVL(YJSR_KZZ, 0)) AS YJSR_KZZ,
                       SUM(NVL(YJSR_HG, 0)) AS YJSR_HG,
                       SUM(NVL(YJSR_SG, 0)) AS YJSR_SG,
                       SUM(NVL(YJSR_QT, 0)) AS YJSR_QT,
                       SUM(NVL(JYJ_HAZB, 0)) + SUM(NVL(JYJ_SAZB, 0)) +
                       SUM(NVL(JYJ_ZXB, 0)) + SUM(NVL(JYJ_CYB, 0)) +
                       SUM(NVL(JYJ_HB, 0)) * VN_HL_USD + SUM(NVL(JYJ_SB, 0)) * VN_HL_HKD +
                       SUM(NVL(JYJ_SB_A, 0)) + SUM(NVL(JYJ_SB_B, 0)) * VN_HL_USD +
                       SUM(NVL(JYJ_FBSJJ, 0)) + SUM(NVL(JYJ_ETF, 0)) +
                       SUM(NVL(JYJ_LOF, 0)) + SUM(NVL(JYJ_SZJJT, 0)) +
                       SUM(NVL(JYJ_DXJJ, 0)) + SUM(NVL(JYJ_QZ, 0)) + SUM(NVL(JYJ_GZ, 0)) +
                       SUM(NVL(JYJ_GSQYZ, 0)) + SUM(NVL(JYJ_KZZ, 0)) + SUM(NVL(JYJ_HG, 0)) +
                       SUM(NVL(JYJ_SG, 0)) + SUM(NVL(JYJ_QT, 0) + NVL(JYJ_JRCP, 0)) +
                       SUM(NVL(JYJ_GGT, 0)) + SUM(NVL(JYJ_SGT, 0))+ SUM(NVL(JYJ_KCB, 0)) AS JYJ, --总净佣金
                       SUM(NVL(JYJ_HAZB, 0)) AS JYJ_HAZB,
                       SUM(NVL(JYJ_SAZB, 0)) AS JYJ_SAZB,
                       SUM(NVL(JYJ_ZXB, 0)) AS JYJ_ZXB,
                       SUM(NVL(JYJ_CYB, 0)) AS JYJ_CYB,
                       SUM(NVL(JYJ_HB, 0)) AS JYJ_HB,
                       SUM(NVL(JYJ_SB, 0)) AS JYJ_SB,
                       SUM(NVL(JYJ_SB_A, 0)) AS JYJ_SB_A,
                       SUM(NVL(JYJ_SB_B, 0)) AS JYJ_SB_B,
                       SUM(NVL(JYJ_FBSJJ, 0)) AS JYJ_FBSJJ,
                       SUM(NVL(JYJ_ETF, 0)) AS JYJ_ETF,
                       SUM(NVL(JYJ_LOF, 0)) AS JYJ_LOF,
                       SUM(NVL(JYJ_SZJJT, 0)) AS JYJ_SZJJT,
                       SUM(NVL(JYJ_DXJJ, 0)) AS JYJ_DXJJ,
                       SUM(NVL(JYJ_JRCP, 0)) AS JYJ_JRCP,
                       SUM(NVL(JYJ_QZ, 0)) AS JYJ_QZ,
                       SUM(NVL(JYJ_GZ, 0)) AS JYJ_GZ,
                       SUM(NVL(JYJ_GSQYZ, 0)) AS JYJ_GSQYZ,
                       SUM(NVL(JYJ_KZZ, 0)) AS JYJ_KZZ,
                       SUM(NVL(JYJ_HG, 0)) AS JYJ_HG,
                       SUM(NVL(JYJ_SG, 0)) AS JYJ_SG,
                       SUM(NVL(JYJ_QT, 0)) AS JYJ_QT,
                       SUM(NVL(JYL_HAZB, 0)) + SUM(NVL(JYL_SAZB, 0)) +
                       SUM(NVL(JYL_ZXB, 0)) + SUM(NVL(JYL_CYB, 0)) +
                       SUM(NVL(JYL_HB, 0)) * VN_HL_USD + SUM(NVL(JYL_SB, 0)) * VN_HL_HKD +
                       SUM(NVL(JYL_SB_A, 0)) + SUM(NVL(JYL_SB_B, 0)) * VN_HL_USD +
                       SUM(NVL(JYL_FBSJJ, 0)) + SUM(NVL(JYL_ETF, 0)) +
                       SUM(NVL(JYL_LOF, 0)) + SUM(NVL(JYL_SZJJT, 0)) + SUM(NVL(JYL_QZ, 0)) +
                       SUM(NVL(JYL_GZ, 0)) + SUM(NVL(JYL_GSQYZ, 0)) + SUM(NVL(JYL_KZZ, 0)) +
                       SUM(NVL(JYL_GGT, 0)) + SUM(NVL(JYL_SGT, 0))+SUM(NVL(JYL_KCB, 0)) JYL, --交易量，不算申购，回购，代销基金，金融产品
                       SUM(NVL(JYL_HAZB_MR, 0)) + SUM(NVL(JYL_SAZB_MR, 0)) +
                       SUM(NVL(JYL_ZXB_MR, 0)) + SUM(NVL(JYL_CYB_MR, 0)) +
                       SUM(NVL(JYL_HB_MR, 0)) * VN_HL_USD +
                       SUM(NVL(JYL_SB_MR, 0)) * VN_HL_HKD + SUM(NVL(JYL_SB_A_MR, 0)) +
                       SUM(NVL(JYL_SB_B_MR, 0)) * VN_HL_USD + SUM(NVL(JYL_FBSJJ_MR, 0)) +
                       SUM(NVL(JYL_ETF_MR, 0)) + SUM(NVL(JYL_LOF_MR, 0)) +
                       SUM(NVL(JYL_SZJJT_MR, 0)) + SUM(NVL(JYL_QZ_MR, 0)) +
                       SUM(NVL(JYL_GZ_MR, 0)) + SUM(NVL(JYL_GSQYZ_MR, 0)) +
                       SUM(NVL(JYL_KZZ_MR, 0)) + SUM(NVL(JYL_GGT_MR, 0)) +
                       SUM(NVL(JYL_SGT_MR, 0))+SUM(NVL(JYL_KCB_MR, 0)) AS JYL_MR, --交易量买入
                       SUM(NVL(JYL_HAZB_MC, 0)) + SUM(NVL(JYL_SAZB_MC, 0)) +
                       SUM(NVL(JYL_ZXB_MC, 0)) + SUM(NVL(JYL_CYB_MC, 0)) +
                       SUM(NVL(JYL_HB_MC, 0)) * VN_HL_USD +
                       SUM(NVL(JYL_SB_MC, 0)) * VN_HL_HKD + SUM(NVL(JYL_SB_A_MC, 0)) +
                       SUM(NVL(JYL_SB_B_MC, 0)) * VN_HL_USD + SUM(NVL(JYL_FBSJJ_MC, 0)) +
                       SUM(NVL(JYL_ETF_MC, 0)) + SUM(NVL(JYL_LOF_MC, 0)) +
                       SUM(NVL(JYL_SZJJT_MC, 0)) + SUM(NVL(JYL_QZ_MC, 0)) +
                       SUM(NVL(JYL_GZ_MC, 0)) + SUM(NVL(JYL_GSQYZ_MC, 0)) +
                       SUM(NVL(JYL_KZZ_MC, 0)) + SUM(NVL(JYL_GGT_MC, 0)) +
                       SUM(NVL(JYL_SGT_MC, 0))+SUM(NVL(JYL_KCB_MC, 0)) AS JYL_MC, --交易量卖出
                       SUM(NVL(JYL_HAZB, 0)) AS JYL_HAZB,
                       SUM(NVL(JYL_HAZB_MR, 0)) AS JYL_HAZB_MR,
                       SUM(NVL(JYL_HAZB_MC, 0)) AS JYL_HAZB_MC,
                       SUM(NVL(JYL_SAZB, 0)) AS JYL_SAZB,
                       SUM(NVL(JYL_SAZB_MR, 0)) AS JYL_SAZB_MR,
                       SUM(NVL(JYL_SAZB_MC, 0)) AS JYL_SAZB_MC,
                       SUM(NVL(JYL_ZXB, 0)) AS JYL_ZXB,
                       SUM(NVL(JYL_ZXB_MR, 0)) AS JYL_ZXB_MR,
                       SUM(NVL(JYL_ZXB_MC, 0)) AS JYL_ZXB_MC,
                       SUM(NVL(JYL_CYB, 0)) AS JYL_CYB,
                       SUM(NVL(JYL_CYB_MR, 0)) AS JYL_CYB_MR,
                       SUM(NVL(JYL_CYB_MC, 0)) AS JYL_CYB_MC,
                       SUM(NVL(JYL_HB, 0)) AS JYL_HB,
                       SUM(NVL(JYL_HB_MR, 0)) AS JYL_HB_MR,
                       SUM(NVL(JYL_HB_MC, 0)) AS JYL_HB_MC,
                       SUM(NVL(JYL_SB, 0)) AS JYL_SB,
                       SUM(NVL(JYL_SB_MR, 0)) AS JYL_SB_MR,
                       SUM(NVL(JYL_SB_MC, 0)) AS JYL_SB_MC,
                       SUM(NVL(JYL_SB_A, 0)) AS JYL_SB_A,
                       SUM(NVL(JYL_SB_A_MR, 0)) AS JYL_SB_A_MR,
                       SUM(NVL(JYL_SB_A_MC, 0)) AS JYL_SB_A_MC,
                       SUM(NVL(JYL_SB_B, 0)) AS JYL_SB_B,
                       SUM(NVL(JYL_SB_B_MR, 0)) AS JYL_SB_B_MR,
                       SUM(NVL(JYL_SB_B_MC, 0)) AS JYL_SB_B_MC,
                       SUM(NVL(JYL_FBSJJ, 0)) AS JYL_FBSJJ,
                       SUM(NVL(JYL_FBSJJ_MR, 0)) AS JYL_FBSJJ_MR,
                       SUM(NVL(JYL_FBSJJ_MC, 0)) AS JYL_FBSJJ_MC,
                       SUM(NVL(JYL_ETF, 0)) AS JYL_ETF,
                       SUM(NVL(JYL_ETF_MR, 0)) AS JYL_ETF_MR,
                       SUM(NVL(JYL_ETF_MC, 0)) AS JYL_ETF_MC,
                       SUM(NVL(JYL_LOF, 0)) AS JYL_LOF,
                       SUM(NVL(JYL_LOF_MR, 0)) AS JYL_LOF_MR,
                       SUM(NVL(JYL_LOF_MC, 0)) AS JYL_LOF_MC,
                       SUM(NVL(JYL_SZJJT, 0)) AS JYL_SZJJT,
                       SUM(NVL(JYL_SZJJT_MR, 0)) AS JYL_SZJJT_MR,
                       SUM(NVL(JYL_SZJJT_MC, 0)) AS JYL_SZJJT_MC,
                       SUM(NVL(JYL_DXJJ, 0)) AS JYL_DXJJ,
                       SUM(NVL(JYL_DXJJ_SG, 0)) AS JYL_DXJJ_SG,
                       SUM(NVL(JYL_DXJJ_RG, 0)) AS JYL_DXJJ_RG,
                       SUM(NVL(JYL_DXJJ_DSDT, 0)) AS JYL_DXJJ_DSDT,
                       SUM(NVL(JYL_DXJJ_SH, 0)) AS JYL_DXJJ_SH,
                       SUM(NVL(JYL_JRCP, 0)) AS JYL_JRCP,
                       SUM(NVL(JYL_JRCP_SG, 0)) AS JYL_JRCP_SG,
                       SUM(NVL(JYL_JRCP_RG, 0)) AS JYL_JRCP_RG,
                       SUM(NVL(JYL_JRCP_DSDT, 0)) AS JYL_JRCP_DSDT,
                       SUM(NVL(JYL_JRCP_SH, 0)) AS JYL_JRCP_SH,
                       SUM(NVL(JYL_QZ, 0)) AS JYL_QZ,
                       SUM(NVL(JYL_QZ_MR, 0)) AS JYL_QZ_MR,
                       SUM(NVL(JYL_QZ_MC, 0)) AS JYL_QZ_MC,
                       SUM(NVL(JYL_GZ, 0)) AS JYL_GZ,
                       SUM(NVL(JYL_GZ_MR, 0)) AS JYL_GZ_MR,
                       SUM(NVL(JYL_GZ_MC, 0)) AS JYL_GZ_MC,
                       SUM(NVL(JYL_GSQYZ, 0)) AS JYL_GSQYZ,
                       SUM(NVL(JYL_GSQYZ_MR, 0)) AS JYL_GSQYZ_MR,
                       SUM(NVL(JYL_GSQYZ_MC, 0)) AS JYL_GSQYZ_MC,
                       SUM(NVL(JYL_KZZ, 0)) AS JYL_KZZ,
                       SUM(NVL(JYL_KZZ_MR, 0)) AS JYL_KZZ_MR,
                       SUM(NVL(JYL_KZZ_MC, 0)) AS JYL_KZZ_MC,
                       SUM(NVL(JYL_HG, 0)) AS JYL_HG,
                       SUM(NVL(JYL_HG_MR, 0)) AS JYL_HG_MR,
                       SUM(NVL(JYL_HG_MC, 0)) AS JYL_HG_MC,
                       SUM(NVL(JYL_SG, 0)) AS JYL_SG,
                       SUM(NVL(JYL_SG_MR, 0)) AS JYL_SG_MR,
                       SUM(NVL(JYL_SG_MC, 0)) AS JYL_SG_MC,
                       SUM(NVL(JYL_QT, 0)) AS JYL_QT,
                       SUM(NVL(JYL_QT_MR, 0)) AS JYL_QT_MR,
                       SUM(NVL(JYL_QT_MC, 0)) AS JYL_QT_MC,
                       SUM(NVL(JYL_ST, 0)) AS JYL_ST, --ST交易量
                       SUM(NVL(JYL_ST_MR, 0)) AS JYL_ST_MR,
                       SUM(NVL(JYL_ST_MC, 0)) AS JYL_ST_MC,
                       SUM(NVL(JYL_XC, 0)) AS JYL_XC,
                       SUM(NVL(JYL_CK, 0)) AS JYL_CK,
                       SUM(NVL(JYL_RJ, 0)) AS JYL_RJ,
                       SUM(NVL(JYL_GT, 0)) AS JYL_GT,
                       SUM(NVL(JYL_SJ, 0)) AS JYL_SJ,
                       SUM(NVL(JYL_DH, 0)) AS JYL_DH,
                       SUM(NVL(JYL_HLW, 0)) AS JYL_HLW,
                       SUM(NVL(JYL_YC, 0)) AS JYL_YC,
                       SUM(NVL(JYL_YH, 0)) AS JYL_YH,
                       SUM(NVL(JYL_QIT, 0)) AS JYL_QIT,
                       SUM(NVL(JYFY_HAZB, 0)) + SUM(NVL(JYFY_SAZB, 0)) +
                       SUM(NVL(JYFY_ZXB, 0)) + SUM(NVL(JYFY_CYB, 0)) +
                       SUM(NVL(JYFY_HB, 0)) * VN_HL_USD + SUM(NVL(JYFY_SB, 0)) * VN_HL_HKD +
                       SUM(NVL(JYFY_SB_A, 0)) + SUM(NVL(JYFY_SB_B, 0)) * VN_HL_USD +
                       SUM(NVL(JYFY_FBSJJ, 0)) + SUM(NVL(JYFY_ETF, 0)) +
                       SUM(NVL(JYFY_LOF, 0)) + SUM(NVL(JYFY_SZJJT, 0)) +
                       SUM(NVL(JYFY_DXJJ, 0)) + SUM(NVL(JYFY_QZ, 0)) +
                       SUM(NVL(JYFY_GZ, 0)) + SUM(NVL(JYFY_GSQYZ, 0)) +
                       SUM(NVL(JYFY_KZZ, 0)) + SUM(NVL(JYFY_HG, 0)) + SUM(NVL(JYFY_SG, 0)) +
                       SUM(NVL(JYFY_QT, 0)) + SUM(NVL(JYFY_JRCP, 0)) +
                       SUM(NVL(JYFY_GGT, 0)) + SUM(NVL(JYFY_SGT, 0))+SUM(NVL(JYFY_KCB, 0)) AS JYFY,
                       SUM(NVL(JYFY_HAZB, 0)) AS JYFY_HAZB,
                       SUM(NVL(JYFY_SAZB, 0)) AS JYFY_SAZB,
                       SUM(NVL(JYFY_ZXB, 0)) AS JYFY_ZXB,
                       SUM(NVL(JYFY_CYB, 0)) AS JYFY_CYB,
                       SUM(NVL(JYFY_HB, 0)) AS JYFY_HB,
                       SUM(NVL(JYFY_SB, 0)) AS JYFY_SB,
                       SUM(NVL(JYFY_SB_A, 0)) AS JYFY_SB_A,
                       SUM(NVL(JYFY_SB_B, 0)) AS JYFY_SB_B,
                       SUM(NVL(JYFY_FBSJJ, 0)) AS JYFY_FBSJJ,
                       SUM(NVL(JYFY_ETF, 0)) AS JYFY_ETF,
                       SUM(NVL(JYFY_LOF, 0)) AS JYFY_LOF,
                       SUM(NVL(JYFY_SZJJT, 0)) AS JYFY_SZJJT,
                       SUM(NVL(JYFY_DXJJ, 0)) AS JYFY_DXJJ,
                       SUM(NVL(JYFY_JRCP, 0)) AS JYFY_JRCP,
                       SUM(NVL(JYFY_QZ, 0)) AS JYFY_QZ,
                       SUM(NVL(JYFY_GZ, 0)) AS JYFY_GZ,
                       SUM(NVL(JYFY_GSQYZ, 0)) AS JYFY_GSQYZ,
                       SUM(NVL(JYFY_KZZ, 0)) AS JYFY_KZZ,
                       SUM(NVL(JYFY_HG, 0)) AS JYFY_HG,
                       SUM(NVL(JYFY_SG, 0)) AS JYFY_SG,
                       SUM(NVL(JYFY_QT, 0)) AS JYFY_QT,
                       SUM(NVL(JYBS_HAZB, 0)) + SUM(NVL(JYBS_SAZB, 0)) +
                       SUM(NVL(JYBS_ZXB, 0)) + SUM(NVL(JYBS_CYB, 0)) +
                       SUM(NVL(JYBS_HB, 0)) + SUM(NVL(JYBS_SB, 0)) +
                       SUM(NVL(JYBS_SB_A, 0)) + SUM(NVL(JYBS_SB_B, 0)) +
                       SUM(NVL(JYBS_FBSJJ, 0)) + SUM(NVL(JYBS_ETF, 0)) +
                       SUM(NVL(JYBS_LOF, 0)) + SUM(NVL(JYBS_SZJJT, 0)) +
                       SUM(NVL(JYBS_DXJJ, 0)) + SUM(NVL(JYBS_QZ, 0)) +
                       SUM(NVL(JYBS_GZ, 0)) + SUM(NVL(JYBS_GSQYZ, 0)) +
                       SUM(NVL(JYBS_KZZ, 0)) + SUM(NVL(JYBS_HG, 0)) + SUM(NVL(JYBS_SG, 0)) +
                       SUM(NVL(JYBS_QT, 0)) + SUM(NVL(JYBS_JRCP, 0)) +
                       SUM(NVL(JYBS_GGT, 0)) + SUM(NVL(JYBS_SGT, 0))+SUM(NVL(JYBS_KCB, 0)) AS JYBS,
                       SUM(NVL(JYBS_HAZB, 0)) AS JYBS_HAZB,
                       SUM(NVL(JYBS_SAZB, 0)) AS JYBS_SAZB,
                       SUM(NVL(JYBS_ZXB, 0)) AS JYBS_ZXB,
                       SUM(NVL(JYBS_CYB, 0)) AS JYBS_CYB,
                       SUM(NVL(JYBS_HB, 0)) AS JYBS_HB,
                       SUM(NVL(JYBS_SB, 0)) AS JYBS_SB,
                       SUM(NVL(JYBS_SB_A, 0)) AS JYBS_SB_A,
                       SUM(NVL(JYBS_SB_B, 0)) AS JYBS_SB_B,
                       SUM(NVL(JYBS_FBSJJ, 0)) AS JYBS_FBSJJ,
                       SUM(NVL(JYBS_ETF, 0)) AS JYBS_ETF,
                       SUM(NVL(JYBS_LOF, 0)) AS JYBS_LOF,
                       SUM(NVL(JYBS_SZJJT, 0)) AS JYBS_SZJJT,
                       SUM(NVL(JYBS_DXJJ, 0)) AS JYBS_DXJJ,
                       SUM(NVL(JYBS_JRCP, 0)) AS JYBS_JRCP,
                       SUM(NVL(JYBS_QZ, 0)) AS JYBS_QZ,
                       SUM(NVL(JYBS_GZ, 0)) AS JYBS_GZ,
                       SUM(NVL(JYBS_GSQYZ, 0)) AS JYBS_GSQYZ,
                       SUM(NVL(JYBS_KZZ, 0)) AS JYBS_KZZ,
                       SUM(NVL(JYBS_HG, 0)) AS JYBS_HG,
                       SUM(NVL(JYBS_SG, 0)) AS JYBS_SG,
                       SUM(NVL(JYBS_QT, 0)) AS JYBS_QT,
                       SUM(NVL(JYBS_XC, 0)) AS JYBS_XC,
                       SUM(NVL(JYBS_CK, 0)) AS JYBS_CK,
                       SUM(NVL(JYBS_RJ, 0)) AS JYBS_RJ,
                       SUM(NVL(JYBS_GT, 0)) AS JYBS_GT,
                       SUM(NVL(JYBS_SJ, 0)) AS JYBS_SJ,
                       SUM(NVL(JYBS_DH, 0)) AS JYBS_DH,
                       SUM(NVL(JYBS_HLW, 0)) AS JYBS_HLW,
                       SUM(NVL(JYBS_YC, 0)) AS JYBS_YC,
                       SUM(NVL(JYBS_YH, 0)) AS JYBS_YH,
                       SUM(NVL(JYBS_QIT, 0)) AS JYBS_QIT,
                       SUM(NVL(JYL_ZD, 0)) AS JYL_ZD,
                       SUM(NVL(JYL_CZD, 0)) AS JYL_CZD,
                       SUM(NVL(JYL_ZTGZR, 0)) AS JYL_ZTGZR,
                       SUM(NVL(JYL_ZTGZC, 0)) AS JYL_ZTGZC,
                       SUM(NVL(FWYJ, 0)) AS FWYJ,
                       --增加港股通，20140905
                       SUM(NVL(YJSR_GGT, 0)) AS YJSR_GGT,
                       SUM(NVL(JYJ_GGT, 0)) AS JYJ_GGT,
                       SUM(NVL(JYL_GGT, 0)) AS JYL_GGT,
                       SUM(NVL(JYL_GGT_MR, 0)) AS JYL_GGT_MR,
                       SUM(NVL(JYL_GGT_MC, 0)) AS JYL_GGT_MC,
                       SUM(NVL(JYBS_GGT, 0)) AS JYBS_GGT,
                       SUM(NVL(JYFY_GGT, 0)) AS JYFY_GGT,
                       --增加深港通，20160907
                       SUM(NVL(YJSR_SGT, 0)) AS YJSR_SGT,
                       SUM(NVL(JYJ_SGT, 0)) AS JYJ_SGT,
                       SUM(NVL(JYL_SGT, 0)) AS JYL_SGT,
                       SUM(NVL(JYL_SGT_MR, 0)) AS JYL_SGT_MR,
                       SUM(NVL(JYL_SGT_MC, 0)) AS JYL_SGT_MC,
                       SUM(NVL(JYBS_SGT, 0)) AS JYBS_SGT,
                       SUM(NVL(JYFY_SGT, 0)) AS JYFY_SGT,
                       --增加科创板，20190626
                       SUM(NVL(YJSR_KCB, 0)) AS YJSR_KCB,
                       SUM(NVL(JYJ_KCB, 0)) AS JYJ_KCB,
                       SUM(NVL(JYL_KCB, 0)) AS JYL_KCB,
                       SUM(NVL(JYL_KCB_MR, 0)) AS JYL_KCB_MR,
                       SUM(NVL(JYL_KCB_MC, 0)) AS JYL_KCB_MC,
                       SUM(NVL(JYBS_KCB, 0)) AS JYBS_KCB,
                       SUM(NVL(JYFY_KCB, 0)) AS JYFY_KCB
                  FROM DSC_STAT.TMP_T_STAT_KHJYSR_R
                 GROUP BY KHH, /*YYB,*/ RQ) A,
               DSC_BAS.T_KHXX_JJYW B
         WHERE A.KHH = B.KHH(+);

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_KHJYSR_R]进行汇总统计，插入目标表[DSC_STAT.T_STAT_KHJYSR_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_KHJYSR_R';

    --月初做表分析
    --记录日志明细——开始
    O_S_NOTE := '【ERROR-10007】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '对表[DSC_STAT.T_STAT_KHJYSR_R]' ||
                                                    VS_PART || '分区进行分析！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    PUB_SYS.P_GATHER_STATS(O_N_CODE    => VN_CODE,
                           O_S_NOTE    => VS_NOTE,
                           I_N_TJRQ    => I_N_TJRQ,
                           I_N_MODE    => 'YC',
                           I_S_OWNER   => 'DSC_STAT',
                           I_S_TABNAME => 'T_STAT_KHJYSR_R',
                           I_S_PART    => VS_PART);
    --记录日志明细——结束
    IF VN_CODE = 2 THEN
        VS_NOTE  := '未分析';
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL;
        O_S_NOTE := '运行正常';
    ELSIF VN_CODE = 0 THEN
        VS_NOTE  := '分析完成';
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL;
        O_S_NOTE := '运行正常';
    END IF;

    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '对表[DSC_STAT.T_STAT_KHJYSR_R]' ||
                                                    VS_PART || '进行分析！',
                              I_S_CHANGEDESC     => VS_NOTE,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_KHJYSR_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_KHJYSR_Y(O_N_CODE OUT INT,
                                                     O_S_NOTE OUT VARCHAR2,
                                                     I_N_TJRQ IN INT,
                                                     I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_KHJYSR_Y
         功能简述：   客户交易与收入月统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
              1、净佣金=实收佣金-(一级费用_经手费 +一级费用_证管费+一级费用_过户费+一级费用_结算费+一级费用_风险基金)
              2、通过 应收金额（YSJE）的正负来判断买卖的方向。
              3、代销基金的业务代码120-认购   122-申购   124-赎回  139-定时定额投资

         注意事项：


         数据源：
                 DSC_STAT.T_STAT_KHJYSR_Y   ：客户交易收入月表
                 DSC_CFG.T_HLCS           ：汇率参数

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                    操作
         胡阳明      2012/03/14                  创建
         胡阳明      2013/03/14                  修改：新增服务佣金
         林伟        2013/04/23                  修改：新增远程委托方式交易量
         黄玉钰      2014/06/11                  修改：按客户号汇总之后，关联客户信息表获取营业部，确保一个月一个客户仅有一条记录
         吴邦杰      2014/09/09                  修改：新增港股通业务字段，YJSR_GGT(佣金收入_港股通), JYJ_GGT(净佣金收入_港股通), JYL_GGT(交易量_港股通), JYL_GGT_MR(交易量_港股通_买入),
                                                                           JYL_GGT_MC(交易量_港股通_卖出), JYBS_GGT(交易笔数_港股通)，JYFY_GGT(交易费用_港股通)
         黄玉钰      2014/11/03                  修改：在最后插入时，进行nvl()处理。避免最后数据出现空值
         胡丹丹      2015/09/01                  修改：生成表数据之后进行表分析
         胡丹丹      2015/10/13                  修改：更改表分析部分的日志明细标识
         洪国力      2015/12/11                  修改：新增银行和其他委托方式交易量、交易笔数
         张功德      2016/09/07                  修改：新增深港通业务字段，YJSR_SGT(佣金收入_深港通), JYJ_SGT(净佣金收入_深港通), JYL_SGT(交易量_深港通), JYL_SGT_MR(交易量_深港通_买入),
                                                                           JYL_SGT_MC(交易量_深港通_卖出), JYBS_SGT(交易笔数_深港通)，JYFY_SGT(交易费用_深港通)
         zhangbc     2019/06/27                  修改：新增科创板数据统计
    */
    VN_YF        NUMBER(6) := PUB_SYS.F_GET_DATE(I_N_TJRQ, 2); --月份
    VN_FIRST_DAY NUMBER(8); --每月第一天
    VN_LAST_DAY  NUMBER(8); --每月最后一天
    VN_HL_HKD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_PART      VARCHAR2(15) := 'PY_' || SUBSTR(I_N_TJRQ, 1, 6);
    VN_CODE      NUMBER;
    VS_NOTE      VARCHAR2(500);

BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_KHJYSR_Y';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --期初日期
    -- SELECT MIN(JYR) INTO VN_FIRST_DAY FROM DSC_CFG.T_XTJYR WHERE NY = VN_YF;
    VN_FIRST_DAY := PUB_SYS.F_GET_DATE(I_N_TJRQ, 0);
    --期末日期
    VN_LAST_DAY := I_N_TJRQ;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --重做删除原数据
    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHJYSR_Y]目标分区：=PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        --分区删除
        EXECUTE IMMEDIATE 'ALTER TABLE DSC_STAT.T_STAT_KHJYSR_Y TRUNCATE PARTITION PY_' ||
                          VN_YF || '  UPDATE GLOBAL INDEXES';

        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHJYSR_Y]目标分区：=PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_KHJYSR_Y]表' ||
                                                        VN_YF || '分区已删除！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    O_S_NOTE := '【ERROR-10001】';
    --获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;

    O_S_NOTE := '【ERROR-10002】';
    ------------写入结果表-----------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '表[DSC_STAT.T_STAT_KHJYSR_R]进行汇总统计，插入目标表[DSC_STAT.T_STAT_KHJYSR_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.T_STAT_KHJYSR_Y
        (YF,
         KHH,
         YYB,
         GRJG,
         ZSR,
         YJSR,
         YJSR_HAZB,
         YJSR_SAZB,
         YJSR_ZXB,
         YJSR_CYB,
         YJSR_HB,
         YJSR_SB,
         YJSR_SB_A,
         YJSR_SB_B,
         YJSR_FBSJJ,
         YJSR_ETF,
         YJSR_LOF,
         YJSR_SZJJT,
         YJSR_DXJJ,
         YJSR_JRCP,
         YJSR_QZ,
         YJSR_GZ,
         YJSR_GSQYZ,
         YJSR_KZZ,
         YJSR_HG,
         YJSR_SG,
         YJSR_QT,
         JYJ,
         JYJ_HAZB,
         JYJ_SAZB,
         JYJ_ZXB,
         JYJ_CYB,
         JYJ_HB,
         JYJ_SB,
         JYJ_SB_A,
         JYJ_SB_B,
         JYJ_FBSJJ,
         JYJ_ETF,
         JYJ_LOF,
         JYJ_SZJJT,
         JYJ_DXJJ,
         JYJ_JRCP,
         JYJ_QZ,
         JYJ_GZ,
         JYJ_GSQYZ,
         JYJ_KZZ,
         JYJ_HG,
         JYJ_SG,
         JYJ_QT,
         JYL,
         JYL_MR,
         JYL_MC,
         JYL_HAZB,
         JYL_HAZB_MR,
         JYL_HAZB_MC,
         JYL_SAZB,
         JYL_SAZB_MR,
         JYL_SAZB_MC,
         JYL_ZXB,
         JYL_ZXB_MR,
         JYL_ZXB_MC,
         JYL_CYB,
         JYL_CYB_MR,
         JYL_CYB_MC,
         JYL_HB,
         JYL_HB_MR,
         JYL_HB_MC,
         JYL_SB,
         JYL_SB_MR,
         JYL_SB_MC,
         JYL_SB_A,
         JYL_SB_A_MR,
         JYL_SB_A_MC,
         JYL_SB_B,
         JYL_SB_B_MR,
         JYL_SB_B_MC,
         JYL_FBSJJ,
         JYL_FBSJJ_MR,
         JYL_FBSJJ_MC,
         JYL_ETF,
         JYL_ETF_MR,
         JYL_ETF_MC,
         JYL_LOF,
         JYL_LOF_MR,
         JYL_LOF_MC,
         JYL_SZJJT,
         JYL_SZJJT_MR,
         JYL_SZJJT_MC,
         JYL_DXJJ,
         JYL_DXJJ_SG,
         JYL_DXJJ_RG,
         JYL_DXJJ_DSDT,
         JYL_DXJJ_SH,
         JYL_JRCP,
         JYL_JRCP_SG,
         JYL_JRCP_RG,
         JYL_JRCP_DSDT,
         JYL_JRCP_SH,
         JYL_QZ,
         JYL_QZ_MR,
         JYL_QZ_MC,
         JYL_GZ,
         JYL_GZ_MR,
         JYL_GZ_MC,
         JYL_GSQYZ,
         JYL_GSQYZ_MR,
         JYL_GSQYZ_MC,
         JYL_KZZ,
         JYL_KZZ_MR,
         JYL_KZZ_MC,
         JYL_HG,
         JYL_HG_MR,
         JYL_HG_MC,
         JYL_SG,
         JYL_SG_MR,
         JYL_SG_MC,
         JYL_QT,
         JYL_QT_MR,
         JYL_QT_MC,
         JYL_ST,
         JYL_ST_MR,
         JYL_ST_MC,
         JYL_XC,
         JYL_CK,
         JYL_RJ,
         JYL_GT,
         JYL_SJ,
         JYL_DH,
         JYL_HLW,
         JYL_YC,
         JYL_YH,
         JYL_QIT,
         JYFY,
         JYFY_HAZB,
         JYFY_SAZB,
         JYFY_ZXB,
         JYFY_CYB,
         JYFY_HB,
         JYFY_SB,
         JYFY_SB_A,
         JYFY_SB_B,
         JYFY_FBSJJ,
         JYFY_ETF,
         JYFY_LOF,
         JYFY_SZJJT,
         JYFY_DXJJ,
         JYFY_JRCP,
         JYFY_QZ,
         JYFY_GZ,
         JYFY_GSQYZ,
         JYFY_KZZ,
         JYFY_HG,
         JYFY_SG,
         JYFY_QT,
         JYBS,
         JYBS_HAZB,
         JYBS_SAZB,
         JYBS_ZXB,
         JYBS_CYB,
         JYBS_HB,
         JYBS_SB,
         JYBS_SB_A,
         JYBS_SB_B,
         JYBS_FBSJJ,
         JYBS_ETF,
         JYBS_LOF,
         JYBS_SZJJT,
         JYBS_DXJJ,
         JYBS_JRCP,
         JYBS_QZ,
         JYBS_GZ,
         JYBS_GSQYZ,
         JYBS_KZZ,
         JYBS_HG,
         JYBS_SG,
         JYBS_QT,
         JYBS_XC,
         JYBS_CK,
         JYBS_RJ,
         JYBS_GT,
         JYBS_SJ,
         JYBS_DH,
         JYBS_HLW,
         JYBS_YC,
         JYBS_YH,
         JYBS_QIT,
         JYL_ZD,
         JYL_CZD,
         JYL_ZTGZR,
         JYL_ZTGZC,
         HLCS_HKD,
         HLCS_USD,
         FWYJ,
         YJSR_GGT,
         JYJ_GGT,
         JYL_GGT,
         JYL_GGT_MR,
         JYL_GGT_MC,
         JYBS_GGT,
         JYFY_GGT,
         YJSR_SGT,
         JYJ_SGT,
         JYL_SGT,
         JYL_SGT_MR,
         JYL_SGT_MC,
         JYBS_SGT,
         JYFY_SGT,
         YJSR_KCB,
         JYJ_KCB,
         JYL_KCB,
         JYL_KCB_MR,
         JYL_KCB_MC,
         JYBS_KCB,
         JYFY_KCB)
        SELECT YF,
               B.KHH,
               B.YYB,
               B.GRJG,
               ZSR,
               YJSR,
               YJSR_HAZB,
               YJSR_SAZB,
               YJSR_ZXB,
               YJSR_CYB,
               YJSR_HB,
               YJSR_SB,
               YJSR_SB_A,
               YJSR_SB_B,
               YJSR_FBSJJ,
               YJSR_ETF,
               YJSR_LOF,
               YJSR_SZJJT,
               YJSR_DXJJ,
               YJSR_JRCP,
               YJSR_QZ,
               YJSR_GZ,
               YJSR_GSQYZ,
               YJSR_KZZ,
               YJSR_HG,
               YJSR_SG,
               YJSR_QT,
               JYJ,
               JYJ_HAZB,
               JYJ_SAZB,
               JYJ_ZXB,
               JYJ_CYB,
               JYJ_HB,
               JYJ_SB,
               JYJ_SB_A,
               JYJ_SB_B,
               JYJ_FBSJJ,
               JYJ_ETF,
               JYJ_LOF,
               JYJ_SZJJT,
               JYJ_DXJJ,
               JYJ_JRCP,
               JYJ_QZ,
               JYJ_GZ,
               JYJ_GSQYZ,
               JYJ_KZZ,
               JYJ_HG,
               JYJ_SG,
               JYJ_QT,
               JYL,
               JYL_MR,
               JYL_MC,
               JYL_HAZB,
               JYL_HAZB_MR,
               JYL_HAZB_MC,
               JYL_SAZB,
               JYL_SAZB_MR,
               JYL_SAZB_MC,
               JYL_ZXB,
               JYL_ZXB_MR,
               JYL_ZXB_MC,
               JYL_CYB,
               JYL_CYB_MR,
               JYL_CYB_MC,
               JYL_HB,
               JYL_HB_MR,
               JYL_HB_MC,
               JYL_SB,
               JYL_SB_MR,
               JYL_SB_MC,
               JYL_SB_A,
               JYL_SB_A_MR,
               JYL_SB_A_MC,
               JYL_SB_B,
               JYL_SB_B_MR,
               JYL_SB_B_MC,
               JYL_FBSJJ,
               JYL_FBSJJ_MR,
               JYL_FBSJJ_MC,
               JYL_ETF,
               JYL_ETF_MR,
               JYL_ETF_MC,
               JYL_LOF,
               JYL_LOF_MR,
               JYL_LOF_MC,
               JYL_SZJJT,
               JYL_SZJJT_MR,
               JYL_SZJJT_MC,
               JYL_DXJJ,
               JYL_DXJJ_SG,
               JYL_DXJJ_RG,
               JYL_DXJJ_DSDT,
               JYL_DXJJ_SH,
               JYL_JRCP,
               JYL_JRCP_SG,
               JYL_JRCP_RG,
               JYL_JRCP_DSDT,
               JYL_JRCP_SH,
               JYL_QZ,
               JYL_QZ_MR,
               JYL_QZ_MC,
               JYL_GZ,
               JYL_GZ_MR,
               JYL_GZ_MC,
               JYL_GSQYZ,
               JYL_GSQYZ_MR,
               JYL_GSQYZ_MC,
               JYL_KZZ,
               JYL_KZZ_MR,
               JYL_KZZ_MC,
               JYL_HG,
               JYL_HG_MR,
               JYL_HG_MC,
               JYL_SG,
               JYL_SG_MR,
               JYL_SG_MC,
               JYL_QT,
               JYL_QT_MR,
               JYL_QT_MC,
               JYL_ST,
               JYL_ST_MR,
               JYL_ST_MC,
               JYL_XC,
               JYL_CK,
               JYL_RJ,
               JYL_GT,
               JYL_SJ,
               JYL_DH,
               JYL_HLW,
               JYL_YC,
               JYL_YH,
               JYL_QIT,
               JYFY,
               JYFY_HAZB,
               JYFY_SAZB,
               JYFY_ZXB,
               JYFY_CYB,
               JYFY_HB,
               JYFY_SB,
               JYFY_SB_A,
               JYFY_SB_B,
               JYFY_FBSJJ,
               JYFY_ETF,
               JYFY_LOF,
               JYFY_SZJJT,
               JYFY_DXJJ,
               JYFY_JRCP,
               JYFY_QZ,
               JYFY_GZ,
               JYFY_GSQYZ,
               JYFY_KZZ,
               JYFY_HG,
               JYFY_SG,
               JYFY_QT,
               JYBS,
               JYBS_HAZB,
               JYBS_SAZB,
               JYBS_ZXB,
               JYBS_CYB,
               JYBS_HB,
               JYBS_SB,
               JYBS_SB_A,
               JYBS_SB_B,
               JYBS_FBSJJ,
               JYBS_ETF,
               JYBS_LOF,
               JYBS_SZJJT,
               JYBS_DXJJ,
               JYBS_JRCP,
               JYBS_QZ,
               JYBS_GZ,
               JYBS_GSQYZ,
               JYBS_KZZ,
               JYBS_HG,
               JYBS_SG,
               JYBS_QT,
               JYBS_XC,
               JYBS_CK,
               JYBS_RJ,
               JYBS_GT,
               JYBS_SJ,
               JYBS_DH,
               JYBS_HLW,
               JYBS_YC,
               JYBS_YH,
               JYBS_QIT,
               JYL_ZD,
               JYL_CZD,
               JYL_ZTGZR,
               JYL_ZTGZC,
               HLCS_HKD,
               HLCS_USD,
               FWYJ,
               YJSR_GGT,
               JYJ_GGT,
               JYL_GGT,
               JYL_GGT_MR,
               JYL_GGT_MC,
               JYBS_GGT,
               JYFY_GGT,
               YJSR_SGT,
               JYJ_SGT,
               JYL_SGT,
               JYL_SGT_MR,
               JYL_SGT_MC,
               JYBS_SGT,
               JYFY_SGT,
               YJSR_KCB,
               JYJ_KCB,
               JYL_KCB,
               JYL_KCB_MR,
               JYL_KCB_MC,
               JYBS_KCB,
               JYFY_KCB
          FROM (SELECT VN_YF AS YF,
                       KHH,
                       NVL(SUM(ZSR), 0) ZSR,
                       NVL(SUM(YJSR), 0) YJSR,
                       NVL(SUM(YJSR_HAZB), 0) YJSR_HAZB,
                       NVL(SUM(YJSR_SAZB), 0) YJSR_SAZB,
                       NVL(SUM(YJSR_ZXB), 0) YJSR_ZXB,
                       NVL(SUM(YJSR_CYB), 0) YJSR_CYB,
                       NVL(SUM(YJSR_HB), 0) YJSR_HB,
                       NVL(SUM(YJSR_SB), 0) YJSR_SB,
                       NVL(SUM(YJSR_SB_A), 0) YJSR_SB_A,
                       NVL(SUM(YJSR_SB_B), 0) YJSR_SB_B,
                       NVL(SUM(YJSR_FBSJJ), 0) YJSR_FBSJJ,
                       NVL(SUM(YJSR_ETF), 0) YJSR_ETF,
                       NVL(SUM(YJSR_LOF), 0) YJSR_LOF,
                       NVL(SUM(YJSR_SZJJT), 0) YJSR_SZJJT,
                       NVL(SUM(YJSR_DXJJ), 0) YJSR_DXJJ,
                       NVL(SUM(YJSR_JRCP), 0) YJSR_JRCP,
                       NVL(SUM(YJSR_QZ), 0) YJSR_QZ,
                       NVL(SUM(YJSR_GZ), 0) YJSR_GZ,
                       NVL(SUM(YJSR_GSQYZ), 0) YJSR_GSQYZ,
                       NVL(SUM(YJSR_KZZ), 0) YJSR_KZZ,
                       NVL(SUM(YJSR_HG), 0) YJSR_HG,
                       NVL(SUM(YJSR_SG), 0) YJSR_SG,
                       NVL(SUM(YJSR_QT), 0) YJSR_QT,
                       NVL(SUM(JYJ), 0) JYJ,
                       NVL(SUM(JYJ_HAZB), 0) JYJ_HAZB,
                       NVL(SUM(JYJ_SAZB), 0) JYJ_SAZB,
                       NVL(SUM(JYJ_ZXB), 0) JYJ_ZXB,
                       NVL(SUM(JYJ_CYB), 0) JYJ_CYB,
                       NVL(SUM(JYJ_HB), 0) JYJ_HB,
                       NVL(SUM(JYJ_SB), 0) JYJ_SB,
                       NVL(SUM(JYJ_SB_A), 0) JYJ_SB_A,
                       NVL(SUM(JYJ_SB_B), 0) JYJ_SB_B,
                       NVL(SUM(JYJ_FBSJJ), 0) JYJ_FBSJJ,
                       NVL(SUM(JYJ_ETF), 0) JYJ_ETF,
                       NVL(SUM(JYJ_LOF), 0) JYJ_LOF,
                       NVL(SUM(JYJ_SZJJT), 0) JYJ_SZJJT,
                       NVL(SUM(JYJ_DXJJ), 0) JYJ_DXJJ,
                       NVL(SUM(JYJ_JRCP), 0) JYJ_JRCP,
                       NVL(SUM(JYJ_QZ), 0) JYJ_QZ,
                       NVL(SUM(JYJ_GZ), 0) JYJ_GZ,
                       NVL(SUM(JYJ_GSQYZ), 0) JYJ_GSQYZ,
                       NVL(SUM(JYJ_KZZ), 0) JYJ_KZZ,
                       NVL(SUM(JYJ_HG), 0) JYJ_HG,
                       NVL(SUM(JYJ_SG), 0) JYJ_SG,
                       NVL(SUM(JYJ_QT), 0) JYJ_QT,
                       NVL(SUM(JYL), 0) JYL,
                       NVL(SUM(JYL_MR), 0) JYL_MR,
                       NVL(SUM(JYL_MC), 0) JYL_MC,
                       NVL(SUM(JYL_HAZB), 0) JYL_HAZB,
                       NVL(SUM(JYL_HAZB_MR), 0) JYL_HAZB_MR,
                       NVL(SUM(JYL_HAZB_MC), 0) JYL_HAZB_MC,
                       NVL(SUM(JYL_SAZB), 0) JYL_SAZB,
                       NVL(SUM(JYL_SAZB_MR), 0) JYL_SAZB_MR,
                       NVL(SUM(JYL_SAZB_MC), 0) JYL_SAZB_MC,
                       NVL(SUM(JYL_ZXB), 0) JYL_ZXB,
                       NVL(SUM(JYL_ZXB_MR), 0) JYL_ZXB_MR,
                       NVL(SUM(JYL_ZXB_MC), 0) JYL_ZXB_MC,
                       NVL(SUM(JYL_CYB), 0) JYL_CYB,
                       NVL(SUM(JYL_CYB_MR), 0) JYL_CYB_MR,
                       NVL(SUM(JYL_CYB_MC), 0) JYL_CYB_MC,
                       NVL(SUM(JYL_HB), 0) JYL_HB,
                       NVL(SUM(JYL_HB_MR), 0) JYL_HB_MR,
                       NVL(SUM(JYL_HB_MC), 0) JYL_HB_MC,
                       NVL(SUM(JYL_SB), 0) JYL_SB,
                       NVL(SUM(JYL_SB_MR), 0) JYL_SB_MR,
                       NVL(SUM(JYL_SB_MC), 0) JYL_SB_MC,
                       NVL(SUM(JYL_SB_A), 0) JYL_SB_A,
                       NVL(SUM(JYL_SB_A_MR), 0) JYL_SB_A_MR,
                       NVL(SUM(JYL_SB_A_MC), 0) JYL_SB_A_MC,
                       NVL(SUM(JYL_SB_B), 0) JYL_SB_B,
                       NVL(SUM(JYL_SB_B_MR), 0) JYL_SB_B_MR,
                       NVL(SUM(JYL_SB_B_MC), 0) JYL_SB_B_MC,
                       NVL(SUM(JYL_FBSJJ), 0) JYL_FBSJJ,
                       NVL(SUM(JYL_FBSJJ_MR), 0) JYL_FBSJJ_MR,
                       NVL(SUM(JYL_FBSJJ_MC), 0) JYL_FBSJJ_MC,
                       NVL(SUM(JYL_ETF), 0) JYL_ETF,
                       NVL(SUM(JYL_ETF_MR), 0) JYL_ETF_MR,
                       NVL(SUM(JYL_ETF_MC), 0) JYL_ETF_MC,
                       NVL(SUM(JYL_LOF), 0) JYL_LOF,
                       NVL(SUM(JYL_LOF_MR), 0) JYL_LOF_MR,
                       NVL(SUM(JYL_LOF_MC), 0) JYL_LOF_MC,
                       NVL(SUM(JYL_SZJJT), 0) JYL_SZJJT,
                       NVL(SUM(JYL_SZJJT_MR), 0) JYL_SZJJT_MR,
                       NVL(SUM(JYL_SZJJT_MC), 0) JYL_SZJJT_MC,
                       NVL(SUM(JYL_DXJJ), 0) JYL_DXJJ,
                       NVL(SUM(JYL_DXJJ_SG), 0) JYL_DXJJ_SG,
                       NVL(SUM(JYL_DXJJ_RG), 0) JYL_DXJJ_RG,
                       NVL(SUM(JYL_DXJJ_DSDT), 0) JYL_DXJJ_DSDT,
                       NVL(SUM(JYL_DXJJ_SH), 0) JYL_DXJJ_SH,
                       NVL(SUM(JYL_JRCP), 0) JYL_JRCP,
                       NVL(SUM(JYL_JRCP_SG), 0) JYL_JRCP_SG,
                       NVL(SUM(JYL_JRCP_RG), 0) JYL_JRCP_RG,
                       NVL(SUM(JYL_JRCP_DSDT), 0) JYL_JRCP_DSDT,
                       NVL(SUM(JYL_JRCP_SH), 0) JYL_JRCP_SH,
                       NVL(SUM(JYL_QZ), 0) JYL_QZ,
                       NVL(SUM(JYL_QZ_MR), 0) JYL_QZ_MR,
                       NVL(SUM(JYL_QZ_MC), 0) JYL_QZ_MC,
                       NVL(SUM(JYL_GZ), 0) JYL_GZ,
                       NVL(SUM(JYL_GZ_MR), 0) JYL_GZ_MR,
                       NVL(SUM(JYL_GZ_MC), 0) JYL_GZ_MC,
                       NVL(SUM(JYL_GSQYZ), 0) JYL_GSQYZ,
                       NVL(SUM(JYL_GSQYZ_MR), 0) JYL_GSQYZ_MR,
                       NVL(SUM(JYL_GSQYZ_MC), 0) JYL_GSQYZ_MC,
                       NVL(SUM(JYL_KZZ), 0) JYL_KZZ,
                       NVL(SUM(JYL_KZZ_MR), 0) JYL_KZZ_MR,
                       NVL(SUM(JYL_KZZ_MC), 0) JYL_KZZ_MC,
                       NVL(SUM(JYL_HG), 0) JYL_HG,
                       NVL(SUM(JYL_HG_MR), 0) JYL_HG_MR,
                       NVL(SUM(JYL_HG_MC), 0) JYL_HG_MC,
                       NVL(SUM(JYL_SG), 0) JYL_SG,
                       NVL(SUM(JYL_SG_MR), 0) JYL_SG_MR,
                       NVL(SUM(JYL_SG_MC), 0) JYL_SG_MC,
                       NVL(SUM(JYL_QT), 0) JYL_QT,
                       NVL(SUM(JYL_QT_MR), 0) JYL_QT_MR,
                       NVL(SUM(JYL_QT_MC), 0) JYL_QT_MC,
                       NVL(SUM(JYL_ST), 0) JYL_ST,
                       NVL(SUM(JYL_ST_MR), 0) JYL_ST_MR,
                       NVL(SUM(JYL_ST_MC), 0) JYL_ST_MC,
                       NVL(SUM(JYL_XC), 0) JYL_XC,
                       NVL(SUM(JYL_CK), 0) JYL_CK,
                       NVL(SUM(JYL_RJ), 0) JYL_RJ,
                       NVL(SUM(JYL_GT), 0) JYL_GT,
                       NVL(SUM(JYL_SJ), 0) JYL_SJ,
                       NVL(SUM(JYL_DH), 0) JYL_DH,
                       NVL(SUM(JYL_HLW), 0) JYL_HLW,
                       NVL(SUM(JYL_YC), 0) JYL_YC,
                       NVL(SUM(JYL_YH), 0) JYL_YH,
                       NVL(SUM(JYL_QIT), 0) JYL_QIT,
                       NVL(SUM(JYFY), 0) JYFY,
                       NVL(SUM(JYFY_HAZB), 0) JYFY_HAZB,
                       NVL(SUM(JYFY_SAZB), 0) JYFY_SAZB,
                       NVL(SUM(JYFY_ZXB), 0) JYFY_ZXB,
                       NVL(SUM(JYFY_CYB), 0) JYFY_CYB,
                       NVL(SUM(JYFY_HB), 0) JYFY_HB,
                       NVL(SUM(JYFY_SB), 0) JYFY_SB,
                       NVL(SUM(JYFY_SB_A), 0) JYFY_SB_A,
                       NVL(SUM(JYFY_SB_B), 0) JYFY_SB_B,
                       NVL(SUM(JYFY_FBSJJ), 0) JYFY_FBSJJ,
                       NVL(SUM(JYFY_ETF), 0) JYFY_ETF,
                       NVL(SUM(JYFY_LOF), 0) JYFY_LOF,
                       NVL(SUM(JYFY_SZJJT), 0) JYFY_SZJJT,
                       NVL(SUM(JYFY_DXJJ), 0) JYFY_DXJJ,
                       NVL(SUM(JYFY_JRCP), 0) JYFY_JRCP,
                       NVL(SUM(JYFY_QZ), 0) JYFY_QZ,
                       NVL(SUM(JYFY_GZ), 0) JYFY_GZ,
                       NVL(SUM(JYFY_GSQYZ), 0) JYFY_GSQYZ,
                       NVL(SUM(JYFY_KZZ), 0) JYFY_KZZ,
                       NVL(SUM(JYFY_HG), 0) JYFY_HG,
                       NVL(SUM(JYFY_SG), 0) JYFY_SG,
                       NVL(SUM(JYFY_QT), 0) JYFY_QT,
                       NVL(SUM(JYBS), 0) JYBS,
                       NVL(SUM(JYBS_HAZB), 0) JYBS_HAZB,
                       NVL(SUM(JYBS_SAZB), 0) JYBS_SAZB,
                       NVL(SUM(JYBS_ZXB), 0) JYBS_ZXB,
                       NVL(SUM(JYBS_CYB), 0) JYBS_CYB,
                       NVL(SUM(JYBS_HB), 0) JYBS_HB,
                       NVL(SUM(JYBS_SB), 0) JYBS_SB,
                       NVL(SUM(JYBS_SB_A), 0) JYBS_SB_A,
                       NVL(SUM(JYBS_SB_B), 0) JYBS_SB_B,
                       NVL(SUM(JYBS_FBSJJ), 0) JYBS_FBSJJ,
                       NVL(SUM(JYBS_ETF), 0) JYBS_ETF,
                       NVL(SUM(JYBS_LOF), 0) JYBS_LOF,
                       NVL(SUM(JYBS_SZJJT), 0) JYBS_SZJJT,
                       NVL(SUM(JYBS_DXJJ), 0) JYBS_DXJJ,
                       NVL(SUM(JYBS_JRCP), 0) JYBS_JRCP,
                       NVL(SUM(JYBS_QZ), 0) JYBS_QZ,
                       NVL(SUM(JYBS_GZ), 0) JYBS_GZ,
                       NVL(SUM(JYBS_GSQYZ), 0) JYBS_GSQYZ,
                       NVL(SUM(JYBS_KZZ), 0) JYBS_KZZ,
                       NVL(SUM(JYBS_HG), 0) JYBS_HG,
                       NVL(SUM(JYBS_SG), 0) JYBS_SG,
                       NVL(SUM(JYBS_QT), 0) JYBS_QT,
                       NVL(SUM(JYBS_XC), 0) JYBS_XC,
                       NVL(SUM(JYBS_CK), 0) JYBS_CK,
                       NVL(SUM(JYBS_RJ), 0) JYBS_RJ,
                       NVL(SUM(JYBS_GT), 0) JYBS_GT,
                       NVL(SUM(JYBS_SJ), 0) JYBS_SJ,
                       NVL(SUM(JYBS_DH), 0) JYBS_DH,
                       NVL(SUM(JYBS_HLW), 0) JYBS_HLW,
                       NVL(SUM(JYBS_YC), 0) JYBS_YC,
                       NVL(SUM(JYBS_YH), 0) JYBS_YH,
                       NVL(SUM(JYBS_QIT), 0) JYBS_QIT,
                       NVL(SUM(JYL_ZD), 0) JYL_ZD,
                       NVL(SUM(JYL_CZD), 0) JYL_CZD,
                       NVL(SUM(JYL_ZTGZR), 0) JYL_ZTGZR,
                       NVL(SUM(JYL_ZTGZC), 0) JYL_ZTGZC,
                       VN_HL_HKD AS HLCS_HKD,
                       VN_HL_USD AS HLCS_USD,
                       NVL(SUM(FWYJ), 0) AS FWYJ,
                       --新增港股通，20140905，吴邦杰
                       NVL(SUM(YJSR_GGT), 0) AS YJSR_GGT,
                       NVL(SUM(JYJ_GGT), 0) AS JYJ_GGT,
                       NVL(SUM(JYL_GGT), 0) AS JYL_GGT,
                       NVL(SUM(JYL_GGT_MR), 0) AS JYL_GGT_MR,
                       NVL(SUM(JYL_GGT_MC), 0) AS JYL_GGT_MC,
                       NVL(SUM(JYBS_GGT), 0) AS JYBS_GGT,
                       NVL(SUM(JYFY_GGT), 0) AS JYFY_GGT,
                        --新增深港通，20160907，张功德
                       NVL(SUM(YJSR_SGT), 0) AS YJSR_SGT,
                       NVL(SUM(JYJ_SGT), 0) AS JYJ_SGT,
                       NVL(SUM(JYL_SGT), 0) AS JYL_SGT,
                       NVL(SUM(JYL_SGT_MR), 0) AS JYL_SGT_MR,
                       NVL(SUM(JYL_SGT_MC), 0) AS JYL_SGT_MC,
                       NVL(SUM(JYBS_SGT), 0) AS JYBS_SGT,
                       NVL(SUM(JYFY_SGT), 0) AS JYFY_SGT，
                        --新增科创板，20190627，zhangbc
                       NVL(SUM(YJSR_KCB), 0) AS YJSR_KCB,
                       NVL(SUM(JYJ_KCB), 0) AS JYJ_KCB,
                       NVL(SUM(JYL_KCB), 0) AS JYL_KCB,
                       NVL(SUM(JYL_KCB_MR), 0) AS JYL_KCB_MR,
                       NVL(SUM(JYL_KCB_MC), 0) AS JYL_KCB_MC,
                       NVL(SUM(JYBS_KCB), 0) AS JYBS_KCB,
                       NVL(SUM(JYFY_KCB), 0) AS JYFY_KCB
                  FROM DSC_STAT.T_STAT_KHJYSR_R
                 WHERE RQ BETWEEN VN_FIRST_DAY AND VN_LAST_DAY
                 GROUP BY KHH) A
         INNER JOIN DSC_BAS.T_KHXX_JJYW B
            ON A.KHH = B.KHH;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '表[DSC_STAT.T_STAT_KHJYSR_R]进行汇总统计，插入目标表[DSC_STAT.T_STAT_KHJYSR_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --月初做表分析
    --记录日志明细——开始
    O_S_NOTE := '【ERROR-10003】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '对表[DSC_STAT.T_STAT_KHJYSR_Y]' ||
                                                    VS_PART || '分区进行分析！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    PUB_SYS.P_GATHER_STATS(O_N_CODE    => VN_CODE,
                           O_S_NOTE    => VS_NOTE,
                           I_N_TJRQ    => I_N_TJRQ,
                           I_N_MODE    => 'YC',
                           I_S_OWNER   => 'DSC_STAT',
                           I_S_TABNAME => 'T_STAT_KHJYSR_Y',
                           I_S_PART    => VS_PART);
    --记录日志明细——结束
    IF VN_CODE = 2 THEN
        VS_NOTE  := '未分析';
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL;
        O_S_NOTE := '运行正常';
    ELSIF VN_CODE = 0 THEN
        VS_NOTE  := '分析完成';
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL;
        O_S_NOTE := '运行正常';
    END IF;

    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '对表[DSC_STAT.T_STAT_KHJYSR_Y]' ||
                                                    VS_PART || '进行分析！',
                              I_S_CHANGEDESC     => VS_NOTE,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_KHJYSR_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_KHYJFL_R(O_N_CODE OUT INT,
                                                     O_S_NOTE OUT VARCHAR2,
                                                     I_N_TJRQ IN INT,
                                                     I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   客户费率变动统计
         功能简述：   客户费率变动统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：


         注意事项：


         数据源：
                 DSC_STAT.T_STAT_KHJYSR_R :客户_客户交易收入日统计
                 DSC_STAT.T_STAT_RZRQ_R:融资融券_客户日统计表


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                    操作
         林伟        2013/09/30                  创建
         陈德铸      2013/10/09                  修改：1：除数可能为0的问题
                                                       2：普通账户佣金计算有问题，重复相加
    */
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_HL_HKD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD    DSC_CFG.T_HLCS.GSBL%TYPE;

BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_KHJYSR_R';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --重做删除原数据
    IF I_N_REDO IN (0, 1) THEN
        --初始化时清空T_KHYJFL表数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_KHYJFL]目标表的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.T_KHYJFL';
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_KHYJFL]目标表的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_KHYJFL]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
        --重做删除T_KHYJFL_LS表数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_KHYJFL_LS]目标表的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_KHYJFL_LS T WHERE T.BDRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_KHYJFL_LS]目标表的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_KHYJFL]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
        --初始化数据
    ELSIF I_N_REDO = 2 THEN
        --初始化时清空T_KHYJFL表数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_KHYJFL]目标表的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.T_KHYJFL';
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_KHYJFL]目标表的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_KHYJFL]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
        --重做删除T_KHYJFL_LS表数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_KHYJFL_LS]目标表的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.T_KHYJFL_LS';
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_KHYJFL_LS]目标表的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_KHYJFL]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    O_S_NOTE := '【ERROR-10001-1】';
    --统计普通交易费率数据
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计普通交易费率数据到表[DSC_STAT.T_KHYJFL]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_KHYJFL
        (KHH, FL, RQ, XYBZ)
        SELECT KHH,
               CASE
                   WHEN SUM(T.JYL_HAZB + T.JYL_SAZB + T.JYL_ZXB + T.JYL_CYB + T.JYL_ETF +
                            T.JYL_LOF + T.JYL_FBSJJ + T.JYL_SZJJT + T.JYL_HB * VN_HL_USD +
                            T.JYL_SB * VN_HL_HKD) = 0 THEN
                    0
                   ELSE
                    SUM(T.YJSR_HAZB + T.YJSR_SAZB + T.YJSR_ZXB + T.YJSR_CYB + T.YJSR_ETF +
                        T.YJSR_LOF + T.YJSR_FBSJJ + T.YJSR_SZJJT + T.YJSR_HB * VN_HL_USD +
                        T.YJSR_SB * VN_HL_HKD) /
                    SUM(T.JYL_HAZB + T.JYL_SAZB + T.JYL_ZXB + T.JYL_CYB + T.JYL_ETF +
                        T.JYL_LOF + T.JYL_FBSJJ + T.JYL_SZJJT + T.JYL_HB * VN_HL_USD +
                        T.JYL_SB * VN_HL_HKD)
               END AS FL,
               VN_TJRQ,
               '0' AS XYBZ
          FROM DSC_STAT.T_STAT_KHJYSR_R T
         WHERE T.RQ = VN_TJRQ
           AND (T.YJSR_HAZB + T.YJSR_SAZB + T.YJSR_ZXB) > 5
         GROUP BY KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计普通交易费率数据到表[DSC_STAT.T_KHYJFL]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10001-2】';
    --统计信用交易费率数据
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计信用交易费率数据到表[DSC_STAT.T_KHYJFL]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_KHYJFL
        (KHH, FL, RQ, XYBZ)
        SELECT KHH,
               CASE
                   WHEN SUM(T.JYL) = 0 THEN
                    0
                   ELSE
                    SUM(T.YJ) / SUM(T.JYL)
               END AS FL,
               VN_TJRQ,
               '1' AS XYBZ
          FROM DSC_STAT.T_STAT_RZRQ_R T
         WHERE T.RQ = VN_TJRQ
           AND T.YJ > 5
         GROUP BY KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计信用交易费率数据到表[DSC_STAT.T_KHYJFL]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    -------------------------------------客户费率变动更新--------------------------------------
    O_S_NOTE := '【ERROR-10002-1】';
    --新开客户费率变动
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计新开客户费率到表[DSC_STAT.T_KHYJFL_LS]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_KHYJFL_LS
        (KHH, FL1, FL2, BDRQ, XYBZ)
        SELECT T.KHH, T.FL, T.FL, VN_TJRQ, T.XYBZ
          FROM DSC_STAT.T_KHYJFL T
         WHERE NOT EXISTS (SELECT 1
                  FROM DSC_STAT.T_KHYJFL_LS T1
                 WHERE T.KHH = T1.KHH
                   AND T.XYBZ = T1.XYBZ);
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计新开客户费率到表[DSC_STAT.T_KHYJFL_LS]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10002-2】';
    --存量客户费率变动
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计存量客户费率到表[DSC_STAT.T_KHYJFL_LS]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_KHYJFL_LS
        (KHH, FL1, FL2, BDRQ, XYBZ)
        SELECT A.KHH,
               B.FL2,
               CASE
                   WHEN ABS(B.FL2 - A.FL) < 0.0001 THEN
                    B.FL2
                   ELSE
                    A.FL
               END XYJL,
               VN_TJRQ BDRQ,
               A.XYBZ
          FROM DSC_STAT.T_KHYJFL A,
               DSC_STAT.T_KHYJFL_LS B,
               (SELECT KHH, XYBZ, MAX(BDRQ) BDRQ
                  FROM DSC_STAT.T_KHYJFL_LS
                 GROUP BY KHH, XYBZ) C
         WHERE A.KHH = B.KHH
           AND A.XYBZ = B.XYBZ
           AND B.KHH = C.KHH
           AND B.XYBZ = C.XYBZ
           AND B.BDRQ = C.BDRQ
           AND A.FL <> B.FL2
           AND ABS(B.FL2 - A.FL) >= 0.0001;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计存量客户费率到表[DSC_STAT.T_KHYJFL_LS]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_KHYJFL_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_KHYWQXKTQK(O_N_CODE OUT INT,
                                                       O_S_NOTE OUT VARCHAR2,
                                                       I_N_TJRQ IN INT,
                                                       I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   客户业务权限开通情况统计表
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：

         注意事项：

         数据源：
            1 DSC_BAS.T_GDFJQX  股东附加权限表
            2 DSC_BAS.T_KHXX_RZRQ 客户信息-融资融券
            --3 DSC_BAS.T_JYQXSQ  交易权限申请表
            4 DSC_BAS.T_GDZH  股东账号表
            5 DSC_BAS.T_SO_HYZH  个股期权_合约账户


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                    操作
         黄玉钰      2013/04/03                  新增
         黄玉钰      2013/04/07                  修改
         黄玉钰      2013/05/16                  根据NDSC版本做调整
         黄玉钰      2013/09/26                  修改：新增股票质押回购（股东附加权限110清洗成305）
         胡阳明      2014/03/24                  修改：两融状态，转换有问题修改
         黄玉钰      2014/07/15                  修改：t_gdzh中的jyqx存放的是多个值，使用instr函数判断
         黄玉钰      2014/08/06                  修改：t_gdzh中的jyqx存放的多个值有使用;分隔，修改instr函数的参数值
         吴邦杰      2014/09/16                  修改：增加小微贷
         吴邦杰      2014/10/22                  修改：增加港股通
         胡丹丹      2015/01/06     2.0.0.8      修改：增加个股期权数据,调整从DSC_BAS.T_GDZH表取数的写法
         张功德      2016/09/07                  修改：增加深港通
         黄宏峰      2017/09/12     2.0.0.9      修改：新增分级基金和新三板交易权限写入
         陈誉巧      2018/03/23                  修改：增加深圳个股期权权限写入
         zhangbc     2019/06/27                  修改：新增科创板
		 */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '初始化，清空[DSC_STAT.T_STAT_KHYWQXKTQK]目标表！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理 清空数据
        EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.T_STAT_KHYWQXKTQK';
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '初始化，清空[DSC_STAT.T_STAT_KHYWQXKTQK]目标表',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_KHYWQXKTQK]表已清空',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;
    VN_STEP := VN_STEP + 1;
    --插入统计数据
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计股东帐号（交易权限为权证交易/专业投资者债券的）数据到[DSC_STAT.T_STAT_KHYWQXKTQK]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --查询股东帐号表中交易权限为5/8的数据
    --开通业务权限为110—权证交易/401—专业投资者债券。并记录影响行数
    /*INSERT INTO DSC_STAT.T_STAT_KHYWQXKTQK
    (KHH, YYB, JYS, GDH, KTYWQX, KHRQ, XHRQ, ZT)*/
    --update by hdd 20150226
    INSERT ALL WHEN INSTR
        (';' || JYQX || ';', ';5;') <> 0 THEN INTO DSC_STAT.T_STAT_KHYWQXKTQK
        (KHH, YYB, JYS, GDH, KTYWQX, KHRQ, XHRQ, ZT)
    VALUES
        (KHH, YYB, JYS, GDH, '110', KHRQ, XHRQ, ZT) WHEN INSTR
        (';' || JYQX || ';', ';8;') <> 0 THEN INTO DSC_STAT.T_STAT_KHYWQXKTQK
        (KHH, YYB, JYS, GDH, KTYWQX, KHRQ, XHRQ, ZT)
    VALUES
        (KHH, YYB, JYS, GDH, '401', KHRQ, XHRQ, ZT)
        SELECT A.KHH,
               A.YYB,
               A.JYS,
               A.GDH,
               A.JYQX,
               /*CASE
                   WHEN INSTR(';' || A.JYQX || ';', ';5;') <> 0 THEN
                    '110'
                   ELSE
                    '401'
               END AS KTYWQX,*/
               A.KHRQ,
               NVL(A.XHRQ, 30000000) AS XHRQ, --A.XHRQ,
               A.GDZT AS ZT
          FROM DSC_BAS.T_GDZH A
         WHERE INSTR(';' || A.JYQX || ';', ';5;') <> 0
            OR INSTR(';' || A.JYQX || ';', ';8;') <> 0; --dsc_cfg.t_xtdm 分类代码为：GDJYQX 5-权证交易; 8-债券专业投资
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计股东帐号（交易权限为权证交易/专业投资者债券的）数据到[DSC_STAT.T_STAT_KHYWQXKTQK]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    /*--111—创业板的取数改为从T_GDFJQX中获取
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计交易权限申请（股东交易权限为创业板的）数据到[DSC_STAT.T_STAT_KHYWQXKTQK]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --查询交易权限申请表中股东交易权限为64，处理标志为3的数据
    --开通业务权限为111—创业板。并记录影响行数
    INSERT INTO DSC_STAT.T_STAT_KHYWQXKTQK
        (KHH, YYB, KTYWQX, KHRQ, XHRQ, ZT)
        SELECT A.KHH, A.YYB, '111' AS KTYWQX, A.KSRQ, NULL AS XHRQ, A.CLBZ AS ZT
          FROM DSC_BAS.T_JYQXSQ A
         WHERE A.GDJYQX = '64' --创业板 数据来源于柜台
           AND A.CLBZ = '3';
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计交易权限申请（股东交易权限为创业板的）数据到[DSC_STAT.T_STAT_KHYWQXKTQK]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);*/
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计客户信息-融资融券表数据到[DSC_STAT.T_STAT_KHYWQXKTQK]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --查询客户信息-融资融券的数据，开通业务权限为112—融资融券。并记录影响行数
    INSERT INTO DSC_STAT.T_STAT_KHYWQXKTQK
        (KHH, YYB, JYS, GDH, KTYWQX, KHRQ, XHRQ, ZT)
        SELECT A.KHH,
               A.YYB,
               '' AS JYS,
               '' AS GDH,
               '112' AS KTYWQX,
               A.KHRQ,
               CASE A.ZXRQ --当注销日期为0时取NULL否则取注销日期 为注销日期
                   WHEN 0 THEN
                    30000000 --NULL
                   ELSE
                    NVL(A.ZXRQ, 30000000) --A.ZXRQ,
               END AS XHRQ,
               CASE A.KHZT --当KHZT=5时为0否则为3
                   WHEN '5' THEN
                    '0'
                   ELSE
                    A.KHZT
               END AS ZT
          FROM DSC_BAS.T_KHXX_RZRQ A;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计客户信息-融资融券表数据到[DSC_STAT.T_STAT_KHYWQXKTQK]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计股东附加权限（附加权限为报价回购/约定购回/创业板交易的）数据到[DSC_STAT.T_STAT_KHYWQXKTQK]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --查询股东附加权限表中附加权限为201/101/102的数据:GDFJQX 101-报价回购 102-约定购回 201-创业版交易
    --开通业务权限为101-创业版/301—报价回购/303—上海约定式购回/304—深圳约定式购回。
    INSERT INTO DSC_STAT.T_STAT_KHYWQXKTQK
        (KHH, YYB, JYS, GDH, KTYWQX, KHRQ, XHRQ, ZT)
        SELECT A.KHH,
               A.YYB,
               A.JYS,
               A.GDH,
               CASE
                   WHEN A.GDFJQX = '201' THEN
                    '111'
                   WHEN A.GDFJQX = '117' THEN
                    '115'
                   WHEN A.GDFJQX = '202' THEN
                    '116'
                   WHEN A.GDFJQX = '101' THEN
                    '301'
                   WHEN A.GDFJQX = '106' THEN
                    '305'
                   WHEN A.GDFJQX = '110' THEN --增加小微贷权限，20140916，吴邦杰
                    '306'
                   WHEN A.GDFJQX = '111' THEN
                    '307'
                   WHEN A.GDFJQX = '112' THEN
                    '308'
                   WHEN A.GDFJQX = '102' AND A.JYS = '1' THEN -- A.JYS = '1' 深A
                    '304'
                   WHEN A.GDFJQX = '102' AND A.JYS = '2' THEN -- A.JYS = '2' 沪A
                    '303'
                   WHEN A.GDFJQX = '141' THEN --增加科创板，20190627，zhangbc
                    '141'
               END AS KTYWQX,
               A.KHRQ,
               A.XHRQ,
               TO_CHAR(A.ZT) AS ZT
          FROM DSC_BAS.T_GDFJQX A
         WHERE A.GDFJQX IN ('201', '101', '102', '106', '110', '111', '112', '117', '202', '141');
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计股东附加权限（附加权限为报价回购/约定购回/创业板交易的）数据到[DSC_STAT.T_STAT_KHYWQXKTQK]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --插入统计数据
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计股东帐号（交易所为8、9的）数据到[DSC_STAT.T_STAT_KHYWQXKTQK]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --update by wubangjie ,20141022,添加港股通业务权限
    --update by zgd,20160907,添加深港通业务权限
    --查询股东帐号表中交易所为'8','9'的数据
    --开通业务权限为113 港股通业务,开通业务权限为114 沪港通业务并记录影响行数
    INSERT INTO DSC_STAT.T_STAT_KHYWQXKTQK
        (KHH, YYB, JYS, GDH, KTYWQX, KHRQ, XHRQ, ZT)
        SELECT A.KHH,
               A.YYB,
               A.JYS,
               A.GDH,
               CASE
                   WHEN A.JYS = '8' THEN
                    '113'
                   WHEN A.JYS = '9' THEN
                    '114'
               END AS KTYWQX,
               A.KHRQ,
               NVL(A.XHRQ, 30000000), --A.XHRQ,
               A.GDZT AS ZT
          FROM DSC_BAS.T_GDZH A
         WHERE A.JYS IN ('8', '9');
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计股东帐号（交易所为8、9的）数据到[DSC_STAT.T_STAT_KHYWQXKTQK]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --update by hudandan ,20150106,添加个股期权业务权限
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计[DSC_BAS.T_SO_HYZH]（交易所为2的）数据到[DSC_STAT.T_STAT_KHYWQXKTQK]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --查询客户信息-个股期权的数据，开通业务权限为402—上海个股期权。并记录影响行数
    INSERT INTO DSC_STAT.T_STAT_KHYWQXKTQK
        (KHH, YYB, JYS, GDH, KTYWQX, KHRQ, XHRQ, ZT)
        SELECT A.KHH,
               A.YYB AS YYB,
               A.JYS AS JYS,
               A.GDH AS GDH,
               '402' AS KTYWQX,
               A.DJRQ AS KHRQ,
               CASE A.XHRQ
                   WHEN 0 THEN
                    30000000
                   ELSE
                    NVL(A.XHRQ, 30000000)
               END AS XHRQ,
               A.ZHZT AS ZT
          FROM DSC_BAS.T_SO_HYZH A
         WHERE A.JYS = '2';
    --查询客户信息-个股期权的数据，开通业务权限为403—深圳个股期权。并记录影响行数 20180323
    INSERT INTO DSC_STAT.T_STAT_KHYWQXKTQK
        (KHH, YYB, JYS, GDH, KTYWQX, KHRQ, XHRQ, ZT)
        SELECT A.KHH,
               A.YYB AS YYB,
               A.JYS AS JYS,
               A.GDH AS GDH,
               '403' AS KTYWQX,
               A.DJRQ AS KHRQ,
               CASE A.XHRQ
                   WHEN 0 THEN
                    30000000
                   ELSE
                    NVL(A.XHRQ, 30000000)
               END AS XHRQ,
               A.ZHZT AS ZT
          FROM DSC_BAS.T_SO_HYZH A
         WHERE A.JYS = '1';
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计[DSC_BAS.T_SO_HYZH]（交易所为2的）数据到[DSC_STAT.T_STAT_KHYWQXKTQK]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
END P_STAT_KHYWQXKTQK;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_KHZCFZ(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN INT,
                                                   I_N_REDO IN NUMBER DEFAULT 0) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_KHZCFZ
         功能简述：   客户资产负债
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
                  1.从DSC_CFG.T_FUNDDEBT表中获取需要计算的科目，只计算末级项
                  2.0101-0105从DSC_STAT.T_STAT_KHZC_R中获取
                    0101-现金：证券余额+担保现金_融资融券
                    0102-流通市值：证券市值
                    0103-非流通市值
                    0104-抵押品市值
                    0105-在途资产
                  3.010601/0203从DSC_STAT.T_STAT_KHZCXZMX获取
                    010601-质押式回购融券：修正类型为1/3的修正金额
                    0203-质押式回购融资：修正类型为2的修正金额
                  4.0201-0202从T_STAT_RZRQ_R中获取
                    0201-融资负债
                    0202-融券负债
                  5.如有其他项先不计算
         注意事项：
                  涉及到资产的不能将数据进行累计，取统计日当天的数据

         数据源：
                 DSC_STAT.T_STAT_KHZC_R           ：客户资产日表
                 DSC_STAT.T_STAT_KHZCXZMX         ：客户资产修正明细
                 DSC_STAT.T_STAT_RZRQ_R           ：融资融券统计日表
                 DSC_CFG.T_FUNDDEBT               ：资产负债科目表

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         黄玉钰      2013/05/23                 创建
         黄玉钰      2013/09/30                 修改：010601取修正类型为3的修正金额
    */

    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_USER      VARCHAR2(30);
    VN_HL_HKD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD    DSC_CFG.T_HLCS.GSBL%TYPE;

BEGIN

    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);
    --获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --重做删除原数据
    IF I_N_REDO = 1 THEN
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '清空[DSC_STAT.T_STAT_KHZCFZ]目标表的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.T_STAT_KHZCFZ';
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '清空[DSC_STAT.T_STAT_KHZCFZ]目标表的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_KHZCFZ]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --1.1统计客户资产
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计非债权资产到[DSC_STAT.T_STAT_KHZCFZ]表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT ALL WHEN
        (XJ <> 0) THEN INTO DSC_STAT.T_STAT_KHZCFZ
    VALUES
        (KHH, YYB, '0101', XJ) --0101  现金
    WHEN
        (LTSZ <> 0) THEN INTO DSC_STAT.T_STAT_KHZCFZ
    VALUES
        (KHH, YYB, '0102', LTSZ) --0102  流通市值
    WHEN
        (FLTSZ <> 0) THEN INTO DSC_STAT.T_STAT_KHZCFZ
    VALUES
        (KHH, YYB, '0103', FLTSZ) --0103 非流通市值
    WHEN
        (DYPSZ <> 0) THEN INTO DSC_STAT.T_STAT_KHZCFZ
    VALUES
        (KHH, YYB, '0104', DYPSZ) --0104 抵押品市值
    WHEN
        (ZTZC <> 0) THEN INTO DSC_STAT.T_STAT_KHZCFZ
    VALUES
        (KHH, YYB, '0105', ZTZC) --0105  在途资产
        SELECT KHH,
               YYB,
               SUM(NVL(ZJYE_RMB, 0) + NVL(ZJYE_HKD, 0) * NVL(HLCS_HKD, 0) +
                   NVL(ZJYE_USD, 0) * NVL(HLCS_USD, 0) + NVL(DBXJ_RZRQ, 0)) AS XJ,
               SUM(NVL(ZQSZ_RMB, 0) + NVL(DBGPSZ_RZRQ, 0)) AS LTSZ,
               SUM(NVL(FLTZC, 0)) AS FLTSZ,
               SUM(NVL(DYPSZ, 0)) AS DYPSZ,
               SUM(NVL(ZTZC, 0)) AS ZTZC
          FROM DSC_STAT.T_STAT_KHZC_R
         WHERE RQ = VN_TJRQ
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计非债权资产到[DSC_STAT.T_STAT_KHZCFZ]表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计债权资产到[DSC_STAT.T_STAT_KHZCFZ]表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT ALL WHEN
        (ZYSHGRQ <> 0) THEN INTO DSC_STAT.T_STAT_KHZCFZ
    VALUES
        (KHH, YYB, '010601', ZYSHGRQ) --010601  质押式回购融券
    WHEN
        (ZYSHGRZ <> 0) THEN INTO DSC_STAT.T_STAT_KHZCFZ
    VALUES
        (KHH, YYB, '0203', ZYSHGRZ) --0203  质押式回购融资
        SELECT KHH,
               YYB,
               SUM(CASE XZLB
                       WHEN '3' THEN
                        A.XZJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) AS ZYSHGRQ,
               SUM(CASE XZLB
                       WHEN '2' THEN
                        A.XZJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) AS ZYSHGRZ
          FROM DSC_STAT.T_STAT_KHZCXZMX A
         WHERE XZLB IN ('2', '3')
           AND KSRQ = VN_TJRQ
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计债权资产到[DSC_STAT.T_STAT_KHZCFZ]表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    --1.2统计客户负债
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计客户负债到[DSC_STAT.T_STAT_KHZCFZ]表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT ALL WHEN
        (RZFZ <> 0) THEN INTO DSC_STAT.T_STAT_KHZCFZ
    VALUES
        (KHH, YYB, '0201', RZFZ) --0201 融资负债
    WHEN
        (RQFZ <> 0) THEN INTO DSC_STAT.T_STAT_KHZCFZ
    VALUES
        (KHH, YYB, '0202', RQFZ) --0202 融券负债
        SELECT KHH, YYB, SUM(NVL(RZFZ, 0)) AS RZFZ, SUM(NVL(RQFZ, 0)) AS RQFZ
          FROM DSC_STAT.T_STAT_RZRQ_R
         WHERE RQ = VN_TJRQ
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计客户负债到[DSC_STAT.T_STAT_KHZCFZ]表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_KHZCFZ;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_KHZC_R(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN INT,
                                                   I_N_REDO IN NUMBER DEFAULT 0) IS
  /*-----------------------------------------------------------------------
       项目名称：   NDSC-数据服务中心
       用户名  ：   DSC_STAT
       过程名称：   P_STAT_KHZC_R
       功能简述：   客户资产日表算法
       参数：
                英文名称            中文名称                可能取值
                O_N_CODE            返回代码                0 正常；-1 异常
                O_S_NOTE            返回信息                字符串信息
                I_N_TJRQ            统计日期
                I_N_REDO            0：不重做    1：重做
      返回：

       算法：
              1、市值=(证券数量*交易单位*(最新收盘价+1*最新利息))
              2、SELECT * FROM WH.T_CFG_XTDM WHERE FLDM = 'MMXZ'  取出 BM=8 计算市值
              3、带有币种（或是HB，SB_B）的指标都是保留原币值值：
                 如ZQSZ_USD,ZJYE_USD,ZQSZ_HB...等
                 而关于汇总的指都是经过转人民币值了， 如ZZC HGRZ_DGHJE 等
              4、T_CFG_ZQPZ_DY 表中 BITAND(MMXZ,8)=8 的才计算市值
              5、资金和市值在DSC都体现已经交收的部分，在途的不体现 如：B股
              6、     A.ZQSL * JYDW * (CASE
                          WHEN B.ZXJ = 0 THEN
                           B.ZSP
                          ELSE
                           B.ZXJ
                      END + (1 * B.ZXLX)) AS ZQSZ

              7、关于资产修正的类别说明如下：
                  修正类别    修正类型
                  ------------------------------------------------
                  1           质押入库债券市值
                  2           融资未购回金额
                  3           融券未购回金额
                  4           股票质押证券市值  （+）
                  5           股票质押融入金融   （-）
                  11          (场外基金)提前扣减的（认）申购款
                  12          (场外基金)赎回顺延交收的资金
                  13          (场外基金)认购已确认在途资金
                  14          (场内基金)赎回顺延交收的资金
                  16          (场内基金)认购已确认在途资金
                  21          B股卖出未交收资金
                  22          港股卖出未交收资金
                  23          港股买入未交收资金
                  31          红利未到帐金额
                  32          送股未除权市值
                  33          送股未到帐市值
                  34          配股已缴款未上市市值
               8、总资产：[现金+总市值+非流通市值+抵押品+在途资产+债权资产]


       注意事项：

       数据源：
               DSC_BAS.T_ZJYE          ：资金余额
               DSC_BAS.T_DJSQSZL       ：待交收清算资料
               DSC_BAS.T_FP_DJS        ：基金待交收
               DSC_BAS.T_ZQYE          ：证券余额
               DSC_BAS.T_FP_CPFE       ：基金份额
               DSC_BAS.T_ZJMXLS        ：资金明细流水
               DSC_BAS.T_KHXX_JJYW     ：客户信息-经纪业务
               DSC_STAT.VW_FP_JJJZ     ：基金净值
               DSC_STAT.VW_ZQHQ        ：证券行情
               DSC_CFG.T_ZQPZ_DY       ：证券品种对应
               DSC_CFG.T_HLCS          ：汇率参数
               DSC_CFG.T_XTJYR         ：交易日

       修改记录;
       ------------------------------------------------------------------------
       操作人      操作时间                   操作
       胡阳明      2012/03/14                 创建
       胡阳明      2012/11/27                 修改：资金转入，转出的计算：采用统计层业务参数表的方式
       卢智飞      2012/12/14                 修改：由于一些类别对应中的$问题，需要过滤掉(所以条件中的jylb应该是
                                                    字符而不是数值)
       陈德铸      2013/004/12                修改：资产修正的数据处理不关联汇率参数表
       陈德铸      2013/04/26                 修改：增加非流通资产的计算处理

       胡阳明      2013/05/14                 修改：根据NDSC版本做一些适当的修改。
       林伟        2013/05/20                 修改：修改非流通资产处理，从DSC_BAS.T_ZQYE_FLT，DSC_BAS.T_XY_ZQYE_FLT
                                              DSC_HIS.T_ZQYE_FLT_HIS,DSC_HIS.T_XY_ZQYE_FLT_HIS表去统计
       黄玉钰      2013/06/24                 修改：新增ZQSZ_JRCP的赋值
       黄玉钰      2013/07/19                 修改：注释掉和证券行情表的关联
       胡阳明      2013/09/29                 修改：增加股票质押修正，4和5
       林伟        2013/10/16                 修改；存在一个客户对应多个资金账号，所以在临时表汇总数据时需要添加营业部过滤条件
       林伟        2013/10/17                 修改：临时表汇总数据时是需要根据KHH来汇总
       胡阳明      2013/10/17                 修改：新增CCCB指标
       黄玉钰      2014/05/07                 修改：将DSC_STAT.P_STAT_ZCXZ_MAIN的调用放到调度表中配置
       黄玉钰      2014/06/30                 修改：交易类别为字符串型，需加上引号。否则在某些情况下会报错
       陈德铸      2014/07/23                 修改：增加ZRZQSZ_FRZRQ（从融资融券担保品划入产生的转入市值）、ZCZQSZ_TRZRQ(担保品划出到融资融券账户产生的转出市值)
                                                    修正盈亏计算口径：当日盈亏：本日资产-上日资产-净转入转出资产-(ZRZQSZ_FRZRQ-ZCZQSZ_TRZRQ)
       陈德铸      2014/07/28                 修改：目前ZFZ字段将普通账户和信用账户全部放在一起，在数据使用上非常受限，而且将会引起使用上的误会
                                                    增加ZFZ_RZRQ(总负债_融资融券(融资负债，融券负债))，原先的ZFZ只存放普通账户的负债信息
                                                    这样做是为了使数据更加清晰
                                                    并为后续普通账户小微贷业务上线后，将会产生有普通账户的负债信息
       吴邦杰      20140909                   修改: 增加港股通证券市值
       吴邦杰      20141124                   修改：新增资产修正类别22-港股卖出未交收资金、23-港股买入未交收资金，存于在途资产
       胡丹丹      20150106      2.0.0.9      修改: 增加个股期权总资产、资金余额、证券市值
       金石        20150429                   修改：修改盈亏算法。 存入取出增加 调账转入调账转入 托管转入 托管转出 业务类别 。净资产（总资产-总负债） - 上日净支产 - （存入 - 取出）
       金石        20150430                   修改：修改证券市值_其他统计项，增加类别511。 注：根据修改配置表dsc_cfg.t_zqpz_dy 中的 is_jssz 字段来判断是否统计，1统计、0不统计。
       吴邦杰      20150609                   修改：客户状态为字符串型，需加上引号。否则在某些情况下会报错
       胡丹丹      20150714                   修改：调整个股期权证券市值的算法，权力仓市值取正，义务仓取负
       胡丹丹      20150812                   修改：生成表数据之后进行表分析
       胡丹丹      20151013                   修改：更改表分析部分的日志明细标识
       张功德      20160907                   修改: 增加深港通证券市值
       刘官勤      20161115                   修改: 对于个股期权客户资产计算市值时的正负号进行完善处理
       洪国力      20170410                   修改：新增两网退市与中登上海、中登深圳开放式基金证券市值
       林振明      20180108                   修改: 修正港币和美元未交收资金数据，与资金余额一起
       林振铭      20180526                   修改，跟老系统保持一致，不去控制是否计算持仓品种的市值
       zhangbc     20190627                   修改：新增科创板数据统计
  */

  VN_JYR       NUMBER(8) := I_N_TJRQ; --交易日
  VN_HL_HKD    DSC_CFG.T_HLCS.GSBL%TYPE;
  VN_HL_USD    DSC_CFG.T_HLCS.GSBL%TYPE;
  VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
  VN_LOGID     INT; --LOG 表记录ID
  VN_ROWCOUNT  INT; --记录数
  VN_STEP      INT; --动作步数
  VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
  VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
  VS_USER      VARCHAR2(30);
  VN_T_DATE    NUMBER(8) := DSC_CFG.F_GET_JYR_DATE(VN_TJRQ, -1); --T-1日
  VS_PART      VARCHAR2(15) := 'PY_' || SUBSTR(I_N_TJRQ, 1, 6);
  VN_CODE      NUMBER;
  VS_NOTE      VARCHAR2(500);

BEGIN

  --变量初始化
  O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
  O_S_NOTE := '运行正常';
  VS_USER  := 'DSC_STAT';
  SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
  --获取ETL过程的编号
  VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                      I_S_PROC_NAME => VS_PROC_NAME);
  VN_STEP    := 0;

  --记录日志
  PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                     VN_LOGID,
                     VS_USER,
                     VS_PROC_NAME,
                     I_N_TJRQ,
                     1,
                     '正在运行',
                     I_N_REDO,
                     0);

  --重做删除原数据
  --月分区日资产无法做分区删除
  IF I_N_REDO = 1 THEN
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZC_R]目标表，日期：=' ||
                                                    I_N_TJRQ || '的数据！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    DELETE DSC_STAT.T_STAT_KHZC_R WHERE RQ = I_N_TJRQ;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZC_R]目标表，日期：=' ||
                                                    I_N_TJRQ || '的数据！',
                              I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_KHZC_R]表删除' ||
                                                    VN_ROWCOUNT || '条记录！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
  END IF;

  ----------清空临时表------------------
  VN_STEP := VN_STEP + 1;
  --记录日志明细——开始
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => NULL,
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => 1,
                            I_S_RETNOTE        => '正在运行！',
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 0);
  EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_KHZC_R';
  --记录日志明细——结束
  O_S_NOTE := '运行正常';
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => '[DSC_STAT.TMP_T_STAT_KHZC_R]表已清空',
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => O_N_CODE,
                            I_S_RETNOTE        => O_S_NOTE,
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 1);

  O_S_NOTE := '【ERROR-10000-1】';
  --获取汇率
  --港币
  SELECT A.GSBL
    INTO VN_HL_HKD
    FROM DSC_CFG.T_HLCS A
   WHERE A.BZ = '2'
     AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
  --美元
  SELECT A.GSBL
    INTO VN_HL_USD
    FROM DSC_CFG.T_HLCS A
   WHERE A.BZ = '3'
     AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
  /*
      O_S_NOTE := '【ERROR-10000】';
      VN_STEP  := VN_STEP + 1;
      --记录日志明细——开始
      PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                I_N_LOGDETAILID    => VN_STEP,
                                I_S_USER           => VS_USER,
                                I_S_ACTIONDESC     => '调度资产修正ETL：P_STAT_ZCXZ_MAIN',
                                I_S_CHANGEDESC     => NULL,
                                I_N_TJRQ           => VN_TJRQ,
                                I_N_RETCODE        => 1,
                                I_S_RETNOTE        => '正在运行！',
                                I_S_FLAG           => I_N_REDO,
                                I_N_INSERTORUPDATE => 0);
      --调度资金修正
      DSC_STAT.P_STAT_ZCXZ_MAIN(O_N_CODE => O_N_CODE,
                                O_S_NOTE => O_S_NOTE,
                                I_N_TJRQ => VN_TJRQ,
                                I_N_REDO => I_N_REDO);
      --记录日志明细——结束
      O_S_NOTE := '运行正常';
      PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                I_N_LOGDETAILID    => VN_STEP,
                                I_S_USER           => VS_USER,
                                I_S_ACTIONDESC     => '调度资产修正ETL：P_STAT_ZCXZ_MAIN',
                                I_S_CHANGEDESC     => 'ETL调度成功！',
                                I_N_TJRQ           => VN_TJRQ,
                                I_N_RETCODE        => O_N_CODE,
                                I_S_RETNOTE        => O_S_NOTE,
                                I_S_FLAG           => I_N_REDO,
                                I_N_INSERTORUPDATE => 1);
  */
  O_S_NOTE := '【ERROR-10001】';
  VN_STEP  := VN_STEP + 1;
  --记录日志明细——开始
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计资产修正相关指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => NULL,
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => 1,
                            I_S_RETNOTE        => '正在运行！',
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 0);

  --获取资产修正的相关指标值
  INSERT /*+ APPEND*/
  INTO TMP_T_STAT_KHZC_R
    (RQ, KHH, YYB, ZTZC, ZQZC, DYPSZ, SZXZJE, ZFZ)
    SELECT I_N_TJRQ AS RQ,
           KHH,
           YYB,
           SUM(CASE
                 WHEN XZLB IN ('11', '12', '13', '14', '15', '22', '23') THEN --20141124,吴邦杰，新增资产修正类别22，23
                  A.XZJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                 ELSE
                  0
               END) AS ZTZC, --在途资产(主要指交收规则引起的未入资产)
           SUM(CASE
                 WHEN XZLB IN ('3') THEN
                  A.XZJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                 ELSE
                  0
               END) AS ZQZC, --  债权资产(包括：质押式回购融券，报价回购融资，转融通出借)
           SUM(CASE
                 WHEN XZLB IN ('1', '4') THEN
                  A.XZJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                 ELSE
                  0
               END) AS DYPSZ, --抵押品市值（包括：质押入库债券市值,  股票质押回购市值）
           SUM(CASE
                 WHEN A.XZLB IN ('31', '32', '33', '34') THEN
                  A.XZJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                 ELSE
                  0
               END) AS SZXZJE, -- 市值修正金额(主要包括分红扩股、配股的修正)
           SUM(CASE
                 WHEN A.XZLB IN ('2', '5') THEN
                  A.XZJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                 ELSE
                  0
               END) AS ZFZ --   总负债：这里取值为 质押式回购融资，股票质押回购融资金额
      FROM DSC_STAT.T_STAT_KHZCXZMX A
     WHERE A.KSRQ = VN_TJRQ
     GROUP BY KHH, YYB;
  VN_ROWCOUNT := SQL%ROWCOUNT;
  COMMIT;
  --记录日志明细——结束
  O_S_NOTE := '运行正常';
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计资产修正相关指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => O_N_CODE,
                            I_S_RETNOTE        => O_S_NOTE,
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 1);

  /*
  O_S_NOTE := '【ERROR-10001-2】';
  VN_STEP  := VN_STEP + 1;
  --记录日志明细——开始
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计抵押债券的市值修正指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => NULL,
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => 1,
                            I_S_RETNOTE        => '正在运行！',
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 0);
  --抵押债券的市值修正
  INSERT \*+ APPEND*\
  INTO TMP_T_STAT_KHZC_R
      (RQ,
       KHH,
       YYB,
       ZQSZ_GZ, --证券市值_国债
       ZQSZ_GSQYZ --证券市值_公司企业债
       )
      SELECT I_N_TJRQ AS RQ,
             KHH,
             YYB,
             SUM(CASE
                     WHEN (A.ZQDM LIKE '0%') OR (A.ZQDM LIKE '130%') OR (A.ZQDM LIKE '10%') OR
                          (A.ZQDM LIKE '888880%') THEN
                      A.XZJE
                     ELSE
                      0
                 END) AS ZQSZ_GZ,
             SUM(CASE
                     WHEN (A.ZQDM LIKE '12%') OR (A.ZQDM LIKE '11%') THEN
                      A.XZJE
                     ELSE
                      0
                 END) AS ZQSZ_GSQYZ
        FROM DSC_STAT.T_STAT_KHZCXZMX A
       WHERE A.XZLB = 1
         AND A.KSRQ = VN_TJRQ
       GROUP BY KHH, YYB;
  VN_ROWCOUNT := SQL%ROWCOUNT;
  COMMIT;
  --记录日志明细——结束
  O_S_NOTE := '运行正常';
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计抵押债券的市值修正指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => O_N_CODE,
                            I_S_RETNOTE        => O_S_NOTE,
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 1);*/

  -------------获取融资融券的相关统计信息---------------------
  O_S_NOTE := '【ERROR-10001-3】';
  VN_STEP  := VN_STEP + 1;
  --记录日志明细——开始
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计融资融券的指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => NULL,
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => 1,
                            I_S_RETNOTE        => '正在运行！',
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 0);
  -- 获取两融的相关指标数据
  INSERT /*+ APPEND*/
  INTO TMP_T_STAT_KHZC_R
    (RQ,
     KHH,
     YYB,
     ZZC_RZRQ,
     DBXJ_RZRQ,
     DBGPSZ_RZRQ,
     ZFZ_RZRQ, --MOD BY CHENDEZHU  AT 20140724  将这里原先插入ZFZ字段改为插入到ZFZ_RZRQ，专门存储融资融券负债数据
     ZCZQSZ_TRZRQ,
     ZRZQSZ_FRZRQ)
    SELECT I_N_TJRQ AS RQ,
           KHH,
           YYB,
           SUM(ZZC) AS ZZC_RZRQ, --总资产_融资融券
           SUM(ZJYE) AS DBXJ_RZRQ, --担保现金_融资融券
           SUM(ZQSZ) AS DBGPSZ_RZRQ, -- 担保股票市值_融资融券
           SUM(ZFZ) AS ZFZ_RZRQ, -- 总负债（包括：融资负债，融券负债，利息负债） --MOD BY CHENDEZHU AT 20140729
           SUM(ZRSZ) AS ZCZQSZ_TRZRQ, --对于普通账户而言，融资融券账户发生转入动作，就是普通账户担保品划出动作 ADD BY CHENDEZHU AT 20140723
           SUM(ZCSZ) AS ZRZQSZ_FRZRQ --对于普通账户而言，融资融券账户发生转出动作，就是普通账户担保品返回动作 ADD BY CHENDEZHU AT 20140723
      FROM DSC_STAT.T_STAT_RZRQ_R
     WHERE RQ = VN_TJRQ
     GROUP BY RQ, KHH, YYB;

  VN_ROWCOUNT := SQL%ROWCOUNT;
  COMMIT;
  --记录日志明细——结束
  O_S_NOTE := '运行正常';
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计融资融券的指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => O_N_CODE,
                            I_S_RETNOTE        => O_S_NOTE,
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 1);

  O_S_NOTE := '【ERROR-10002】';
  VN_STEP  := VN_STEP + 1;
  --记录日志明细——开始
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计资金余额指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => NULL,
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => 1,
                            I_S_RETNOTE        => '正在运行！',
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 0);
  -- 计算资金余额
  INSERT /*+ APPEND*/
  INTO TMP_T_STAT_KHZC_R
    (RQ, KHH, YYB, ZJYE_RMB, ZJYE_HKD, ZJYE_USD)
    SELECT I_N_TJRQ AS RQ,
           KHH,
           YYB,
           SUM(CASE
                 WHEN BZ = '1' THEN
                  ZHYE
                 ELSE
                  0
               END) AS ZJYE_RMB,
           SUM(CASE
                 WHEN BZ = '2' THEN
                  ZHYE
                 ELSE
                  0
               END) AS ZJYE_HKD,
           SUM(CASE
                 WHEN BZ = '3' THEN
                  ZHYE
                 ELSE
                  0
               END) AS ZJYE_USD
      FROM (SELECT RQ, KHH, YYB, ZHYE, BZ
              FROM DSC_BAS.T_ZJYE
            UNION ALL
            SELECT RQ, KHH, YYB, ZHYE, BZ
              FROM DSC_HIS.T_ZJYELS
              --20180108  林振明  修正外币未交收资金余额
            union all
            select rq, khh, yyb, b.ysje_2, b.bz
              from dsc_bas.t_djsqszl b
             where b.jylb in (1, 2)
               and bz in (2, 3)
            union all
            select rq, khh, yyb, b.ysje_2, b.bz
              from dsc_his.t_djsqszl_his b
             where b.jylb in (1, 2)
               and bz in (2, 3)) A
     WHERE A.RQ = VN_TJRQ
     GROUP BY KHH, YYB;
  VN_ROWCOUNT := SQL%ROWCOUNT;
  COMMIT;
  --记录日志明细——结束
  O_S_NOTE := '运行正常';
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计资金余额指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => O_N_CODE,
                            I_S_RETNOTE        => O_S_NOTE,
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 1);

  --计算 证券市值 从T_BAS_ZQYELS取出证券余额*当天收盘价
  --DSC_CFG.T_ZQPZ_DY证券品种对应关系
  /*
  证券品种：
           110 沪A主板
           111 深A主板
           112 中小板
           113 创业板
           121 沪B
           122 深B
           131 三板A
           132 三板B
           211 封闭式基金
           221 ETF
           231 LOF
           232 上证基金通
           233 代销基金(ofs)
           311 权证
           411 国债(地方债合并到国债里)
           431 公司企业债
           441 可转债
           511 回购
           611 申购
           999 其他
  */

  O_S_NOTE := '【ERROR-10006】';
  VN_STEP  := VN_STEP + 1;
  --记录日志明细——开始
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计除中小板外的市值指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => NULL,
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => 1,
                            I_S_RETNOTE        => '正在运行！',
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 0);
  -- 除中小板，场外开放式基金外的板块数据
  INSERT /*+ APPEND*/
  INTO DSC_STAT.TMP_T_STAT_KHZC_R
    (RQ,
     KHH,
     YYB,
     ZQSZ_HAZB,
     ZQSZ_SAZB,
     ZQSZ_CYB,
     ZQSZ_HB,
     ZQSZ_SB,
     ZQSZ_SB_A,
     ZQSZ_SB_B,
     ZQSZ_FBSJJ,
     ZQSZ_ETF,
     ZQSZ_LOF,
     ZQSZ_SZJJT,
     ZQSZ_QZ,
     ZQSZ_GZ,
     ZQSZ_GSQYZ,
     ZQSZ_KZZ,
     ZQSZ_SG,
     ZQSZ_QT,
     CCCB,
     ZQSZ_GGT,
     ZQSZ_SGT,
     ZQSZ_LWTS,
     ZQSZ_KCB)
    SELECT I_N_TJRQ AS RQ,
           KHH,
           YYB,
           SUM(CASE
                 WHEN T.ZQPZ = '110' THEN --沪A主板
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_HAZB,

           SUM(CASE
                 WHEN T.ZQPZ = '111' THEN --深A主板
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_SAZB,

           SUM(CASE
                 WHEN T.ZQPZ = '113' THEN --创业板
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_CYB,
           SUM(CASE
                 WHEN T.ZQPZ = '121' THEN --沪B
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_HB,
           SUM(CASE
                 WHEN T.ZQPZ = '122' THEN --深B
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_SB,
           SUM(CASE
                 WHEN T.ZQPZ = '131' THEN --三板A
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_SB_A,
           SUM(CASE
                 WHEN T.ZQPZ = '132' THEN --三板B
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_SB_B,
           SUM(CASE
                 WHEN T.ZQPZ = '211' THEN --封闭式基金
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_FBSJJ,
           SUM(CASE
                 WHEN T.ZQPZ = '221' THEN --ETF
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_ETF,
           SUM(CASE
                 WHEN T.ZQPZ = '231' THEN --LOF
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_LOF,
           SUM(CASE
                 WHEN T.ZQPZ = '232' THEN --上证基金通
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_SZJJT,
           SUM(CASE
                 WHEN T.ZQPZ = '311' THEN --权证
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_QZ,
           SUM(CASE
                 WHEN T.ZQPZ = '411' THEN --国债
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_GZ,
           SUM(CASE
                 WHEN T.ZQPZ = '431' THEN --公司企业债
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_GSZ,
           SUM(CASE
                 WHEN T.ZQPZ = '441' THEN --可转债
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_KZZ,
           SUM(CASE
                 WHEN T.ZQPZ = '611' THEN --申购
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_SG,
           SUM(CASE
                 WHEN T.ZQPZ IN ('999', '511') THEN --其它   511 为回购，dsc_cfg.t_zqpz_dy 表中 is_jssz为1的时候统计，0则不统计 ，根据现场需要自行修改
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_QT,
           SUM(CASE
                 WHEN BZ = '2' THEN
                  T.CCCB * VN_HL_HKD
                 WHEN BZ = '3' THEN
                  T.CCCB * VN_HL_USD
                 ELSE
                  T.CCCB
               END) AS CCCB,
           SUM(CASE
                 WHEN T.ZQPZ = '114' THEN --港股通
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_GGT,
           SUM(CASE
                 WHEN T.ZQPZ = '115' THEN --深港通
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_SGT,
           SUM(CASE
                 WHEN T.ZQPZ IN ('131', '132') AND
                      SUBSTR(ZQDM, 1, 3) IN ('400', '420') THEN --两网退市
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_LWTS,
           SUM(CASE
                 WHEN T.ZQPZ = '141' THEN --科创板
                  ZQSZ
                 ELSE
                  0
               END) AS ZQSZ_KCB
      FROM (SELECT A.KHH,
                   A.YYB,
                   A.BZ,
                   A.JYS,
                   A.ZQDM,
                   ZXSZ AS ZQSZ, --市值=证券数量*交易单位*(最新收盘价+1*最新利息)
                   NVL(C.JB3_ZQPZ, 999) AS ZQPZ,
                   A.LJYK,
                   A.CCCB
              FROM (SELECT RQ,
                           KHH,
                           YYB,
                           ZQDM,
                           JYS,
                           ZQLB,
                           ZXSZ,
                           LJYK,
                           CCCB,
                           BZ
                      FROM DSC_BAS.T_ZQYE
                    UNION ALL
                    SELECT RQ,
                           KHH,
                           YYB,
                           ZQDM,
                           JYS,
                           ZQLB,
                           ZXSZ,
                           0 AS LJYK,
                           CCCB,
                           BZ
                      FROM DSC_HIS.T_ZQYELS) A,
                   --(SELECT * FROM DSC_STAT.VW_ZQHQ WHERE RQ = VN_TJRQ) B,
                   (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ
                      FROM DSC_CFG.T_ZQPZ_DY D
                     WHERE D.JB3_ZQPZ <> '112'
                     --  AND IS_JSSZ = 1
                     ) C
             WHERE A.RQ = VN_TJRQ
                  -- AND A.ZQDM = B.ZQDM
                  -- AND A.JYS = B.JYS
               AND A.ZQLB = C.ZQLB
               AND A.JYS = C.JYS
               AND NOT (A.ZQDM LIKE '002%' AND A.ZQLB = 'A0' AND A.JYS = '1') --排除中小板数据（002开头的有申购 ZQLB=A3 的数据）
            ) T
     GROUP BY KHH, YYB;
  VN_ROWCOUNT := SQL%ROWCOUNT;
  COMMIT;
  --记录日志明细——结束
  O_S_NOTE := '运行正常';
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计除中小板外的市值指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => O_N_CODE,
                            I_S_RETNOTE        => O_S_NOTE,
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 1);

  O_S_NOTE := '【ERROR-10007】';
  VN_STEP  := VN_STEP + 1;
  --记录日志明细——开始
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计中小板的市值指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => NULL,
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => 1,
                            I_S_RETNOTE        => '正在运行！',
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 0);
  -- 中小板市值
  INSERT /*+ APPEND*/
  INTO TMP_T_STAT_KHZC_R
    (RQ, KHH, YYB, ZQSZ_ZXB, CCCB)
    SELECT I_N_TJRQ,
           A.KHH,
           A.YYB,
           SUM(A.ZXSZ) AS ZQSZ_ZXB,
           SUM(CASE
                 WHEN BZ = '2' THEN
                  CCCB * VN_HL_HKD
                 WHEN BZ = '3' THEN
                  CCCB * VN_HL_USD
                 ELSE
                  CCCB
               END) --市值=证券数量*交易单位*(最新收盘价+1*最新利息)
      FROM (SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, LJYK, CCCB, BZ
              FROM DSC_BAS.T_ZQYE
            UNION ALL
            SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, 0 AS LJYK, CCCB, BZ
              FROM DSC_HIS.T_ZQYELS) A
    --,(SELECT * FROM DSC_STAT.VW_ZQHQ WHERE RQ = VN_TJRQ) B
     WHERE A.RQ = VN_TJRQ
          --AND A.ZQDM = B.ZQDM
          --AND A.JYS = B.JYS
       AND A.ZQLB = 'A0'
       AND A.JYS = '1'
       AND A.ZQDM LIKE '002%'
     GROUP BY A.KHH, A.YYB;
  VN_ROWCOUNT := SQL%ROWCOUNT;
  COMMIT;
  --记录日志明细——结束
  O_S_NOTE := '运行正常';
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计中小板的市值指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => O_N_CODE,
                            I_S_RETNOTE        => O_S_NOTE,
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 1);

  O_S_NOTE := '【ERROR-10008】';
  VN_STEP  := VN_STEP + 1;
  --记录日志明细——开始
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计非流通资产指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => NULL,
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => 1,
                            I_S_RETNOTE        => '正在运行！',
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 0);
  --非流通资产
  INSERT /*+ APPEND*/
  INTO TMP_T_STAT_KHZC_R
    (RQ, KHH, YYB, FLTZC)
    SELECT I_N_TJRQ,
           A.KHH,
           A.YYB,
           SUM(CASE
                 WHEN A.BZ = 1 THEN
                  A.ZXSZ
                 WHEN A.BZ = 2 THEN
                  A.ZXSZ * VN_HL_HKD
                 WHEN A.BZ = 3 THEN
                  A.ZXSZ * VN_HL_USD
               END) AS FLTZC --市值=证券数量*交易单位*(最新收盘价+1*最新利息)
      FROM (SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, BZ
              FROM DSC_BAS.T_ZQYE_FLT
            UNION ALL
            SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, BZ
              FROM DSC_HIS.T_ZQYE_FLT_HIS
            UNION ALL
            SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, BZ
              FROM DSC_BAS.T_XY_ZQYE_FLT
            UNION ALL
            SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, BZ
              FROM DSC_HIS.T_XY_ZQYE_FLT_HIS) A
     WHERE A.RQ = VN_TJRQ
     GROUP BY A.KHH, A.YYB;
  VN_ROWCOUNT := SQL%ROWCOUNT;
  COMMIT;
  --记录日志明细——结束
  O_S_NOTE := '运行正常';
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计非流通资产指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => O_N_CODE,
                            I_S_RETNOTE        => O_S_NOTE,
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 1);

  O_S_NOTE := '【ERROR-10009】';
  VN_STEP  := VN_STEP + 1;
  --记录日志明细——开始
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计开放式基金市值指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => NULL,
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => 1,
                            I_S_RETNOTE        => '正在运行！',
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 0);
  --场外开放式基金市值
  INSERT /*+ APPEND*/
  INTO TMP_T_STAT_KHZC_R
    (RQ, KHH, YYB, ZQSZ_DXJJ, ZQSZ_JRCP, ZQSZ_ZDOFS, CCCB)
    SELECT I_N_TJRQ AS RQ,
           A.KHH,
           A.YYB,
           SUM(CASE
                 WHEN A.CPFL = '1' THEN
                  ZXSZ
                 ELSE
                  0
               END) AS ZQSZ_DXJJ,
           SUM(CASE
                 WHEN A.CPFL <> '1' THEN
                  ZXSZ
                 ELSE
                  0
               END) AS ZQSZ_JRCP,
           SUM(CASE
                 WHEN A.JRJGDM IN ('98', '99') THEN
                  ZXSZ
                 ELSE
                  0
               END) AS ZQSZ_ZDOFS,
           SUM(CASE
                 WHEN BZ = '2' THEN
                  CCCB * VN_HL_HKD
                 WHEN BZ = '3' THEN
                  CCCB * VN_HL_USD
                 ELSE
                  CCCB
               END)
      FROM (SELECT RQ, KHH, YYB, CPDM, ZXSZ, CCCB, BZ, CPFL, JRJGDM
              FROM DSC_BAS.T_FP_CPFE
            UNION ALL
            SELECT RQ, KHH, YYB, CPDM, ZXSZ, CCCB, BZ, CPFL, JRJGDM
              FROM DSC_HIS.T_FP_CPFE_HIS) A --,DSC_CFG.T_JRCPDM B
     WHERE A.RQ = VN_TJRQ
    --AND A.CPDM = B.CPDM
    --AND B.CPFL = 1
     GROUP BY KHH, YYB;
  VN_ROWCOUNT := SQL%ROWCOUNT;
  COMMIT;
  --记录日志明细——结束
  O_S_NOTE := '运行正常';
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计开放式基金市值指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => O_N_CODE,
                            I_S_RETNOTE        => O_S_NOTE,
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 1);

  --理财产品市值
  --暂时放空

  O_S_NOTE := '【ERROR-10011-1】';
  VN_STEP  := VN_STEP + 1;
  --记录日志明细——开始
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计资金转入转出指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => NULL,
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => 1,
                            I_S_RETNOTE        => '正在运行！',
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 0);
  --资金转入转出
  --业务科目为：102，101开头的
  INSERT /*+ APPEND*/
  INTO TMP_T_STAT_KHZC_R
    (RQ,
     KHH,
     YYB,
     CRJE_RMB, --存入金额-人民币
     CRJE_HKD, --存入金额-港币
     CRJE_USD, --存入金额-美元
     QCJE_RMB, --取出金额-人民币
     QCJE_HKD, --取出金额-港币
     QCJE_USD) --取出金额-美元
    SELECT RQ,
           KHH,
           YYB,
           --101存入金额
           SUM(CASE
                 WHEN YWKM IN (SELECT C.PARAM_VALUE
                                 FROM T_PARAM_VALUE C
                                WHERE C.PARAM_KIND = '01') AND BZ = '1' THEN
                  SRJE - FCJE
                 ELSE
                  0
               END) AS CRJE_RMB,
           SUM(CASE
                 WHEN YWKM IN (SELECT C.PARAM_VALUE
                                 FROM T_PARAM_VALUE C
                                WHERE C.PARAM_KIND = '01') AND BZ = '2' THEN
                  SRJE - FCJE
                 ELSE
                  0
               END) AS CRJE_HKD,
           SUM(CASE
                 WHEN YWKM IN (SELECT C.PARAM_VALUE
                                 FROM T_PARAM_VALUE C
                                WHERE C.PARAM_KIND = '01') AND BZ = '3' THEN
                  SRJE - FCJE
                 ELSE
                  0
               END) AS CRJE_USD,
           --102取出金额
           SUM(CASE
                 WHEN YWKM IN (SELECT C.PARAM_VALUE
                                 FROM T_PARAM_VALUE C
                                WHERE C.PARAM_KIND = '02') AND BZ = '1' THEN
                  FCJE - SRJE
                 ELSE
                  0
               END) AS QCJE_RMB,
           SUM(CASE
                 WHEN YWKM IN (SELECT C.PARAM_VALUE
                                 FROM T_PARAM_VALUE C
                                WHERE C.PARAM_KIND = '02') AND BZ = '2' THEN
                  FCJE - SRJE
                 ELSE
                  0
               END) AS QCJE_HKD,
           SUM(CASE
                 WHEN YWKM IN (SELECT C.PARAM_VALUE
                                 FROM T_PARAM_VALUE C
                                WHERE C.PARAM_KIND = '02') AND BZ = '3' THEN
                  FCJE - SRJE
                 ELSE
                  0
               END) AS QCJE_USD
      FROM (SELECT RQ, KHH, YYB, YWKM, BZ, FCJE, SRJE
              FROM DSC_BAS.T_ZJMXLS
            UNION ALL
            SELECT RQ, KHH, YYB, YWKM, BZ, FCJE, SRJE
              FROM DSC_HIS.T_ZJMXLS_HIS)
     WHERE RQ = I_N_TJRQ
          --AND (YWKM LIKE '102%' OR YWKM LIKE '101%')
       AND YWKM IN (SELECT C.PARAM_VALUE
                      FROM T_PARAM_VALUE C
                     WHERE C.PARAM_KIND IN ('01', '02'))
     GROUP BY RQ, KHH, YYB;
  VN_ROWCOUNT := SQL%ROWCOUNT;
  COMMIT;
  --记录日志明细——结束
  O_S_NOTE := '运行正常';
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计资金转入转出指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => O_N_CODE,
                            I_S_RETNOTE        => O_S_NOTE,
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 1);

  O_S_NOTE := '【ERROR-10011】';
  VN_STEP  := VN_STEP + 1;
  --记录日志明细——开始
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计市值转入转出及盈亏指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => NULL,
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => 1,
                            I_S_RETNOTE        => '正在运行！',
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 0);
  --转入市值，转出市值,卖出盈亏
  --2:卖出 , 7:转托转出,   9:指定,    10:撤指,    15:转托转入)
  INSERT /*+ APPEND*/
  INTO TMP_T_STAT_KHZC_R
    (RQ,
     KHH,
     YYB,
     ZD_RMB,
     ZD_USD,
     ZTGZR_RMB,
     ZTGZR_HKD,
     CZD_RMB,
     CZD_USD,
     ZTGZC_RMB,
     ZTGZC_HKD,
     ZRSZ_QT,
     ZCSZ_QT)
    SELECT T.CJRQ AS RQ,
           T.KHH,
           T.YYB,
           SUM(CASE
                 WHEN T.JYLB IN ('9') AND BZ = '1' THEN
                  T.CJJE
               END) ZD_RMB, --指定_人民币
           SUM(CASE
                 WHEN T.JYLB IN ('9') AND BZ = '3' THEN
                  T.CJJE
               END) ZD_USD, --指定_美元
           SUM(CASE
                 WHEN T.JYLB IN ('15') AND BZ = '1' THEN
                  T.CJJE
               END) ZTGZR_RMB, --转转托管转入_人民币
           SUM(CASE
                 WHEN T.JYLB IN ('15') AND BZ = '2' THEN
                  T.CJJE
               END) ZTGZR_HKD, --转托管转入_港币
           SUM(CASE
                 WHEN T.JYLB IN ('10') AND BZ = '1' THEN
                  T.CJJE
               END) CZD_RMB, --撤指定_人民币
           SUM(CASE
                 WHEN T.JYLB IN ('10') AND BZ = '3' THEN
                  T.CJJE
               END) CZD_USD, --撤指定_美元
           SUM(CASE
                 WHEN T.JYLB IN ('7') AND BZ = '1' THEN
                  T.CJJE
               END) ZTGZC_RMB, --转托管转出_人民币
           SUM(CASE
                 WHEN T.JYLB IN ('7') AND BZ = '2' THEN
                  T.CJJE
               END) AS ZTGZC_HKD, --转托管转出_港币
           SUM(CASE
                 WHEN T.JYLB IN ('18') AND BZ = '1' THEN --1 18托管转入 19 托管转入 20 调账转入 21 调账转出
                  T.CJJE
                 WHEN T.JYLB IN ('18') AND BZ = '2' THEN
                  T.CJJE * VN_HL_HKD
                 WHEN T.JYLB IN ('18') AND BZ = '3' THEN
                  T.CJJE * VN_HL_USD
                 WHEN T.JYLB IN ('20') AND BZ = '1' THEN
                  T.CJJE
                 WHEN T.JYLB IN ('20') AND BZ = '2' THEN
                  T.CJJE * VN_HL_HKD
                 WHEN T.JYLB IN ('20') AND BZ = '3' THEN
                  T.CJJE * VN_HL_USD
               END) ZRSZ_QT, --其他转入
           SUM(CASE
                 WHEN T.JYLB IN ('19') AND BZ = '1' THEN
                  T.CJJE
                 WHEN T.JYLB IN ('19') AND BZ = '2' THEN
                  T.CJJE * VN_HL_HKD
                 WHEN T.JYLB IN ('19') AND BZ = '3' THEN
                  T.CJJE * VN_HL_USD
                 WHEN T.JYLB IN ('21') AND BZ = '1' THEN
                  T.CJJE
                 WHEN T.JYLB IN ('21') AND BZ = '2' THEN
                  T.CJJE * VN_HL_HKD
                 WHEN T.JYLB IN ('21') AND BZ = '3' THEN
                  T.CJJE * VN_HL_USD
               END) ZCSZ_QT --其他转出
      FROM (SELECT KHH, YYB, CJRQ, BZ, JYLB, CJJE, BCYK
              FROM DSC_BAS.T_JGMXLS
            UNION ALL
            SELECT KHH, YYB, CJRQ, BZ, JYLB, CJJE, BCYK
              FROM DSC_HIS.T_JGMXLS_HIS) T
     WHERE T.CJRQ = I_N_TJRQ
       AND T.JYLB IN ('7', '9', '10', '15', '18', '19', '20', '21')
     GROUP BY T.CJRQ, T.KHH, T.YYB;
  VN_ROWCOUNT := SQL%ROWCOUNT;
  COMMIT;
  --记录日志明细——结束
  O_S_NOTE := '运行正常';
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计市值转入转出及盈亏指标到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => O_N_CODE,
                            I_S_RETNOTE        => O_S_NOTE,
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 1);

  O_S_NOTE := '【ERROR-10012】';
  VN_STEP  := VN_STEP + 1;
  --记录日志明细——开始
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计上日资产到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => NULL,
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => 1,
                            I_S_RETNOTE        => '正在运行！',
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 0);
  --上日资产
  INSERT /*+ APPEND*/
  INTO TMP_T_STAT_KHZC_R
    (RQ, KHH, YYB, SRZZC, SRZFZ)
    SELECT VN_TJRQ AS RQ, KHH, YYB, ZZC AS SRZZC, ZFZ AS SRSFZ
      FROM DSC_STAT.T_STAT_KHZC_R
     WHERE RQ = VN_T_DATE;
  VN_ROWCOUNT := SQL%ROWCOUNT;
  COMMIT;
  --记录日志明细——结束
  O_S_NOTE := '运行正常';
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计上日资产到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => O_N_CODE,
                            I_S_RETNOTE        => O_S_NOTE,
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 1);

  O_S_NOTE := '【ERROR-10013】';
  VN_STEP  := VN_STEP + 1;
  --记录日志明细——开始
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计个股期权资金余额到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => NULL,
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => 1,
                            I_S_RETNOTE        => '正在运行！',
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 0);
  --上日资产
  INSERT /*+ APPEND*/
  INTO TMP_T_STAT_KHZC_R
    (RQ, KHH, YYB, ZJYE_GGQQ)
    SELECT I_N_TJRQ AS RQ,
           KHH,
           YYB,
           SUM(CASE
                 WHEN BZ = '2' THEN
                  ZHYE * VN_HL_HKD
                 WHEN BZ = '3' THEN
                  ZHYE * VN_HL_USD
                 ELSE
                  ZHYE
               END) AS ZJYE
      FROM (SELECT RQ, KHH, YYB, ZHYE, BZ
              FROM DSC_BAS.T_SO_ZJYE
            UNION ALL
            SELECT RQ, KHH, YYB, ZHYE, BZ FROM DSC_HIS.T_SO_ZJYELS) A
     WHERE A.RQ = VN_TJRQ
     GROUP BY KHH, YYB;
  VN_ROWCOUNT := SQL%ROWCOUNT;
  COMMIT;
  --记录日志明细——结束
  O_S_NOTE := '运行正常';
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计个股期权资金余额到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => O_N_CODE,
                            I_S_RETNOTE        => O_S_NOTE,
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 1);

  O_S_NOTE := '【ERROR-10014】';
  VN_STEP  := VN_STEP + 1;
  --记录日志明细——开始
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计个股期权证券市值到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => NULL,
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => 1,
                            I_S_RETNOTE        => '正在运行！',
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 0);
  --上日资产
  INSERT /*+ APPEND*/
  INTO TMP_T_STAT_KHZC_R
    (RQ, KHH, YYB, ZQSZ_GGQQ)
    SELECT I_N_TJRQ AS RQ,
           KHH,
           YYB,
           SUM(CASE
                 WHEN BZ = '2' THEN
                  ZXSZ * VN_HL_HKD
                 WHEN BZ = '3' THEN
                  ZXSZ * VN_HL_USD
                 ELSE
                  ZXSZ
               END) AS ZQSZ_GGQQ
      FROM (SELECT RQ,
                   KHH,
                   YYB,
                   ZQLX,
                   BZ,
                   CASE
                     WHEN CCFX = '1' THEN
                      ZXSZ
                     ELSE
                      ABS(ZXSZ) * -1
                   END ZXSZ
              FROM DSC_BAS.T_SO_ZQYE
            UNION ALL
            SELECT RQ,
                   KHH,
                   YYB,
                   ZQLX,
                   BZ,
                   CASE
                     WHEN CCFX = '1' THEN
                      ZXSZ
                     ELSE
                      ABS(ZXSZ) * -1
                   END ZXSZ
              FROM DSC_HIS.T_SO_ZQYELS)
     WHERE RQ = VN_TJRQ
     GROUP BY KHH, YYB;
  VN_ROWCOUNT := SQL%ROWCOUNT;
  COMMIT;
  --记录日志明细——结束
  O_S_NOTE := '运行正常';
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计个股期权证券市值到[DSC_STAT.TMP_T_STAT_KHZC_R]临时表！',
                            I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => O_N_CODE,
                            I_S_RETNOTE        => O_S_NOTE,
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 1);

  O_S_NOTE := '【ERROR-10015】';
  VN_STEP  := VN_STEP + 1;
  --记录日志明细——开始
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '将临时表[DSC_STAT.TMP_T_STAT_KHZC_R]结果汇总统计到[DSC_STAT.T_STAT_KHZC_R]日资产表！',
                            I_S_CHANGEDESC     => NULL,
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => 1,
                            I_S_RETNOTE        => '正在运行！',
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 0);
  --以TKHXX为主表，同时求出零客户的资产数据

  --表修改为不写日志
  EXECUTE IMMEDIATE 'alter table dsc_stat.t_stat_khzc_r NOLOGGING';
  INSERT INTO DSC_STAT.T_STAT_KHZC_R
    (RQ,
     KHH,
     YYB,
     GRJG,
     ZZC,
     ZZC_RMB,
     ZZC_HKD,
     ZZC_USD,
     QTZC_RMB,
     QTZC_HKD,
     QTZC_USD,
     ZJYE_RMB,
     ZJYE_HKD,
     ZJYE_USD,
     ZQSZ,
     ZQSZ_RMB,
     ZQSZ_HKD,
     ZQSZ_USD,
     ZQSZ_ZB,
     ZQSZ_HAZB,
     ZQSZ_SAZB,
     ZQSZ_ZXB,
     ZQSZ_CYB,
     ZQSZ_HB,
     ZQSZ_SB,
     ZQSZ_SB_A,
     ZQSZ_SB_B,
     ZQSZ_FBSJJ,
     ZQSZ_ETF,
     ZQSZ_LOF,
     ZQSZ_SZJJT,
     ZQSZ_DXJJ,
     ZQSZ_JRCP,
     ZQSZ_QZ,
     ZQSZ_GZ,
     ZQSZ_GSQYZ,
     ZQSZ_KZZ,
     ZQSZ_SG,
     ZQSZ_QT,
     SZXZJE,
     CRJE_RMB,
     CRJE_HKD,
     CRJE_USD,
     QCJE_RMB,
     QCJE_HKD,
     QCJE_USD,
     ZRZQSZ,
     ZD_RMB,
     ZD_USD,
     ZTGZR_RMB,
     ZTGZR_HKD,
     ZCZQSZ,
     CZD_RMB,
     CZD_USD,
     ZTGZC_RMB,
     ZTGZC_HKD,
     DRYK,
     FLTZC,
     HLCS_HKD,
     HLCS_USD,
     ZTZC,
     ZQZC,
     DYPSZ,
     ZZC_RZRQ,
     DBXJ_RZRQ,
     DBGPSZ_RZRQ,
     ZFZ,
     CCCB,
     ZCZQSZ_TRZRQ,
     ZRZQSZ_FRZRQ,
     ZFZ_RZRQ, --ADD BY CHENDEZHU AT 20140728
     ZQSZ_GGT, --港股通，20140905，WBJ
     ZQSZ_SGT, --深港通，20160907，ZGD
     ZZC_GGQQ, --个股期权，20150106，hdd
     ZJYE_GGQQ, --个股期权，20150106，hdd
     ZQSZ_GGQQ, --个股期权，20150106，hdd
     ZRSZ_QT,
     ZCSZ_QT,
     ZQSZ_LWTS,
     ZQSZ_ZDOFS,
     ZQSZ_KCB)
    SELECT VN_JYR AS RQ,
           A.KHH,
           A.YYB,
           A.GRJG,
           ((NVL(ZJYE_RMB, 0) + NVL(ZJYE_HKD, 0) * VN_HL_HKD +
           NVL(ZJYE_USD, 0) * VN_HL_USD) --现金
           + (NVL(ZQSZ_RMB, 0) + NVL(QTZC_RMB, 0) + NVL(FLTZC, 0) +
           NVL(ZTZC, 0) + NVL(ZQZC, 0) + NVL(DYPSZ, 0) + NVL(SZXZJE, 0)) --证券市值_RMB
           + (NVL(ZQSZ_HKD, 0) + NVL(QTZC_HKD, 0)) * VN_HL_HKD --证券市值_港币
           + (NVL(ZQSZ_USD, 0) + NVL(QTZC_USD, 0)) * VN_HL_USD) --证券市值_美元
           AS ZZC, --总资产:=[现金+总市值]
           (NVL(ZQSZ_RMB, 0) + NVL(ZJYE_RMB, 0) + NVL(QTZC_RMB, 0) +
           NVL(FLTZC, 0) + NVL(ZTZC, 0) + NVL(ZQZC, 0) + NVL(DYPSZ, 0) +
           NVL(SZXZJE, 0)) AS ZZC_RMB, --总资产_RMB:=[现金_人民币+总市值+非流通市值+抵押品+在途资产+债权资产+市值修正金额]
           (NVL(ZQSZ_HKD, 0) + NVL(ZJYE_HKD, 0) + NVL(QTZC_HKD, 0)) AS ZZC_HKD,
           (NVL(ZQSZ_USD, 0) + NVL(ZJYE_USD, 0) + NVL(QTZC_USD, 0)) AS ZZC_USD,
           NVL(QTZC_RMB, 0) AS QTZC_RMB,
           NVL(QTZC_HKD, 0) AS QTZC_HKD,
           NVL(QTZC_USD, 0) AS QTZC_USD,
           NVL(ZJYE_RMB, 0) AS ZJYE_RMB,
           NVL(ZJYE_HKD, 0) AS ZJYE_HKD,
           NVL(ZJYE_USD, 0) AS ZJYE_USD,
           (NVL(ZQSZ_RMB, 0) + NVL(ZQSZ_HKD, 0) * VN_HL_HKD +
           NVL(ZQSZ_USD, 0) * VN_HL_USD) AS ZQSZ, --证券市值
           NVL(ZQSZ_RMB, 0) AS ZQSZ_RMB,
           NVL(ZQSZ_HKD, 0) AS ZQSZ_HKD,
           NVL(ZQSZ_USD, 0) AS ZQSZ_USD,
           (NVL(ZQSZ_HAZB, 0) + NVL(ZQSZ_SAZB, 0)) AS ZQSZ_ZB, --泸A主板+深A主板
           NVL(ZQSZ_HAZB, 0) AS ZQSZ_HAZB,
           NVL(ZQSZ_SAZB, 0) AS ZQSZ_SAZB,
           NVL(ZQSZ_ZXB, 0) AS ZQSZ_ZXB,
           NVL(ZQSZ_CYB, 0) AS ZQSZ_CYB,
           NVL(ZQSZ_HB, 0) AS ZQSZ_HB,
           NVL(ZQSZ_SB, 0) AS ZQSZ_SB,
           NVL(ZQSZ_SB_A, 0) AS ZQSZ_SB_A,
           NVL(ZQSZ_SB_B, 0) AS ZQSZ_SB_B,
           NVL(ZQSZ_FBSJJ, 0) AS ZQSZ_FBSJJ,
           NVL(ZQSZ_ETF, 0) AS ZQSZ_ETF,
           NVL(ZQSZ_LOF, 0) AS ZQSZ_LOF,
           NVL(ZQSZ_SZJJT, 0) AS ZQSZ_SZJJT,
           NVL(ZQSZ_DXJJ, 0) AS ZQSZ_DXJJ,
           NVL(ZQSZ_JRCP, 0) AS ZQSZ_JRCP,
           NVL(ZQSZ_QZ, 0) AS ZQSZ_QZ,
           NVL(ZQSZ_GZ, 0) AS ZQSZ_GZ,
           NVL(ZQSZ_GSQYZ, 0) AS ZQSZ_GSQYZ,
           NVL(ZQSZ_KZZ, 0) AS ZQSZ_KZZ,
           NVL(ZQSZ_SG, 0) AS ZQSZ_SG,
           NVL(ZQSZ_QT, 0) AS ZQSZ_QT,
           NVL(SZXZJE, 0) AS SZXZJE,
           NVL(CRJE_RMB, 0) AS CRJE_RMB,
           NVL(CRJE_HKD, 0) AS CRJE_HKD,
           NVL(CRJE_USD, 0) AS CRJE_USD,
           NVL(QCJE_RMB, 0) AS QCJE_RMB,
           NVL(QCJE_HKD, 0) AS QCJE_HKD,
           NVL(QCJE_USD, 0) AS QCJE_USD,
           (NVL(ZD_RMB, 0) + NVL(ZD_USD, 0) * VN_HL_USD + NVL(ZTGZR_RMB, 0) +
           NVL(ZTGZR_HKD, 0) * VN_HL_HKD) + NVL(ZRZQSZ_FRZRQ, 0) +
           NVL(ZRSZ_QT, 0) AS ZRZQSZ, --modified by jins on 20150430  zrsz_qt添加调账转入 托管转入市值
           NVL(ZD_RMB, 0) AS ZD_RMB,
           NVL(ZD_USD, 0) AS ZD_USD,
           NVL(ZTGZR_RMB, 0) AS ZTGZR_RMB,
           NVL(ZTGZR_HKD, 0) AS ZTGZR_HKD,
           (NVL(CZD_RMB, 0) + NVL(CZD_USD, 0) * VN_HL_USD +
           NVL(ZTGZC_RMB, 0) + NVL(ZTGZC_HKD, 0) * VN_HL_HKD) +
           NVL(ZCZQSZ_TRZRQ, 0) + NVL(ZCSZ_QT, 0) AS ZCZQSZ, ----modified by jins on 20150430  zcsz_qt添加调账转出、托管转出市值
           NVL(CZD_RMB, 0) AS CZD_RMB,
           NVL(CZD_USD, 0) AS CZD_USD,
           NVL(ZTGZC_RMB, 0) AS ZTGZC_RMB,
           NVL(ZTGZC_HKD, 0) AS ZTGZC_HKD,
           ((NVL(ZJYE_RMB, 0) + NVL(ZJYE_HKD, 0) * VN_HL_HKD +
           NVL(ZJYE_USD, 0) * VN_HL_USD) +
           (NVL(ZQSZ_RMB, 0) + NVL(ZQSZ_HKD, 0) * VN_HL_HKD +
           NVL(ZQSZ_USD, 0) * VN_HL_USD) + NVL(FLTZC, 0) + NVL(ZTZC, 0) +
           NVL(ZQZC, 0) + NVL(DYPSZ, 0) + NVL(SZXZJE, 0)) - NVL(ZFZ, 0) -
           (NVL(SRZZC, 0) - NVL(SRZFZ, 0)) -
           (NVL(CRJE_RMB, 0) + NVL(CRJE_HKD, 0) * VN_HL_HKD +
           NVL(CRJE_USD, 0) * VN_HL_USD) +
           (NVL(QCJE_RMB, 0) + NVL(QCJE_HKD, 0) * VN_HL_HKD +
           NVL(QCJE_USD, 0) * VN_HL_USD) -
           (NVL(ZD_RMB, 0) + NVL(ZD_USD, 0) * VN_HL_USD + NVL(ZTGZR_RMB, 0) +
           NVL(ZTGZR_HKD, 0) * VN_HL_HKD) +
           (NVL(CZD_RMB, 0) + NVL(CZD_USD, 0) * VN_HL_USD +
           NVL(ZTGZC_RMB, 0) + NVL(ZTGZC_HKD, 0) * VN_HL_HKD) -
           (NVL(ZRZQSZ_FRZRQ, 0) - NVL(ZCZQSZ_TRZRQ, 0)) -
           (NVL(ZRSZ_QT, 0) - NVL(ZCSZ_QT, 0)) AS DRYK, --MOD BY CHENDEZHU AT 20140723 --本日总资产-上日总资产+资产转入-资产转出
           NVL(FLTZC, 0) AS FLTZC,
           VN_HL_HKD AS HLCS_HKD,
           VN_HL_USD AS HLCS_USD,
           NVL(ZTZC, 0) AS ZTZC,
           NVL(ZQZC, 0) AS ZQZC,
           NVL(DYPSZ, 0) AS DYPSZ,
           NVL(ZZC_RZRQ, 0) AS ZZC_RZRQ,
           NVL(DBXJ_RZRQ, 0) AS DBXJ_RZRQ,
           NVL(DBGPSZ_RZRQ, 0) AS DBGPSZ_RZRQ,
           NVL(ZFZ, 0) AS ZFZ,
           NVL(CCCB, 0) AS CCCCB,
           NVL(ZCZQSZ_TRZRQ, 0) AS ZCZQSZ_TRZRQ,
           NVL(ZRZQSZ_FRZRQ, 0) AS ZRZQSZ_FRZRQ,
           NVL(ZFZ_RZRQ, 0) AS ZFZ_RZRQ, --ADD BY CHENDEZHU AT 20140728
           NVL(ZQSZ_GGT, 0) AS ZQSZ_GGT, --港股通，20140905，WBJ
           NVL(ZQSZ_SGT, 0) AS ZQSZ_SGT, --深港通，20160907，ZGD
           NVL(ZJYE_GGQQ, 0) + NVL(ZQSZ_GGQQ, 0) AS ZZC_GGQQ, --个股期权，20150106，hdd
           NVL(ZJYE_GGQQ, 0) AS ZJYE_GGQQ, --个股期权，20150106，hdd
           NVL(ZQSZ_GGQQ, 0) AS ZQSZ_GGQQ, --个股期权，20150106，hdd
           NVL(ZRSZ_QT, 0) AS ZRSZ_QT, --转入市值其他，20150429，jins
           NVL(ZCSZ_QT, 0) AS ZCSZ_QT, --转出市值其他，20150429，jins
           NVL(ZQSZ_LWTS, 0) AS ZQSZ_LWTS,
           NVL(ZQSZ_ZDOFS, 0) AS ZQSZ_ZDOFS,
           NVL(ZQSZ_KCB, 0) AS ZQSZ_KCB --科创板，20190627，zhangbc
      FROM DSC_BAS.T_KHXX_JJYW A,
           (SELECT KHH,
                   SUM(NVL(ZZC_RMB, 0)) AS ZZC_RMB,
                   SUM(NVL(ZZC_HKD, 0)) AS ZZC_HKD,
                   SUM(NVL(ZZC_USD, 0)) AS ZZC_USD,
                   SUM(NVL(QTZC_RMB, 0)) AS QTZC_RMB,
                   SUM(NVL(QTZC_HKD, 0)) AS QTZC_HKD,
                   SUM(NVL(QTZC_USD, 0)) AS QTZC_USD,
                   SUM(NVL(ZJYE_RMB, 0)) AS ZJYE_RMB,
                   SUM(NVL(ZJYE_HKD, 0)) AS ZJYE_HKD,
                   SUM(NVL(ZJYE_USD, 0)) AS ZJYE_USD,
                   --RMB市值
                   SUM(NVL(ZQSZ_HAZB, 0)) + SUM(NVL(ZQSZ_SAZB, 0)) +
                   SUM(NVL(ZQSZ_ZXB, 0)) + SUM(NVL(ZQSZ_CYB, 0)) +
                   SUM(NVL(ZQSZ_SB_A, 0)) + SUM(NVL(ZQSZ_FBSJJ, 0)) +
                   SUM(NVL(ZQSZ_ETF, 0)) + SUM(NVL(ZQSZ_LOF, 0)) +
                   SUM(NVL(ZQSZ_SZJJT, 0)) + SUM(NVL(ZQSZ_DXJJ, 0)) +
                   SUM(NVL(ZQSZ_JRCP, 0)) + SUM(NVL(ZQSZ_QZ, 0)) +
                   SUM(NVL(ZQSZ_GZ, 0)) + SUM(NVL(ZQSZ_GSQYZ, 0)) +
                   SUM(NVL(ZQSZ_KZZ, 0)) + SUM(NVL(ZQSZ_SG, 0)) +
                   SUM(NVL(ZQSZ_QT, 0)) + SUM(NVL(ZQSZ_GGT, 0)) +
                   SUM(NVL(ZQSZ_SGT, 0))+SUM(NVL(ZQSZ_KCB, 0)) AS ZQSZ_RMB, --证券市值RMB
                   SUM(NVL(ZQSZ_SB, 0)) AS ZQSZ_HKD, --证券市值港币
                   SUM(NVL(ZQSZ_HB, 0)) + SUM(NVL(ZQSZ_SB_B, 0)) AS ZQSZ_USD, --证券市值美元
                   SUM(NVL(ZQSZ_HAZB, 0)) AS ZQSZ_HAZB,
                   SUM(NVL(ZQSZ_SAZB, 0)) AS ZQSZ_SAZB,
                   SUM(NVL(ZQSZ_ZXB, 0)) AS ZQSZ_ZXB,
                   SUM(NVL(ZQSZ_CYB, 0)) AS ZQSZ_CYB,
                   SUM(NVL(ZQSZ_HB, 0)) AS ZQSZ_HB,
                   SUM(NVL(ZQSZ_SB, 0)) AS ZQSZ_SB,
                   SUM(NVL(ZQSZ_SB_A, 0)) AS ZQSZ_SB_A,
                   SUM(NVL(ZQSZ_SB_B, 0)) AS ZQSZ_SB_B,
                   SUM(NVL(ZQSZ_FBSJJ, 0)) AS ZQSZ_FBSJJ,
                   SUM(NVL(ZQSZ_ETF, 0)) AS ZQSZ_ETF,
                   SUM(NVL(ZQSZ_LOF, 0)) AS ZQSZ_LOF,
                   SUM(NVL(ZQSZ_SZJJT, 0)) AS ZQSZ_SZJJT,
                   SUM(NVL(ZQSZ_DXJJ, 0)) AS ZQSZ_DXJJ,
                   SUM(NVL(ZQSZ_JRCP, 0)) AS ZQSZ_JRCP, --金融产品
                   SUM(NVL(ZQSZ_QZ, 0)) AS ZQSZ_QZ,
                   SUM(NVL(ZQSZ_GZ, 0)) AS ZQSZ_GZ,
                   SUM(NVL(ZQSZ_GSQYZ, 0)) AS ZQSZ_GSQYZ,
                   SUM(NVL(ZQSZ_KZZ, 0)) AS ZQSZ_KZZ,
                   SUM(NVL(ZQSZ_SG, 0)) AS ZQSZ_SG,
                   SUM(NVL(ZQSZ_QT, 0)) AS ZQSZ_QT,
                   SUM(NVL(SZXZJE, 0)) AS SZXZJE,
                   SUM(NVL(CRJE_RMB, 0)) AS CRJE_RMB,
                   SUM(NVL(CRJE_HKD, 0)) AS CRJE_HKD,
                   SUM(NVL(CRJE_USD, 0)) AS CRJE_USD,
                   SUM(NVL(QCJE_RMB, 0)) AS QCJE_RMB,
                   SUM(NVL(QCJE_HKD, 0)) AS QCJE_HKD,
                   SUM(NVL(QCJE_USD, 0)) AS QCJE_USD,
                   SUM(NVL(ZD_RMB, 0)) AS ZD_RMB,
                   SUM(NVL(ZD_USD, 0)) AS ZD_USD,
                   SUM(NVL(ZTGZR_RMB, 0)) AS ZTGZR_RMB,
                   SUM(NVL(ZTGZR_HKD, 0)) AS ZTGZR_HKD,
                   SUM(NVL(CZD_RMB, 0)) AS CZD_RMB,
                   SUM(NVL(CZD_USD, 0)) AS CZD_USD,
                   SUM(NVL(ZTGZC_RMB, 0)) AS ZTGZC_RMB,
                   SUM(NVL(ZTGZC_HKD, 0)) AS ZTGZC_HKD,
                   SUM(NVL(DRYK, 0)) AS DRYK,
                   SUM(NVL(SRZZC, 0)) AS SRZZC,
                   SUM(NVL(SRZFZ, 0)) AS SRZFZ,
                   SUM(NVL(FLTZC, 0)) AS FLTZC,
                   SUM(NVL(ZTZC, 0)) AS ZTZC,
                   SUM(NVL(ZQZC, 0)) AS ZQZC,
                   SUM(NVL(DYPSZ, 0)) AS DYPSZ,
                   SUM(NVL(ZZC_RZRQ, 0)) AS ZZC_RZRQ,
                   SUM(NVL(DBXJ_RZRQ, 0)) AS DBXJ_RZRQ,
                   SUM(NVL(DBGPSZ_RZRQ, 0)) AS DBGPSZ_RZRQ,
                   SUM(NVL(ZFZ, 0)) AS ZFZ,
                   SUM(NVL(CCCB, 0)) AS CCCB,
                   SUM(NVL(ZCZQSZ_TRZRQ, 0)) AS ZCZQSZ_TRZRQ, --ADD BY CHENDEZHU AT 20140723
                   SUM(NVL(ZRZQSZ_FRZRQ, 0)) AS ZRZQSZ_FRZRQ, --ADD BY CHENDEZHU AT 20140723
                   SUM(NVL(ZFZ_RZRQ, 0)) AS ZFZ_RZRQ, --ADD BY CHENDEZHU AT 20140728
                   SUM(NVL(ZQSZ_GGT, 0)) AS ZQSZ_GGT, --港股通，20140905，WBJ
                   SUM(NVL(ZQSZ_SGT, 0)) AS ZQSZ_SGT, --深港通，20160907，ZGD
                   SUM(NVL(ZJYE_GGQQ, 0)) AS ZJYE_GGQQ, --个股期权，20150106，hdd
                   SUM(NVL(ZQSZ_GGQQ, 0)) AS ZQSZ_GGQQ, --个股期权，20150106，hdd
                   SUM(NVL(ZRSZ_QT, 0)) AS ZRSZ_QT, -- ADDED BY JINS ON 20150421
                   SUM(NVL(ZCSZ_QT, 0)) AS ZCSZ_QT, -- ADDED BY JINS ON 20150421
                   SUM(NVL(ZQSZ_LWTS, 0)) AS ZQSZ_LWTS,
                   SUM(NVL(ZQSZ_ZDOFS, 0)) AS ZQSZ_ZDOFS,
                   SUM(NVL(ZQSZ_KCB, 0)) AS ZQSZ_KCB --科创板，20190627，zhangbc
              FROM TMP_T_STAT_KHZC_R
             GROUP BY KHH) B
     WHERE A.KHH = B.KHH(+)
       AND A.KHRQ <= VN_JYR
       AND (A.KHZT != '3' OR (A.KHZT = '3' AND A.XHRQ >= VN_JYR)); --TJRQ在开户日期和消户日期之间（非消户日期为30000000）
  VN_ROWCOUNT := SQL%ROWCOUNT;
  COMMIT;
  --记录日志明细——结束
  O_S_NOTE := '运行正常';
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '将临时表[DSC_STAT.TMP_T_STAT_KHZC_R]结果汇总统计到[DSC_STAT.T_STAT_KHZC_R]日资产表！',
                            I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => O_N_CODE,
                            I_S_RETNOTE        => O_S_NOTE,
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 1);

  EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_KHZC_R';

  --月初做表分析
  --记录日志明细——开始
  O_S_NOTE := '【ERROR-100016】';
  VN_STEP  := VN_STEP + 1;
  --记录日志明细——开始
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '对表[DSC_STAT.T_STAT_KHZC_R]' ||
                                                  VS_PART || '分区进行分析！',
                            I_S_CHANGEDESC     => NULL,
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => 1,
                            I_S_RETNOTE        => '正在运行！',
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 0);

  PUB_SYS.P_GATHER_STATS(O_N_CODE    => VN_CODE,
                         O_S_NOTE    => VS_NOTE,
                         I_N_TJRQ    => I_N_TJRQ,
                         I_N_MODE    => 'YC',
                         I_S_OWNER   => 'DSC_STAT',
                         I_S_TABNAME => 'T_STAT_KHZC_R',
                         I_S_PART    => VS_PART);
  --记录日志明细——结束
  IF VN_CODE = 2 THEN
    VS_NOTE  := '未分析';
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL;
    O_S_NOTE := '运行正常';
  ELSIF VN_CODE = 0 THEN
    VS_NOTE  := '分析完成';
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL;
    O_S_NOTE := '运行正常';
  END IF;

  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '对表[DSC_STAT.T_STAT_KHZC_R]' ||
                                                  VS_PART || '进行分析！',
                            I_S_CHANGEDESC     => VS_NOTE,
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => O_N_CODE,
                            I_S_RETNOTE        => O_S_NOTE,
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 1);

  --存储过程运行成功
  O_S_NOTE := '运行正常';
  --记录日志
  --记录日志——成功结束
  PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                     I_N_LOGID          => VN_LOGID,
                     I_S_USER           => VS_USER,
                     I_S_PROCNAME       => VS_PROC_NAME,
                     I_N_TJRQ           => VN_TJRQ,
                     I_N_RETCODE        => O_N_CODE,
                     I_S_RETNOTE        => O_S_NOTE,
                     I_S_FLAG           => I_N_REDO,
                     I_N_INSERTORUPDATE => 1);

EXCEPTION
  WHEN OTHERS THEN
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
    O_S_NOTE := O_S_NOTE || SQLERRM;
    ROLLBACK;
    --记录日志——失败结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
    --记录日志明细——失败结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '运行失败！',
                              I_S_CHANGEDESC     => '运行失败！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

END P_STAT_KHZC_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_KHZC_Y(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN INT,
                                                   I_N_REDO IN NUMBER DEFAULT 0) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   客户资产月表算法
         功能简述：   客户资产月表算法
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
        返回：

         算法：
                  1、涉及到外币的已乘汇率
                  2、日均资产=日资产之和/月有效交易日开户天数

         注意事项：

         数据源：
                 DSC_STAT.T_STAT_KHZC_R     ：客户资产日明细表
                 DSC_CFG.T_LCCS           ：利差参数
                 DSC_CFG.T_HLCS           ：汇率参数

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/03/16                  创建
         胡阳明      2012/08/14                  增加取上月期出的条件
         胡阳明      2012/12/18                  修改日均资产会被零除的情况，因为注销数据的问题，
                                                 每次去跟踪删除麻烦，现在忽视这种情况。
         林伟        2013/02/22                  修改日均资产统计口径，日均资产=在线自然日总资产/在线自然日天数，
                                                 修改在线自然日统计口径
         林伟        2013/02/27                  修改，所有的日均数据计算口径修改为在线自然日总数据/在线自然日天数
         林伟        2013/04/10                  修改，本月在线交易日统计有bug，不是月末交易日的期末日期取期末日期，否则取月末日期
         黄玉钰      2013/05/16                  修改：根据NDSC版本调整
         胡阳明      2013/05/16                  修改：新增指标：日均总资产_融资融券，日均担保现金_融资融券，日均担保股票市值_融资融券，在途资产，债权资产，抵押品市值
         胡阳明      2013/09/24                  修改：新增指标：月末总负债、月末总资产_融资融券、月末担保现金_融资融券月末担保股票市值_融资融券
         胡阳明      2013/10/17                  修改：新增字段：持仓成本
         黄玉钰      2014/01/16                  修改：新增字段：30日总账户峰值/波谷总资产
         林伟        2014/01/21                  修改：获取期初汇率时间改为期初交易日
         黄玉钰      2014/06/11                  修改：按客户号汇总之后，关联客户信息表获取营业部，确保一个月一个客户仅有一条记录
         陈德铸      2014/07/23                  修改：增加ZRZQSZ_FRZRQ（从融资融券担保品划入产生的转入市值）、ZCZQSZ_TRZRQ(担保品划出到融资融券账户产生的转出市值)
                                                       修正盈亏计算口径：当日盈亏：本日资产-上日资产-净转入转出资产-(ZRZQSZ_FRZRQ-ZCZQSZ_TRZRQ)
         陈德铸      2014/07/28                  修改：目前存在两个数据一模一样的字段ZFZ和YMZFZ，现将ZFZ作为普通账户负债字段，YMZFZ字段更名为YMZFZ_RZRQ
         吴邦杰      2014/09/09                  修改: 增加港股通证券市值
         吴邦杰      2014/10/16                  修改：统计非交易日资产，补上日期取值在开户日期和销户日期区间，保持和取自然日/交易日的取值条件一致
         黄玉钰      2015/01/15                  修改：调整峰值/波谷总资产的计算
         胡丹丹      2015/02/06                  修改: 增加个股期权月末总资产、月末资金余额、月末证券市值
         吴邦杰      2015/03/17                  修改：1、增加统计的自然日在客户的开销户日期区间
                                                       2、调整VN_LAST_MONTHDAY取数，加上jyr为统计日期的条件限制 VN_LAST_MONTHJYR取统计日期
         胡丹丹      2015/03/27     2.0.0.9      修改: 增加个股期权日均总资产,ZZH_FZZZC_30/ZZH_BGZZC_30加上个股期权数据
         金石        2015/04/30                  修改：修改当月盈亏算法， 改为 日盈亏汇总求和
         金石        2015/05/11                  修改：增加转入市值_其他，转出市值_其他..
         胡丹丹      2015/09/01                  修改：生成表数据之后进行表分析
         胡丹丹      2015/10/13                  修改：更改表分析部分的日志明细标识
         张功德      2016/09/07                  修改: 增加深港通证券市值
         林振明      2018/06/01                  修改：增加客户非流通日均资产，融资融券日均总负债
         zhangbc     2019/06/27                  修改：新增科创板数据统计
    */
    VS_PROC_NAME     VARCHAR2(100) := $$PLSQL_UNIT;
    VN_TJRQ          NUMBER(8) := I_N_TJRQ;
    VN_YF            NUMBER(6) := PUB_SYS.F_GET_DATE(I_N_TJRQ, 2); --月份
    VN_FIRST_DAY     NUMBER(8); --期初交易日
    VN_LAST_DAY      NUMBER(8); --期末交易日
    VN_LAST_MONTHDAY NUMBER(8); --月末日期
    --VN_LAST_MONTHJYR NUMBER(8); --月末交易日
    VN_LLC      DSC_CFG.T_LCCS.LLC%TYPE; --利率差
    VN_HL_HKD   DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD   DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_LOGID    INT; --LOG 表记录ID
    VN_ROWCOUNT INT; --记录数
    VN_STEP     INT; --动作步数
    VN_PROC_NO  PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER     VARCHAR2(30);
    VN_QC_RQ    NUMBER(8) := PUB_SYS.F_GET_DATE(VN_TJRQ, 7); --上月月末自然日（期初）
    VN_QC_YF    NUMBER(6) := PUB_SYS.F_GET_DATE(VN_TJRQ, 3); --上月月份（期初）
    VS_PART     VARCHAR2(15) := 'PY_' || SUBSTR(I_N_TJRQ, 1, 6);
    VN_CODE     NUMBER;
    VS_NOTE     VARCHAR2(500);

BEGIN

    --变量初始化

    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);

    O_S_NOTE := '【ERROR-10001】';
    --重做删除原数据
    IF I_N_REDO IN (0, 1, 2) THEN
        --分区删除
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZC_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        EXECUTE IMMEDIATE 'ALTER TABLE DSC_STAT.T_STAT_KHZC_Y TRUNCATE PARTITION PY_' ||
                          VN_YF || '  UPDATE GLOBAL INDEXES';
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZC_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_KHZC_Y]分区数据删除成功！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;
    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_KHZC_Y]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE  DSC_STAT.TMP_T_STAT_KHZC_Y';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE  DSC_STAT.TMP_T_STAT_KHZC_Y_RJ';
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_KHZC_Y]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_T_STAT_KHZC_Y]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10001-2】';
    --期初日期（上月月末交易日）
    BEGIN
        SELECT MAX(JYR) INTO VN_QC_RQ FROM DSC_CFG.T_XTJYR WHERE NY = VN_QC_YF;
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '查找不到：' || VN_QC_YF || '对应的交易日！';
    END;
    --月初
    VN_FIRST_DAY := PUB_SYS.F_GET_DATE(VN_TJRQ, 0);
    --期末日期
    VN_LAST_DAY := I_N_TJRQ;
    --月末日期
    SELECT MAX(ZRR)
      INTO VN_LAST_MONTHDAY
      FROM DSC_CFG.T_XTJYR T
     WHERE T.NY = VN_YF
       AND T.JYR = VN_LAST_DAY;
    /*--月末交易日
    SELECT MAX(JYR) INTO VN_LAST_MONTHJYR FROM DSC_CFG.T_XTJYR T WHERE T.NY = VN_YF;*/
    --利率差
    BEGIN
        SELECT A.LLC
          INTO VN_LLC
          FROM DSC_CFG.T_LCCS A
         WHERE I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ
           AND BZ = '1';
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '没有维护利率差！';
    END;

    --获取期初汇率
    --港币
    BEGIN
        SELECT A.GSBL
          INTO VN_HL_HKD
          FROM DSC_CFG.T_HLCS A
         WHERE A.BZ = '2'
           AND VN_QC_RQ BETWEEN A.KSRQ AND A.JSRQ;
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '没有维护“港币”汇率！';
    END;
    BEGIN
        --美元
        SELECT A.GSBL
          INTO VN_HL_USD
          FROM DSC_CFG.T_HLCS A
         WHERE A.BZ = '3'
           AND VN_QC_RQ BETWEEN A.KSRQ AND A.JSRQ;
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '没有维护“美元”汇率！';
    END;

    O_S_NOTE := '【ERROR-10001】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计期初相关资金余额数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZC_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --期初
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_KHZC_Y
        (YF, KHH, YYB, GRJG, YCZZC, YCZZC_RMB, YCZZC_HKD, YCZZC_USD)
        SELECT VN_YF AS YF,
               KHH,
               YYB,
               GRJG,
               ZZC AS YCZZC,
               ZZC_RMB AS YCZZC_RMB,
               ZZC_HKD AS YCZZC_HKD,
               ZZC_USD AS YCZZC_USD
          FROM DSC_STAT.T_STAT_KHZC_R A
         WHERE RQ = VN_QC_RQ
           AND NOT EXISTS (SELECT 1
                  FROM DSC_BAS.T_KHXX_JJYW B
                 WHERE A.KHH = B.KHH
                   AND B.KHZT = 3
                   AND B.XHRQ = VN_QC_RQ);
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计期初相关资金余额数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZC_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10002】';
    --记录日志明细——开始

    --月初到统计日总和
    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计本月总资产的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZC_Y_RJ]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_KHZC_Y_RJ
        (KHH,
         YYB,
         GRJG,
         RJZZC,
         RJZC_RMB,
         RJZC_HKD,
         RJZC_USD,
         RJYE_RMB,
         RJYE_HKD,
         RJYE_USD,
         RJZQSZ,
         RJZQSZ_RMB,
         RJZQSZ_HKD,
         RJZQSZ_USD,
         RJZQSZ_ZB,
         RJZQSZ_HAZB,
         RJZQSZ_SAZB,
         RJZQSZ_ZXB,
         RJZQSZ_CYB,
         RJZQSZ_HB,
         RJZQSZ_SB,
         RJZQSZ_SB_A,
         RJZQSZ_SB_B,
         RJZQSZ_FBSJJ,
         RJZQSZ_ETF,
         RJZQSZ_LOF,
         RJZQSZ_SZJJT,
         RJZQSZ_DXJJ,
         RJZQSZ_JRCP,
         RJZQSZ_QZ,
         RJZQSZ_GZ,
         RJZQSZ_GSQYZ,
         RJZQSZ_KZZ,
         RJZQSZ_SG,
         RJZQSZ_QT,
         CRJE, --  存入金额（折算人民币）
         CRJE_RMB, --存入金额-人民币
         CRJE_USD, --存入金额-美元
         CRJE_HKD, --存入金额-港币
         QCJE, --取出金额（折算人民币）
         QCJE_RMB, -- 取出金额-人民币
         QCJE_USD, --取出金额-美元
         QCJE_HKD, --取出金额-港币
         ZRZQSZ, --转入证券市值（折算人民币）
         ZD_RMB, --指定_人民币
         ZD_USD, --指定_美元
         ZTGZR_RMB, --转托管转入_人民币
         ZTGZR_HKD, --  转托管转入_港币
         ZCZQSZ, -- 转出证券市值(人民币+外币)
         CZD_RMB, --    撤指定_人民币
         CZD_USD, --  撤指定_美元
         ZTGZC_RMB, --  转托管转出_人民币
         ZTGZC_HKD, --  转托管转出_港币
         ZRSZ_QT, -- 转入市值_其他
         ZCSZ_QT, --转出市值_其他
         DYYK, -- 当月盈亏（月末-月初-流入净资产）
         FZZZC_30, --30日峰值总资产
         BGZZC_30, --30日波谷总资产
         LXJS, --利息积数
         LCSR, --利差收入
         RJZFZ, --日均总负债
         RJZZC_RZRQ, --日均总资产_融资融券
         RJDBXJ_RZRQ, --日均担保现金_融资融券
         RJDBGPSZ_RZRQ, --  日均担保股票市值_融资融券
         ZZH_FZZZC_30, --30日总账户峰值总资产
         ZZH_BGZZC_30, --30日总账户波谷总资产
         ZCZQSZ_TRZRQ,
         ZRZQSZ_FRZRQ,
         RJZQSZ_GGT,
         RJZQSZ_SGT,
         RJZZC_GGQQ,
         RJFLTZC,
         RJZFZ_RZRQ,
         RJZQSZ_KCB)
        SELECT KHH,
               YYB,
               GRJG,
               SUM(RJZZC) AS RJZZC, --日均总资产
               SUM(RJZC_RMB) AS RJZC_RMB,
               SUM(RJZC_HKD) AS RJZC_HKD,
               SUM(RJZC_USD) AS RJZC_USD,
               SUM(RJYE_RMB) AS RJYE_RMB,
               SUM(RJYE_HKD) AS RJYE_HKD,
               SUM(RJYE_USD) AS RJYE_USD,
               SUM(RJSZ) AS RJSZ,
               SUM(RJZQSZ_RMB) AS RJZQSZ_RMB,
               SUM(RJZQSZ_HKD) AS RJZQSZ_HKD,
               SUM(RJZQSZ_USD) AS RJZQSZ_USD,
               SUM(RJSZ_ZB) AS RJSZ_ZB,
               SUM(RJSZ_HAZB) AS RJSZ_HAZB,
               SUM(RJSZ_SAZB) AS RJSZ_SAZB,
               SUM(RJSZ_ZXB) AS RJSZ_ZXB,
               SUM(RJSZ_CYB) AS RJSZ_CYB,
               SUM(RJSZ_HB) AS RJSZ_HB,
               SUM(RJSZ_SB) AS RJSZ_SB,
               SUM(RJSZ_SB_A) AS RJSZ_SB_A,
               SUM(RJSZ_SB_B) AS RJSZ_SB_B, --三板B 美元
               SUM(RJSZ_FBSJJ) AS RJSZ_FBSJJ,
               SUM(RJSZ_ETF) AS RJSZ_ETF,
               SUM(RJSZ_LOF) AS RJSZ_LOF,
               SUM(RJSZ_SZJJT) AS RJSZ_SZJJT,
               SUM(RJSZ_DXJJ) AS RJSZ_DXJJ,
               SUM(RJSZ_JRCP) AS RJSZ_JRCP,
               SUM(RJSZ_QZ) AS RJSZ_QZ,
               SUM(RJSZ_GZ) AS RJSZ_GZ,
               SUM(RJSZ_GSQYZ) AS RJSZ_GSQYZ,
               SUM(RJSZ_KZZ) AS RJSZ_KZZ,
               SUM(RJSZ_SG) AS RJSZ_SG,
               SUM(RJSZ_QT) AS RJSZ_QT,
               SUM(CRJE) AS CRJE, --  存入金额（折算人民币）
               SUM(CRJE_RMB) AS CRJE_RMB, --存入金额-人民币
               SUM(CRJE_USD) AS CRJE_USD, --存入金额-美元
               SUM(CRJE_HKD) AS CRJE_HKD, --存入金额-港币
               SUM(QCJE) AS QCJE, --取出金额（折算人民币）
               SUM(QCJE_RMB) AS QCJE_RMB, -- 取出金额-人民币
               SUM(QCJE_USD) AS QCJE_USD, --取出金额-美元
               SUM(QCJE_HKD) AS QCJE_HKD, --取出金额-港币
               SUM(ZRZQSZ) AS ZRZQSZ, --转入证券市值（折算人民币）
               SUM(ZD_RMB) AS ZD_RMB, --指定_人民币
               SUM(ZD_USD) AS ZD_USD, --指定_美元
               SUM(ZTGZR_RMB) AS ZTGZR_RMB, --转托管转入_人民币
               SUM(ZTGZR_HKD) AS ZTGZR_HKD, --  转托管转入_港币
               SUM(ZCZQSZ) AS ZCZQSZ, -- 转出证券市值(人民币+外币)
               SUM(CZD_RMB) AS CZD_RMB, -- 撤指定_人民币
               SUM(CZD_USD) AS CZD_USD, --  撤指定_美元
               SUM(ZTGZC_RMB) AS ZTGZC_RMB, --  转托管转出_人民币
               SUM(ZTGZC_HKD) AS ZTGZC_HKD, --  转托管转出_港币
               SUM(ZRSZ_QT) AS ZRSZ_QT, --  转入市值其他 --added by jins on 20150511
               SUM(ZCSZ_QT) AS ZCSZ_QT, --  转出市值其他 --added by jins on 20150511
               SUM(DYYK) AS DYYK, -- 当月盈亏（日盈亏汇总）
               SUM(FZZZC_30) AS FZZZC_30, --30日峰值总资产
               SUM(BGZZC_30) AS BGZZC_30, --30日波谷总资产
               SUM(LXJS) AS LXJS, --利息积数
               SUM(LCSR) LCSR, --利差收入
               SUM(ZFZ) AS RJZFZ, --日均总负债
               SUM(ZZC_RZRQ) AS RJZZC_RZRQ, --日均总资产_融资融券
               SUM(DBXJ_RZRQ) AS RJDBXJ_RZRQ, --日均担保现金_融资融券
               SUM(DBGPSZ_RZRQ) AS RJDBGPSZ_RZRQ, --  日均担保股票市值_融资融券
               SUM(ZZH_FZZZC_30) AS ZZH_FZZZC_30, --30日总账户峰值总资产
               SUM(ZZH_BGZZC_30) AS ZZH_BGZZC_30, --30日总账户波谷总资产
               SUM(ZCZQSZ_TRZRQ) AS ZCZQSZ_TRZRQ, --ADD BY CHENDEZHU AT 20140723
               SUM(ZRZQSZ_FRZRQ) AS ZRZQSZ_FRZRQ, --ADD BY CHENDEZHU AT 20140723
               SUM(RJSZ_GGT) AS RJSZ_GGT, --港股通证券市值，20140905，吴邦杰
               SUM(RJSZ_SGT) AS RJSZ_SGT, --深港通证券市值，20160907，张功德
               SUM(RJZZC_GGQQ) AS RJZZC_GGQQ, --日均总资产_个股期权，20150327，胡丹丹
               SUM(RJFLTZC) AS RJFLTZC,
               SUM(RJZFZ_RZRQ) AS RJZFZ_RZRQ,
               SUM(RJZQSZ_KCB) AS RJZQSZ_KCB
          FROM (SELECT A.KHH,
                       A.YYB,
                       A.GRJG,
                       SUM(ZZC) AS RJZZC, --日均总资产
                       SUM(ZZC_RMB) AS RJZC_RMB,
                       SUM(ZZC_HKD) AS RJZC_HKD,
                       SUM(ZZC_USD) AS RJZC_USD,
                       SUM(ZJYE_RMB) AS RJYE_RMB,
                       SUM(ZJYE_HKD) AS RJYE_HKD,
                       SUM(ZJYE_USD) AS RJYE_USD,
                       SUM(ZQSZ_RMB + ZQSZ_HKD * HLCS_HKD + ZQSZ_USD * HLCS_USD) AS RJSZ,
                       SUM(ZQSZ_RMB) AS RJZQSZ_RMB,
                       SUM(ZQSZ_HKD) AS RJZQSZ_HKD,
                       SUM(ZQSZ_USD) AS RJZQSZ_USD,
                       SUM(ZQSZ_ZB) AS RJSZ_ZB,
                       SUM(ZQSZ_HAZB) AS RJSZ_HAZB,
                       SUM(ZQSZ_SAZB) AS RJSZ_SAZB,
                       SUM(ZQSZ_ZXB) AS RJSZ_ZXB,
                       SUM(ZQSZ_CYB) AS RJSZ_CYB,
                       SUM(ZQSZ_HB) AS RJSZ_HB,
                       SUM(ZQSZ_SB) AS RJSZ_SB,
                       SUM(ZQSZ_SB_A) AS RJSZ_SB_A,
                       SUM(ZQSZ_SB_B) AS RJSZ_SB_B, --三板B 美元
                       SUM(ZQSZ_FBSJJ) AS RJSZ_FBSJJ,
                       SUM(ZQSZ_ETF) AS RJSZ_ETF,
                       SUM(ZQSZ_LOF) AS RJSZ_LOF,
                       SUM(ZQSZ_SZJJT) AS RJSZ_SZJJT,
                       SUM(ZQSZ_DXJJ) AS RJSZ_DXJJ,
                       SUM(ZQSZ_JRCP) AS RJSZ_JRCP,
                       SUM(ZQSZ_QZ) AS RJSZ_QZ,
                       SUM(ZQSZ_GZ) AS RJSZ_GZ,
                       SUM(ZQSZ_GSQYZ) AS RJSZ_GSQYZ,
                       SUM(ZQSZ_KZZ) AS RJSZ_KZZ,
                       SUM(ZQSZ_SG) AS RJSZ_SG,
                       SUM(ZQSZ_QT) AS RJSZ_QT,
                       SUM(CRJE_RMB + CRJE_USD * HLCS_USD + CRJE_HKD * HLCS_HKD) AS CRJE, --  存入金额（折算人民币）
                       SUM(CRJE_RMB) AS CRJE_RMB, --存入金额-人民币
                       SUM(CRJE_USD) AS CRJE_USD, --存入金额-美元
                       SUM(CRJE_HKD) AS CRJE_HKD, --存入金额-港币
                       SUM(QCJE_RMB + QCJE_USD * HLCS_USD + QCJE_HKD * HLCS_HKD) AS QCJE, --取出金额（折算人民币）
                       SUM(QCJE_RMB) AS QCJE_RMB, -- 取出金额-人民币
                       SUM(QCJE_USD) AS QCJE_USD, --取出金额-美元
                       SUM(QCJE_HKD) AS QCJE_HKD, --取出金额-港币
                       SUM(ZRZQSZ) AS ZRZQSZ, --转入证券市值（折算人民币）
                       SUM(ZD_RMB) AS ZD_RMB, --指定_人民币
                       SUM(ZD_USD) AS ZD_USD, --指定_美元
                       SUM(ZTGZR_RMB) AS ZTGZR_RMB, --转托管转入_人民币
                       SUM(ZTGZR_HKD) AS ZTGZR_HKD, --  转托管转入_港币
                       SUM(ZCZQSZ) AS ZCZQSZ, -- 转出证券市值(人民币+外币)
                       SUM(CZD_RMB) AS CZD_RMB, -- 撤指定_人民币
                       SUM(CZD_USD) AS CZD_USD, --  撤指定_美元
                       SUM(ZTGZC_RMB) AS ZTGZC_RMB, --  转托管转出_人民币
                       SUM(ZTGZC_HKD) AS ZTGZC_HKD, --  转托管转出_港币
                       SUM(ZRSZ_QT) AS ZRSZ_QT, --转入市值其他  add by jins on 20150511
                       SUM(ZCSZ_QT) AS ZCSZ_QT, --转入市值其他  add by jins on 20150511
                       SUM(DRYK) AS DYYK, -- 当月盈亏（日盈亏汇总）
                       MAX(ZZC) AS FZZZC_30, --30日峰值总资产
                       MIN(ZZC) AS BGZZC_30, --30日波谷总资产
                       SUM(ZJYE_RMB + ZJYE_HKD * HLCS_HKD + ZJYE_USD * HLCS_USD) AS LXJS, --利息积数
                       SUM((ZJYE_RMB + ZJYE_HKD * HLCS_HKD + ZJYE_USD * HLCS_USD) * VN_LLC) LCSR, --利差收入
                       SUM(ZFZ) AS ZFZ,
                       SUM(ZZC_RZRQ) AS ZZC_RZRQ, --总资产_融资融券
                       SUM(DBXJ_RZRQ) AS DBXJ_RZRQ, --担保现金_融资融券
                       SUM(DBGPSZ_RZRQ) AS DBGPSZ_RZRQ, --  担保股票市值_融资融券
                       MAX(NVL(ZZC, 0) + NVL(ZZC_RZRQ, 0) + NVL(ZZC_GGQQ, 0)) AS ZZH_FZZZC_30, --30日总账户峰值总资产 --增加个股期权数据 20150327，胡丹丹
                       MIN(NVL(ZZC, 0) + NVL(ZZC_RZRQ, 0) + NVL(ZZC_GGQQ, 0)) AS ZZH_BGZZC_30, --30日总账户波谷总资产 --增加个股期权数据 20150327，胡丹丹
                       SUM(ZCZQSZ_TRZRQ) AS ZCZQSZ_TRZRQ, --ADD BY CHENDEZHU AT 20140723
                       SUM(ZRZQSZ_FRZRQ) AS ZRZQSZ_FRZRQ, --ADD BY CHENDEZHU AT 20140723
                       SUM(ZQSZ_GGT) AS RJSZ_GGT, --港股通，20140905，吴邦杰
                       SUM(ZQSZ_SGT) AS RJSZ_SGT, --深港通，20160907，张功德
                       SUM(ZZC_GGQQ) AS RJZZC_GGQQ, --日均总资产_个股期权，20150327，胡丹丹
                       SUM(FLTZC) RJFLTZC,
                       SUM(A.ZFZ_RZRQ) RJZFZ_RZRQ,
                       SUM(A.ZQSZ_KCB) AS RJZQSZ_KCB
                  FROM DSC_STAT.T_STAT_KHZC_R A
                 WHERE RQ BETWEEN VN_FIRST_DAY AND VN_LAST_DAY
                --AND A.YYB = (:D)
                 GROUP BY A.KHH, A.YYB, A.GRJG
                UNION ALL
                --取非交易日的资产，即非交易日的上个交易日资产
                SELECT A.KHH,
                       A.YYB,
                       A.GRJG,
                       SUM(ZZC) AS RJZZC, --日均总资产
                       SUM(ZZC_RMB) AS RJZC_RMB,
                       SUM(ZZC_HKD) AS RJZC_HKD,
                       SUM(ZZC_USD) AS RJZC_USD,
                       SUM(ZJYE_RMB) AS RJYE_RMB,
                       SUM(ZJYE_HKD) AS RJYE_HKD,
                       SUM(ZJYE_USD) AS RJYE_USD,
                       SUM(ZQSZ_RMB + ZQSZ_HKD * HLCS_HKD + ZQSZ_USD * HLCS_USD) AS RJSZ,
                       SUM(ZQSZ_RMB) AS RJZQSZ_RMB,
                       SUM(ZQSZ_HKD) AS RJZQSZ_HKD,
                       SUM(ZQSZ_USD) AS RJZQSZ_USD,
                       SUM(ZQSZ_ZB) AS RJSZ_ZB,
                       SUM(ZQSZ_HAZB) AS RJSZ_HAZB,
                       SUM(ZQSZ_SAZB) AS RJSZ_SAZB,
                       SUM(ZQSZ_ZXB) AS RJSZ_ZXB,
                       SUM(ZQSZ_CYB) AS RJSZ_CYB,
                       SUM(ZQSZ_HB) AS RJSZ_HB,
                       SUM(ZQSZ_SB) AS RJSZ_SB,
                       SUM(ZQSZ_SB_A) AS RJSZ_SB_A,
                       SUM(ZQSZ_SB_B) AS RJSZ_SB_B, --三板B 美元
                       SUM(ZQSZ_FBSJJ) AS RJSZ_FBSJJ,
                       SUM(ZQSZ_ETF) AS RJSZ_ETF,
                       SUM(ZQSZ_LOF) AS RJSZ_LOF,
                       SUM(ZQSZ_SZJJT) AS RJSZ_SZJJT,
                       SUM(ZQSZ_DXJJ) AS RJSZ_DXJJ,
                       SUM(ZQSZ_JRCP) AS RJSZ_JRCP,
                       SUM(ZQSZ_QZ) AS RJSZ_QZ,
                       SUM(ZQSZ_GZ) AS RJSZ_GZ,
                       SUM(ZQSZ_GSQYZ) AS RJSZ_GSQYZ,
                       SUM(ZQSZ_KZZ) AS RJSZ_KZZ,
                       SUM(ZQSZ_SG) AS RJSZ_SG,
                       SUM(ZQSZ_QT) AS RJSZ_QT,
                       0 AS CRJE, --  存入金额（折算人民币）
                       0 AS CRJE_RMB, --存入金额-人民币
                       0 AS CRJE_USD, --存入金额-美元
                       0 AS CRJE_HKD, --存入金额-港币
                       0 AS QCJE, --取出金额（折算人民币）
                       0 AS QCJE_RMB, -- 取出金额-人民币
                       0 AS QCJE_USD, --取出金额-美元
                       0 AS QCJE_HKD, --取出金额-港币
                       0 AS ZRZQSZ, --转入证券市值（折算人民币）
                       0 AS ZD_RMB, --指定_人民币
                       0 AS ZD_USD, --指定_美元
                       0 AS ZTGZR_RMB, --转托管转入_人民币
                       0 AS ZTGZR_HKD, --  转托管转入_港币
                       0 AS ZCZQSZ, -- 转出证券市值(人民币+外币)
                       0 AS CZD_RMB, -- 撤指定_人民币
                       0 AS CZD_USD, --  撤指定_美元
                       0 AS ZTGZC_RMB, --  转托管转出_人民币
                       0 AS ZTGZC_HKD, --  转托管转出_港币
                       0 AS ZRSZ_QT, --转入市值其他  add by jins on 20150511
                       0 AS ZCSZ_QT, --转入市值其他  add by jins on 20150511
                       0 AS DYYK, -- 当月盈亏（日盈亏汇总）
                       0 AS FZZZC_30, --30日峰值总资产
                       0 AS BGZZC_30, --30日波谷总资产
                       SUM(ZJYE_RMB + ZJYE_HKD * HLCS_HKD + ZJYE_USD * HLCS_USD) AS LXJS, --利息积数
                       SUM((ZJYE_RMB + ZJYE_HKD * HLCS_HKD + ZJYE_USD * HLCS_USD) * VN_LLC) LCSR, --利差收入
                       SUM(ZFZ) AS ZFZ,
                       SUM(ZZC_RZRQ) AS ZZC_RZRQ, --总资产_融资融券
                       SUM(DBXJ_RZRQ) AS DBXJ_RZRQ, --担保现金_融资融券
                       SUM(DBGPSZ_RZRQ) AS DBGPSZ_RZRQ, --  担保股票市值_融资融券
                       0 AS ZZH_FZZZC_30, --30日总账户峰值总资产
                       0 AS ZZH_BGZZC_30, --30日总账户波谷总资产
                       0 AS ZCZQSZ_TRZRQ, --ADD BY CHENDEZHU AT 20140723
                       0 AS ZRZQSZ_FRZRQ, --ADD BY CHENDEZHU AT 20140723
                       SUM(ZQSZ_GGT) AS RJSZ_GGT, --港股通，20140905，吴邦杰
                       SUM(ZQSZ_SGT) AS RJSZ_SGT, --深港通，20160907，张功德
                       SUM(ZZC_GGQQ) AS RJZZC_GGQQ, --日均总资产_个股期权，20150327，胡丹丹
                       SUM(FLTZC) AS RJFLTZC,
                        SUM(A.ZFZ_RZRQ) RJZFZ_RZRQ,
                       SUM(ZQSZ_KCB) AS RJSZ_KCB
                  FROM DSC_STAT.T_STAT_KHZC_R A
                  JOIN (SELECT T1.KHH, T2.ZRR, T2.JYR
                          FROM DSC_BAS.T_KHXX_JJYW T1
                         INNER JOIN DSC_CFG.T_XTJYR T2 ON T2.ZRR BETWEEN T1.KHRQ AND
                                                          T1.XHRQ
                         WHERE T2.ZRR BETWEEN VN_FIRST_DAY AND VN_LAST_MONTHDAY
                           AND T2.ZRR > T2.JYR) T ON T.KHH = A.KHH
                                                 AND T.JYR = A.RQ
                 WHERE A.RQ BETWEEN VN_QC_RQ AND VN_LAST_DAY
                --AND A.YYB = (:D)
                 GROUP BY A.KHH, A.YYB, A.GRJG)
         GROUP BY KHH, YYB, GRJG;
    COMMIT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计本月总资产的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZC_Y_RJ]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '【ERROR-10002-1】';
    --记录日志明细——开始
    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计日均资产的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZC_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --日均
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_KHZC_Y
        (YF,
         KHH,
         YYB,
         GRJG,
         RJZZC,
         RJZC_RMB,
         RJZC_HKD,
         RJZC_USD,
         RJYE_RMB,
         RJYE_HKD,
         RJYE_USD,
         RJZQSZ,
         RJZQSZ_RMB,
         RJZQSZ_HKD,
         RJZQSZ_USD,
         RJZQSZ_ZB,
         RJZQSZ_HAZB,
         RJZQSZ_SAZB,
         RJZQSZ_ZXB,
         RJZQSZ_CYB,
         RJZQSZ_HB,
         RJZQSZ_SB,
         RJZQSZ_SB_A,
         RJZQSZ_SB_B,
         RJZQSZ_FBSJJ,
         RJZQSZ_ETF,
         RJZQSZ_LOF,
         RJZQSZ_SZJJT,
         RJZQSZ_DXJJ,
         RJZQSZ_JRCP,
         RJZQSZ_QZ,
         RJZQSZ_GZ,
         RJZQSZ_GSQYZ,
         RJZQSZ_KZZ,
         RJZQSZ_SG,
         RJZQSZ_QT,
         CRJE, --  存入金额（折算人民币）
         CRJE_RMB, --存入金额-人民币
         CRJE_USD, --存入金额-美元
         CRJE_HKD, --存入金额-港币
         QCJE, --取出金额（折算人民币）
         QCJE_RMB, -- 取出金额-人民币
         QCJE_USD, --取出金额-美元
         QCJE_HKD, --取出金额-港币
         ZRZQSZ, --转入证券市值（折算人民币）
         ZD_RMB, --指定_人民币
         ZD_USD, --指定_美元
         ZTGZR_RMB, --转托管转入_人民币
         ZTGZR_HKD, --  转托管转入_港币
         ZCZQSZ, -- 转出证券市值(人民币+外币)
         CZD_RMB, --    撤指定_人民币
         CZD_USD, --  撤指定_美元
         ZTGZC_RMB, --  转托管转出_人民币
         ZTGZC_HKD, --  转托管转出_港币
         ZRSZ_QT, -- 转入市场其他 -added by jins on 20150511
         ZCSZ_QT, --转出市值其他  -- added by jins on 20150511
         DYYK, -- 当月盈亏（月末-月初-流入净资产）
         FZZZC_30, --30日峰值总资产
         BGZZC_30, --30日波谷总资产
         LXJS, --利息积数
         LCSR, --利差收入
         BYZRTS, --本月在线自然天数
         BYJYRTS, --本月在线交易日天数
         RJZFZ, --日均总负债
         RJZZC_RZRQ, --日均总资产_融资融券
         RJDBXJ_RZRQ, --日均担保现金_融资融券
         RJDBGPSZ_RZRQ, --  日均担保股票市值_融资融券
         ZZH_FZZZC_30, --30日总账户峰值总资产
         ZZH_BGZZC_30, --30日总账户波谷总资产
         ZCZQSZ_TRZRQ, --ADD BY CHENDEZHU AT 20140723
         ZRZQSZ_FRZRQ, --ADD BY CHENDEZHU AT 20140723
         RJZQSZ_GGT, --港股通，20140905，吴邦杰
         RJZQSZ_SGT, --深港通，20160907，张功德
         RJZZC_GGQQ, --个股期权，20150327，胡丹丹
         RJFLTZC,
         RJZFZ_RZRQ,
         RJZQSZ_KCB
         )
        SELECT VN_YF AS YF,
               A.KHH,
               A.YYB,
               A.GRJG,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZZC / B.ZRRTS
               END AS RJZZC, --日均总资产
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZC_RMB / B.ZRRTS
               END AS RJZC_RMB,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZC_HKD / B.ZRRTS
               END AS RJZC_HKD,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZC_USD / B.ZRRTS
               END AS RJZC_USD,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJYE_RMB / B.ZRRTS
               END AS RJYE_RMB,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJYE_HKD / B.ZRRTS
               END AS RJYE_HKD,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJYE_USD / B.ZRRTS
               END AS RJYE_USD,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ / B.ZRRTS
               END AS RJSZ,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_RMB / B.ZRRTS
               END AS RJZQSZ_RMB,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_HKD / B.ZRRTS
               END AS RJZQSZ_HKD,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_USD / B.ZRRTS
               END AS RJZQSZ_USD,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_ZB / B.ZRRTS
               END AS RJSZ_ZB,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_HAZB / B.ZRRTS
               END AS RJSZ_HAZB,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_SAZB / B.ZRRTS
               END AS RJSZ_SAZB,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_ZXB / B.ZRRTS
               END AS RJSZ_ZXB,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_CYB / B.ZRRTS
               END AS RJSZ_CYB,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_HB / B.ZRRTS
               END AS RJSZ_HB,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_SB / B.ZRRTS
               END AS RJSZ_SB,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_SB_A / B.ZRRTS
               END AS RJSZ_SB_A,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_SB_B / B.ZRRTS
               END AS RJSZ_SB_B, --三板B 美元
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_FBSJJ / B.ZRRTS
               END AS RJSZ_FBSJJ,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_ETF / B.ZRRTS
               END AS RJSZ_ETF,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_LOF / B.ZRRTS
               END AS RJSZ_LOF,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_SZJJT / B.ZRRTS
               END AS RJSZ_SZJJT,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_DXJJ / B.ZRRTS
               END AS RJSZ_DXJJ,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_JRCP / B.ZRRTS
               END AS RJSZ_JRCP,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_QZ / B.ZRRTS
               END AS RJSZ_QZ,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_GZ / B.ZRRTS
               END AS RJSZ_GZ,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_GSQYZ / B.ZRRTS
               END AS RJSZ_GSQYZ,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_KZZ / B.ZRRTS
               END AS RJSZ_KZZ,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_SG / B.ZRRTS
               END AS RJSZ_SG,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    A.RJZQSZ_QT / B.ZRRTS
               END AS RJSZ_QT,
               CRJE AS CRJE, --  存入金额（折算人民币）
               CRJE_RMB AS CRJE_RMB, --存入金额-人民币
               CRJE_USD AS CRJE_USD, --存入金额-美元
               CRJE_HKD AS CRJE_HKD, --存入金额-港币
               QCJE AS QCJE, --取出金额（折算人民币）
               QCJE_RMB AS QCJE_RMB, -- 取出金额-人民币
               QCJE_USD AS QCJE_USD, --取出金额-美元
               QCJE_HKD AS QCJE_HKD, --取出金额-港币
               ZRZQSZ AS ZRZQSZ, --转入证券市值（折算人民币）
               ZD_RMB AS ZD_RMB, --指定_人民币
               ZD_USD AS ZD_USD, --指定_美元
               ZTGZR_RMB AS ZTGZR_RMB, --转托管转入_人民币
               ZTGZR_HKD AS ZTGZR_HKD, --  转托管转入_港币
               ZCZQSZ AS ZCZQSZ, -- 转出证券市值(人民币+外币)
               CZD_RMB AS CZD_RMB, -- 撤指定_人民币
               CZD_USD AS CZD_USD, --  撤指定_美元
               ZTGZC_RMB AS ZTGZC_RMB, --  转托管转出_人民币
               ZTGZC_HKD AS ZTGZC_HKD, --  转托管转出_港币
               ZRSZ_QT AS ZRSZQT,
               ZCSZ_QT AS ZCSZQT,
               DYYK AS DYYK, -- 当月盈亏（月末-月初-流入净资产）
               FZZZC_30 AS FZZZC_30, --30日峰值总资产
               BGZZC_30 AS BGZZC_30, --30日波谷总资产
               LXJS AS LXJS, --利息积数
               LCSR LCSR, --利差收入
               B.ZRRTS AS BYZRTS, --本月在线自然天数
               B.TS AS BYJYRTS, --本月在线交易日天数
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    A.RJZFZ / B.ZRRTS
               END AS RJZFZ, --日均总负债
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    A.RJZZC_RZRQ / B.ZRRTS
               END AS RJZZC_RZRQ, --日均总资产_融资融券
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    A.RJDBXJ_RZRQ / B.ZRRTS
               END AS RJDBXJ_RZRQ, --日均担保现金_融资融券
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    A.RJDBGPSZ_RZRQ / B.ZRRTS
               END AS RJDBGPSZ_RZRQ, --  日均担保股票市值_融资融券
               ZZH_FZZZC_30 AS ZZH_FZZZC_30, --30日峰值总资产
               ZZH_BGZZC_30 AS ZZH_BGZZC_30, --30日波谷总资产
               ZCZQSZ_TRZRQ, --ADD BY CHENDEZHU AT 20140723
               ZRZQSZ_FRZRQ, --ADD BY CHENDEZHU AT 20140723
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_GGT / B.ZRRTS --港股通，20140905，吴邦杰
               END AS RJZQSZ_GGT,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_SGT / B.ZRRTS --深港通，20160907，张功德
               END AS RJZQSZ_SGT,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZZC_GGQQ / B.ZRRTS --个股期权，20150327，胡丹丹
               END AS RJZZC_GGQQ,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJFLTZC / B.ZRRTS
               END AS RJFLTZC,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZFZ_RZRQ / B.ZRRTS
               END AS RJZFZ_RZRQ,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJZQSZ_KCB / B.ZRRTS
               END AS RJZQSZ_KCB
          FROM DSC_STAT.TMP_T_STAT_KHZC_Y_RJ A,
               (SELECT KHH,
                       (SELECT COUNT(DISTINCT ZRR)
                          FROM DSC_CFG.T_XTJYR
                         WHERE ZRR BETWEEN VN_FIRST_DAY AND VN_LAST_MONTHDAY
                           AND ZRR BETWEEN C.KHRQ AND C.XHRQ) AS ZRRTS,
                       (SELECT COUNT(DISTINCT JYR)
                          FROM DSC_CFG.T_XTJYR
                         WHERE JYR BETWEEN VN_FIRST_DAY AND VN_TJRQ
                           AND JYR BETWEEN C.KHRQ AND C.XHRQ) AS TS --本月在线交易日天数
                  FROM DSC_BAS.T_KHXX_JJYW C) B
         WHERE A.KHH = B.KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计日均资产的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZC_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10003】';
    VN_STEP  := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计期末资产的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZC_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --期未
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_KHZC_Y
        (YF,
         KHH,
         YYB,
         GRJG,
         YMZZC,
         YMZZC_RMB,
         YMZZC_HKD,
         YMZZC_USD,
         YMQTZC_RMB,
         YMQTZC_HKD,
         YMQTZC_USD,
         YMZJYE_RMB,
         YMZJYE_HKD,
         YMZJYE_USD,
         YMZQSZ,
         YMZQSZ_RMB,
         YMZQSZ_HKD,
         YMZQSZ_USD,
         YMZQSZ_ZB,
         YMZQSZ_HAZB,
         YMZQSZ_SAZB,
         YMZQSZ_ZXB,
         YMZQSZ_CYB,
         YMZQSZ_HB,
         YMZQSZ_SB,
         YMZQSZ_SB_A,
         YMZQSZ_SB_B,
         YMZQSZ_FBSJJ,
         YMZQSZ_ETF,
         YMZQSZ_LOF,
         YMZQSZ_SZJJT,
         YMZQSZ_DXJJ,
         YMZQSZ_JRCP,
         YMZQSZ_QZ,
         YMZQSZ_GZ,
         YMZQSZ_GSZ,
         YMZQSZ_KZZ,
         YMZQSZ_SG,
         YMZQSZ_QT,
         SZXZJE, --市值修正金额
         ZFZ, --总负债
         FLTZC, --非流通资产
         ZTZC, -- 在途资产
         ZQZC, -- 债权资产(包括：质押式回购融券，报价回购融资，转融通出借)
         DYPSZ, --  抵押品市值（包括：质押入库债券市值）
         YMZFZ_RZRQ, -- 月末总负债  --MOD BY CHENDEZHU AT 20140728 YMZFZ更名为YMZFZ_RZRQ
         YMZZC_RZRQ, -- 月末总资产_融资融券
         YMDBXJ_RZRQ, -- 月末担保现金_融资融券
         YMDBGPSZ_RZRQ, -- 月末担保股票市值_融资融券
         CCCB,
         YMZQSZ_GGT, --港股通，20140905，吴邦杰
         YMZQSZ_SGT, --深港通，20160907，张功德
         YMZZC_GGQQ, --个股期权，20150206，hdd
         YMZJYE_GGQQ, --个股期权，20150206，hdd
         YMZQSZ_GGQQ, --个股期权，20150206，hdd
         YMZQSZ_KCB
         )
        SELECT VN_YF AS YF,
               KHH,
               YYB,
               GRJG,
               ZZC AS YMZZC,
               ZZC_RMB AS YMZZC_RMB,
               ZZC_HKD AS YMZZC_HKD,
               ZZC_USD AS YMZZC_USD,
               QTZC_RMB AS YMQTZC_RMB,
               QTZC_HKD AS YMQTZC_HKD,
               QTZC_USD AS YMQTZC_USD,
               ZJYE_RMB AS YMZJYE_RMB,
               ZJYE_HKD AS YMZJYE_HKD,
               ZJYE_USD AS YMZJYE_USD,
               (ZQSZ_RMB + ZQSZ_HKD * HLCS_HKD + ZQSZ_USD * HLCS_USD) AS YMZQSZ,
               ZQSZ_RMB AS YMZQSZ_RMB,
               ZQSZ_HKD AS YMZQSZ_HKD,
               ZQSZ_USD AS YMZQSZ_USD,
               ZQSZ_ZB AS YMZQSZ_ZB,
               ZQSZ_HAZB AS YMZQSZ_HAZB,
               ZQSZ_SAZB AS YMZQSZ_SAZB,
               ZQSZ_ZXB AS YMZQSZ_ZXB,
               ZQSZ_CYB AS YMZQSZ_CYB,
               ZQSZ_HB AS YMZQSZ_HB,
               ZQSZ_SB AS YMZQSZ_SB,
               ZQSZ_SB_A AS YMZQSZ_SB_A,
               ZQSZ_SB_B AS YMZQSZ_SB_B,
               ZQSZ_FBSJJ AS YMZQSZ_FBSJJ,
               ZQSZ_ETF AS YMZQSZ_ETF,
               ZQSZ_LOF AS YMZQSZ_LOF,
               ZQSZ_SZJJT AS YMZQSZ_SZJJT,
               ZQSZ_DXJJ AS YMZQSZ_DXJJ,
               ZQSZ_JRCP AS YMZQSZ_JRCP,
               ZQSZ_QZ AS YMZQSZ_QZ,
               ZQSZ_GZ AS YMZQSZ_GZ,
               ZQSZ_GSQYZ AS YMZQSZ_GSQYZ,
               ZQSZ_KZZ AS YMZQSZ_KZZ,
               ZQSZ_SG AS YMZQSZ_SG,
               ZQSZ_QT AS YMZQSZ_QT,
               SZXZJE, --市值修正金额
               ZFZ, --总负债
               FLTZC, --非流通资产
               ZTZC, -- 在途资产
               ZQZC, -- 债权资产(包括：质押式回购融券，报价回购融资，转融通出借)
               DYPSZ, --  抵押品市值（包括：质押入库债券市值）
               ZFZ_RZRQ AS YMZFZ_RZRQ, -- 月末总负债 --MOD BY CHENDEZHU AT 20140728 YMZFZ更名为YMZFZ_RZRQ
               ZZC_RZRQ AS YMZZC_RZRQ, -- 月末总资产_融资融券
               DBXJ_RZRQ AS YMDBXJ_RZRQ, -- 月末担保现金_融资融券
               DBGPSZ_RZRQ AS YMDBGPSZ_RZRQ, -- 月末担保股票市值_融资融券
               CCCB,
               ZQSZ_GGT AS YMZQSZ_GGT, --港股通，20140905，吴邦杰
               ZQSZ_SGT AS YMZQSZ_SGT, --深港通，20160907，张功德
               ZZC_GGQQ, --个股期权，20150206，hdd
               ZJYE_GGQQ, --个股期权，20150206，hdd
               ZQSZ_GGQQ, --个股期权，20150206，hdd
               ZQSZ_KCB AS YMZQSZ_KCB
          FROM DSC_STAT.T_STAT_KHZC_R
         WHERE RQ = VN_LAST_DAY;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计期末资产的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZC_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10005】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_KHZC_Y]进行汇总统计，插入目标表[DSC_STAT.T_STAT_KHZC_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    EXECUTE IMMEDIATE 'ALTER TABLE DSC_STAT.T_STAT_KHZC_Y NOLOGGING';
    --写入结果表
    INSERT /*+ APPEND*/
    INTO DSC_STAT.T_STAT_KHZC_Y
        (YF,
         KHH,
         YYB,
         GRJG,
         YCZZC,
         YCZZC_RMB,
         YCZZC_HKD,
         YCZZC_USD,
         YMZZC,
         YMZZC_RMB,
         YMZZC_HKD,
         YMZZC_USD,
         YMQTZC_RMB,
         YMQTZC_HKD,
         YMQTZC_USD,
         YMZJYE_RMB,
         YMZJYE_HKD,
         YMZJYE_USD,
         YMZQSZ,
         YMZQSZ_RMB,
         YMZQSZ_HKD,
         YMZQSZ_USD,
         YMZQSZ_ZB,
         YMZQSZ_HAZB,
         YMZQSZ_SAZB,
         YMZQSZ_ZXB,
         YMZQSZ_CYB,
         YMZQSZ_HB,
         YMZQSZ_SB,
         YMZQSZ_SB_A,
         YMZQSZ_SB_B,
         YMZQSZ_FBSJJ,
         YMZQSZ_ETF,
         YMZQSZ_LOF,
         YMZQSZ_SZJJT,
         YMZQSZ_DXJJ,
         YMZQSZ_JRCP,
         YMZQSZ_QZ,
         YMZQSZ_GZ,
         YMZQSZ_GSZ,
         YMZQSZ_KZZ,
         YMZQSZ_SG,
         YMZQSZ_QT,
         RJZZC,
         RJZC_RMB,
         RJZC_HKD,
         RJZC_USD,
         RJZJYE_RMB,
         RJZJYE_HKD,
         RJZJYE_USD,
         RJZQSZ,
         RJZQSZ_RMB,
         RJZQSZ_HKD,
         RJZQSZ_USD,
         RJZQSZ_ZB,
         RJZQSZ_HAZB,
         RJZQSZ_SAZB,
         RJZQSZ_ZXB,
         RJZQSZ_CYB,
         RJZQSZ_HB,
         RJZQSZ_SB,
         RJZQSZ_SB_A,
         RJZQSZ_SB_B,
         RJZQSZ_FBSJJ,
         RJZQSZ_ETF,
         RJZQSZ_LOF,
         RJZQSZ_SZJJT,
         RJZQSZ_DXJJ,
         RJZQSZ_JRCP,
         RJZQSZ_QZ,
         RJZQSZ_GZ,
         RJZQSZ_GSQYZ,
         RJZQSZ_KZZ,
         RJZQSZ_SG,
         RJZQSZ_QT,
         CRJE,
         CRJE_RMB,
         CRJE_USD,
         CRJE_HKD,
         QCJE,
         QCJE_RMB,
         QCJE_USD,
         QCJE_HKD,
         ZRZQSZ,
         ZD_RMB,
         ZD_USD,
         ZTGZR_RMB,
         ZTGZR_HKD,
         ZCZQSZ,
         CZD_RMB,
         CZD_USD,
         ZTGZC_RMB,
         ZTGZC_HKD,
         ZRSZ_QT, --转入市值其他  --added by jins on 20150511
         ZCSZ_QT, --转出市值其他  --added by jins on 20150511
         DYYK,
         FZZZC_30,
         BGZZC_30,
         LXJS,
         LCSR,
         BYZRTS,
         BYJYRTS,
         HLCS_HKD,
         HLCS_USD,
         SZXZJE, --市值修正金额
         ZFZ, --总负债
         FLTZC, --非流通资产
         ZTZC, -- 在途资产
         ZQZC, -- 债权资产(包括：质押式回购融券，报价回购融资，转融通出借)
         DYPSZ, --  抵押品市值（包括：质押入库债券市值）
         RJZFZ, --日均总负债
         RJZZC_RZRQ, --日均总资产_融资融券
         RJDBXJ_RZRQ, --日均担保现金_融资融券
         RJDBGPSZ_RZRQ, --  日均担保股票市值_融资融券
         YMZFZ_RZRQ, -- 月末总负债  --MOD BY CHENDEZHU  AT 20140728 YMZFZ更名为YMZFZ_RZRQ
         YMZZC_RZRQ, -- 月末总资产_融资融券
         YMDBXJ_RZRQ, -- 月末担保现金_融资融券
         YMDBGPSZ_RZRQ, -- 月末担保股票市值_融资融券
         CCCB,
         ZZH_FZZZC_30,
         ZZH_BGZZC_30,
         ZCZQSZ_TRZRQ, --ADD BY CHENDEZHU AT 20140723
         ZRZQSZ_FRZRQ, --ADD BY CHENDEZHU AT 20140723
         RJZQSZ_GGT, --港股通，20140905，吴邦杰
         YMZQSZ_GGT, --港股通，20140905，吴邦杰
         RJZQSZ_SGT, --深港通，20160907，张功德
         YMZQSZ_SGT, --深港通，20160907，张功德
         YMZZC_GGQQ, --个股期权，20150206，hdd
         YMZJYE_GGQQ, --个股期权，20150206，hdd
         YMZQSZ_GGQQ, --个股期权，20150206，hdd
         RJZZC_GGQQ, --个股期权，20150206，hdd
         RJFLTZC,
         RJZFZ_RZRQ,
         YMZQSZ_KCB,
         RJZQSZ_KCB
         )
        SELECT YF,
               B.KHH,
               B.YYB,
               B.GRJG,
               YCZZC,
               YCZZC_RMB,
               YCZZC_HKD,
               YCZZC_USD,
               YMZZC,
               YMZZC_RMB,
               YMZZC_HKD,
               YMZZC_USD,
               YMQTZC_RMB,
               YMQTZC_HKD,
               YMQTZC_USD,
               YMZJYE_RMB,
               YMZJYE_HKD,
               YMZJYE_USD,
               YMZQSZ,
               YMZQSZ_RMB,
               YMZQSZ_HKD,
               YMZQSZ_USD,
               YMZQSZ_ZB,
               YMZQSZ_HAZB,
               YMZQSZ_SAZB,
               YMZQSZ_ZXB,
               YMZQSZ_CYB,
               YMZQSZ_HB,
               YMZQSZ_SB,
               YMZQSZ_SB_A,
               YMZQSZ_SB_B,
               YMZQSZ_FBSJJ,
               YMZQSZ_ETF,
               YMZQSZ_LOF,
               YMZQSZ_SZJJT,
               YMZQSZ_DXJJ,
               YMZQSZ_JRCP,
               YMZQSZ_QZ,
               YMZQSZ_GZ,
               YMZQSZ_GSZ,
               YMZQSZ_KZZ,
               YMZQSZ_SG,
               YMZQSZ_QT,
               RJZZC,
               RJZC_RMB,
               RJZC_HKD,
               RJZC_USD,
               RJZJYE_RMB,
               RJZJYE_HKD,
               RJZJYE_USD,
               RJZQSZ,
               RJZQSZ_RMB,
               RJZQSZ_HKD,
               RJZQSZ_USD,
               RJZQSZ_ZB,
               RJZQSZ_HAZB,
               RJZQSZ_SAZB,
               RJZQSZ_ZXB,
               RJZQSZ_CYB,
               RJZQSZ_HB,
               RJZQSZ_SB,
               RJZQSZ_SB_A,
               RJZQSZ_SB_B,
               RJZQSZ_FBSJJ,
               RJZQSZ_ETF,
               RJZQSZ_LOF,
               RJZQSZ_SZJJT,
               RJZQSZ_DXJJ,
               RJZQSZ_JRCP,
               RJZQSZ_QZ,
               RJZQSZ_GZ,
               RJZQSZ_GSQYZ,
               RJZQSZ_KZZ,
               RJZQSZ_SG,
               RJZQSZ_QT,
               CRJE,
               CRJE_RMB,
               CRJE_USD,
               CRJE_HKD,
               QCJE,
               QCJE_RMB,
               QCJE_USD,
               QCJE_HKD,
               ZRZQSZ,
               ZD_RMB,
               ZD_USD,
               ZTGZR_RMB,
               ZTGZR_HKD,
               ZCZQSZ,
               CZD_RMB,
               CZD_USD,
               ZTGZC_RMB,
               ZTGZC_HKD,
               ZRSZ_QT, -- 转入市值其他 added by jins on 20150511
               ZCSZ_QT, -- 转出市值其他 added by jins on 20150511
               DYYK,
               FZZZC_30,
               BGZZC_30,
               LXJS,
               LCSR,
               BYZRTS,
               BYJYRTS,
               HLCS_HKD,
               HLCS_USD,
               SZXZJE, --市值修正金额
               ZFZ, --总负债
               FLTZC, --非流通资产
               ZTZC, -- 在途资产
               ZQZC, -- 债权资产(包括：质押式回购融券，报价回购融资，转融通出借)
               DYPSZ, --  抵押品市值（包括：质押入库债券市值）
               RJZFZ, --日均总负债
               RJZZC_RZRQ, --日均总资产_融资融券
               RJDBXJ_RZRQ, --日均担保现金_融资融券
               RJDBGPSZ_RZRQ, --  日均担保股票市值_融资融券
               YMZFZ_RZRQ, -- 月末总负债 --MOD BY CHENDEZHU AT 20140728 YMZFZ更名为YMZFZ_RZRQ
               YMZZC_RZRQ, -- 月末总资产_融资融券
               YMDBXJ_RZRQ, -- 月末担保现金_融资融券
               YMDBGPSZ_RZRQ, -- 月末担保股票市值_融资融券
               CCCB,
               ZZH_FZZZC_30,
               ZZH_BGZZC_30,
               ZCZQSZ_TRZRQ,
               ZRZQSZ_FRZRQ,
               RJZQSZ_GGT,
               YMZQSZ_GGT,
               RJZQSZ_SGT,
               YMZQSZ_SGT,
               YMZZC_GGQQ,
               YMZJYE_GGQQ,
               YMZQSZ_GGQQ,
               RJZZC_GGQQ,
               RJFLTZC,
               RJZFZ_RZRQ,
               YMZQSZ_KCB,
               RJZQSZ_KCB
          FROM (SELECT VN_YF AS YF,
                       KHH,
                       /*YYB, GRJG,*/
                       SUM(NVL(YCZZC, 0)) AS YCZZC,
                       SUM(NVL(YCZZC_RMB, 0)) AS YCZZC_RMB,
                       SUM(NVL(YCZZC_HKD, 0)) AS YCZZC_HKD,
                       SUM(NVL(YCZZC_USD, 0)) AS YCZZC_USD,
                       SUM(NVL(YMZZC, 0)) AS YMZZC,
                       SUM(NVL(YMZZC_RMB, 0)) AS YMZZC_RMB,
                       SUM(NVL(YMZZC_HKD, 0)) AS YMZZC_HKD,
                       SUM(NVL(YMZZC_USD, 0)) AS YMZZC_USD,
                       SUM(NVL(YMQTZC_RMB, 0)) AS YMQTZC_RMB,
                       SUM(NVL(YMQTZC_HKD, 0)) AS YMQTZC_HKD,
                       SUM(NVL(YMQTZC_USD, 0)) AS YMQTZC_USD,
                       SUM(NVL(YMZJYE_RMB, 0)) AS YMZJYE_RMB,
                       SUM(NVL(YMZJYE_HKD, 0)) AS YMZJYE_HKD,
                       SUM(NVL(YMZJYE_USD, 0)) AS YMZJYE_USD,
                       SUM(NVL(YMZQSZ, 0)) AS YMZQSZ,
                       SUM(NVL(YMZQSZ_RMB, 0)) AS YMZQSZ_RMB,
                       SUM(NVL(YMZQSZ_HKD, 0)) AS YMZQSZ_HKD,
                       SUM(NVL(YMZQSZ_USD, 0)) AS YMZQSZ_USD,
                       SUM(NVL(YMZQSZ_ZB, 0)) AS YMZQSZ_ZB,
                       SUM(NVL(YMZQSZ_HAZB, 0)) AS YMZQSZ_HAZB,
                       SUM(NVL(YMZQSZ_SAZB, 0)) AS YMZQSZ_SAZB,
                       SUM(NVL(YMZQSZ_ZXB, 0)) AS YMZQSZ_ZXB,
                       SUM(NVL(YMZQSZ_CYB, 0)) AS YMZQSZ_CYB,
                       SUM(NVL(YMZQSZ_HB, 0)) AS YMZQSZ_HB,
                       SUM(NVL(YMZQSZ_SB, 0)) AS YMZQSZ_SB,
                       SUM(NVL(YMZQSZ_SB_A, 0)) AS YMZQSZ_SB_A,
                       SUM(NVL(YMZQSZ_SB_B, 0)) AS YMZQSZ_SB_B,
                       SUM(NVL(YMZQSZ_FBSJJ, 0)) AS YMZQSZ_FBSJJ,
                       SUM(NVL(YMZQSZ_ETF, 0)) AS YMZQSZ_ETF,
                       SUM(NVL(YMZQSZ_LOF, 0)) AS YMZQSZ_LOF,
                       SUM(NVL(YMZQSZ_SZJJT, 0)) AS YMZQSZ_SZJJT,
                       SUM(NVL(YMZQSZ_DXJJ, 0)) AS YMZQSZ_DXJJ,
                       SUM(NVL(YMZQSZ_JRCP, 0)) AS YMZQSZ_JRCP,
                       SUM(NVL(YMZQSZ_QZ, 0)) AS YMZQSZ_QZ,
                       SUM(NVL(YMZQSZ_GZ, 0)) AS YMZQSZ_GZ,
                       SUM(NVL(YMZQSZ_GSZ, 0)) AS YMZQSZ_GSZ,
                       SUM(NVL(YMZQSZ_KZZ, 0)) AS YMZQSZ_KZZ,
                       SUM(NVL(YMZQSZ_SG, 0)) AS YMZQSZ_SG,
                       SUM(NVL(YMZQSZ_QT, 0)) AS YMZQSZ_QT,
                       SUM(NVL(RJZZC, 0)) AS RJZZC,
                       SUM(NVL(RJZC_RMB, 0)) AS RJZC_RMB,
                       SUM(NVL(RJZC_HKD, 0)) AS RJZC_HKD,
                       SUM(NVL(RJZC_USD, 0)) AS RJZC_USD,
                       SUM(NVL(RJYE_RMB, 0)) AS RJZJYE_RMB,
                       SUM(NVL(RJYE_HKD, 0)) AS RJZJYE_HKD,
                       SUM(NVL(RJYE_USD, 0)) AS RJZJYE_USD,
                       SUM(NVL(RJZQSZ, 0)) AS RJZQSZ,
                       SUM(NVL(RJZQSZ_RMB, 0)) AS RJZQSZ_RMB,
                       SUM(NVL(RJZQSZ_HKD, 0)) AS RJZQSZ_HKD,
                       SUM(NVL(RJZQSZ_USD, 0)) AS RJZQSZ_USD,
                       SUM(NVL(RJZQSZ_ZB, 0)) AS RJZQSZ_ZB,
                       SUM(NVL(RJZQSZ_HAZB, 0)) AS RJZQSZ_HAZB,
                       SUM(NVL(RJZQSZ_SAZB, 0)) AS RJZQSZ_SAZB,
                       SUM(NVL(RJZQSZ_ZXB, 0)) AS RJZQSZ_ZXB,
                       SUM(NVL(RJZQSZ_CYB, 0)) AS RJZQSZ_CYB,
                       SUM(NVL(RJZQSZ_HB, 0)) AS RJZQSZ_HB,
                       SUM(NVL(RJZQSZ_SB, 0)) AS RJZQSZ_SB,
                       SUM(NVL(RJZQSZ_SB_A, 0)) AS RJZQSZ_SB_A,
                       SUM(NVL(RJZQSZ_SB_B, 0)) AS RJZQSZ_SB_B,
                       SUM(NVL(RJZQSZ_FBSJJ, 0)) AS RJZQSZ_FBSJJ,
                       SUM(NVL(RJZQSZ_ETF, 0)) AS RJZQSZ_ETF,
                       SUM(NVL(RJZQSZ_LOF, 0)) AS RJZQSZ_LOF,
                       SUM(NVL(RJZQSZ_SZJJT, 0)) AS RJZQSZ_SZJJT,
                       SUM(NVL(RJZQSZ_DXJJ, 0)) AS RJZQSZ_DXJJ,
                       SUM(NVL(RJZQSZ_JRCP, 0)) AS RJZQSZ_JRCP,
                       SUM(NVL(RJZQSZ_QZ, 0)) AS RJZQSZ_QZ,
                       SUM(NVL(RJZQSZ_GZ, 0)) AS RJZQSZ_GZ,
                       SUM(NVL(RJZQSZ_GSQYZ, 0)) AS RJZQSZ_GSQYZ,
                       SUM(NVL(RJZQSZ_KZZ, 0)) AS RJZQSZ_KZZ,
                       SUM(NVL(RJZQSZ_SG, 0)) AS RJZQSZ_SG,
                       SUM(NVL(RJZQSZ_QT, 0)) AS RJZQSZ_QT,
                       SUM(NVL(CRJE, 0)) AS CRJE,
                       SUM(NVL(CRJE_RMB, 0)) AS CRJE_RMB,
                       SUM(NVL(CRJE_USD, 0)) AS CRJE_USD,
                       SUM(NVL(CRJE_HKD, 0)) AS CRJE_HKD,
                       SUM(NVL(QCJE, 0)) AS QCJE,
                       SUM(NVL(QCJE_RMB, 0)) AS QCJE_RMB,
                       SUM(NVL(QCJE_USD, 0)) AS QCJE_USD,
                       SUM(NVL(QCJE_HKD, 0)) AS QCJE_HKD,
                       SUM(NVL(ZRZQSZ, 0)) AS ZRZQSZ,
                       SUM(NVL(ZD_RMB, 0)) AS ZD_RMB,
                       SUM(NVL(ZD_USD, 0)) AS ZD_USD,
                       SUM(NVL(ZTGZR_RMB, 0)) AS ZTGZR_RMB,
                       SUM(NVL(ZTGZR_HKD, 0)) AS ZTGZR_HKD,
                       SUM(NVL(ZCZQSZ, 0)) AS ZCZQSZ,
                       SUM(NVL(CZD_RMB, 0)) AS CZD_RMB,
                       SUM(NVL(CZD_USD, 0)) AS CZD_USD,
                       SUM(NVL(ZTGZC_RMB, 0)) AS ZTGZC_RMB,
                       SUM(NVL(ZTGZC_HKD, 0)) AS ZTGZC_HKD,
                       SUM(NVL(ZRSZ_QT, 0)) AS ZRSZ_QT, --转入市值 其他 added by jins on 20150511
                       SUM(NVL(ZCSZ_QT, 0)) AS ZCSZ_QT, --转出市值 其他 added by jins on 20150511
                       SUM(NVL(DYYK, 0)) AS DYYK, --日盈亏汇总求和
                       SUM(NVL(FZZZC_30, 0)) AS FZZZC_30,
                       SUM(NVL(BGZZC_30, 0)) AS BGZZC_30,
                       SUM(NVL(LXJS, 0)) AS LXJS,
                       SUM(NVL(LCSR, 0)) AS LCSR,
                       MAX(NVL(BYZRTS, 0)) AS BYZRTS,
                       MAX(NVL(BYJYRTS, 0)) AS BYJYRTS,
                       VN_HL_HKD AS HLCS_HKD,
                       VN_HL_USD AS HLCS_USD,
                       SUM(NVL(SZXZJE, 0)) AS SZXZJE, --市值修正金额
                       SUM(NVL(ZFZ, 0)) AS ZFZ, --总负债
                       SUM(NVL(FLTZC, 0)) AS FLTZC, --非流通资产
                       SUM(NVL(ZTZC, 0)) AS ZTZC, -- 在途资产
                       SUM(NVL(ZQZC, 0)) AS ZQZC, -- 债权资产(包括：质押式回购融券，报价回购融资，转融通出借)
                       SUM(NVL(DYPSZ, 0)) AS DYPSZ, --  抵押品市值（包括：质押入库债券市值）
                       SUM(NVL(RJZFZ, 0)) AS RJZFZ, --日均总负债
                       SUM(NVL(RJZZC_RZRQ, 0)) AS RJZZC_RZRQ, --日均总资产_融资融券
                       SUM(NVL(RJDBXJ_RZRQ, 0)) AS RJDBXJ_RZRQ, --日均担保现金_融资融券
                       SUM(NVL(RJDBGPSZ_RZRQ, 0)) AS RJDBGPSZ_RZRQ, --  日均担保股票市值_融资融券
                       SUM(NVL(YMZFZ_RZRQ, 0)) AS YMZFZ_RZRQ, -- 月末总负债 --MOD BY CHENDEZHU AT 20140728 YMZFZ更名为YMZFZ_RZRQ
                       SUM(NVL(YMZZC_RZRQ, 0)) AS YMZZC_RZRQ, -- 月末总资产_融资融券
                       SUM(NVL(YMDBXJ_RZRQ, 0)) AS YMDBXJ_RZRQ, -- 月末担保现金_融资融券
                       SUM(NVL(YMDBGPSZ_RZRQ, 0)) AS YMDBGPSZ_RZRQ, -- 月末担保股票市值_融资融券
                       SUM(NVL(CCCB, 0)) AS CCCB,
                       SUM(NVL(ZZH_FZZZC_30, 0)) AS ZZH_FZZZC_30,
                       SUM(NVL(ZZH_BGZZC_30, 0)) AS ZZH_BGZZC_30,
                       SUM(NVL(ZCZQSZ_TRZRQ, 0)) AS ZCZQSZ_TRZRQ,
                       SUM(NVL(ZRZQSZ_FRZRQ, 0)) AS ZRZQSZ_FRZRQ,
                       SUM(NVL(RJZQSZ_GGT, 0)) AS RJZQSZ_GGT,
                       SUM(NVL(YMZQSZ_GGT, 0)) AS YMZQSZ_GGT,
                       SUM(NVL(RJZQSZ_SGT, 0)) AS RJZQSZ_SGT,
                       SUM(NVL(YMZQSZ_SGT, 0)) AS YMZQSZ_SGT,
                       SUM(NVL(YMZZC_GGQQ, 0)) AS YMZZC_GGQQ,
                       SUM(NVL(YMZJYE_GGQQ, 0)) AS YMZJYE_GGQQ,
                       SUM(NVL(YMZQSZ_GGQQ, 0)) AS YMZQSZ_GGQQ,
                       SUM(NVL(RJZZC_GGQQ, 0)) AS RJZZC_GGQQ,
                       SUM(NVL(RJFLTZC, 0)) AS RJFLTZC,
                      SUM(NVL(RJZFZ_RZRQ, 0)) AS RJZFZ_RZRQ,
                       SUM(NVL(YMZQSZ_KCB,0)) AS YMZQSZ_KCB,
                       SUM(NVL(RJZQSZ_KCB,0)) AS RJZQSZ_KCB
                  FROM TMP_T_STAT_KHZC_Y
                 GROUP BY KHH /*, YYB, GRJG*/
                ) A
         INNER JOIN DSC_BAS.T_KHXX_JJYW B ON A.KHH = B.KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_KHZC_Y]进行汇总统计，插入目标表[DSC_STAT.T_STAT_KHZC_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_KHZC_Y';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_KHZC_Y_RJ';

    --月初做表分析
    --记录日志明细——开始
    O_S_NOTE := '【ERROR-10006】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '对表[DSC_STAT.T_STAT_KHZC_Y]' ||
                                                    VS_PART || '分区进行分析！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    PUB_SYS.P_GATHER_STATS(O_N_CODE    => VN_CODE,
                           O_S_NOTE    => VS_NOTE,
                           I_N_TJRQ    => I_N_TJRQ,
                           I_N_MODE    => 'YC',
                           I_S_OWNER   => 'DSC_STAT',
                           I_S_TABNAME => 'T_STAT_KHZC_Y',
                           I_S_PART    => VS_PART);
    --记录日志明细——结束
    IF VN_CODE = 2 THEN
        VS_NOTE  := '未分析';
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL;
        O_S_NOTE := '运行正常';
    ELSIF VN_CODE = 0 THEN
        VS_NOTE  := '分析完成';
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL;
        O_S_NOTE := '运行正常';
    END IF;


    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '对表[DSC_STAT.T_STAT_KHZC_Y]' ||
                                                    VS_PART || '进行分析！',
                              I_S_CHANGEDESC     => VS_NOTE,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_KHZC_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_KHZQJY_FLB_Y(O_N_CODE OUT INT,
                                                         O_S_NOTE OUT VARCHAR2,
                                                         I_N_TJRQ IN INT,
                                                         I_N_REDO IN NUMBER DEFAULT 0) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   客户_证券交易分类别统计月表算法
         功能简述：   客户_证券交易分类别统计月表算法
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
        返回：

         算法：

         注意事项：

         数据源：
                 DSC_CFG.T_HLCS           ：汇率参数
                 DSC_BAS.T_ZQYE           ：账户_证券余额表
                 DSC_HIS.T_ZQYELS         ：账户_证券余额历史表
                 DSC_BAS.T_XY_ZQYE        ：信用_证券余额表
                 DSC_HIS.T_XY_ZQYELS      ：信用_证券余额历史表
                 DSC_BAS.T_FP_CPFE        ：金融产品_金融产品份额表
                 DSC_HIS.T_FP_CPFE_HIS    ：金融产品_金融产品份额历史表
                 DSC_BAS.T_JGMXLS         ：交易_交割明细流水表
                 DSC_HIS.T_JGMXLS_HIS     ：交易_交割明细流水历史表
                 DSC_BAS.T_XY_JGMXLS      ：信用_交割明细流水表
                 DSC_HIS.T_XY_JGMXLS_HIS  ：信用_交割明细流水历史表
                 DSC_BAS.T_FP_JGMXLS      ：金融产品_交割明细流水
                 DSC_HIS.T_FP_JGMXLS_HIS  ：金融产品_交割明细流水历史表

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         吴邦杰      2015/05/13                 创建
         吴邦杰      2015/08/10                 修改：1、普通账户交易统计中小板统计JB3_ZQPZ = '112'
                                                      2、新增ZQDM,客户证券交易分类表细化到证券代码或产品代码
                                                      3、新增指标成交数量，成交数量_买入，成交数量_卖出
         黄宏峰      2016/09/01                 修改：调整过滤掉销户客户时对应条件的写法，由KHZT != 3变更为KHZT != '3'

    */
    VS_PROC_NAME     VARCHAR2(100) := $$PLSQL_UNIT;
    VN_TJRQ          NUMBER(8) := I_N_TJRQ;
    VN_JYR           NUMBER(8) := I_N_TJRQ; --交易日
    VN_YF            NUMBER(6) := PUB_SYS.F_GET_DATE(I_N_TJRQ, 2); --月份
    VN_FIRST_DAY     NUMBER(8); --期初交易日
    VN_LAST_DAY      NUMBER(8); --期末交易日
    VN_LAST_MONTHDAY NUMBER(8); --月末日期
    VN_LAST_MONTHJYR NUMBER(8); --月末交易日
    VN_LLC           DSC_CFG.T_LCCS.LLC%TYPE; --利率差
    VN_HL_HKD        DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD        DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_LOGID         INT; --LOG 表记录ID
    VN_ROWCOUNT      INT; --记录数
    VN_STEP          INT; --动作步数
    VN_PROC_NO       PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER          VARCHAR2(30);
    VN_QC_RQ         NUMBER(8); --上月月末交易日（期初）
    VN_TJRQ_FLT      NUMBER(8); --取大小非非流通持仓数据的日期
BEGIN

    --变量初始化

    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);

    O_S_NOTE := '【ERROR-10000】';
    --重做删除原数据
    IF I_N_REDO IN (0, 1, 2) THEN
        --分区删除
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZQJY_FLB_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        EXECUTE IMMEDIATE 'ALTER TABLE DSC_STAT.T_STAT_KHZQJY_FLB_Y TRUNCATE PARTITION PY_' ||
                          VN_YF || '  UPDATE GLOBAL INDEXES';
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZQJY_FLB_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_KHZQJY_FLB_Y]分区数据删除成功！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;
    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE  DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y';
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10000-2】';
    --月初
    VN_FIRST_DAY := PUB_SYS.F_GET_DATE(VN_TJRQ, 0);
    --期末日期
    VN_LAST_DAY := I_N_TJRQ;
    --上月末交易日 --用来计算融资融券利息
    SELECT JYR
      INTO VN_QC_RQ
      FROM DSC_CFG.T_XTJYR T
     WHERE T.ZRR = PUB_SYS.F_GET_DATE(VN_TJRQ, 7);

    --月末日期
    SELECT MAX(ZRR) INTO VN_LAST_MONTHDAY FROM DSC_CFG.T_XTJYR T WHERE T.NY = VN_YF;
    --月末交易日
    SELECT MAX(JYR) INTO VN_LAST_MONTHJYR FROM DSC_CFG.T_XTJYR T WHERE T.NY = VN_YF;
    --利率差
    BEGIN
        SELECT A.LLC
          INTO VN_LLC
          FROM DSC_CFG.T_LCCS A
         WHERE I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ
           AND BZ = '1';
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '没有维护利率差！';
    END;

    --获取期初汇率
    --港币
    BEGIN
        SELECT A.GSBL
          INTO VN_HL_HKD
          FROM DSC_CFG.T_HLCS A
         WHERE A.BZ = '2'
           AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '没有维护“港币”汇率！';
    END;
    BEGIN
        --美元
        SELECT A.GSBL
          INTO VN_HL_USD
          FROM DSC_CFG.T_HLCS A
         WHERE A.BZ = '3'
           AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '没有维护“美元”汇率！';
    END;

    --记录日志明细——开始
    O_S_NOTE := '【ERROR-10001】';
    VN_STEP  := VN_STEP + 1;

    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计普通帐户相关资产数据(排除中小板)，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --期末普通账户资产统计数据
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y
        (KHH, ZHLX, ZQLX, ZQLB, ZQDM, JYS, BZ, HLCS, YMZQSZ, YMZQSL, CCCB, XS_FLAG)
        SELECT A.KHH,
               '1' AS ZHLX, --普通帐户
               '1' AS ZQLX, --证券类
               NVL(A.ZQLB, '00') AS ZQLB,
               A.ZQDM,
               A.JYS,
               A.BZ,
               CASE
                   WHEN A.BZ = '2' THEN
                    VN_HL_HKD
                   WHEN A.BZ = '3' THEN
                    VN_HL_USD
                   ELSE
                    1
               END AS HLCS,
               SUM(CASE
                       WHEN BZ = '2' THEN
                        A.ZXSZ * VN_HL_HKD
                       WHEN BZ = '3' THEN
                        A.ZXSZ * VN_HL_USD
                       ELSE
                        A.ZXSZ
                   END) ZQSZ, --市值=证券数量*交易单位*(最新收盘价+1*最新利息)
               SUM(A.ZQSL) ZQSL,
               SUM(CASE
                       WHEN BZ = '2' THEN
                        A.CCCB * VN_HL_HKD
                       WHEN BZ = '3' THEN
                        A.CCCB * VN_HL_USD
                       ELSE
                        A.CCCB
                   END) CCCB,
               '0' AS XS_FLAG
          FROM (SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, ZQSL, CCCB, BZ
                  FROM DSC_BAS.T_ZQYE
                UNION ALL
                SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, ZQSL, CCCB, BZ
                  FROM DSC_HIS.T_ZQYELS) A,
               (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ
                  FROM DSC_CFG.T_ZQPZ_DY D
                 WHERE D.JB3_ZQPZ <> '112'
                   AND IS_JSSZ = 1) C
         WHERE A.RQ = VN_LAST_DAY
           AND A.ZQLB = C.ZQLB
           AND A.JYS = C.JYS
           AND NOT (A.ZQDM LIKE '002%' AND A.ZQLB = 'A0' AND A.JYS = '1') --排除中小板数据（002开头的有申购 ZQLB=A3 的数据）
         GROUP BY A.KHH, A.ZQLB, A.ZQDM, A.JYS, A.BZ;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计普通帐户相关资产数据(排除中小板)，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志明细——开始
    O_S_NOTE := '【ERROR-10002】';
    VN_STEP  := VN_STEP + 1;

    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计普通帐户相关资产数据(中小板)，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --期末普通账户资产统计数据
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y
        (KHH, ZHLX, ZQLX, ZQLB, ZQDM, JYS, BZ, HLCS, YMZQSZ, YMZQSL, CCCB, XS_FLAG)
        SELECT A.KHH,
               '1' AS ZHLX, --普通帐户
               '1' AS ZQLX, --证券类
               NVL(A.ZQLB, '00') AS ZQLB,
               A.ZQDM,
               A.JYS,
               A.BZ,
               CASE
                   WHEN A.BZ = '2' THEN
                    VN_HL_HKD
                   WHEN A.BZ = '3' THEN
                    VN_HL_USD
                   ELSE
                    1
               END AS HLCS,
               SUM(CASE
                       WHEN BZ = '2' THEN
                        A.ZXSZ * VN_HL_HKD
                       WHEN BZ = '3' THEN
                        A.ZXSZ * VN_HL_USD
                       ELSE
                        A.ZXSZ
                   END) ZQSZ, --市值=证券数量*交易单位*(最新收盘价+1*最新利息)
               SUM(A.ZQSL) ZQSL,
               SUM(CASE
                       WHEN BZ = '2' THEN
                        A.CCCB * VN_HL_HKD
                       WHEN BZ = '3' THEN
                        A.CCCB * VN_HL_USD
                       ELSE
                        A.CCCB
                   END) CCCB,
               '0' AS XS_FLAG
          FROM (SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, ZQSL, CCCB, BZ
                  FROM DSC_BAS.T_ZQYE
                UNION ALL
                SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, ZQSL, CCCB, BZ
                  FROM DSC_HIS.T_ZQYELS) A
         WHERE A.RQ = VN_LAST_DAY
           AND A.ZQLB = 'A0'
           AND A.JYS = '1'
           AND A.ZQDM LIKE '002%'
         GROUP BY A.KHH, A.ZQLB, A.ZQDM, A.JYS, A.BZ;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计普通帐户相关资产数据(中小板)，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志明细——开始
    O_S_NOTE := '【ERROR-10003】';
    VN_STEP  := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计普通帐户相关交易数据(排除中小板)，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --本月普通账户交易统计数据
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y
        (KHH,
         ZHLX,
         ZQLX,
         ZQLB,
         ZQDM,
         JYS,
         BZ,
         HLCS,
         JYL,
         JYL_MR,
         JYL_MC,
         CJSL,
         CJSL_MR,
         CJSL_MC,
         JYBS,
         JYBS_MR,
         JYBS_MC,
         YJSR,
         JYJ,
         XS_FLAG)
        SELECT T.KHH,
               '1' AS ZHLX, --普通帐户
               '1' AS ZQLX, --证券类
               NVL(T.ZQLB, '00') AS ZQLB,
               T.ZQDM,
               T.JYS,
               T.BZ,
               CASE
                   WHEN T.BZ = '2' THEN
                    VN_HL_HKD
                   WHEN T.BZ = '3' THEN
                    VN_HL_USD
                   ELSE
                    1
               END AS HLCS,
               SUM(T.CJJE * HL.GSBL) JYL,
               SUM(CASE
                       WHEN T.YSJE < 0 AND T.JYLB <> '2' THEN
                        T.CJJE * HL.GSBL
                   END) JYL_MR,
               SUM(CASE
                       WHEN T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2') THEN
                        T.CJJE * HL.GSBL
                   END) JYL_MC,
               SUM(T.CJSL) CJSL,
               SUM(CASE
                       WHEN T.YSJE < 0 AND T.JYLB <> '2' THEN
                        T.CJSL
                   END) CJSL_MR,
               SUM(CASE
                       WHEN T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2') THEN
                        T.CJSL
                   END) CJSL_MC,
               COUNT(T.LSH) JYBS,
               SUM(CASE
                       WHEN T.YSJE < 0 AND T.JYLB <> '2' THEN
                        1
                       ELSE
                        0
                   END) JYBS_MR,
               SUM(CASE
                       WHEN T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2') THEN
                        1
                       ELSE
                        0
                   END) JYBS_MC,
               SUM(T.S1 * HL.GSBL) YJSR,
               SUM(T.JYJ * HL.GSBL) JYJ,
               '0' AS XS_FLAG
          FROM (SELECT LSH,
                       CJRQ,
                       KHH,
                       ZQDM,
                       ZQLB,
                       JYS,
                       BZ,
                       CJSL,
                       CJJE,
                       YSJE,
                       JYLB,
                       S1,
                       JYJ
                  FROM DSC_BAS.T_JGMXLS
                UNION ALL
                SELECT LSH,
                       CJRQ,
                       KHH,
                       ZQDM,
                       ZQLB,
                       JYS,
                       BZ,
                       CJSL,
                       CJJE,
                       YSJE,
                       JYLB,
                       S1,
                       JYJ
                  FROM DSC_HIS.T_JGMXLS_HIS) T
          LEFT JOIN (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ
                       FROM DSC_CFG.T_ZQPZ_DY D
                      WHERE JB3_ZQPZ <> '112'
                        AND D.IS_VALID = 1) T1
            ON T.JYS = T1.JYS(+)
           AND T.ZQLB = T1.ZQLB(+)
          LEFT JOIN DSC_CFG.T_HLCS HL
            ON T.BZ = HL.BZ
           AND T.CJRQ BETWEEN HL.KSRQ AND HL.JSRQ
         WHERE T.CJRQ BETWEEN VN_FIRST_DAY AND VN_LAST_DAY
           AND T.JYLB IN (SELECT JYLB FROM DSC_CFG.T_JYLB WHERE IS_JSJYL = '1')
           AND NOT (T.ZQDM LIKE '002%' AND T.ZQLB = 'A0' AND T.JYS = '1') --排除中小板数据
         GROUP BY T.KHH, T.ZQLB, T.ZQDM, T.JYS, T.BZ;
    VN_ROWCOUNT := SQL%ROWCOUNT;

    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计普通帐户相关交易数据(排除中小板)，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志明细——开始
    O_S_NOTE := '【ERROR-10004】';
    VN_STEP  := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计普通帐户相关交易数据(中小板)，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --本月普通账户交易统计数据
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y
        (KHH,
         ZHLX,
         ZQLX,
         ZQLB,
         ZQDM,
         JYS,
         BZ,
         HLCS,
         JYL,
         JYL_MR,
         JYL_MC,
         CJSL,
         CJSL_MR,
         CJSL_MC,
         JYBS,
         JYBS_MR,
         JYBS_MC,
         YJSR,
         JYJ,
         XS_FLAG)
        SELECT T.KHH,
               '1' AS ZHLX, --普通帐户
               '1' AS ZQLX, --证券类
               NVL(T.ZQLB, '00') AS ZQLB,
               T.ZQDM,
               T.JYS,
               T.BZ,
               CASE
                   WHEN T.BZ = '2' THEN
                    VN_HL_HKD
                   WHEN T.BZ = '3' THEN
                    VN_HL_USD
                   ELSE
                    1
               END AS HLCS,
               SUM(T.CJJE * HL.GSBL) JYL,
               SUM(CASE
                       WHEN T.YSJE < 0 AND T.JYLB <> '2' THEN
                        T.CJJE * HL.GSBL
                   END) JYL_MR,
               SUM(CASE
                       WHEN T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2') THEN
                        T.CJJE * HL.GSBL
                   END) JYL_MC,
               SUM(T.CJSL) CJSL,
               SUM(CASE
                       WHEN T.YSJE < 0 AND T.JYLB <> '2' THEN
                        T.CJSL
                   END) CJSL_MR,
               SUM(CASE
                       WHEN T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2') THEN
                        T.CJSL
                   END) CJSL_MC,
               COUNT(T.LSH) JYBS,
               SUM(CASE
                       WHEN T.YSJE < 0 AND T.JYLB <> '2' THEN
                        1
                       ELSE
                        0
                   END) JYBS_MR,
               SUM(CASE
                       WHEN T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2') THEN
                        1
                       ELSE
                        0
                   END) JYBS_MC,
               SUM(T.S1 * HL.GSBL) YJSR,
               SUM(T.JYJ * HL.GSBL) JYJ,
               '0' AS XS_FLAG
          FROM (SELECT LSH,
                       CJRQ,
                       KHH,
                       ZQDM,
                       ZQLB,
                       JYS,
                       BZ,
                       CJSL,
                       CJJE,
                       YSJE,
                       JYLB,
                       S1,
                       JYJ
                  FROM DSC_BAS.T_JGMXLS
                UNION ALL
                SELECT LSH,
                       CJRQ,
                       KHH,
                       ZQDM,
                       ZQLB,
                       JYS,
                       BZ,
                       CJSL,
                       CJJE,
                       YSJE,
                       JYLB,
                       S1,
                       JYJ
                  FROM DSC_HIS.T_JGMXLS_HIS) T
          LEFT JOIN (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ
                       FROM DSC_CFG.T_ZQPZ_DY D
                      WHERE JB3_ZQPZ = '112'
                        AND D.IS_VALID = 1) T1
            ON T.JYS = T1.JYS(+)
           AND T.ZQLB = T1.ZQLB(+)
          LEFT JOIN DSC_CFG.T_HLCS HL
            ON T.BZ = HL.BZ
           AND T.CJRQ BETWEEN HL.KSRQ AND HL.JSRQ
         WHERE CJRQ BETWEEN VN_FIRST_DAY AND VN_LAST_DAY
           AND T.JYLB IN (SELECT JYLB FROM DSC_CFG.T_JYLB WHERE IS_JSJYL = '1')
           AND (T.ZQDM LIKE '002%' AND T.ZQLB = 'A0' AND T.JYS = '1')
         GROUP BY T.KHH, T.ZQLB, T.ZQDM, T.JYS, T.BZ;
    VN_ROWCOUNT := SQL%ROWCOUNT;

    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计普通帐户相关交易数据(中小板)，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志明细——开始
    O_S_NOTE := '【ERROR-10005】';
    VN_STEP  := VN_STEP + 1;

    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计信用帐户相关资产数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --期末信用帐户资产统计数据
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y
        (KHH, ZHLX, ZQLX, ZQLB, ZQDM, JYS, BZ, HLCS, YMZQSZ, YMZQSL, CCCB, XS_FLAG)
        SELECT A.KHH,
               '2' AS ZHLX, --信用帐户
               '1' AS ZQLX, --证券类
               NVL(A.ZQLB, '00') AS ZQLB,
               A.ZQDM,
               A.JYS,
               A.BZ,
               CASE
                   WHEN A.BZ = '2' THEN
                    VN_HL_HKD
                   WHEN A.BZ = '3' THEN
                    VN_HL_USD
                   ELSE
                    1
               END AS HLCS,
               SUM(CASE
                       WHEN BZ = '2' THEN
                        A.ZXSZ * VN_HL_HKD
                       WHEN BZ = '3' THEN
                        A.ZXSZ * VN_HL_USD
                       ELSE
                        A.ZXSZ
                   END) ZQSZ, --市值=证券数量*交易单位*(最新收盘价+1*最新利息)
               SUM(A.ZQSL) ZQSL,
               SUM(CASE
                       WHEN BZ = '2' THEN
                        A.CCCB * VN_HL_HKD
                       WHEN BZ = '3' THEN
                        A.CCCB * VN_HL_USD
                       ELSE
                        A.CCCB
                   END) CCCB,
               '0' AS XS_FLAG
          FROM (SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, ZQSL, CCCB, BZ
                  FROM DSC_BAS.T_XY_ZQYE
                UNION ALL
                SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, ZQSL, CCCB, BZ
                  FROM DSC_HIS.T_XY_ZQYELS) A
         WHERE A.RQ = VN_LAST_DAY
         GROUP BY A.KHH, A.ZQLB, A.ZQDM, A.JYS, A.BZ;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计信用帐户相关资产数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志明细——开始
    O_S_NOTE := '【ERROR-10006】';
    VN_STEP  := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计信用账户相关交易数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --本月信用账户交易统计数据
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y
        (KHH,
         ZHLX,
         ZQLX,
         ZQLB,
         ZQDM,
         JYS,
         BZ,
         HLCS,
         JYL,
         JYL_MR,
         JYL_MC,
         CJSL,
         CJSL_MR,
         CJSL_MC,
         JYBS,
         JYBS_MR,
         JYBS_MC,
         YJSR,
         JYJ,
         XS_FLAG)
        SELECT T.KHH,
               '2' AS ZHLX, --信用帐户
               '1' AS ZQLX, --证券类
               NVL(T.ZQLB, '00') AS ZQLB,
               T.ZQDM,
               T.JYS,
               T.BZ,
               CASE
                   WHEN T.BZ = '2' THEN
                    VN_HL_HKD
                   WHEN T.BZ = '3' THEN
                    VN_HL_USD
                   ELSE
                    1
               END AS HLCS,
               SUM(T.CJJE * HL.GSBL) JYL,
               SUM(CASE
                       WHEN T.YSJE < 0 AND T.JYLB <> '2' THEN
                        T.CJJE * HL.GSBL
                   END) JYL_MR,
               SUM(CASE
                       WHEN T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2') THEN
                        T.CJJE * HL.GSBL
                   END) JYL_MC,
               SUM(T.CJSL) CJSL,
               SUM(CASE
                       WHEN T.YSJE < 0 AND T.JYLB <> '2' THEN
                        T.CJSL
                   END) CJSL_MR,
               SUM(CASE
                       WHEN T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2') THEN
                        T.CJSL
                   END) CJSL_MC,
               COUNT(T.LSH) JYBS,
               SUM(CASE
                       WHEN T.YSJE < 0 AND T.JYLB <> '2' THEN
                        1
                       ELSE
                        0
                   END) JYBS_MR,
               SUM(CASE
                       WHEN T.YSJE > 0 OR (T.YSJE < 0 AND T.JYLB = '2') THEN
                        1
                       ELSE
                        0
                   END) JYBS_MC,
               SUM(T.S1 * HL.GSBL) YJSR,
               SUM(T.JYJ * HL.GSBL) JYJ,
               '0' AS XS_FLAG
          FROM (SELECT LSH,
                       CJRQ,
                       KHH,
                       ZQDM,
                       ZQLB,
                       JYS,
                       BZ,
                       CJSL,
                       CJJE,
                       YSJE,
                       JYLB,
                       S1,
                       JYJ
                  FROM DSC_BAS.T_XY_JGMXLS
                UNION ALL
                SELECT LSH,
                       CJRQ,
                       KHH,
                       ZQDM,
                       ZQLB,
                       JYS,
                       BZ,
                       CJSL,
                       CJJE,
                       YSJE,
                       JYLB,
                       S1,
                       JYJ
                  FROM DSC_HIS.T_XY_JGMXLS_HIS) T
          LEFT JOIN DSC_CFG.T_HLCS HL
            ON T.BZ = HL.BZ
           AND T.CJRQ BETWEEN HL.KSRQ AND HL.JSRQ
         WHERE T.CJRQ BETWEEN VN_FIRST_DAY AND VN_LAST_DAY
           AND T.JYLB IN (SELECT JYLB FROM DSC_CFG.T_JYLB WHERE IS_JSJYL = 1)
         GROUP BY T.KHH, T.ZQLB, T.ZQDM, T.JYS, T.BZ;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计信用账户相关交易数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志明细——开始
    O_S_NOTE := '【ERROR-10007】';
    VN_STEP  := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计信用账户息费收入数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --本月信用账户息费收入统计数据
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y
        (KHH, ZHLX, ZQLX, ZQLB, ZQDM, JYS, BZ, HLCS, XFSR, XS_FLAG)
        SELECT T.KHH,
               '2' AS ZHLX, --信用帐户
               '1' AS ZQLX, --证券类
               NVL(T.ZQLB, '00') AS ZQLB,
               T.ZQDM,
               T.JYS,
               T.BZ,
               CASE
                   WHEN T.BZ = '2' THEN
                    VN_HL_HKD
                   WHEN T.BZ = '3' THEN
                    VN_HL_USD
                   ELSE
                    1
               END AS HLCS,
               SUM(NVL(YJLX, 0)) XFSR,
               '0' AS XS_FLAG
          FROM (SELECT JYS,
                       ZQLB,
                       ZQDM,
                       BZ,
                       KHH,
                       SUM(NVL(YJLX, 0) + NVL(FXYJLX, 0) + NVL(FDLX, 0)) YJLX --本日预计利息  （预计利息+分段利息+罚息预计利息）
                  FROM (SELECT RZFZ,
                               RQFZ,
                               ZQLB,
                               ZQDM,
                               JYLB,
                               YJLX,
                               GHLX,
                               HKJE,
                               KHH,
                               JYS,
                               BZ,
                               FXYJLX,
                               FDLX
                          FROM DSC_HIS.T_XY_FZXX_HIS
                         WHERE RQ = VN_LAST_DAY
                        UNION ALL
                        SELECT RZFZ,
                               RQFZ,
                               ZQLB,
                               ZQDM,
                               JYLB,
                               YJLX,
                               GHLX,
                               HKJE,
                               KHH,
                               JYS,
                               BZ,
                               FXYJLX,
                               FDLX
                          FROM DSC_BAS.T_XY_FZXX
                         WHERE RQ = VN_LAST_DAY)
                 GROUP BY KHH, JYS, ZQLB, ZQDM, BZ
                --上月末最后交易日
                UNION ALL
                SELECT JYS,
                       ZQLB,
                       ZQDM,
                       BZ,
                       KHH,
                       - (SUM(NVL(YJLX, 0) + NVL(FXYJLX, 0) + NVL(FDLX, 0))) YJLX --上日预计利息  （预计利息+分段利息+罚息预计利息）
                  FROM (SELECT RZFZ,
                               RQFZ,
                               ZQLB,
                               ZQDM,
                               JYLB,
                               YJLX,
                               GHLX,
                               HKJE,
                               KHH,
                               JYS,
                               BZ,
                               FXYJLX,
                               FDLX
                          FROM DSC_HIS.T_XY_FZXX_HIS
                         WHERE RQ = VN_QC_RQ
                        UNION ALL
                        SELECT RZFZ,
                               RQFZ,
                               ZQLB,
                               ZQDM,
                               JYLB,
                               YJLX,
                               GHLX,
                               HKJE,
                               KHH,
                               JYS,
                               BZ,
                               FXYJLX,
                               FDLX
                          FROM DSC_BAS.T_XY_FZXX
                         WHERE RQ = VN_QC_RQ)
                 GROUP BY KHH, JYS, ZQLB, ZQDM, BZ) T
         GROUP BY T.KHH, T.ZQLB, ZQDM, T.JYS, T.BZ;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计信用账户息费收入数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志明细——开始
    O_S_NOTE := '【ERROR-10008】';
    VN_STEP  := VN_STEP + 1;

    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计理财帐户相关资产数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --期末理财帐户资产统计数据
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y
        (KHH, ZHLX, ZQLX, ZQLB, ZQDM, JYS, BZ, HLCS, YMZQSZ, YMZQSL, CCCB, XS_FLAG)
        SELECT A.KHH,
               '3' AS ZHLX, --理财帐号
               '2' AS ZQLX, --金融产品类
               NVL(A.CPFL, '00') AS ZQLB,
               A.CPDM AS ZQDM,
               '7' AS JYS, --虚拟交易所为7
               A.BZ,
               CASE
                   WHEN A.BZ = '2' THEN
                    VN_HL_HKD
                   WHEN A.BZ = '3' THEN
                    VN_HL_USD
                   ELSE
                    1
               END AS HLCS,
               SUM(CASE
                       WHEN BZ = '2' THEN
                        A.ZXSZ * VN_HL_HKD
                       WHEN BZ = '3' THEN
                        A.ZXSZ * VN_HL_USD
                       ELSE
                        A.ZXSZ
                   END) ZQSZ, --市值=证券数量*交易单位*(最新收盘价+1*最新利息)
               SUM(A.CPSL) AS ZQSL,
               SUM(CASE
                       WHEN BZ = '2' THEN
                        A.CCCB * VN_HL_HKD
                       WHEN BZ = '3' THEN
                        A.CCCB * VN_HL_USD
                       ELSE
                        A.CCCB
                   END) CCCB,
               '0' AS XS_FLAG
          FROM (SELECT RQ, KHH, YYB, CPDM, CPFL, ZXSZ, CPSL, CCCB, BZ
                  FROM DSC_BAS.T_FP_CPFE
                UNION ALL
                SELECT RQ, KHH, YYB, CPDM, CPFL, ZXSZ, CPSL, CCCB, BZ
                  FROM DSC_HIS.T_FP_CPFE_HIS) A
         WHERE A.RQ = VN_LAST_DAY
         GROUP BY A.KHH, A.CPFL, A.CPDM, A.BZ;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计理财帐户相关资产数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志明细——开始
    O_S_NOTE := '【ERROR-10009】';
    VN_STEP  := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计理财账户相关交易数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --本月理财账户交易统计数据
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y
        (KHH,
         ZHLX,
         ZQLX,
         ZQLB,
         ZQDM,
         JYS,
         BZ,
         HLCS,
         JYL,
         JYL_MR,
         JYL_MC,
         CJSL,
         CJSL_MR,
         CJSL_MC,
         JYBS,
         JYBS_MR,
         JYBS_MC,
         YJSR,
         JYJ,
         XS_FLAG)
        SELECT T.KHH,
               '3' AS ZHLX, --理财帐户
               '2' AS ZQLX, --金融产品类
               NVL(T.CPFL, '00') AS ZQLB,
               T.CPDM AS ZQDM,
               '7' AS JYS, --虚拟交易所为7
               T.BZ,
               CASE
                   WHEN T.BZ = '2' THEN
                    VN_HL_HKD
                   WHEN T.BZ = '3' THEN
                    VN_HL_USD
                   ELSE
                    1
               END AS HLCS,
               SUM(T.QRJE * HL.GSBL) JYL,
               SUM(CASE
                       WHEN T.YWDM IN ('122', '123', '130', '139') THEN
                        T.QRJE * HL.GSBL
                   END) JYL_MR,
               SUM(CASE
                       WHEN T.YWDM IN ('124', '125', '142') THEN
                        T.QRJE * HL.GSBL
                   END) JYL_MC,
               SUM(T.QRFE) CJSL,
               SUM(CASE
                       WHEN T.YWDM IN ('122', '123', '130', '139') THEN
                        T.QRFE
                   END) CJSL_MR,
               SUM(CASE
                       WHEN T.YWDM IN ('124', '125', '142') THEN
                        T.QRFE
                   END) CJSL_MC,
               SUM(CASE
                       WHEN T.SXF > 0 THEN
                        1
                       ELSE
                        0
                   END) JYBS,
               SUM(CASE
                       WHEN T.YWDM IN ('122', '123', '130', '139') AND T.SXF > 0 THEN
                        1
                       ELSE
                        0
                   END) JYBS_MR,
               SUM(CASE
                       WHEN T.YWDM IN ('124', '125', '142') AND T.SXF > 0 THEN
                        1
                       ELSE
                        0
                   END) JYBS_MC,
               SUM(T.SXF * HL.GSBL) AS YJSR,
               SUM(T.SXF * HL.GSBL) AS JYJ,
               '0' AS XS_FLAG
          FROM (SELECT QRRQ, KHH, CPFL, CPDM, BZ, YWDM, QRFE, QRJE, SXF
                  FROM DSC_BAS.T_FP_JGMXLS
                UNION ALL
                SELECT QRRQ, KHH, CPFL, CPDM, BZ, YWDM, QRFE, QRJE, SXF
                  FROM DSC_HIS.T_FP_JGMXLS_HIS) T
          LEFT JOIN DSC_CFG.T_HLCS HL
            ON T.BZ = HL.BZ
           AND T.QRRQ BETWEEN HL.KSRQ AND HL.JSRQ
         WHERE YWDM IN ('122', '123', '124', '125', '139', '142', '130')
           AND T.QRRQ BETWEEN VN_FIRST_DAY AND VN_LAST_DAY
         GROUP BY T.KHH, T.CPFL, T.CPDM, T.BZ;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计理财账户相关交易数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志明细——开始
    O_S_NOTE := '【ERROR-10010】';
    VN_STEP  := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计非流通资产数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --补上非流通证券市值
    VN_TJRQ_FLT := VN_TJRQ;

    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y
        (KHH, ZHLX, ZQLX, ZQLB, ZQDM, JYS, BZ, HLCS, YMZQSL, YMZQSZ, XS_FLAG)
        SELECT T.KHH,
               '1' AS ZHLX, --普通帐户
               '1' AS ZQLX, --证券类
               NVL(T.ZQLB, '00') AS ZQLB,
               T.ZQDM,
               T.JYS,
               T.BZ,
               MAX(HL.GSBL) AS HLCS,
               SUM(NVL(T.ZQSL, 0)) AS ZQSL,
               SUM(NVL(T.ZXSZ, 0) * HL.GSBL) AS ZQSZ,
               '1' AS XS_FLAG

          FROM (SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZQSL, ZXSZ, BZ
                  FROM DSC_BAS.T_ZQYE_FLT
                UNION ALL
                SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZQSL, ZXSZ, BZ
                  FROM DSC_HIS.T_ZQYE_FLT_HIS) T
          LEFT JOIN DSC_CFG.T_HLCS HL
            ON T.BZ = HL.BZ
           AND T.RQ BETWEEN HL.KSRQ AND HL.JSRQ
         WHERE T.RQ = VN_TJRQ_FLT
         GROUP BY T.KHH, T.ZQLB, T.ZQDM, T.JYS, T.BZ;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计非流通资产数据，插入临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    EXECUTE IMMEDIATE 'ALTER TABLE DSC_STAT.T_STAT_KHZQJY_FLB_Y NOLOGGING';

    --记录日志明细——开始
    O_S_NOTE := '【ERROR-10011】';
    VN_STEP  := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]进行汇总统计，插入目标表[DSC_STAT.T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --写入结果表
    INSERT /*+ APPEND*/
    INTO DSC_STAT.T_STAT_KHZQJY_FLB_Y
        (YF,
         KHH,
         YYB,
         GRJG,
         ZHLX,
         ZQLX,
         ZQLB,
         ZQDM,
         JYS,
         BZ,
         HLCS,
         YMZQSZ,
         YMZQSL,
         CCCB,
         JYL,
         JYL_MR,
         JYL_MC,
         CJSL,
         CJSL_MR,
         CJSL_MC,
         JYBS,
         JYBS_MR,
         JYBS_MC,
         YJSR,
         JYJ,
         XFSR,
         XS_FLAG)
        SELECT VN_YF AS YF,
               B.KHH,
               B.YYB,
               B.GRJG,
               A.ZHLX,
               A.ZQLX,
               A.ZQLB,
               A.ZQDM,
               A.JYS,
               A.BZ,
               A.HLCS,
               A.YMZQSZ,
               A.YMZQSL,
               A.CCCB,
               A.JYL,
               A.JYL_MR,
               A.JYL_MC,
               A.CJSL,
               A.CJSL_MR,
               A.CJSL_MC,
               A.JYBS,
               A.JYBS_MR,
               A.JYBS_MC,
               A.YJSR,
               A.JYJ,
               A.XFSR,
               A.XS_FLAG
          FROM (SELECT KHH,
                       ZHLX,
                       ZQLX,
                       ZQLB,
                       ZQDM,
                       JYS,
                       BZ,
                       HLCS,
                       SUM(NVL(YMZQSZ, 0)) AS YMZQSZ,
                       SUM(NVL(YMZQSL, 0)) AS YMZQSL,
                       SUM(NVL(CCCB, 0)) AS CCCB,
                       SUM(NVL(JYL, 0)) AS JYL,
                       SUM(NVL(JYL_MR, 0)) AS JYL_MR,
                       SUM(NVL(JYL_MC, 0)) AS JYL_MC,
                       SUM(NVL(CJSL, 0)) AS CJSL,
                       SUM(NVL(CJSL_MR, 0)) AS CJSL_MR,
                       SUM(NVL(CJSL_MC, 0)) AS CJSL_MC,
                       SUM(NVL(JYBS, 0)) AS JYBS,
                       SUM(NVL(JYBS_MR, 0)) AS JYBS_MR,
                       SUM(NVL(JYBS_MC, 0)) AS JYBS_MC,
                       SUM(NVL(YJSR, 0)) AS YJSR,
                       SUM(NVL(JYJ, 0)) AS JYJ,
                       SUM(NVL(XFSR, 0)) AS XFSR,
                       XS_FLAG
                  FROM DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y
                 GROUP BY KHH, ZHLX, ZQLX, ZQLB, ZQDM, JYS, BZ, HLCS, XS_FLAG) A,
               DSC_BAS.T_KHXX_JJYW B
         WHERE A.KHH = B.KHH
           AND B.KHRQ <= VN_JYR
           AND (B.KHZT != '3' OR (B.KHZT = '3' AND B.XHRQ >= VN_JYR));
    --INNER JOIN DSC_BAS.T_KHXX_JJYW B ON A.KHH = B.KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y]进行汇总统计，插入目标表[DSC_STAT.T_STAT_KHZQJY_FLB_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_KHZQJY_FLB_Y';

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_KHZQJY_FLB_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_NONEKH_RY_FWKHS(O_N_CODE OUT INT,
                                                            O_S_NOTE OUT VARCHAR2,
                                                            I_N_TJRQ IN NUMBER,
                                                            I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
    -- CREATED ON 2013/05/23 BY LUZHIFEI ,APEXSOFT
    -------------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_NONEKH_RY_FWKHS
      功能简述：   在人员级别计算和关系有关的客户数
           不考虑团队的属性，
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_TJRQ            统计日期
           I_N_REDO            0：不重做    1：重做

      返回：

      算法：

      注意事项：
           1)人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
              组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
           2)ZBDM同t_zbxx.zbdm_1


      数据源：

      修改记录;
      ----------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/23 09:34:05               新增
      陈德铸   2014/06/05                        修改：DSC_STAT.T_STAT_NONEKH_ZB增加YS_ID和CJ字段，完善程序处理逻辑
      洪国力   2016/01/08                        修改：修复因增、删、改没有提交导致其他过程对目标表操作时遇到锁报错的问题，新增COMMIT操作
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '06';
    CON_GXLX_FW CONSTANT INTEGER := 1; --关系类型（服务关系，含主和辅助两种)
    CON_GXLX_QY CONSTANT INTEGER := 2; --签约关系
    VS_PROC_NAME   VARCHAR2(100);
    VN_LOGID       INT; --LOG 表记录ID
    VN_ROWCOUNT    INT; --记录数
    VN_SUBROWCOUNT INT;
    VN_STEP        INT; --动作步数
    VN_PROC_NO     NUMBER(10);
    VS_USER        VARCHAR2(30);
    VN_TJRQ        NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF        NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VN_TJNF        NUMBER(4); --年份
    VS_TABNAME     VARCHAR2(100) := 'DSC_STAT.T_STAT_NONEKH_ZB';
    VS_ZBDM        VARCHAR2(60);

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;
    VN_TJNF      := SUBSTR(I_N_TJRQ, 1, 4);
    VN_TJYF      := SUBSTR(I_N_TJRQ, 1, 6);

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        --SELECT COUNT(*) INTO VN_COUNT FROM T_STAT_YYBZC_R WHERE RQ=VN_TJRQ;
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_NONEKH_ZB
         WHERE SUBSTR(U_ID, 1, 2) = CON_ORG_LVL
           AND ZBDM IN
               (SELECT COLUMN_VALUE
                  FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME)))
           AND ((SJDW = 1 AND SJZ = VN_TJRQ) OR (SJDW = 2 AND SJZ = VN_TJYF) OR
                (SJDW = 3 AND SJZ = VN_TJNF));

        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --------------------------------------------------------------------------
    --1)日指标

    INSERT ALL WHEN KHS_QY > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHS_QY', KHS_QY, YS_ID, CJ) WHEN KHS_FW > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHS_FW', KHS_FW, YS_ID, CJ) WHEN KHS_QY_XKH > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHS_QY_XKH', KHS_QY_XKH, YS_ID, CJ) WHEN KHS_JY > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHS_JY', KHS_JY, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || GX.RYXX U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               COUNT(CASE
                         WHEN GX.GXLX = CON_GXLX_QY AND GX.SXRQ <= VN_TJRQ AND
                              (GX.JZRQ IS NULL OR GX.JZRQ > VN_TJRQ) THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_QY,
               COUNT(CASE
                         WHEN GX.GXLX = CON_GXLX_FW AND GX.SXRQ <= VN_TJRQ AND
                              (GX.JZRQ IS NULL OR GX.JZRQ > VN_TJRQ) THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_FW,
               COUNT(CASE
                         WHEN GX.GXLX = CON_GXLX_QY AND GX.SXRQ = VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_QY_XKH, --新签约的客户数
               COUNT(CASE
                         WHEN GX.GXLX = CON_GXLX_QY AND GX.JZRQ = VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_JY, --解约的客户数
               GX.RYXX AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_STAT.VW_KHGX_ALL GX
         GROUP BY GX.RYXX;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;

    --计算月粒度和年粒度.
    SELECT WMSYS.WM_CONCAT(COLUMN_VALUE)
      INTO VS_ZBDM
      FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME));

    DSC_STAT.P_STAT_NONEKH_ZBYS_PUBLIC(O_N_ROWCOUNT => VN_SUBROWCOUNT,
                                       I_N_TJRQ     => I_N_TJRQ,
                                       I_S_ZBDM     => VS_ZBDM,
                                       I_S_ORGLVL   => CON_ORG_LVL);

    VN_ROWCOUNT := VN_ROWCOUNT + VN_SUBROWCOUNT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_NONEKH_RY_FWKHS;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_NONEKH_RY_KHS(O_N_CODE OUT INT,
                                                          O_S_NOTE OUT VARCHAR2,
                                                          I_N_TJRQ IN INT,
                                                          I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_NONEKH_RY_KHS
         功能简述：   统计人员相关客户数
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
                  1.通过从以下表中获取到日统计数（一行记录中含有多个指标信息）
                    将结果使用旋转insert all插入到DSC_STAT.TMP_STAT_NONEKH_ZB临时表中
                    （临时表的结构和目标表结构相同）
                  2.将临时表数据插入到DSC_STAT.T_STAT_NONEKH_ZB目标表中
                  3.由于月/年统计数和日统计数相同，使用临时表处理后得到月/年统计数
                    将处理后的结果和目标表进行merge into ，匹配时修改表中指标值，否则插入新记录

         注意事项：
                  涉及到以下指标：'KHS', 'KHS_CL', 'KHS_ZL', 'KHS_GRH', 'KHS_JG', 'KHS_YZC', 'KHS_YSZ', 'KHS_YJY'
                  组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY

         数据源：
                  1.DSC_BAS.T_KHXX_JJYW              客户信息_经纪业务
                  2.DSC_STAT.VW_KHGX_ALL             客户关系视图
                  3.DSC_STAT.T_STAT_KHZC_R           客户_客户资产日表
                  4.DSC_STAT.T_STAT_RZRQ_R           融资融券_客户日统计表
                  5.DSC_STAT.T_STAT_KHJYSR_R         客户_客户交易收入日统计

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                    操作
         黄玉钰      2013/05/22                  创建
         吴邦杰      2014/06/05                  修改：DSC_STAT.T_STAT_NONEKH_ZB增加YS_ID和CJ字段，完善程序处理逻辑
         洪国力      2016/01/08                  修改：修复因增、删、改没有提交导致其他过程对目标表操作时遇到锁报错的问题，新增COMMIT操作
         黄宏峰     2016/03/14                   修改：完善过程，进行MERGE INTO操作时，INSERT部分需指定相应的列
    */
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6);
    VN_TJNF      NUMBER(4) := SUBSTR(VN_TJRQ, 1, 4);
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '06';
    VN_FIRSTDAY_OF_YEAR NUMBER(8) := SUBSTR(VN_TJRQ, 1, 4) * 10000 + 101; --本年第一天
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --重做删除原数据
    IF I_N_REDO = 1 THEN
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_NONEKH_ZB]目标表，日期：=' ||
                                                        I_N_TJRQ || '的人员客户数相关数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_NONEKH_ZB
         WHERE (U_ID LIKE '06%') --限制组织层级为人员
           AND ZBDM IN
               (SELECT COLUMN_VALUE
                  FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME)))
           AND ((SJDW = 1 AND SJZ = VN_TJRQ) OR (SJDW = 2 AND SJZ = VN_TJYF) OR
               (SJDW = 3 AND SJZ = VN_TJNF));
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_NONEKH_ZB]目标表，日期：=' ||
                                                        I_N_TJRQ || '的人员客户数相关数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_NONEKH_ZB]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;
    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_STAT_NONEKH_ZB]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_STAT_NONEKH_ZB';
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_STAT_NONEKH_ZB]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_STAT_NONEKH_ZB]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '按人员统计日客户数指标到[DSC_STAT.TMP_STAT_NONEKH_ZB]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT ALL --插入数据
    WHEN ZBZ_KHS <> 0 --排除掉0的
    THEN INTO DSC_STAT.TMP_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS, ZBZ_KHS, YS_ID, CJ) --插入zbdm为KHS的记录
    WHEN ZBZ_KHS_CL <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_CL, ZBZ_KHS_CL, YS_ID, CJ) --插入zbdm为KHS_CL的记录
    WHEN ZBZ_KHS_ZL <> 0 --
    THEN INTO DSC_STAT.TMP_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_ZL, ZBZ_KHS_ZL, YS_ID, CJ) --插入zbdm为KHS_ZL的记录
    WHEN ZBZ_KHS_GRH <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_GRH, ZBZ_KHS_GRH, YS_ID, CJ) --插入zbdm为KHS_GRH的记录
    WHEN ZBZ_KHS_JG <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_JG, ZBZ_KHS_JG, YS_ID, CJ) --插入zbdm为KHS_JG的记录
    WHEN ZBZ_KHS_YZC <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_YZC, ZBZ_KHS_YZC, YS_ID, CJ) --插入zbdm为KHS_YZC的记录
    WHEN ZBZ_KHS_YSZ <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_YSZ, ZBZ_KHS_YSZ, YS_ID, CJ) --插入zbdm为KHS_YSZ的记录
    WHEN ZBZ_KHS_YJY <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_YJY, ZBZ_KHS_YJY, YS_ID, CJ) --插入zbdm为KHS_YJY的记录
        SELECT CON_ORG_LVL || '-' || GX.RYXX AS U_ID,
               1 AS SJDW,
               VN_TJRQ AS SJZ,
               'KHS' AS ZBDM_KHS,
               COUNT(A.KHH) AS ZBZ_KHS, --计算客户数指标值
               'KHS_CL' AS ZBDM_KHS_CL,
               COUNT(CASE
                         WHEN A.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                          A.KHH
                         ELSE
                          NULL
                     END) AS ZBZ_KHS_CL, --计算存量客户数指标值
               'KHS_ZL' AS ZBDM_KHS_ZL,
               COUNT(CASE
                         WHEN A.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                          A.KHH
                         ELSE
                          NULL
                     END) AS ZBZ_KHS_ZL, --计算增量客户数指标值
               'KHS_GRH' AS ZBDM_KHS_GRH,
               COUNT(CASE
                         WHEN A.GRJG = 0 THEN
                          A.KHH
                         ELSE
                          NULL
                     END) AS ZBZ_KHS_GRH, --计算客户数_个人指标值
               'KHS_JG' AS ZBDM_KHS_JG,
               COUNT(CASE
                         WHEN A.GRJG <> 0 THEN
                          A.KHH
                         ELSE
                          NULL
                     END) AS ZBZ_KHS_JG, --计算客户数_机构指标值
               'KHS_YZC' AS ZBDM_KHS_YZC,
               COUNT(CASE
                         WHEN NVL(KHZC.ZZC, 0) + NVL(RZRQ.ZZC, 0) > 0 THEN
                          A.KHH
                         ELSE
                          NULL
                     END) AS ZBZ_KHS_YZC, --计算有资产客户数指标值
               'KHS_YSZ' AS ZBDM_KHS_YSZ,
               COUNT(CASE
                         WHEN NVL(KHZC.ZQSZ, 0) + NVL(RZRQ.ZQSZ, 0) > 0 THEN
                          A.KHH
                         ELSE
                          NULL
                     END) AS ZBZ_KHS_YSZ, --计算有市值客户数指标值
               'KHS_YJY' AS ZBDM_KHS_YJY,
               COUNT(CASE
                         WHEN NVL(JYL.JYL, 0) > 0 THEN
                          A.KHH
                         ELSE
                          NULL
                     END) AS ZBZ_KHS_YJY, --计算有交易客户数指标值
               GX.RYXX AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_BAS.T_KHXX_JJYW A
          JOIN DSC_STAT.VW_KHGX_ALL GX
            ON (GX.KHH = A.KHH AND GX.SXRQ <= VN_TJRQ AND
               (GX.JZRQ IS NULL OR GX.JZRQ > VN_TJRQ))
          LEFT JOIN DSC_STAT.T_STAT_KHZC_R KHZC
            ON A.KHH = KHZC.KHH
           AND KHZC.RQ = VN_TJRQ
          LEFT JOIN DSC_STAT.T_STAT_RZRQ_R RZRQ
            ON A.KHH = RZRQ.KHH
           AND RZRQ.RQ = VN_TJRQ
          LEFT JOIN DSC_STAT.T_STAT_KHJYSR_R JYL
            ON A.KHH = JYL.KHH
           AND JYL.RQ = VN_TJRQ
         WHERE A.KHRQ <= VN_TJRQ
           AND A.XHRQ > VN_TJRQ --由于销户日期不为空 所以不做A.XHRQ IS NULL的判断
         GROUP BY GX.RYXX;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '按人员统计日客户数指标到[DSC_STAT.TMP_STAT_NONEKH_ZB]临时表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
        SELECT U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ FROM DSC_STAT.TMP_STAT_NONEKH_ZB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将相关月/年客户数指标数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    MERGE INTO DSC_STAT.T_STAT_NONEKH_ZB ZB
    USING (SELECT U_ID, 2 AS SJDW, VN_TJYF AS SJZ, ZBDM, ZBZ, YS_ID, CJ
             FROM DSC_STAT.TMP_STAT_NONEKH_ZB A
           UNION ALL
           SELECT U_ID, 3 AS SJDW, VN_TJNF AS SJZ, ZBDM, ZBZ, YS_ID, CJ
             FROM DSC_STAT.TMP_STAT_NONEKH_ZB B) TMP
    ON (ZB.U_ID = TMP.U_ID AND ZB.SJDW = TMP.SJDW AND ZB.SJZ = TMP.SJZ AND ZB.ZBDM = TMP.ZBDM)
    WHEN MATCHED THEN
        UPDATE
           SET ZB.ZBZ = TMP.ZBZ
         WHERE ZB.U_ID = TMP.U_ID
           AND ZB.SJDW = TMP.SJDW
           AND ZB.SJZ = TMP.SJZ
           AND ZB.ZBDM = TMP.ZBDM
    WHEN NOT MATCHED THEN
        INSERT
            (ZB.U_ID, ZB.SJDW, ZB.SJZ, ZB.ZBDM, ZB.ZBZ, ZB.YS_ID, ZB.CJ)
        VALUES
            (TMP.U_ID, TMP.SJDW, TMP.SJZ, TMP.ZBDM, TMP.ZBZ, TMP.YS_ID, TMP.CJ);
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将相关月/年客户数指标数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_NONEKH_RY_KHS;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_NONEKH_RY_KHSBG(O_N_CODE OUT INT,
                                                            O_S_NOTE OUT VARCHAR2,
                                                            I_N_TJRQ IN NUMBER,
                                                            I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
    -- CREATED ON 2013/05/23 BY LUZHIFEI ,APEXSOFT
    -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_NONEKH_RY_KHSBG
      功能简述：   在人员级别统计客户数的变更

      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
           1)人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
              组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
           2)ZBDM同t_zbxx.zbdm_1

           变更的客户数不考虑变更后客户的状态,而且一个客户变更多次，算一个。

      数据源：

      修改记录;
      ----------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/23 14:52:05               新增
     吴邦杰    2014/06/05                        修改：DSC_STAT.T_STAT_NONEKH_ZB增加YS_ID和CJ字段，完善程序处理逻辑
     吴邦杰    2014/11/24                        修改：纵表指标处理传参机制调整问题，改读系统USER为VS_USER
     徐群智    2015/04/13                        修改：插入年、月的SJZ时，分别取VN_TJNF、VN_TJYF
     洪国力    2016/01/08                        修改：修复因增、删、改没有提交导致其他过程对目标表操作时遇到锁报错的问题，新增COMMIT操作
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '06';
    CON_GXLX_FW CONSTANT INTEGER := 1; --关系类型（服务关系，含主和辅助两种)
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    --VN_SUBROWCOUNT INT;
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VN_TJYF_KSRQ NUMBER(8);
    VN_TJNF      NUMBER(4); --年份
    VN_TJNF_KSRQ NUMBER(8);
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_NONEKH_ZB';
    --VS_zbdm      varchar2(60);

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;
    VN_TJNF      := SUBSTR(I_N_TJRQ, 1, 4);
    VN_TJYF      := SUBSTR(I_N_TJRQ, 1, 6);
    VN_TJYF_KSRQ := VN_TJYF * 100 + 1;
    VN_TJNF_KSRQ := VN_TJNF * 10000 + 101;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        --SELECT COUNT(*) INTO VN_COUNT FROM T_STAT_YYBZC_R WHERE RQ=VN_TJRQ;
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_NONEKH_ZB
         WHERE SUBSTR(U_ID, 1, 2) = CON_ORG_LVL
           AND ZBDM IN
               (SELECT COLUMN_VALUE
                  FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME)))
           AND ((SJDW = 1 AND SJZ = VN_TJRQ) OR (SJDW = 2 AND SJZ = VN_TJYF) OR
                (SJDW = 3 AND SJZ = VN_TJNF));

        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --------------------------------------------------------------------------
    /*
      对于团队而言，新增的客户以其名下的服务人员的客户数有关
      新增的标准是：统计期限内开户的且挂接关系的
         如果只是简单地管开户，那么意义不大.
    */
    --先计算销户和开户指标
    --团队和人员的新开户日期意义不大，除非是新挂接人员数
    --日指标
    INSERT ALL WHEN KHS_XKH > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, PUB_SYS.PKG_GCONST.SJDW_R, VN_TJRQ, 'KHS_XKH', KHS_XKH, YS_ID, CJ) WHEN KHS_XH > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, PUB_SYS.PKG_GCONST.SJDW_R, VN_TJRQ, 'KHS_XH', KHS_XH, YS_ID, CJ)
    --月份
    WHEN KHS_XKH_Y > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, PUB_SYS.PKG_GCONST.SJDW_Y, VN_TJYF, 'KHS_XKH', KHS_XKH_Y, YS_ID, CJ) WHEN KHS_XH_Y > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, PUB_SYS.PKG_GCONST.SJDW_Y, VN_TJYF, 'KHS_XH', KHS_XH_Y, YS_ID, CJ)
    --年份
    WHEN KHS_XKH_N > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, PUB_SYS.PKG_GCONST.SJDW_N, VN_TJNF, 'KHS_XKH', KHS_XKH_N, YS_ID, CJ) WHEN KHS_XH_N > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, PUB_SYS.PKG_GCONST.SJDW_N, VN_TJNF, 'KHS_XH', KHS_XH_N, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || GX.RYXX U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               COUNT(CASE
                         WHEN KHRQ = VN_TJRQ AND GX.SXRQ = VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_XKH,
               COUNT(CASE
                         WHEN XHRQ = VN_TJRQ AND GX.JZRQ = VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_XH,
               COUNT(DISTINCT CASE
                         WHEN KHRQ BETWEEN VN_TJYF_KSRQ AND VN_TJRQ AND
                              GX.SXRQ BETWEEN VN_TJYF_KSRQ AND VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_XKH_Y,
               COUNT(DISTINCT CASE
                         WHEN XHRQ BETWEEN VN_TJYF_KSRQ AND VN_TJRQ AND
                              GX.JZRQ BETWEEN VN_TJYF_KSRQ AND VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_XH_Y,
               COUNT(DISTINCT CASE
                         WHEN KHRQ BETWEEN VN_TJNF_KSRQ AND VN_TJRQ AND
                              GX.SXRQ BETWEEN VN_TJNF_KSRQ AND VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_XKH_N,
               COUNT(DISTINCT CASE
                         WHEN XHRQ BETWEEN VN_TJNF_KSRQ AND VN_TJRQ AND
                              GX.JZRQ BETWEEN VN_TJNF_KSRQ AND VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_XH_N,
               GX.RYXX AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_STAT.VW_KHGX_ALL GX
          JOIN DSC_BAS.T_KHXX_JJYW KH
            ON KH.KHH = GX.KHH
         WHERE GX.GXLX = CON_GXLX_FW
         GROUP BY GX.RYXX;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --再通过销户开户计算净新增
    INSERT INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
        SELECT U_ID,
               SJDW,
               SJZ,
               'KHS_JXZ' ZBDM,
               SUM(CASE
                       WHEN ZBDM = 'KHS_XKH' THEN
                        ZBZ
                       ELSE
                        0
                   END) - SUM(CASE
                                  WHEN ZBDM = 'KHS_XH' THEN
                                   ZBZ
                                  ELSE
                                   0
                              END) ZBZ,
               YS_ID,
               CJ
          FROM DSC_STAT.T_STAT_NONEKH_ZB
         WHERE SUBSTR(U_ID, 1, 2) = CON_ORG_LVL
           AND ZBDM IN ('KHS_XKH', 'KHS_XH')
           AND SJZ IN (VN_TJRQ, VN_TJYF, VN_TJNF)
         GROUP BY U_ID, SJDW, SJZ, YS_ID, CJ;

    VN_ROWCOUNT := VN_ROWCOUNT + SQL%ROWCOUNT;
    COMMIT;

    /* --计算月粒度和年粒度.
    SELECT WMSYS.WM_CONCAT(COLUMN_VALUE) INTO VS_ZBDM
         FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER,VS_PROC_NAME)) ;

    DSC_STAT.P_STAT_NONEKH_ZBYS_PUBLIC(O_N_ROWCOUNT => VN_SUBROWCOUNT
      ,I_N_TJRQ => I_N_TJRQ
      ,i_S_zbdm => VS_ZBDM
      ,I_S_ORGLVL => CON_ORG_LVL
    );

    VN_ROWCOUNT:=VN_ROWCOUNT+VN_SUBROWCOUNT;*/

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_NONEKH_RY_KHSBG;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_NONEKH_TD_FWKHS(O_N_CODE OUT INT,
                                                            O_S_NOTE OUT VARCHAR2,
                                                            I_N_TJRQ IN NUMBER,
                                                            I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
    -- CREATED ON 2013/05/23 BY LUZHIFEI ,APEXSOFT
    -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_NONEKH_TD_FWKHS
      功能简述：   在团队级别计算和关系有关的客户数
           不考虑团队的属性，
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
           1)人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
              组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
           2)ZBDM同t_zbxx.zbdm_1

      数据源：

      修改记录;
      ----------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/23 09:34:05               新增
      吴邦杰      2014/06/05                  修改：DSC_STAT.T_STAT_NONEKH_ZB增加YS_ID和CJ字段，完善程序处理逻辑
      洪国力      2016/01/08                  修改：修复因增、删、改没有提交导致其他过程对目标表操作时遇到锁报错的问题，新增COMMIT操作
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '05';
    CON_GXLX_FW CONSTANT INTEGER := 1; --关系类型（服务关系，含主和辅助两种)
    CON_GXLX_QY CONSTANT INTEGER := 2; --签约关系
    VS_PROC_NAME   VARCHAR2(100);
    VN_LOGID       INT; --LOG 表记录ID
    VN_ROWCOUNT    INT; --记录数
    VN_SUBROWCOUNT INT;
    VN_STEP        INT; --动作步数
    VN_PROC_NO     NUMBER(10);
    VS_USER        VARCHAR2(30);
    VN_TJRQ        NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF        NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VN_TJNF        NUMBER(4); --年份
    VS_TABNAME     VARCHAR2(100) := 'DSC_STAT.T_STAT_NONEKH_ZB';
    VS_ZBDM        VARCHAR2(60);

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;
    VN_TJNF      := SUBSTR(I_N_TJRQ, 1, 4);
    VN_TJYF      := SUBSTR(I_N_TJRQ, 1, 6);
    --VN_TJYF_KSRQ:=VN_TJYF*100+1;
    --VN_TJNF_KSRQ:=VN_TJNF*10000+101;
    --VN_KSYF:=VN_TJNF*100+1;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        --SELECT COUNT(*) INTO VN_COUNT FROM T_STAT_YYBZC_R WHERE RQ=VN_TJRQ;
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_NONEKH_ZB
         WHERE SUBSTR(U_ID, 1, 2) = CON_ORG_LVL
           AND ZBDM IN
               (SELECT COLUMN_VALUE
                  FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME)))
           AND ((SJDW = 1 AND SJZ = VN_TJRQ) OR (SJDW = 2 AND SJZ = VN_TJYF) OR
                (SJDW = 3 AND SJZ = VN_TJNF));

        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --------------------------------------------------------------------------
    --1)日指标

    INSERT ALL WHEN KHS_QY > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHS_QY', KHS_QY, YS_ID, CJ) WHEN KHS_FW > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHS_FW', KHS_FW, YS_ID, CJ) WHEN KHS_QY_XKH > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHS_QY_XKH', KHS_QY_XKH, YS_ID, CJ) WHEN KHS_JY > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHS_JY', KHS_JY, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || TD.TD_ID U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               COUNT(DISTINCT CASE
                         WHEN GX.GXLX = CON_GXLX_QY AND GX.SXRQ <= VN_TJRQ AND
                              (GX.JZRQ IS NULL OR GX.JZRQ > VN_TJRQ) THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_QY,
               COUNT(DISTINCT CASE
                         WHEN GX.GXLX = CON_GXLX_FW AND GX.SXRQ <= VN_TJRQ AND
                              (GX.JZRQ IS NULL OR GX.JZRQ > VN_TJRQ) THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_FW,
               COUNT(DISTINCT CASE
                         WHEN GX.GXLX = CON_GXLX_QY AND GX.SXRQ = VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_QY_XKH, --新签约的客户数
               COUNT(DISTINCT CASE
                         WHEN GX.GXLX = CON_GXLX_QY AND GX.JZRQ = VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_JY, --解约的客户数
               TD.TD_ID AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_STAT.VW_KHGX_ALL GX
          JOIN DSC_BAS.T_TDCY TD
            ON TD.RYXX = GX.RYXX
           AND TD.SXRQ <= VN_TJRQ
           AND (TD.JZRQ IS NULL OR TD.JZRQ > VN_TJRQ)
         GROUP BY TD.TD_ID;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;

    SELECT WMSYS.WM_CONCAT(COLUMN_VALUE)
      INTO VS_ZBDM
      FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME));

    DSC_STAT.P_STAT_NONEKH_ZBYS_PUBLIC(O_N_ROWCOUNT => VN_SUBROWCOUNT,
                                       I_N_TJRQ     => I_N_TJRQ,
                                       I_S_ZBDM     => VS_ZBDM,
                                       I_S_ORGLVL   => CON_ORG_LVL);

    VN_ROWCOUNT := VN_ROWCOUNT + VN_SUBROWCOUNT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_NONEKH_TD_FWKHS;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_NONEKH_TD_KHS(O_N_CODE OUT INT,
                                                          O_S_NOTE OUT VARCHAR2,
                                                          I_N_TJRQ IN INT,
                                                          I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_NONEKH_TD_KHS
         功能简述：   统计团队相关客户数
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
                  同p_stat_nonekh_ry_khs，注意要对客户号去重

         注意事项：
                  涉及到以下指标：'KHS', 'KHS_CL', 'KHS_ZL', 'KHS_GRH', 'KHS_JG', 'KHS_YZC', 'KHS_YSZ', 'KHS_YJY'
                  组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
                  根据团队分组后，对客户号去重计算客户数
         数据源：
                  1.DSC_BAS.T_KHXX_JJYW              客户信息_经纪业务
                  2.DSC_STAT.VW_KHGX_ALL             客户关系视图
                  3.DSC_STAT.T_STAT_KHZC_R           客户_客户资产日表
                  4.DSC_STAT.T_STAT_RZRQ_R           融资融券_客户日统计表
                  5.DSC_STAT.T_STAT_KHJYSR_R         客户_客户交易收入日统计

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                    操作
         黄玉钰      2013/05/22                  创建
         吴邦杰      2014/06/05                  修改：DSC_STAT.T_STAT_NONEKH_ZB增加YS_ID和CJ字段，完善程序处理逻辑
         洪国力      2016/01/08                  修改：修复因增、删、改没有提交导致其他过程对目标表操作时遇到锁报错的问题，新增COMMIT操作
         黄宏峰     2016/03/14                   修改：完善过程，进行MERGE INTO操作时，INSERT部分需指定相应的列
    */
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6);
    VN_TJNF      NUMBER(4) := SUBSTR(VN_TJRQ, 1, 4);
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '05';
    VN_FIRSTDAY_OF_YEAR NUMBER(8) := SUBSTR(VN_TJRQ, 1, 4) * 10000 + 101; --本年第一天
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --重做删除原数据
    IF I_N_REDO = 1 THEN
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_NONEKH_ZB]目标表，日期：=' ||
                                                        I_N_TJRQ || '的团队客户数相关数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_NONEKH_ZB
         WHERE (U_ID LIKE '05%') --限制组织层级为团队
           AND ZBDM IN
               (SELECT COLUMN_VALUE
                  FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME)))
           AND ((SJDW = 1 AND SJZ = VN_TJRQ) OR (SJDW = 2 AND SJZ = VN_TJYF) OR
               (SJDW = 3 AND SJZ = VN_TJNF));
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_NONEKH_ZB]目标表，日期：=' ||
                                                        I_N_TJRQ || '的团队客户数相关数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_NONEKH_ZB]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;
    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_STAT_NONEKH_ZB]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_STAT_NONEKH_ZB';
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_STAT_NONEKH_ZB]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_STAT_NONEKH_ZB]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '按团队统计日客户数指标到[DSC_STAT.TMP_STAT_NONEKH_ZB]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT ALL --插入数据
    WHEN ZBZ_KHS <> 0 --排除掉0的
    THEN INTO DSC_STAT.TMP_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS, ZBZ_KHS, YS_ID, CJ) --插入zbdm为KHS的记录
    WHEN ZBZ_KHS_CL <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_CL, ZBZ_KHS_CL, YS_ID, CJ) --插入zbdm为KHS_CL的记录
    WHEN ZBZ_KHS_ZL <> 0 --
    THEN INTO DSC_STAT.TMP_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_ZL, ZBZ_KHS_ZL, YS_ID, CJ) --插入zbdm为KHS_ZL的记录
    WHEN ZBZ_KHS_GRH <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_GRH, ZBZ_KHS_GRH, YS_ID, CJ) --插入zbdm为KHS_GRH的记录
    WHEN ZBZ_KHS_JG <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_JG, ZBZ_KHS_JG, YS_ID, CJ) --插入zbdm为KHS_JG的记录
    WHEN ZBZ_KHS_YZC <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_YZC, ZBZ_KHS_YZC, YS_ID, CJ) --插入zbdm为KHS_YZC的记录
    WHEN ZBZ_KHS_YSZ <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_YSZ, ZBZ_KHS_YSZ, YS_ID, CJ) --插入zbdm为KHS_YSZ的记录
    WHEN ZBZ_KHS_YJY <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_YJY, ZBZ_KHS_YJY, YS_ID, CJ) --插入zbdm为KHS_YJY的记录
        SELECT CON_ORG_LVL || '-' || TD.TD_ID AS U_ID,
               1 AS SJDW,
               VN_TJRQ AS SJZ,
               'KHS' AS ZBDM_KHS,
               COUNT(DISTINCT A.KHH) AS ZBZ_KHS, --计算客户数指标值
               'KHS_CL' AS ZBDM_KHS_CL,
               COUNT(DISTINCT CASE
                         WHEN A.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                          A.KHH
                         ELSE
                          NULL
                     END) AS ZBZ_KHS_CL, --计算存量客户数指标值
               'KHS_ZL' AS ZBDM_KHS_ZL,
               COUNT(DISTINCT CASE
                         WHEN A.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                          A.KHH
                         ELSE
                          NULL
                     END) AS ZBZ_KHS_ZL, --计算增量客户数指标值
               'KHS_GRH' AS ZBDM_KHS_GRH,
               COUNT(DISTINCT CASE
                         WHEN A.GRJG = 0 THEN
                          A.KHH
                         ELSE
                          NULL
                     END) AS ZBZ_KHS_GRH, --计算客户数_个人指标值
               'KHS_JG' AS ZBDM_KHS_JG,
               COUNT(DISTINCT CASE
                         WHEN A.GRJG <> 0 THEN
                          A.KHH
                         ELSE
                          NULL
                     END) AS ZBZ_KHS_JG, --计算客户数_机构指标值
               'KHS_YZC' AS ZBDM_KHS_YZC,
               COUNT(DISTINCT CASE
                         WHEN NVL(KHZC.ZZC, 0) + NVL(RZRQ.ZZC, 0) > 0 THEN
                          A.KHH
                         ELSE
                          NULL
                     END) AS ZBZ_KHS_YZC, --计算有资产客户数指标值
               'KHS_YSZ' AS ZBDM_KHS_YSZ,
               COUNT(DISTINCT CASE
                         WHEN NVL(KHZC.ZQSZ, 0) + NVL(RZRQ.ZQSZ, 0) > 0 THEN
                          A.KHH
                         ELSE
                          NULL
                     END) AS ZBZ_KHS_YSZ, --计算有市值客户数指标值
               'KHS_YJY' AS ZBDM_KHS_YJY,
               COUNT(DISTINCT CASE
                         WHEN NVL(JYL.JYL, 0) > 0 THEN
                          A.KHH
                         ELSE
                          NULL
                     END) AS ZBZ_KHS_YJY, --计算有交易客户数指标值
               TD.TD_ID AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_BAS.T_KHXX_JJYW A
          JOIN DSC_STAT.VW_KHGX_ALL GX
            ON (GX.KHH = A.KHH AND GX.SXRQ <= VN_TJRQ AND
               (GX.JZRQ IS NULL OR GX.JZRQ > VN_TJRQ))
          JOIN DSC_BAS.T_TDCY TD
            ON TD.RYXX = GX.RYXX
           AND TD.SXRQ <= VN_TJRQ
           AND (TD.JZRQ IS NULL OR TD.JZRQ > VN_TJRQ)
          LEFT JOIN DSC_STAT.T_STAT_KHZC_R KHZC
            ON A.KHH = KHZC.KHH
           AND KHZC.RQ = VN_TJRQ
          LEFT JOIN DSC_STAT.T_STAT_RZRQ_R RZRQ
            ON A.KHH = RZRQ.KHH
           AND RZRQ.RQ = VN_TJRQ
          LEFT JOIN DSC_STAT.T_STAT_KHJYSR_R JYL
            ON A.KHH = JYL.KHH
           AND JYL.RQ = VN_TJRQ
         WHERE A.KHRQ <= VN_TJRQ
           AND A.XHRQ > VN_TJRQ --由于销户日期不为空 所以不做A.XHRQ IS NULL的判断
         GROUP BY TD.TD_ID;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '按团队统计日客户数指标到[DSC_STAT.TMP_STAT_NONEKH_ZB]临时表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
        SELECT U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ FROM DSC_STAT.TMP_STAT_NONEKH_ZB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将相关月/年客户数指标数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    MERGE INTO DSC_STAT.T_STAT_NONEKH_ZB ZB
    USING (SELECT U_ID, 2 AS SJDW, VN_TJYF AS SJZ, ZBDM, ZBZ, YS_ID, CJ
             FROM DSC_STAT.TMP_STAT_NONEKH_ZB A
           UNION ALL
           SELECT U_ID, 3 AS SJDW, VN_TJNF AS SJZ, ZBDM, ZBZ, YS_ID, CJ
             FROM DSC_STAT.TMP_STAT_NONEKH_ZB B) TMP
    ON (ZB.U_ID = TMP.U_ID AND ZB.SJDW = TMP.SJDW AND ZB.SJZ = TMP.SJZ AND ZB.ZBDM = TMP.ZBDM)
    WHEN MATCHED THEN
        UPDATE
           SET ZB.ZBZ = TMP.ZBZ
         WHERE ZB.U_ID = TMP.U_ID
           AND ZB.SJDW = TMP.SJDW
           AND ZB.SJZ = TMP.SJZ
           AND ZB.ZBDM = TMP.ZBDM
    WHEN NOT MATCHED THEN
        INSERT
            (ZB.U_ID, ZB.SJDW, ZB.SJZ, ZB.ZBDM, ZB.ZBZ, ZB.YS_ID, ZB.CJ)
        VALUES
            (TMP.U_ID, TMP.SJDW, TMP.SJZ, TMP.ZBDM, TMP.ZBZ, TMP.YS_ID, TMP.CJ);
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将相关月/年客户数指标数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_NONEKH_TD_KHS;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_NONEKH_TD_KHSBG(O_N_CODE OUT INT,
                                                            O_S_NOTE OUT VARCHAR2,
                                                            I_N_TJRQ IN NUMBER,
                                                            I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
    -- CREATED ON 2013/05/23 BY LUZHIFEI ,APEXSOFT
    -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_NONEKH_TD_KHSBG
      功能简述：   在团队级别统计客户数的变更

      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
           1)人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
              组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
           2)ZBDM同t_zbxx.zbdm_1

           变更的客户数不考虑变更后客户的状态,而且一个客户变更多次，算一个。

      数据源：

      修改记录;
      ----------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/23 14:52:05               新增
     吴邦杰      2014/06/05                  修改：DSC_STAT.T_STAT_NONEKH_ZB增加YS_ID和CJ字段，完善程序处理逻辑
     吴邦杰      2014/11/24                  修改：纵表指标处理传参机制调整问题，改读系统USER为VS_USER
     洪国力      2016/01/08                  修改：修复因增、删、改没有提交导致其他过程对目标表操作时遇到锁报错的问题，新增COMMIT操作
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '05';
    CON_GXLX_FW CONSTANT INTEGER := 1; --关系类型（服务关系，含主和辅助两种)
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    --VN_SUBROWCOUNT INT;
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VN_TJYF_KSRQ NUMBER(8);
    VN_TJNF      NUMBER(4); --年份
    VN_TJNF_KSRQ NUMBER(8);
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_NONEKH_ZB';
    --VS_zbdm      varchar2(60);

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;
    VN_TJNF      := SUBSTR(I_N_TJRQ, 1, 4);
    VN_TJYF      := SUBSTR(I_N_TJRQ, 1, 6);
    VN_TJYF_KSRQ := VN_TJYF * 100 + 1;
    VN_TJNF_KSRQ := VN_TJNF * 10000 + 101;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        --SELECT COUNT(*) INTO VN_COUNT FROM T_STAT_YYBZC_R WHERE RQ=VN_TJRQ;
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_NONEKH_ZB
         WHERE SUBSTR(U_ID, 1, 2) = CON_ORG_LVL
           AND ZBDM IN
               (SELECT COLUMN_VALUE
                  FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME)))
           AND ((SJDW = 1 AND SJZ = VN_TJRQ) OR (SJDW = 2 AND SJZ = VN_TJYF) OR
                (SJDW = 3 AND SJZ = VN_TJNF));

        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --------------------------------------------------------------------------
    /*
      对于团队而言，新增的客户以其名下的服务人员的客户数有关
      新增的标准是：统计期限内开户的且挂接关系的
         如果只是简单地管开户，那么意义不大.
    */
    --先计算销户和开户指标
    --团队和人员的新开户日期意义不大，除非是新挂接人员数
    --日指标
    INSERT ALL WHEN KHS_XKH > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, PUB_SYS.PKG_GCONST.SJDW_R, SJZ, 'KHS_XKH', KHS_XKH, YS_ID, CJ) WHEN KHS_XH > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, PUB_SYS.PKG_GCONST.SJDW_R, SJZ, 'KHS_XH', KHS_XH, YS_ID, CJ)
    --月份
    WHEN KHS_XKH_Y > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, PUB_SYS.PKG_GCONST.SJDW_Y, VN_TJYF, 'KHS_XKH', KHS_XKH_Y, YS_ID, CJ) WHEN KHS_XH_Y > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, PUB_SYS.PKG_GCONST.SJDW_Y, VN_TJYF, 'KHS_XH', KHS_XH_Y, YS_ID, CJ)
    --年份
    WHEN KHS_XKH_N > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, PUB_SYS.PKG_GCONST.SJDW_N, VN_TJNF, 'KHS_XKH', KHS_XKH_N, YS_ID, CJ) WHEN KHS_XH_N > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, PUB_SYS.PKG_GCONST.SJDW_N, VN_TJNF, 'KHS_XH', KHS_XH_N, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || TD.TD_ID U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               COUNT(CASE
                         WHEN KHRQ = VN_TJRQ AND GX.SXRQ = VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_XKH,
               COUNT(CASE
                         WHEN XHRQ = VN_TJRQ AND GX.JZRQ = VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_XH,
               COUNT(DISTINCT CASE
                         WHEN KHRQ BETWEEN VN_TJYF_KSRQ AND VN_TJRQ AND
                              GX.SXRQ BETWEEN VN_TJYF_KSRQ AND VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_XKH_Y,
               COUNT(DISTINCT CASE
                         WHEN XHRQ BETWEEN VN_TJYF_KSRQ AND VN_TJRQ AND
                              GX.JZRQ BETWEEN VN_TJYF_KSRQ AND VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_XH_Y,
               COUNT(DISTINCT CASE
                         WHEN KHRQ BETWEEN VN_TJNF_KSRQ AND VN_TJRQ AND
                              GX.SXRQ BETWEEN VN_TJNF_KSRQ AND VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_XKH_N,
               COUNT(DISTINCT CASE
                         WHEN XHRQ BETWEEN VN_TJNF_KSRQ AND VN_TJRQ AND
                              GX.JZRQ BETWEEN VN_TJNF_KSRQ AND VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_XH_N,
               TD.TD_ID AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_STAT.VW_KHGX_ALL GX
          JOIN DSC_BAS.T_TDCY TD
            ON TD.RYXX = GX.RYXX
           AND TD.SXRQ <= VN_TJRQ
           AND (TD.JZRQ IS NULL OR TD.JZRQ > VN_TJRQ)
          JOIN DSC_BAS.T_KHXX_JJYW KH
            ON KH.KHH = GX.KHH
         WHERE GX.GXLX = CON_GXLX_FW
         GROUP BY TD.TD_ID;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --再通过销户开户计算净新增
    INSERT INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
        SELECT U_ID,
               SJDW,
               SJZ,
               'KHS_JXZ' ZBDM,
               SUM(CASE
                       WHEN ZBDM = 'KHS_XKH' THEN
                        ZBZ
                       ELSE
                        0
                   END) - SUM(CASE
                                  WHEN ZBDM = 'KHS_XH' THEN
                                   ZBZ
                                  ELSE
                                   0
                              END) ZBZ,
               YS_ID,
               CJ
          FROM DSC_STAT.T_STAT_NONEKH_ZB
         WHERE SUBSTR(U_ID, 1, 2) = CON_ORG_LVL
           AND ZBDM IN ('KHS_XKH', 'KHS_XH')
           AND SJZ IN (VN_TJRQ, VN_TJYF, VN_TJNF)
         GROUP BY U_ID, SJDW, SJZ, YS_ID, CJ;

    VN_ROWCOUNT := VN_ROWCOUNT + SQL%ROWCOUNT;
    COMMIT;

    /* --计算月粒度和年粒度.
    SELECT WMSYS.WM_CONCAT(COLUMN_VALUE) INTO VS_ZBDM
         FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER,VS_PROC_NAME)) ;

    DSC_STAT.P_STAT_NONEKH_ZBYS_PUBLIC(O_N_ROWCOUNT => VN_SUBROWCOUNT
      ,I_N_TJRQ => I_N_TJRQ
      ,i_S_zbdm => VS_ZBDM
      ,I_S_ORGLVL => CON_ORG_LVL
    );

    VN_ROWCOUNT:=VN_ROWCOUNT+VN_SUBROWCOUNT;*/

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_NONEKH_TD_KHSBG;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_NONEKH_YYB_FWKHS(O_N_CODE OUT INT,
                                                             O_S_NOTE OUT VARCHAR2,
                                                             I_N_TJRQ IN NUMBER,
                                                             I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
    -- CREATED ON 2013/05/23 BY LUZHIFEI ,APEXSOFT
    -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_NONEKH_YYB_FWKHS
      功能简述：   在营业部级别计算和关系有关的客户数
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
           1)人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
              组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
           2)ZBDM同t_zbxx.zbdm_1
           3) ry,td,yyb三个级别中算月份和年的过程都是类似的，因为本身有点像衍生的计算。
              所以，这些可以放在公共过程中处理.

      数据源：

      修改记录;
      ----------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/23 09:34:05               新增
      林伟     2013/08/15                        修改：已分配服务关系的客户数据还得是有效的客户
      黄玉钰   2013/09/22                        修改：注释掉与T_JGGL表的关联，U_ID取自YYB
     吴邦杰    2014/06/05                        修改：DSC_STAT.T_STAT_NONEKH_ZB增加YS_ID和CJ字段，完善程序处理逻辑
     洪国力    2016/01/08                        修改：修复因增、删、改没有提交导致其他过程对目标表操作时遇到锁报错的问题，新增COMMIT操作
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '03';
    CON_GXLX_FW CONSTANT INTEGER := 1; --关系类型（服务关系，含主和辅助两种)
    CON_GXLX_QY CONSTANT INTEGER := 2; --签约关系
    VS_PROC_NAME   VARCHAR2(100);
    VN_LOGID       INT; --LOG 表记录ID
    VN_ROWCOUNT    INT; --记录数
    VN_SUBROWCOUNT INT;
    VN_STEP        INT; --动作步数
    VN_PROC_NO     NUMBER(10);
    VS_USER        VARCHAR2(30);
    VN_TJRQ        NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF        NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VN_TJNF        NUMBER(4); --年份
    VS_TABNAME     VARCHAR2(100) := 'DSC_STAT.T_STAT_NONEKH_ZB';

    VS_ZBDM VARCHAR2(10240);
    VA_ZBDM PUB_SYS.TYPE_STR_ARR := PUB_SYS.TYPE_STR_ARR();
BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;
    VN_TJNF      := SUBSTR(I_N_TJRQ, 1, 4);
    --VN_TJNF:=SUBSTR(I_N_TJRQ,1,4);
    --vn_tjyf:=SUBSTR(I_N_TJRQ,1,6);

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        --SELECT COUNT(*) INTO VN_COUNT FROM T_STAT_YYBZC_R WHERE RQ=VN_TJRQ;
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        SELECT PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME)
          INTO VA_ZBDM
          FROM DUAL;
        DELETE FROM T_STAT_NONEKH_ZB
         WHERE SUBSTR(U_ID, 1, 2) = CON_ORG_LVL
           AND ZBDM IN (SELECT COLUMN_VALUE FROM TABLE(VA_ZBDM))
           AND ((SJDW = 1 AND SJZ = VN_TJRQ) OR (SJDW = 2 AND SJZ = VN_TJYF) OR
                (SJDW = 3 AND SJZ = VN_TJNF));

        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --VN_ROWCOUNT:=0;
    --------------------------------------------------------------------------
    --1)日指标

    INSERT ALL WHEN KHS_QY > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHS_QY', KHS_QY, YS_ID, CJ) WHEN KHS_FW > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHS_FW', KHS_FW, YS_ID, CJ) WHEN KHS_QY_XKH > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHS_QY_XKH', KHS_QY_XKH, YS_ID, CJ) WHEN KHS_JY > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHS_JY', KHS_JY, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || GX.YYB U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               COUNT(DISTINCT CASE
                         WHEN GX.GXLX = CON_GXLX_QY AND GX.SXRQ <= VN_TJRQ AND
                              (GX.JZRQ IS NULL OR GX.JZRQ > VN_TJRQ) THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_QY,
               COUNT(DISTINCT CASE
                         WHEN GX.GXLX = CON_GXLX_FW AND GX.SXRQ <= VN_TJRQ AND
                              (GX.JZRQ IS NULL OR GX.JZRQ > VN_TJRQ) AND KH.KHRQ <= VN_TJRQ AND
                              KH.XHRQ > VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_FW,
               COUNT(DISTINCT CASE
                         WHEN GX.GXLX = CON_GXLX_QY AND GX.SXRQ = VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_QY_XKH, --新签约的客户数
               COUNT(DISTINCT CASE
                         WHEN GX.GXLX = CON_GXLX_QY AND GX.JZRQ = VN_TJRQ THEN
                          GX.KHH
                         ELSE
                          NULL
                     END) KHS_JY, --解约的客户数
               GX.YYB AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_STAT.VW_KHGX_ALL GX
          JOIN DSC_BAS.T_KHXX_JJYW KH
            ON GX.KHH = KH.KHH
        --JOIN DSC_CFG.T_JGGL ORG ON ORG.ORGCODE = GX.YYB
         GROUP BY GX.YYB;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;

    SELECT WMSYS.WM_CONCAT(COLUMN_VALUE)
      INTO VS_ZBDM
      FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME));

    DSC_STAT.P_STAT_NONEKH_ZBYS_PUBLIC(O_N_ROWCOUNT => VN_SUBROWCOUNT,
                                       I_N_TJRQ     => I_N_TJRQ,
                                       I_S_ZBDM     => VS_ZBDM,
                                       I_S_ORGLVL   => CON_ORG_LVL);

    VN_ROWCOUNT := VN_ROWCOUNT + VN_SUBROWCOUNT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_NONEKH_YYB_FWKHS;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_NONEKH_YYB_FWRLS(O_N_CODE OUT INT,
                                                             O_S_NOTE OUT VARCHAR2,
                                                             I_N_TJRQ IN NUMBER,
                                                             I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
    -- CREATED ON 2013/05/22 BY LUZHIFEI ,APEXSOFT
    -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_NONEKH_YYB_FWRLS
      功能简述：   在营业部级别计算人力数含团队指标
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
           1)人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
              组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
           2)ZBDM同t_zbxx.zbdm_1

           3) 判断客户经理和投资顾问的级别和编码标准还存在问题。

      数据源：

      修改记录;
      ----------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/22 14:52:05               新增
      吴邦杰   2014/06/05                        修改：DSC_STAT.T_STAT_NONEKH_ZB增加YS_ID和CJ字段，完善程序处理逻辑
      洪国力   2016/01/08                        修改：修复因增、删、改没有提交导致其他过程对目标表操作时遇到锁报错的问题，新增COMMIT操作
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '03';
    VS_PROC_NAME   VARCHAR2(100);
    VN_LOGID       INT; --LOG 表记录ID
    VN_ROWCOUNT    INT; --记录数
    VN_SUBROWCOUNT INT;
    VN_STEP        INT; --动作步数
    VN_PROC_NO     NUMBER(10);
    VS_USER        VARCHAR2(30);
    VN_TJRQ        NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF        NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VN_TJNF        NUMBER(4); --年份
    VN_TJYF_KSRQ   NUMBER(8);
    VN_TJNF_KSRQ   NUMBER(8);
    VS_TABNAME     VARCHAR2(100) := 'DSC_STAT.T_STAT_NONEKH_ZB';
    --VS_zbdm      varchar2(60);

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;
    VN_TJNF      := SUBSTR(I_N_TJRQ, 1, 4);
    VN_TJYF      := SUBSTR(I_N_TJRQ, 1, 6);
    VN_TJYF_KSRQ := VN_TJYF * 100 + 1;
    VN_TJNF_KSRQ := VN_TJNF * 10000 + 101;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        --SELECT COUNT(*) INTO VN_COUNT FROM T_STAT_YYBZC_R WHERE RQ=VN_TJRQ;
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_NONEKH_ZB
         WHERE SUBSTR(U_ID, 1, 2) = CON_ORG_LVL
           AND ZBDM IN
               (SELECT COLUMN_VALUE
                  FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME)))
           AND ((SJDW = 1 AND SJZ = VN_TJRQ) OR (SJDW = 2 AND SJZ = VN_TJYF) OR
                (SJDW = 3 AND SJZ = VN_TJNF));

        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --------------------------------------------------------------------------
    --日指标部分
    INSERT ALL WHEN KHJLS > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHJLS', KHJLS, YS_ID, CJ) WHEN KHJLS_XZ > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHJLS_XZ', KHJLS_XZ, YS_ID, CJ) WHEN KHJLS_LS > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHJLS_LS', KHJLS_LS, YS_ID, CJ) WHEN TGRYS > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'TGRYS', TGRYS, YS_ID, CJ) WHEN TGRYS_XZ > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'TGRYS_XZ', TGRYS_XZ, YS_ID, CJ) WHEN TGRYS_LS > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'TGRYS_LS', TGRYS_LS, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || B.ORGID U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               COUNT(CASE
                         WHEN A.RYFL = 4 AND A.RZRQ <= VN_TJRQ AND
                              (A.LZRQ IS NULL OR A.LZRQ > VN_TJRQ) THEN
                          A.ID
                         ELSE
                          NULL
                     END) KHJLS,
               COUNT(CASE
                         WHEN A.RYFL = 4 AND A.RZRQ = VN_TJRQ THEN
                          A.ID
                         ELSE
                          NULL
                     END) KHJLS_XZ,
               COUNT(CASE
                         WHEN A.RYFL = 4 AND A.LZRQ = VN_TJRQ THEN
                          A.ID
                         ELSE
                          NULL
                     END) KHJLS_LS,
               COUNT(CASE
                         WHEN A.RYFL = 4 AND A.RYJB IN (5, 6) AND A.RZRQ <= VN_TJRQ AND
                              (A.LZRQ IS NULL OR A.LZRQ > VN_TJRQ) THEN
                          A.ID
                         ELSE
                          NULL
                     END) TGRYS,
               COUNT(CASE
                         WHEN A.RYFL = 4 AND A.RYJB IN (5, 6) AND A.RZRQ = VN_TJRQ THEN
                          A.ID
                         ELSE
                          NULL
                     END) TGRYS_XZ,
               COUNT(CASE
                         WHEN A.RYFL = 4 AND A.RYJB IN (5, 6) AND A.LZRQ = VN_TJRQ THEN
                          A.ID
                         ELSE
                          NULL
                     END) TGRYS_LS,
               B.ORGID AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_BAS.T_RYJBXX A
          JOIN DSC_BAS.T_RYXX B
            ON B.ID = A.RYXX
         GROUP BY B.ORGID;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --营销团队数
    INSERT INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || ORG.ID U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               'YXTDS' ZBDM,
               COUNT(A.ID) ZBZ,
               ORG.ID AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_BAS.T_TDBM A
          JOIN DSC_CFG.T_JGGL ORG
            ON ORG.ORGCODE = A.YYB
         WHERE TDLX = 2 --团队
           AND CJRQ <= VN_TJRQ
           AND (ZT = 0 OR (ZT = 1 AND ZXRQ >= VN_TJRQ))
         GROUP BY ORG.ID;

    VN_ROWCOUNT := VN_ROWCOUNT + SQL%ROWCOUNT;
    COMMIT;
    --月指标
    INSERT ALL WHEN KHJLS_XZ > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHJLS_XZ', KHJLS_XZ, YS_ID, CJ) WHEN KHJLS_LS > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHJLS_LS', KHJLS_LS, YS_ID, CJ) WHEN TGRYS_XZ > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'TGRYS_XZ', TGRYS_XZ, YS_ID, CJ) WHEN TGRYS_LS > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'TGRYS_LS', TGRYS_LS, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || B.ORGID U_ID,
               PUB_SYS.PKG_GCONST.SJDW_Y SJDW,
               VN_TJYF SJZ,
               COUNT(CASE
                         WHEN A.RYFL = 4 AND A.RZRQ BETWEEN VN_TJYF_KSRQ AND VN_TJRQ THEN
                          A.ID
                         ELSE
                          NULL
                     END) KHJLS_XZ,
               COUNT(CASE
                         WHEN A.RYFL = 4 AND A.LZRQ BETWEEN VN_TJYF_KSRQ AND VN_TJRQ THEN
                          A.ID
                         ELSE
                          NULL
                     END) KHJLS_LS,
               COUNT(CASE
                         WHEN A.RYFL = 4 AND A.RYJB IN (5, 6) AND A.RZRQ BETWEEN VN_TJYF_KSRQ AND
                              VN_TJRQ THEN
                          A.ID
                         ELSE
                          NULL
                     END) TGRYS_XZ,
               COUNT(CASE
                         WHEN A.RYFL = 4 AND A.RYJB IN (5, 6) AND A.LZRQ BETWEEN VN_TJYF_KSRQ AND
                              VN_TJRQ THEN
                          A.ID
                         ELSE
                          NULL
                     END) TGRYS_LS,
               B.ORGID AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_BAS.T_RYJBXX A
          JOIN DSC_BAS.T_RYXX B
            ON B.ID = A.RYXX
         GROUP BY B.ORGID;
    VN_ROWCOUNT := VN_ROWCOUNT + SQL%ROWCOUNT;
    COMMIT;

    --年度
    INSERT ALL WHEN KHJLS_XZ > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHJLS_XZ', KHJLS_XZ, YS_ID, CJ) WHEN KHJLS_LS > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHJLS_LS', KHJLS_LS, YS_ID, CJ) WHEN TGRYS_XZ > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'TGRYS_XZ', TGRYS_XZ, YS_ID, CJ) WHEN TGRYS_LS > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'TGRYS_LS', TGRYS_LS, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || B.ORGID U_ID,
               PUB_SYS.PKG_GCONST.SJDW_N SJDW,
               VN_TJNF SJZ,
               COUNT(CASE
                         WHEN A.RYFL = 4 AND A.RZRQ BETWEEN VN_TJNF_KSRQ AND VN_TJRQ THEN
                          A.ID
                         ELSE
                          NULL
                     END) KHJLS_XZ,
               COUNT(CASE
                         WHEN A.RYFL = 4 AND A.LZRQ BETWEEN VN_TJNF_KSRQ AND VN_TJRQ THEN
                          A.ID
                         ELSE
                          NULL
                     END) KHJLS_LS,
               COUNT(CASE
                         WHEN A.RYFL = 4 AND A.RYJB IN (5, 6) AND A.RZRQ BETWEEN VN_TJNF_KSRQ AND
                              VN_TJRQ THEN
                          A.ID
                         ELSE
                          NULL
                     END) TGRYS_XZ,
               COUNT(CASE
                         WHEN A.RYFL = 4 AND A.RYJB IN (5, 6) AND A.LZRQ BETWEEN VN_TJNF_KSRQ AND
                              VN_TJRQ THEN
                          A.ID
                         ELSE
                          NULL
                     END) TGRYS_LS,
               B.ORGID AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_BAS.T_RYJBXX A
          JOIN DSC_BAS.T_RYXX B
            ON B.ID = A.RYXX
         GROUP BY B.ORGID;
    VN_ROWCOUNT := VN_ROWCOUNT + SQL%ROWCOUNT;
    COMMIT;

    --计算月粒度和年粒度.
    /* SELECT WMSYS.WM_CONCAT(COLUMN_VALUE) INTO VS_ZBDM
    FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER,VS_PROC_NAME)) ;*/

    DSC_STAT.P_STAT_NONEKH_ZBYS_PUBLIC(O_N_ROWCOUNT => VN_SUBROWCOUNT,
                                       I_N_TJRQ     => I_N_TJRQ,
                                       I_S_ZBDM     => 'KHJLS,TGRYS,YXTDS',
                                       I_S_ORGLVL   => CON_ORG_LVL);

    VN_ROWCOUNT := VN_ROWCOUNT + VN_SUBROWCOUNT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_NONEKH_YYB_FWRLS;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_NONEKH_YYB_GDS(O_N_CODE OUT INT,
                                                           O_S_NOTE OUT VARCHAR2,
                                                           I_N_TJRQ IN NUMBER,
                                                           I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
    -- CREATED ON 2013/05/22 BY LUZHIFEI ,APEXSOFT
    -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_NONEKH_YYB_GDS
      功能简述：   在人员这个级别计算股东有关的指标
           以及指定和撤销指定的数
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
           1)人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
              组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
           2)ZBDM同t_zbxx.zbdm_1


      数据源：
           <REF>DSC_STAT.P_STAT_KHJYSR_R(DSC_STAT.T_STAT_KHJYSR_R)</REF>
      修改记录;
      ----------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/22 14:52:05               新增
      黄玉钰   2013/09/22                        修改：注释掉与T_JGGL表的关联，U_ID取自YYB
      吴邦杰   2014/06/05                        修改：DSC_STAT.T_STAT_NONEKH_ZB增加YS_ID和CJ字段，完善程序处理逻辑
      洪国力   2016/01/08                        修改：修复因增、删、改没有提交导致其他过程对目标表操作时遇到锁报错的问题，新增COMMIT操作
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '03';
    --CON_GXLX_FW  CONSTANT INTEGER:=1;  --关系类型（服务关系，含主和辅助两种)
    VS_PROC_NAME   VARCHAR2(100);
    VN_LOGID       INT; --LOG 表记录ID
    VN_ROWCOUNT    INT; --记录数
    VN_SUBROWCOUNT INT;
    VN_STEP        INT; --动作步数
    VN_PROC_NO     NUMBER(10);
    VS_USER        VARCHAR2(30);
    VN_TJRQ        NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF        NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VN_TJNF        NUMBER(4); --年份
    VS_TABNAME     VARCHAR2(100) := 'DSC_STAT.T_STAT_NONEKH_ZB';
    VS_ZBDM        VARCHAR2(60);

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;
    VN_TJNF      := SUBSTR(I_N_TJRQ, 1, 4);
    VN_TJYF      := SUBSTR(I_N_TJRQ, 1, 6);

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_NONEKH_ZB
         WHERE SUBSTR(U_ID, 1, 2) = CON_ORG_LVL
           AND ZBDM IN
               (SELECT COLUMN_VALUE
                  FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME)))
           AND ((SJDW = 1 AND SJZ = VN_TJRQ) OR (SJDW = 2 AND SJZ = VN_TJYF) OR
                (SJDW = 3 AND SJZ = VN_TJNF));

        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --------------------------------------------------------------------------
    --1)ZBDM=GDS数
    VS_ZBDM := 'GDS';
    INSERT INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || GD.YYB U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               VS_ZBDM ZBDM,
               COUNT(GD.GDH),
               GD.YYB AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_BAS.T_GDZH GD
        --JOIN DSC_CFG.T_JGGL ORG ON ORG.ORGCODE = GD.YYB
         WHERE GD.KHRQ <= VN_TJRQ
           AND (GD.GDZT IN ('0', '1') OR (GD.GDZT = '3' AND GD.XHRQ <= VN_TJRQ))
         GROUP BY GD.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;

    --------------------------------------------------------------------------
    --2)股东开户数
    VS_ZBDM := 'GDS_XKH';
    INSERT INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || GD.YYB U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               VS_ZBDM ZBDM,
               COUNT(GD.GDH),
               GD.YYB AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_BAS.T_GDZH GD
        --JOIN DSC_CFG.T_JGGL ORG ON ORG.ORGCODE = GD.YYB
         WHERE GD.KHRQ = VN_TJRQ
         GROUP BY GD.YYB;
    VN_ROWCOUNT := VN_ROWCOUNT + SQL%ROWCOUNT;
    COMMIT;

    --------------------------------------------------------------------------
    --3)股东销户数
    VS_ZBDM := 'GDS_XH';
    INSERT INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || GD.YYB U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               VS_ZBDM ZBDM,
               COUNT(GD.GDH),
               GD.YYB AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_BAS.T_GDZH GD
        --JOIN DSC_CFG.T_JGGL ORG ON ORG.ORGCODE = GD.YYB
         WHERE GD.XHRQ = VN_TJRQ
         GROUP BY GD.YYB;

    VN_ROWCOUNT := VN_ROWCOUNT + SQL%ROWCOUNT;
    COMMIT;

    --4)指定_新增|撤销
    --VS_ZBDM:='ZDS_XZ';

    INSERT ALL WHEN ZDS_XZ > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'ZDS_XZ', ZDS_XZ, YS_ID, CJ) WHEN ZDS_CX > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'ZDS_CX', ZDS_CX, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || JY.YYB U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               COUNT(CASE
                         WHEN JY.JYL_ZD > 0 THEN
                          JY.KHH
                         ELSE
                          NULL
                     END) ZDS_XZ,
               COUNT(CASE
                         WHEN JY.JYL_CZD > 0 THEN
                          JY.KHH
                         ELSE
                          NULL
                     END) ZDS_CX,
               JY.YYB AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_STAT.T_STAT_KHJYSR_R JY
        --JOIN DSC_CFG.T_JGGL ORG ON ORG.ORGCODE = JY.YYB
         WHERE JY.RQ = VN_TJRQ
         GROUP BY JY.YYB;
    VN_ROWCOUNT := VN_ROWCOUNT + SQL%ROWCOUNT;
    COMMIT;

    --计算月粒度和年粒度.
    SELECT WMSYS.WM_CONCAT(COLUMN_VALUE)
      INTO VS_ZBDM
      FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME));

    DSC_STAT.P_STAT_NONEKH_ZBYS_PUBLIC(O_N_ROWCOUNT => VN_SUBROWCOUNT,
                                       I_N_TJRQ     => I_N_TJRQ,
                                       I_S_ZBDM     => VS_ZBDM,
                                       I_S_ORGLVL   => CON_ORG_LVL);

    VN_ROWCOUNT := VN_ROWCOUNT + VN_SUBROWCOUNT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    /*
     -- 对于人员而言，不存在gxlx=0的情况。
    */

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_NONEKH_YYB_GDS;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_NONEKH_YYB_KHS(O_N_CODE OUT INT,
                                                           O_S_NOTE OUT VARCHAR2,
                                                           I_N_TJRQ IN INT,
                                                           I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_NONEKH_YYB_KHS
         功能简述：   统计营业部相关客户数
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
                  同p_stat_nonekh_ry_khs

         注意事项：
                  涉及到以下指标：'KHS', 'KHS_CL', 'KHS_ZL', 'KHS_GRH', 'KHS_JG', 'KHS_YZC', 'KHS_YSZ', 'KHS_YJY'
                  'YXKHS','YXKHS_XKH','YXKHS_JXZ','KHX_XH_QXKH','KHS_XKH_QXH'
                  组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
                  该过程没有使用DSC_STAT.VW_KHGX_ALL 客户关系视图，所以取的是所有的数据
         数据源：
                  1.DSC_BAS.T_KHXX_JJYW              客户信息_经纪业务
                  2.DSC_CFG.T_JGGL                   机构管理（营业部）
                  3.DSC_STAT.T_STAT_KHZC_R           客户_客户资产日表
                  4.DSC_STAT.T_STAT_RZRQ_R           融资融券_客户日统计表
                  5.DSC_STAT.T_STAT_KHJYSR_R         客户_客户交易收入日统计

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                    操作
         黄玉钰      2013/05/22                  创建
         林伟        2013/08/05                  修改：增加YXKHS,YXHKS_XKH,YXKHS_JXZ,KHS_XH_QXKH,KHS_XKH_QXH指标
         林伟        2013/08/12                  修改：增加KHS_XKH,KHS_XH指标
         林伟        2013/08/30                  修改：增加RZRQ_KHS_XKH,RZRQ_KHS_YJY,RZRQ_KHS_YFZ指标
         黄玉钰      2013/09/22                  修改：注释掉与T_JGGL表的关联，U_ID取自YYB
         吴邦杰      2014/06/05                  修改：DSC_STAT.T_STAT_NONEKH_ZB增加YS_ID和CJ字段，完善程序处理逻辑
         吴邦杰      2014/09/11                  修改:修正代码YS_ID书写错误
         吴邦杰      2014/11/17                  修改：1.修改聚合时的逻辑错误
                                                       2.DSC_STAT.P_STAT_NONEKH_YYB_KHS和DSC_STAT.P_STAT_NONEKH_YYB_KHSBG过程重复计算指标KHS_XH和KHS_XKH的，
                                                      现注释过程DSC_STAT.P_STAT_NONEKH_YYB_KHS这部分代码
         洪国力     2016/01/08                   修改：修复因增、删、改没有提交导致其他过程对目标表操作时遇到锁报错的问题，新增COMMIT操作
         黄宏峰     2016/03/14                   修改：完善过程，进行MERGE INTO操作时，INSERT部分需指定相应的列
    */
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6);
    VN_TJNF      NUMBER(4) := SUBSTR(VN_TJRQ, 1, 4);
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '03';
    VN_FIRSTDAY_OF_YEAR NUMBER(8) := SUBSTR(VN_TJRQ, 1, 4) * 10000 + 101; --本年第一天
    VN_TJYF_KSRQ        NUMBER(8) := VN_TJYF * 100 + 1;
    VN_TJNF_KSRQ        NUMBER(8) := VN_TJNF * 10000 + 101;
    VN_LAST_MONTH       NUMBER(6) := TO_CHAR(ADD_MONTHS(TO_DATE(VN_TJRQ, 'YYYYMMDD'), -1),
                                             'YYYYMM');
    VN_LAST_YEAR        NUMBER(4) := VN_TJNF - 1;
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --重做删除原数据
    IF I_N_REDO = 1 THEN
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_NONEKH_ZB]目标表，日期：=' ||
                                                        I_N_TJRQ || '的营业部客户数相关数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_NONEKH_ZB
         WHERE (U_ID LIKE '03%') --限制组织层级为营业部
           AND ZBDM IN
               (SELECT COLUMN_VALUE
                  FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME)))
           AND ((SJDW = 1 AND SJZ = VN_TJRQ) OR (SJDW = 2 AND SJZ = VN_TJYF) OR
               (SJDW = 3 AND SJZ = VN_TJNF));
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_NONEKH_ZB]目标表，日期：=' ||
                                                        I_N_TJRQ || '的营业部客户数相关数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_NONEKH_ZB]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;
    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_STAT_NONEKH_ZB]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_STAT_NONEKH_ZB';
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_STAT_NONEKH_ZB]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_STAT_NONEKH_ZB]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '按营业部统计日客户数指标到[DSC_STAT.TMP_STAT_NONEKH_ZB]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT ALL --插入数据
    WHEN ZBZ_KHS <> 0 --排除掉0的
    THEN INTO DSC_STAT.TMP_STAT_NONEKH_ZB
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS, ZBZ_KHS, YS_ID, CJ) --插入zbdm为KHS的记录
    WHEN ZBZ_KHS_CL <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_CL, ZBZ_KHS_CL, YS_ID, CJ) --插入zbdm为KHS_CL的记录
    WHEN ZBZ_KHS_ZL <> 0 --
    THEN INTO DSC_STAT.TMP_STAT_NONEKH_ZB
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_ZL, ZBZ_KHS_ZL, YS_ID, CJ) --插入zbdm为KHS_ZL的记录
    WHEN ZBZ_KHS_GRH <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_GRH, ZBZ_KHS_GRH, YS_ID, CJ) --插入zbdm为KHS_GRH的记录
    WHEN ZBZ_KHS_JG <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_JG, ZBZ_KHS_JG, YS_ID, CJ) --插入zbdm为KHS_JG的记录
    WHEN ZBZ_KHS_YZC <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_YZC, ZBZ_KHS_YZC, YS_ID, CJ) --插入zbdm为KHS_YZC的记录
    WHEN ZBZ_KHS_YSZ <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_YSZ, ZBZ_KHS_YSZ, YS_ID, CJ) --插入zbdm为KHS_YSZ的记录
    WHEN ZBZ_KHS_YJY <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_YJY, ZBZ_KHS_YJY, YS_ID, CJ) --插入zbdm为KHS_YJY的记录
    WHEN ZBZ_YXKHS <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_YXKHS, ZBZ_YXKHS, YS_ID, CJ) --插入zbdm为KHS_YXKHS的记录
    /*WHEN ZBZ_KHS_XKH <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_XKH, ZBZ_KHS_XKH, YS_ID, CJ) --插入zbdm为KHS_XKH的记录
    WHEN ZBZ_KHS_XH <> 0 THEN --
    INTO DSC_STAT.TMP_STAT_NONEKH_ZB
    VALUES
        (U_ID, SJDW, SJZ, ZBDM_KHS_XH, ZBZ_KHS_XH, YS_ID, CJ) --插入zbdm为KHS_XH的记录*/
        SELECT CON_ORG_LVL || '-' || A.YYB AS U_ID,
               1 AS SJDW,
               VN_TJRQ AS SJZ,
               'KHS' AS ZBDM_KHS,
               COUNT(A.KHH) AS ZBZ_KHS, --计算客户数指标值
               'KHS_CL' AS ZBDM_KHS_CL,
               COUNT(DISTINCT(CASE
                                  WHEN A.KHRQ < VN_FIRSTDAY_OF_YEAR AND XHRQ > VN_TJRQ THEN
                                   A.KHH
                                  ELSE
                                   NULL
                              END)) AS ZBZ_KHS_CL, --计算存量客户数指标值
               'KHS_ZL' AS ZBDM_KHS_ZL,
               COUNT(DISTINCT(CASE
                                  WHEN A.KHRQ >= VN_FIRSTDAY_OF_YEAR AND XHRQ > VN_TJRQ THEN
                                   A.KHH
                                  ELSE
                                   NULL
                              END)) AS ZBZ_KHS_ZL, --计算增量客户数指标值
               'KHS_GRH' AS ZBDM_KHS_GRH,
               COUNT(DISTINCT(CASE
                                  WHEN A.GRJG = 0 AND XHRQ > VN_TJRQ THEN
                                   A.KHH
                                  ELSE
                                   NULL
                              END)) AS ZBZ_KHS_GRH, --计算客户数_个人指标值
               'KHS_JG' AS ZBDM_KHS_JG,
               COUNT(DISTINCT(CASE
                                  WHEN A.GRJG <> 0 AND XHRQ > VN_TJRQ THEN
                                   A.KHH
                                  ELSE
                                   NULL
                              END)) AS ZBZ_KHS_JG, --计算客户数_机构指标值
               'KHS_YZC' AS ZBDM_KHS_YZC,
               COUNT(DISTINCT(CASE
                                  WHEN NVL(KHZC.ZZC, 0) + NVL(RZRQ.ZZC, 0) > 0 AND XHRQ > VN_TJRQ THEN
                                   A.KHH
                                  ELSE
                                   NULL
                              END)) AS ZBZ_KHS_YZC, --计算有资产客户数指标值
               'KHS_YSZ' AS ZBDM_KHS_YSZ,
               COUNT(DISTINCT(CASE
                                  WHEN NVL(KHZC.ZQSZ, 0) + NVL(RZRQ.ZQSZ, 0) > 0 AND XHRQ > VN_TJRQ THEN
                                   A.KHH
                                  ELSE
                                   NULL
                              END)) AS ZBZ_KHS_YSZ, --计算有市值客户数指标值
               'KHS_YJY' AS ZBDM_KHS_YJY,
               COUNT(DISTINCT(CASE
                                  WHEN NVL(JYL.JYL, 0) > 0 AND XHRQ > VN_TJRQ THEN
                                   A.KHH
                                  ELSE
                                   NULL
                              END)) AS ZBZ_KHS_YJY, --计算有交易客户数指标值
               'YXKHS' AS ZBDM_YXKHS,
               COUNT(DISTINCT(CASE
                                  WHEN NVL(JYL.JYL, 0) + NVL(RZRQ.JYL, 0) > 0 AND
                                       NVL(KHZC.ZZC, 0) + NVL(RZRQ.ZZC, 0) > 10000 AND
                                       NVL(JYL.YJSR, 0) + NVL(RZRQ.YJ, 0) > 0 AND XHRQ > VN_TJRQ THEN
                                   A.KHH
                                  ELSE
                                   NULL
                              END)) AS ZBZ_YXKHS, --计算有效客户数指标值
               /*'KHS_XKH' AS ZBDM_KHS_XKH,
               COUNT(DISTINCT(CASE
                                  WHEN A.KHRQ = VN_TJRQ THEN
                                   A.KHH
                                  ELSE
                                   NULL
                              END)) AS ZBZ_KHS_XKH, --计算新开客户数指标值
               'KHS_XH' AS ZBDM_KHS_XH,
               COUNT(DISTINCT(CASE
                                  WHEN A.XHRQ = VN_TJRQ THEN
                                   A.KHH
                                  ELSE
                                   NULL
                              END)) AS ZBZ_KHS_XH, --计算新开客户数指标值*/
               A.YYB       AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_BAS.T_KHXX_JJYW A
        --JOIN DSC_CFG.T_JGGL JG ON A.YYB = JG.ORGCODE
          LEFT JOIN DSC_STAT.T_STAT_KHZC_R KHZC
            ON A.KHH = KHZC.KHH
           AND KHZC.RQ = VN_TJRQ
          LEFT JOIN DSC_STAT.T_STAT_RZRQ_R RZRQ
            ON A.KHH = RZRQ.KHH
           AND RZRQ.RQ = VN_TJRQ
          LEFT JOIN DSC_STAT.T_STAT_KHJYSR_R JYL
            ON A.KHH = JYL.KHH
           AND JYL.RQ = VN_TJRQ
         WHERE A.KHRQ <= VN_TJRQ
           AND A.XHRQ >= VN_TJRQ --由于销户日期不为空 所以不做A.XHRQ IS NULL的判断
         GROUP BY A.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '按营业部统计日客户数指标到[DSC_STAT.TMP_STAT_NONEKH_ZB]临时表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
        SELECT U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ FROM DSC_STAT.TMP_STAT_NONEKH_ZB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将相关月/年客户数指标数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    MERGE INTO DSC_STAT.T_STAT_NONEKH_ZB ZB
    USING (SELECT U_ID, 2 AS SJDW, VN_TJYF AS SJZ, ZBDM, ZBZ, YS_ID, CJ
             FROM DSC_STAT.TMP_STAT_NONEKH_ZB A
           UNION ALL
           SELECT U_ID, 3 AS SJDW, VN_TJNF AS SJZ, ZBDM, ZBZ, YS_ID, CJ
             FROM DSC_STAT.TMP_STAT_NONEKH_ZB B) TMP
    ON (ZB.U_ID = TMP.U_ID AND ZB.SJDW = TMP.SJDW AND ZB.SJZ = TMP.SJZ AND ZB.ZBDM = TMP.ZBDM)
    WHEN MATCHED THEN
        UPDATE
           SET ZB.ZBZ = TMP.ZBZ
         WHERE ZB.U_ID = TMP.U_ID
           AND ZB.SJDW = TMP.SJDW
           AND ZB.SJZ = TMP.SJZ
           AND ZB.ZBDM = TMP.ZBDM
    WHEN NOT MATCHED THEN
        INSERT
            (ZB.U_ID, ZB.SJDW, ZB.SJZ, ZB.ZBDM, ZB.ZBZ, ZB.YS_ID, ZB.CJ)
        VALUES
            (TMP.U_ID, TMP.SJDW, TMP.SJZ, TMP.ZBDM, TMP.ZBZ, TMP.YS_ID, TMP.CJ);
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将相关月/年客户数指标数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    --插入YXKHS_XKH日，月， 年指标数据
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将YXKHS_XKH指标数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --日指标
    INSERT ALL WHEN YXKHS_XKH_R > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, PUB_SYS.PKG_GCONST.SJDW_R, VN_TJRQ, 'YXKHS_XKH', YXKHS_XKH_R, YS_ID, CJ)
    --月份
    WHEN YXKHS_XKH_Y > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, PUB_SYS.PKG_GCONST.SJDW_Y, VN_TJYF, 'YXKHS_XKH', YXKHS_XKH_Y, YS_ID, CJ)
    --年份
    WHEN YXKHS_XKH_N > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, PUB_SYS.PKG_GCONST.SJDW_N, VN_TJNF, 'YXKHS_XKH', YXKHS_XKH_N, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || A.YYB U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               COUNT(CASE
                         WHEN KHRQ = VN_TJRQ AND NVL(JYL.JYL, 0) + NVL(RZRQ.JYL, 0) > 0 AND
                              NVL(KHZC.ZZC, 0) + NVL(RZRQ.ZZC, 0) > 10000 AND
                              NVL(JYL.YJSR, 0) + NVL(RZRQ.YJ, 0) > 0 THEN
                          A.KHH
                         ELSE
                          NULL
                     END) YXKHS_XKH_R,
               COUNT(DISTINCT CASE
                         WHEN KHRQ BETWEEN VN_TJYF_KSRQ AND VN_TJRQ AND
                              NVL(JYL.JYL, 0) + NVL(RZRQ.JYL, 0) > 0 AND
                              NVL(KHZC.ZZC, 0) + NVL(RZRQ.ZZC, 0) > 10000 AND
                              NVL(JYL.YJSR, 0) + NVL(RZRQ.YJ, 0) > 0 THEN
                          A.KHH
                         ELSE
                          NULL
                     END) YXKHS_XKH_Y,
               COUNT(DISTINCT CASE
                         WHEN KHRQ BETWEEN VN_TJNF_KSRQ AND VN_TJRQ AND
                              NVL(JYL.JYL, 0) + NVL(RZRQ.JYL, 0) > 0 AND
                              NVL(KHZC.ZZC, 0) + NVL(RZRQ.ZZC, 0) > 10000 AND
                              NVL(JYL.YJSR, 0) + NVL(RZRQ.YJ, 0) > 0 THEN
                          A.KHH
                         ELSE
                          NULL
                     END) YXKHS_XKH_N,
               A.YYB AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_BAS.T_KHXX_JJYW A
        --JOIN DSC_CFG.T_JGGL JG ON A.YYB = JG.ORGCODE
          LEFT JOIN DSC_STAT.T_STAT_KHZC_R KHZC
            ON A.KHH = KHZC.KHH
           AND KHZC.RQ = VN_TJRQ
          LEFT JOIN DSC_STAT.T_STAT_RZRQ_R RZRQ
            ON A.KHH = RZRQ.KHH
           AND RZRQ.RQ = VN_TJRQ
          LEFT JOIN DSC_STAT.T_STAT_KHJYSR_R JYL
            ON A.KHH = JYL.KHH
           AND JYL.RQ = VN_TJRQ
         WHERE A.XHRQ > VN_TJRQ --由于销户日期不为空 所以不做A.XHRQ IS NULL的判断
         GROUP BY A.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将YXKHS_XKH标数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    --插入YXKHS_JXZ指标数据
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将YXKHS_JXZ指标数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    --月份
        SELECT U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               'YXKHS_JXZ' ZBDM,
               SUM(CASE
                       WHEN SJZ = VN_TJYF THEN
                        ZBZ
                       ELSE
                        0
                   END) - SUM(CASE
                                  WHEN SJZ = VN_LAST_MONTH THEN
                                   ZBZ
                                  ELSE
                                   0
                              END) ZBZ,
               YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_STAT.T_STAT_NONEKH_ZB
         WHERE SJDW = PUB_SYS.PKG_GCONST.SJDW_Y
           AND ZBDM IN ('YXKHS_XKH')
           AND SJZ BETWEEN VN_TJYF AND VN_LAST_MONTH
           AND SUBSTR(U_ID, 1, 2) = CON_ORG_LVL
         GROUP BY U_ID, YS_ID
        UNION ALL
        --年份
        SELECT U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               'YXKHS_JXZ' ZBDM,
               SUM(CASE
                       WHEN SJZ = VN_TJNF THEN
                        ZBZ
                       ELSE
                        0
                   END) - SUM(CASE
                                  WHEN SJZ = VN_LAST_YEAR THEN
                                   ZBZ
                                  ELSE
                                   0
                              END) ZBZ,
               YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_STAT.T_STAT_NONEKH_ZB
         WHERE SJDW = PUB_SYS.PKG_GCONST.SJDW_N
           AND ZBDM IN ('YXKHS_XKH')
           AND SJZ BETWEEN VN_TJNF AND VN_LAST_YEAR
           AND SUBSTR(U_ID, 1, 2) = CON_ORG_LVL
         GROUP BY U_ID, YS_ID;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将YXKHS_JXZ标数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --插入RZRQ_KHS_XKH,RZRQ_KHS_YJY,RZRQ_KHS_YFZ指标数据
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将RZRQ_KHS_XKH,RZRQ_KHS_YJY,RZRQ_KHS_YFZ指标数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --日指标
    INSERT ALL /*WHEN RZRQ_KHS_XKH_Y > 0 THEN*/
    INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID,
         PUB_SYS.PKG_GCONST.SJDW_R,
         VN_TJRQ,
         'RZRQ_KHS_XKH',
         RZRQ_KHS_XKH_R,
         YS_ID,
         CJ) /*WHEN RZRQ_KHS_YJY_Y > 0 THEN*/
    INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID,
         PUB_SYS.PKG_GCONST.SJDW_R,
         VN_TJRQ,
         'RZRQ_KHS_YJY',
         RZRQ_KHS_YJY_R,
         YS_ID,
         CJ) /*WHEN RZRQ_KHS_YFZ_Y > 0 THEN*/
    INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID,
         PUB_SYS.PKG_GCONST.SJDW_R,
         VN_TJRQ,
         'RZRQ_KHS_YFZ',
         RZRQ_KHS_YFZ_R,
         YS_ID,
         CJ)
        SELECT CON_ORG_LVL || '-' || A.YYB U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               COUNT(CASE
                         WHEN KHRQ = VN_TJRQ THEN
                          A.KHH
                         ELSE
                          NULL
                     END) RZRQ_KHS_XKH_R,
               COUNT(DISTINCT CASE
                         WHEN XHRQ > VN_TJRQ AND RZRQ.JYL > 0 THEN
                          A.KHH
                         ELSE
                          NULL
                     END) RZRQ_KHS_YJY_R,
               COUNT(CASE
                         WHEN XHRQ > VN_TJRQ AND RZRQ.ZFZ > 0 THEN
                          A.KHH
                         ELSE
                          NULL
                     END) RZRQ_KHS_YFZ_R,
               A.YYB AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM (SELECT DISTINCT A.KHH, A.KHRQ, A.XHRQ, C.GRJG, B.XYDJ, C.YYB
                  FROM DSC_BAS.T_ZJZH A, DSC_BAS.T_KHXX_RZRQ B, DSC_BAS.T_KHXX_JJYW C
                 WHERE A.XYBZ = 1
                   AND A.KHH = B.KHH(+)
                   AND A.KHH = C.KHH) A
          LEFT JOIN DSC_STAT.T_STAT_RZRQ_R RZRQ
            ON A.KHH = RZRQ.KHH
           AND RZRQ.RQ = VN_TJRQ
        --JOIN DSC_CFG.T_JGGL JG ON A.YYB = JG.ORGCODE
         GROUP BY A.YYB;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将RZRQ_KHS_XKH,RZRQ_KHS_YJY,RZRQ_KHS_YFZ标数据插入到[DSC_STAT.T_STAT_NONEKH_ZB]目标表中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_NONEKH_YYB_KHS;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_NONEKH_YYB_KHSBG(O_N_CODE OUT INT,
                                                             O_S_NOTE OUT VARCHAR2,
                                                             I_N_TJRQ IN NUMBER,
                                                             I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
    -- CREATED ON 2013/05/22 BY LUZHIFEI ,APEXSOFT
    -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_NONEKH_YYB_KHSBG
      功能简述：   在营业部级别统计客户数的变更
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
           1)人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
              组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
           2)ZBDM同t_zbxx.zbdm_1


      数据源：

      修改记录;
      ----------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/22 14:52:05               新增
      黄玉钰   2013/09/22                        修改：注释掉与T_JGGL表的关联，U_ID取自YYB
      黄玉钰   2014/03/20                        修改：DELETE中USER改成VS_USER
      吴邦杰   2014/06/05                        修改：DSC_STAT.T_STAT_NONEKH_ZB增加YS_ID和CJ字段，完善程序处理逻辑
      吴邦杰   2014/09/11                        修改:修正代码YS_ID书写错误
      吴邦杰   2014/11/17                        修改：修改聚合时的逻辑错误
      吴邦杰   2014/11/24                        修改：纵表指标处理传参机制调整问题，改读系统USER为VS_USER
      洪国力   2016/01/08                        修改：修复因增、删、改没有提交导致其他过程对目标表操作时遇到锁报错的问题，新增COMMIT操作
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '03';
    VS_PROC_NAME   VARCHAR2(100);
    VN_LOGID       INT; --LOG 表记录ID
    VN_ROWCOUNT    INT; --记录数
    VN_SUBROWCOUNT INT;
    VN_STEP        INT; --动作步数
    VN_PROC_NO     NUMBER(10);
    VS_USER        VARCHAR2(30);
    VN_TJRQ        NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF        NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VN_TJNF        NUMBER(4); --年份
    VS_TABNAME     VARCHAR2(100) := 'DSC_STAT.T_STAT_NONEKH_ZB';
    VS_ZBDM        VARCHAR2(60);

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;
    VN_TJNF      := SUBSTR(I_N_TJRQ, 1, 4);
    VN_TJYF      := SUBSTR(I_N_TJRQ, 1, 6);

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_NONEKH_ZB
         WHERE SUBSTR(U_ID, 1, 2) = CON_ORG_LVL
           AND ZBDM IN
               (SELECT COLUMN_VALUE
                  FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME)))
           AND ((SJDW = 1 AND SJZ = VN_TJRQ) OR (SJDW = 2 AND SJZ = VN_TJYF) OR
                (SJDW = 3 AND SJZ = VN_TJNF));

        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --------------------------------------------------------------------------
    --先计算销户和开户指标
    INSERT ALL WHEN KHS_XKH > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHS_XKH', KHS_XKH, YS_ID, CJ) WHEN KHS_XH > 0 THEN INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
    VALUES
        (U_ID, SJDW, SJZ, 'KHS_XH', KHS_XH, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || A.YYB U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               COUNT(CASE
                         WHEN KHRQ = VN_TJRQ THEN
                          KHH
                         ELSE
                          NULL
                     END) KHS_XKH,
               COUNT(CASE
                         WHEN XHRQ = VN_TJRQ THEN
                          KHH
                         ELSE
                          NULL
                     END) KHS_XH,
               A.YYB AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_BAS.T_KHXX_JJYW A
        --JOIN DSC_CFG.T_JGGL ORG ON ORG.ORGCODE = A.YYB
         GROUP BY A.YYB;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --再通过销户开户计算净新增
    INSERT INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
        SELECT U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               'KHS_JXZ' ZBDM,
               SUM(CASE
                       WHEN ZBDM = 'KHS_XKH' THEN
                        ZBZ
                       ELSE
                        0
                   END) - SUM(CASE
                                  WHEN ZBDM = 'KHS_XH' THEN
                                   ZBZ
                                  ELSE
                                   0
                              END) ZBZ,
               YS_ID AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_STAT.T_STAT_NONEKH_ZB
         WHERE SJDW = PUB_SYS.PKG_GCONST.SJDW_R
           AND ZBDM IN ('KHS_XKH', 'KHS_XH')
           AND SJZ = VN_TJRQ
           AND SUBSTR(U_ID, 1, 2) = CON_ORG_LVL
         GROUP BY U_ID, YS_ID;

    VN_ROWCOUNT := VN_ROWCOUNT + SQL%ROWCOUNT;
    COMMIT;

    --计算月粒度和年粒度.
    SELECT WMSYS.WM_CONCAT(COLUMN_VALUE)
      INTO VS_ZBDM
      FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME));

    DSC_STAT.P_STAT_NONEKH_ZBYS_PUBLIC(O_N_ROWCOUNT => VN_SUBROWCOUNT,
                                       I_N_TJRQ     => I_N_TJRQ,
                                       I_S_ZBDM     => VS_ZBDM,
                                       I_S_ORGLVL   => CON_ORG_LVL);

    VN_ROWCOUNT := VN_ROWCOUNT + VN_SUBROWCOUNT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_NONEKH_YYB_KHSBG;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_NONEKH_YYB_ZJZHS(O_N_CODE OUT INT,
                                                             O_S_NOTE OUT VARCHAR2,
                                                             I_N_TJRQ IN NUMBER,
                                                             I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
    -- CREATED ON 2013/05/22 BY LUZHIFEI ,APEXSOFT
    -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_NONEKH_YYB_ZJZHS
      功能简述：   在人员这个级别计算资金账号数有关的指标
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
           1)人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
              组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
           2)ZBDM同t_zbxx.zbdm_1


      数据源：

      修改记录;
      ----------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/22 14:52:05               新增
      黄玉钰   2013/09/22                        修改：注释掉与T_JGGL表的关联，U_ID取自YYB
      吴邦杰   2014/06/05                        修改：DSC_STAT.T_STAT_NONEKH_ZB增加YS_ID和CJ字段，完善程序处理逻辑
      洪国力   2016/01/08                        修改：修复因增、删、改没有提交导致其他过程对目标表操作时遇到锁报错的问题，新增COMMIT操作
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '03';
    VS_PROC_NAME   VARCHAR2(100);
    VN_LOGID       INT; --LOG 表记录ID
    VN_ROWCOUNT    INT; --记录数
    VN_SUBROWCOUNT INT;
    VN_STEP        INT; --动作步数
    VN_PROC_NO     NUMBER(10);
    VS_USER        VARCHAR2(30);
    VN_TJRQ        NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF        NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VN_TJNF        NUMBER(4); --年份
    VS_TABNAME     VARCHAR2(100) := 'DSC_STAT.T_STAT_NONEKH_ZB';
    VS_ZBDM        VARCHAR2(60);

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;
    VN_TJNF      := SUBSTR(I_N_TJRQ, 1, 4);
    VN_TJYF      := SUBSTR(I_N_TJRQ, 1, 6);

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_NONEKH_ZB
         WHERE SUBSTR(U_ID, 1, 2) = CON_ORG_LVL
           AND ZBDM IN
               (SELECT COLUMN_VALUE
                  FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME)))
           AND ((SJDW = 1 AND SJZ = VN_TJRQ) OR (SJDW = 2 AND SJZ = VN_TJYF) OR
                (SJDW = 3 AND SJZ = VN_TJNF));

        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --------------------------------------------------------------------------
    --1)资金帐号数
    VS_ZBDM := 'ZJZHS';
    INSERT INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || KH.YYB U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               VS_ZBDM ZBDM,
               COUNT(ZJZH.ZJZH),
               KH.YYB AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_BAS.T_ZJZH ZJZH
          JOIN DSC_BAS.T_KHXX_JJYW KH
            ON KH.KHH = ZJZH.KHH
        --JOIN DSC_CFG.T_JGGL ORG ON ORG.ORGCODE = KH.YYB
         WHERE ZJZH.KHRQ <= VN_TJRQ
           AND (ZJZH.ZHZT IN ('0', '1') OR (ZJZH.ZHZT = '3' AND ZJZH.XHRQ <= VN_TJRQ))
         GROUP BY KH.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;

    --------------------------------------------------------------------------
    --2)资金帐号书_新开户
    VS_ZBDM := 'ZJZHS_XKH';
    INSERT INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || KH.YYB U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               VS_ZBDM ZBDM,
               COUNT(ZJZH.ZJZH),
               KH.YYB AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_BAS.T_ZJZH ZJZH
          JOIN DSC_BAS.T_KHXX_JJYW KH
            ON KH.KHH = ZJZH.KHH
        --JOIN DSC_CFG.T_JGGL ORG ON ORG.ORGCODE = KH.YYB
         WHERE ZJZH.KHRQ = VN_TJRQ
         GROUP BY KH.YYB;
    VN_ROWCOUNT := VN_ROWCOUNT + SQL%ROWCOUNT;
    COMMIT;

    --3)资金账户数_销户
    VS_ZBDM := 'ZJZHS_XH';
    INSERT INTO DSC_STAT.T_STAT_NONEKH_ZB
        (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
        SELECT CON_ORG_LVL || '-' || KH.YYB U_ID,
               PUB_SYS.PKG_GCONST.SJDW_R SJDW,
               VN_TJRQ SJZ,
               VS_ZBDM ZBDM,
               COUNT(ZJZH.ZJZH),
               KH.YYB AS YS_ID,
               CON_ORG_LVL AS CJ
          FROM DSC_BAS.T_ZJZH ZJZH
          JOIN DSC_BAS.T_KHXX_JJYW KH
            ON KH.KHH = ZJZH.KHH
        --JOIN DSC_CFG.T_JGGL ORG ON ORG.ORGCODE = KH.YYB
         WHERE ZJZH.XHRQ = VN_TJRQ
         GROUP BY KH.YYB;
    VN_ROWCOUNT := VN_ROWCOUNT + SQL%ROWCOUNT;
    COMMIT;

    --计算月粒度和年粒度.
    SELECT WMSYS.WM_CONCAT(COLUMN_VALUE)
      INTO VS_ZBDM
      FROM TABLE(PUB_SYS.F_GETNONEKHZBPROC_ZBDMS(VS_USER, VS_PROC_NAME));

    DSC_STAT.P_STAT_NONEKH_ZBYS_PUBLIC(O_N_ROWCOUNT => VN_SUBROWCOUNT,
                                       I_N_TJRQ     => I_N_TJRQ,
                                       I_S_ZBDM     => VS_ZBDM,
                                       I_S_ORGLVL   => CON_ORG_LVL);

    VN_ROWCOUNT := VN_ROWCOUNT + VN_SUBROWCOUNT;

    VN_ROWCOUNT := VN_ROWCOUNT + SQL%ROWCOUNT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_NONEKH_YYB_ZJZHS;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_NONEKH_ZBYS(O_N_ROWCOUNT OUT NUMBER,
                                                        I_S_ZBDM     IN VARCHAR2,
                                                        I_N_ZBJSFS   IN INT,
                                                        I_N_SRC_SJDW IN INT,
                                                        I_N_DST_SJDW IN INT,
                                                        I_N_SRC_KSSJ IN INT,
                                                        I_N_SRC_JSSJ IN INT,
                                                        I_N_DST_SJZ  IN INT,
                                                        I_S_ORGLVL   IN VARCHAR2) IS
    /*-----------------------------------------------------------------------
    -- Created on 2013-05-23 by LZF ,APEXSOFT
    -----------------------------------------------------------------------
      项目名称：
      过程名称:   P_STAT_NONEKH_ZBYS
      功能简述：  对同种计算方式的指标，进行时间粒度上的聚集，以便获得更高时间
         粒度的指标值，类似于经营分析中的聚集行数SUM或者FUNC_YM之类的。
      参数：
            英文名称            中文名称                 可能取值
            O_N_CODE            返回值
            O_S_NOTE            返回信息
            o_n_rowcount        影响的行数
            i_S_zbdm            指标代码,以逗号隔开
            I_N_ZBJSFS          指标计算方式，主要是指1|可以累计，-1不可累计(期末值)
            i_n_SRC_SJDW        源数据的时间单位，具体定义见pub_sys.pkg_gconst
            I_N_DST_SJDW        目标的时间单位，具体定义见pub_sys.pkg_gconst
            I_s_orglvl          要计算的层级，允许为空，表示计算所有层次
      返回：

      算法：
         1.如果i_s_zbjsfs=1 ,那么对指标进行sum，否则直接取值.
      注意事项：


      数据源：

      修改记录;
      ------------------------------------------------------------------------
      操作人     操作时间                操作
      lzf        2013-05-23              新增
      陈德铸     2014/06/05              修改：DSC_STAT.T_STAT_NONEKH_ZB增加YS_ID和CJ字段，完善程序处理逻辑
      洪国力     2016/01/08              修改：修复因增、删、改没有提交导致其他过程对目标表操作时遇到锁报错的问题，新增COMMIT操作
    */
    VA_ZBDM PUB_SYS.TYPE_TAB_SPLIT := PUB_SYS.TYPE_TAB_SPLIT();
BEGIN
    VA_ZBDM := PUB_SYS.F_SPLIT(I_S_ZBDM, ',');

    IF I_N_ZBJSFS = 1 THEN
        INSERT INTO DSC_STAT.T_STAT_NONEKH_ZB
            (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
            SELECT U_ID,
                   I_N_DST_SJDW SJDW,
                   I_N_DST_SJZ SJZ,
                   ZBDM,
                   SUM(ZBZ) ZBZ,
                   YS_ID,
                   CJ
              FROM DSC_STAT.T_STAT_NONEKH_ZB
             WHERE SJDW = I_N_SRC_SJDW
               AND ZBDM IN (SELECT COLUMN_VALUE FROM TABLE(VA_ZBDM))
               AND SJZ BETWEEN I_N_SRC_KSSJ AND I_N_SRC_JSSJ
               AND (I_S_ORGLVL IS NULL OR SUBSTR(U_ID, 1, 2) = I_S_ORGLVL)
             GROUP BY U_ID, ZBDM, YS_ID, CJ;

    ELSE
        INSERT INTO DSC_STAT.T_STAT_NONEKH_ZB
            (U_ID, SJDW, SJZ, ZBDM, ZBZ, YS_ID, CJ)
            SELECT U_ID, I_N_DST_SJDW SJDW, I_N_DST_SJZ SJZ, ZBDM, ZBZ ZBZ, YS_ID, CJ
              FROM DSC_STAT.T_STAT_NONEKH_ZB
             WHERE SJDW = I_N_SRC_SJDW
               AND ZBDM IN (SELECT COLUMN_VALUE FROM TABLE(VA_ZBDM))
               AND SJZ = I_N_SRC_JSSJ
               AND (I_S_ORGLVL IS NULL OR SUBSTR(U_ID, 1, 2) = I_S_ORGLVL);
    END IF;

    O_N_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;

END;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_NONEKH_ZBYS_PUBLIC(O_N_ROWCOUNT OUT NUMBER,
                                                               I_N_TJRQ     IN INT,
                                                               I_S_ZBDM     IN VARCHAR2,
                                                               I_S_ORGLVL   IN VARCHAR2) IS
    /*-----------------------------------------------------------------------
    -- Created on 2013-05-23 by LZF ,APEXSOFT
    -----------------------------------------------------------------------
      项目名称：
      过程名称:   P_STAT_NONEKH_ZBYS_PUBLIC
      功能简述：  对同种计算方式的指标，进行时间粒度上的聚集，以便获得更高时间
         粒度的指标值，类似于经营分析中的聚集行数SUM或者FUNC_YM之类的。
      参数：
            英文名称            中文名称                 可能取值
            O_N_CODE            返回值
            O_S_NOTE            返回信息
            o_n_rowcount        影响的行数
            i_S_zbdm            指标代码,以逗号隔开
            I_s_orglvl          要计算的层级，允许为空，表示计算所有层次
      返回：

      算法：
         1.如果i_s_zbjsfs=1 ,那么对指标进行sum，否则直接取值.
      注意事项：
         本过程无法解决所有的，但能处理最常见的一些情况。

      数据源：

      修改记录;
      ------------------------------------------------------------------------
      操作人     操作时间                操作
      lzf        2013-05-23                 新增

    */

    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF_KSRQ NUMBER(8);
    --VN_TJNF_KSRQ NUMBER(8);
    VN_TJYF NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VN_KSYF NUMBER(6); --年初1月
    VN_TJNF NUMBER(4); --年份

    VN_ROWCOUNT    INT := 0;
    VN_SUBROWCOUNT INT;
    VN_COUNT       PLS_INTEGER;
    VS_ZBDM        VARCHAR2(10240);

BEGIN
    --变量初始化
    VN_TJNF      := SUBSTR(I_N_TJRQ, 1, 4);
    VN_TJYF      := SUBSTR(I_N_TJRQ, 1, 6);
    VN_KSYF      := VN_TJNF * 100 + 1;
    VN_TJYF_KSRQ := VN_TJYF * 100 + 1;

    /*
      总体分两步走，先算可以累计，再算不能累计的。
      如果有些指标不能用以下方式计算，那么请不要使用本过程：
      1：可以直接累计的
      2：或者可以直接取期末量的（而且都是取日粒度的期末量）
    */

    --------------------------------------------------------------
    --计算可累计部分指标
    SELECT WMSYS.WM_CONCAT(ZBDM), COUNT(*)
      INTO VS_ZBDM, VN_COUNT
      FROM PUB_SYS.T_ETL_NONEKHZB_YS A
     WHERE A.LJFS = 1
       AND INSTR(',' || I_S_ZBDM || ',', ',' || ZBDM || ',') > 0;

    IF VN_COUNT > 0 THEN
        --计算月粒度指标
        --从日累计
        DSC_STAT.P_STAT_NONEKH_ZBYS(O_N_ROWCOUNT => VN_SUBROWCOUNT,
                                    I_S_ZBDM     => VS_ZBDM,
                                    I_N_ZBJSFS   => 1,
                                    I_N_SRC_SJDW => PUB_SYS.PKG_GCONST.SJDW_R,
                                    I_N_DST_SJDW => PUB_SYS.PKG_GCONST.SJDW_Y,
                                    I_N_SRC_KSSJ => VN_TJYF_KSRQ,
                                    I_N_SRC_JSSJ => VN_TJRQ,
                                    I_N_DST_SJZ  => VN_TJYF,
                                    I_S_ORGLVL   => I_S_ORGLVL);
        VN_ROWCOUNT := VN_ROWCOUNT + VN_SUBROWCOUNT;
        ---计算年粒度指标
        --从月份累计
        DSC_STAT.P_STAT_NONEKH_ZBYS(O_N_ROWCOUNT => VN_SUBROWCOUNT,
                                    I_S_ZBDM     => VS_ZBDM,
                                    I_N_ZBJSFS   => 1,
                                    I_N_SRC_SJDW => PUB_SYS.PKG_GCONST.SJDW_Y,
                                    I_N_DST_SJDW => PUB_SYS.PKG_GCONST.SJDW_N,
                                    I_N_SRC_KSSJ => VN_KSYF,
                                    I_N_SRC_JSSJ => VN_TJYF,
                                    I_N_DST_SJZ  => VN_TJNF,
                                    I_S_ORGLVL   => I_S_ORGLVL);
        VN_ROWCOUNT := VN_ROWCOUNT + VN_SUBROWCOUNT;
    END IF;

    --------------------------------------------------------------
    --计算不可累计部分指标 （即期末量指标)
    SELECT WMSYS.WM_CONCAT(ZBDM), COUNT(*)
      INTO VS_ZBDM, VN_COUNT
      FROM PUB_SYS.T_ETL_NONEKHZB_YS A
     WHERE A.LJFS = -1
       AND INSTR(',' || I_S_ZBDM || ',', ',' || ZBDM || ',') > 0;
    IF VN_COUNT > 0 THEN
        DSC_STAT.P_STAT_NONEKH_ZBYS(O_N_ROWCOUNT => VN_SUBROWCOUNT,
                                    I_S_ZBDM     => VS_ZBDM,
                                    I_N_ZBJSFS   => -1,
                                    I_N_SRC_SJDW => PUB_SYS.PKG_GCONST.SJDW_R,
                                    I_N_DST_SJDW => PUB_SYS.PKG_GCONST.SJDW_Y,
                                    I_N_SRC_KSSJ => VN_TJRQ,
                                    I_N_SRC_JSSJ => VN_TJRQ,
                                    I_N_DST_SJZ  => VN_TJYF,
                                    I_S_ORGLVL   => I_S_ORGLVL);
        VN_ROWCOUNT := VN_ROWCOUNT + VN_SUBROWCOUNT;
        --不可累计
        DSC_STAT.P_STAT_NONEKH_ZBYS(O_N_ROWCOUNT => VN_SUBROWCOUNT,
                                    I_S_ZBDM     => VS_ZBDM,
                                    I_N_ZBJSFS   => -1,
                                    I_N_SRC_SJDW => PUB_SYS.PKG_GCONST.SJDW_R,
                                    I_N_DST_SJDW => PUB_SYS.PKG_GCONST.SJDW_N,
                                    I_N_SRC_KSSJ => VN_TJRQ,
                                    I_N_SRC_JSSJ => VN_TJRQ,
                                    I_N_DST_SJZ  => VN_TJNF,
                                    I_S_ORGLVL   => I_S_ORGLVL);
        VN_ROWCOUNT := VN_ROWCOUNT + VN_SUBROWCOUNT;
    END IF;

    O_N_ROWCOUNT := VN_ROWCOUNT;

END;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_RY_CLXZ_N(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN NUMBER,
                                                      I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
    -- CREATED ON 2013/05/20 BY LUZHIFEI ,APEXSOFT
    -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_RY_CLXZ_N
      功能简述：   在人员这个级别计算存量客户和新增客户的统计(年）
                   统计的内容表示客户在本年截止当前月份的交易和资产信息
                   只关心一些重点内容
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
           1)人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
              组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
           2)资产部分暂时不考虑在途等等问题。

      数据源：
          <REF>DSC_STAT.P_STAT_RY_CLXZ_Y(DSC_STAT.T_STAT_RY_CLXZ_Y)</REF>
          <REF>DSC_STAT.P_STAT_KHJYSR_Y(DSC_STAT.T_STAT_KHJYSR_Y)</REF>
      修改记录;
      ----------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/20 15:18:05               新增
      林伟     2013/08/29                        修改：增加YYB字段
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '06';
    CON_GXLX_FW CONSTANT INTEGER := 1; --关系类型（服务关系，含主和辅助两种)
    VS_PROC_NAME        VARCHAR2(100);
    VN_LOGID            INT; --LOG 表记录ID
    VN_ROWCOUNT         INT; --记录数
    VN_STEP             INT; --动作步数
    VN_PROC_NO          NUMBER(10);
    VS_USER             VARCHAR2(30);
    VN_TJRQ             NUMBER(8) := I_N_TJRQ; --统计日期
    VN_KSYF             NUMBER(6);
    VN_JSYF             NUMBER(6);
    VN_FIRSTDAY_OF_YEAR NUMBER(8); --本年第一天
    VN_YEAR             NUMBER(4); --年份
    VS_TABNAME          VARCHAR2(100) := 'DSC_STAT.T_STAT_RY_CLXZ_N';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    VN_YEAR             := SUBSTR(VN_TJRQ, 1, 4);
    VN_FIRSTDAY_OF_YEAR := VN_YEAR * 10000 + 101;
    VN_KSYF             := VN_YEAR * 100 + 1;
    VN_JSYF             := SUBSTR(VN_TJRQ, 1, 6);

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN

        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_RY_CLXZ_N WHERE NF = VN_YEAR;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --先插入资产
    INSERT INTO DSC_STAT.T_STAT_RY_CLXZ_N
        (NF,
         U_ID,
         YS_ID,
         YYB,
         KHS_CL,
         JYL_CL,
         YJ_CL,
         JYJ_CL,
         KHZC_CL,
         ZRZC_CL,
         ZCZC_CL,
         ZRSZ_CL,
         ZCSZ_CL,
         KHS_ZL,
         JYL_ZL,
         YJ_ZL,
         JYJ_ZL,
         KHZC_ZL,
         ZRZC_ZL,
         ZCZC_ZL,
         ZRSZ_ZL,
         ZCSZ_ZL)
        SELECT VN_YEAR,
               Y.U_ID,
               Y.YS_ID,
               Y.YYB,
               Y.KHS_CL,
               0 JYL_CL,
               0 YJ_CL,
               0 JYJ_CL,
               Y.KHZC_CL,
               0 ZRZC_CL,
               0 ZCZC_CL,
               0 ZRSZ_CL,
               0 ZCSZ_CL,
               Y.KHS_ZL,
               0 JYL_ZL,
               0 YJ_ZL,
               0 JYJ_ZL,
               Y.KHZC_ZL,
               0 ZRZC_ZL,
               0 ZCZC_ZL,
               0 ZRSZ_ZL,
               0 ZCSZ_ZL
          FROM DSC_STAT.T_STAT_RY_CLXZ_Y Y
          JOIN (SELECT U_ID, YS_ID, YYB, MAX(YF) YF
                  FROM DSC_STAT.T_STAT_RY_CLXZ_Y YS
                 WHERE YS.YF BETWEEN VN_KSYF AND VN_JSYF
                 GROUP BY U_ID, YS_ID, YYB) Y2 ON Y.U_ID = Y2.U_ID
                                              AND Y.YS_ID = Y2.YS_ID
                                              AND Y.YYB = Y2.YYB
                                              AND Y.YF = Y2.YF;

    MERGE INTO DSC_STAT.T_STAT_RY_CLXZ_N N
    USING (SELECT A.U_ID,
                  A.YS_ID,
                  A.YYB,
                  SUM(NVL(A.ZRZC_CL, 0)) ZRZC_CL,
                  SUM(NVL(A.ZCZC_CL, 0)) ZCZC_CL,
                  SUM(NVL(A.ZRSZ_CL, 0)) ZRSZ_CL,
                  SUM(NVL(A.ZCSZ_CL, 0)) ZCSZ_CL,
                  SUM(NVL(A.ZRZC_ZL, 0)) ZRZC_ZL,
                  SUM(NVL(A.ZCZC_ZL, 0)) ZCZC_ZL,
                  SUM(NVL(A.ZRSZ_ZL, 0)) ZRSZ_ZL,
                  SUM(NVL(A.ZCSZ_ZL, 0)) ZCSZ_ZL,
                  SUM(A.JYL_CL) JYL_CL,
                  SUM(A.YJ_CL) YJ_CL,
                  SUM(A.JYJ_CL) JYJ_CL,
                  SUM(A.JYL_ZL) JYL_ZL,
                  SUM(A.YJ_ZL) YJ_ZL,
                  SUM(A.JYJ_ZL) JYJ_ZL
             FROM DSC_STAT.T_STAT_RY_CLXZ_Y A
            WHERE A.YF BETWEEN VN_KSYF AND VN_JSYF
            GROUP BY A.U_ID, A.YS_ID, A.YYB) Y
    ON (N.U_ID = Y.U_ID AND N.YS_ID = Y.YS_ID AND N.YYB = Y.YYB AND N.NF = VN_YEAR)
    WHEN MATCHED THEN
        UPDATE
           SET N.ZRZC_CL = Y.ZRZC_CL,
               N.ZCZC_CL = Y.ZCZC_CL,
               N.ZRSZ_CL = Y.ZRSZ_CL,
               N.ZCSZ_CL = Y.ZCSZ_CL,
               N.ZRZC_ZL = Y.ZRZC_ZL,
               N.ZCZC_ZL = Y.ZCZC_ZL,
               N.ZRSZ_ZL = Y.ZRSZ_ZL,
               N.ZCSZ_ZL = Y.ZCSZ_ZL,
               N.JYL_CL  = Y.JYL_CL,
               N.YJ_CL   = Y.YJ_CL,
               N.JYJ_CL  = Y.JYJ_CL;

    VN_ROWCOUNT := SQL%ROWCOUNT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_RY_CLXZ_N;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_RY_CLXZ_Y(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN NUMBER,
                                                      I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
    -- CREATED ON 2013/05/20 BY LUZHIFEI ,APEXSOFT
    -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_RY_CLXZ_Y
      功能简述：   在人员这个级别计算存量客户和新增客户的统计
                   统计的内容表示客户在本月的交易和资产信息
                   只关心一些重点内容
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
           1)人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
              组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
           2)资产部分暂时不考虑在途等等问题。

      数据源：

      修改记录;
      ----------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/20 15:18:05               新增
      林伟     2013/08/29                        修改：增加YYB字段
      陈德铸   2015/06/07                        修改：YYB字段取自DSC_BAS.T_RYXX中的ORGID字段
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '06';
    CON_GXLX_FW CONSTANT INTEGER := 1; --关系类型（服务关系，含主和辅助两种)
    VS_PROC_NAME        VARCHAR2(100);
    VN_LOGID            INT; --LOG 表记录ID
    VN_ROWCOUNT         INT; --记录数
    VN_STEP             INT; --动作步数
    VN_PROC_NO          NUMBER(10);
    VS_USER             VARCHAR2(30);
    VN_TJRQ             NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF             NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VN_FIRSTDAY_OF_YEAR NUMBER(8); --本年第一天
    VS_TABNAME          VARCHAR2(100) := 'DSC_STAT.T_STAT_RY_CLXZ_Y';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    VN_FIRSTDAY_OF_YEAR := SUBSTR(VN_TJRQ, 1, 4) * 10000 + 101;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        --SELECT COUNT(*) INTO VN_COUNT FROM T_STAT_YYBZC_R WHERE RQ=VN_TJRQ;
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_RY_CLXZ_Y WHERE YF = VN_TJYF;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_RY_CLXZ_Y
        (YF,
         U_ID,
         YS_ID,
         YYB,
         KHS_CL,
         JYL_CL,
         YJ_CL,
         JYJ_CL,
         KHZC_CL,
         ZRZC_CL,
         ZCZC_CL,
         ZRSZ_CL,
         ZCSZ_CL,
         KHS_ZL,
         JYL_ZL,
         YJ_ZL,
         JYJ_ZL,
         KHZC_ZL,
         ZRZC_ZL,
         ZCZC_ZL,
         ZRSZ_ZL,
         ZCSZ_ZL)
        SELECT VN_TJYF,
               CON_ORG_LVL || '-' || GX.RYXX U_ID,
               GX.RYXX YS_ID,
               GX.RYXX_YYB AS YYB, -- 这里-1(未知)表示RYXX表中找不到对应营业部
               COUNT(CASE
                         WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                          A.KHH
                         ELSE
                          NULL
                     END) KHS_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                            NVL(JY.JYL, 0) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) JYL_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                            NVL(JY.YJSR, 0) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) YJ_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                            NVL(JY.JYJ, 0) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) JYJ_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                            A.YMZZC * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) KHZC_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                            (A.CRJE + A.ZRZQSZ) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) ZRZC_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                            (A.QCJE + A.ZCZQSZ) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) ZCZC_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                            A.ZRZQSZ * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) ZRSZ_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                            A.ZCZQSZ * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) ZCSZ_CL,
               COUNT(CASE
                         WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                          A.KHH
                         ELSE
                          NULL
                     END) KHS_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                            NVL(JY.JYL, 0) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) JYL_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                            NVL(JY.YJSR, 0) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) YJ_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                            NVL(JY.JYJ, 0) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) JYJ_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                            A.YMZZC * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) KHZC_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                            (A.CRJE + A.ZRZQSZ) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) ZRZC_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                            (A.QCJE + A.ZCZQSZ) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) ZCZC_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                            A.ZRZQSZ * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) ZRSZ_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                            A.ZCZQSZ * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) ZCSZ_ZL
          FROM DSC_STAT.T_STAT_KHZC_Y A
          JOIN DSC_BAS.T_KHXX_JJYW KH ON KH.KHH = A.KHH
          JOIN DSC_STAT.VW_KHGX_TJRQ GX ON GX.KHH = A.KHH
                                       AND GX.JZRQ > VN_TJRQ
                                       AND GX.GXLX = CON_GXLX_FW --只要服务关系的
          LEFT JOIN DSC_STAT.T_STAT_KHJYSR_Y JY ON JY.KHH = A.KHH
                                               AND JY.YF = A.YF
         WHERE A.YF = VN_TJYF
         GROUP BY GX.RYXX_YYB, GX.RYXX;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_RY_CLXZ_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_RY_JRCP_R(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN NUMBER,
                                                      I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_RY_JRCP_R
         功能简述：   金融产品_人员日综合状况
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做     1：重做
         返回：

         算法：


         注意事项：

         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         吴邦杰      2015/09/06     2.0.0.1     创建
    */
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_RY_JRCP_R';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN

        ----------清空临时表------------------
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_RY_JRCP_R]临时表！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_RY_JRCP_R';
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_RY_JRCP_R]临时表！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.TMP_T_STAT_RY_JRCP_R]表已清空',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

        --删除目标表统计日数据
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表' ||
                                                        VN_TJRQ || '数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_RY_JRCP_R WHERE RQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;

        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表' ||
                                                        VN_TJRQ || '数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    O_S_NOTE := '【ERROR-10001-1】';
    --金融产品成交情况
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品成交情况(关联DSC_STAT.VW_KHGX_TJRQ)，插入临时表[DSC_STAT.TMP_T_STAT_RY_JRCP_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_RY_JRCP_R
        (RQ,
         RYXX,
         GXLX,
         YYB,
         CPDM,
         CPFL,
         CJSL,
         CJJE,
         CJSL_RG,
         CJJE_RG,
         CJSL_SG,
         CJJE_SG,
         CJSL_SH,
         CJJE_SH,
         CJBS,
         CJBS_SH,
         SXF_RG,
         SXF_SG,
         SXF_SH,
         TJF_RG,
         TJF_SG,
         TJF_SH,
         KHS_MR,
         KHS_RG,
         KHS_SG,
         KHS_SH)
        SELECT VN_TJRQ AS RQ,
               T.YXRY RYXX,
               GX.GXLX GXLX,
               GX.YYB,
               T.CPDM,
               NVL(CPFL, 1) AS CPFL,
               SUM(NVL(CJSL, 0)) CJSL,
               SUM(NVL(CJJE, 0)) CJJE,
               SUM(CASE
                       WHEN YWDM IN ('130') THEN
                        CJSL
                       ELSE
                        0
                   END) CJSL_RG,
               SUM(CASE
                       WHEN YWDM IN ('130') THEN
                        CJJE
                       ELSE
                        0
                   END) CJJE_RG,
               SUM(CASE
                       WHEN YWDM IN ('122', '123') THEN
                        CJSL
                       ELSE
                        0
                   END) CJSL_SG,
               SUM(CASE
                       WHEN YWDM IN ('122', '123') THEN
                        CJJE
                       ELSE
                        0
                   END) CJJE_SG,
               SUM(CASE
                       WHEN YWDM IN ('124', '125', '142') THEN
                        CJSL
                       ELSE
                        0
                   END) CJSL_SH,
               SUM(CASE
                       WHEN YWDM IN ('124', '125', '142') THEN
                        CJJE
                       ELSE
                        0
                   END) CJJE_SH,
               COUNT(LSH) CJBS,
               SUM(CASE
                       WHEN YWDM IN ('124', '125', '142') THEN
                        1
                       ELSE
                        0
                   END) CJBS_SH,
               SUM(CASE
                       WHEN YWDM IN ('130') THEN
                        SXF
                       ELSE
                        0
                   END) SXF_RG,
               SUM(CASE
                       WHEN YWDM IN ('122', '123') THEN
                        SXF
                       ELSE
                        0
                   END) SXF_SG,
               SUM(CASE
                       WHEN YWDM IN ('124', '125', '142') THEN
                        SXF
                       ELSE
                        0
                   END) SXF_SH,
               SUM(CASE
                       WHEN YWDM IN ('130') THEN
                        TJF
                       ELSE
                        0
                   END) TJF_RG,
               SUM(CASE
                       WHEN YWDM IN ('122', '123') THEN
                        TJF
                       ELSE
                        0
                   END) TJF_SG,
               SUM(CASE
                       WHEN YWDM IN ('124', '125', '142') THEN
                        TJF
                       ELSE
                        0
                   END) TJF_SH,
               COUNT(DISTINCT CASE
                         WHEN YWDM IN ('122', '123', '130') THEN
                          T.KHH
                         ELSE
                          NULL
                     END) KHS_MR,
               COUNT(DISTINCT CASE
                         WHEN YWDM IN ('130') THEN
                          T.KHH
                         ELSE
                          NULL
                     END) KHS_RG,
               COUNT(DISTINCT CASE
                         WHEN YWDM IN ('122', '123') THEN
                          T.KHH
                         ELSE
                          NULL
                     END) KHS_SG,
               COUNT(DISTINCT CASE
                         WHEN YWDM IN ('124', '125', '142') THEN
                          T.KHH
                         ELSE
                          NULL
                     END) KHS_SH

          FROM SRC_BSS.TFP_CPXSGX T, DSC_STAT.VW_KHGX_TJRQ GX
         WHERE T.CJRQ = VN_TJRQ
           AND T.KHH = GX.KHH
           AND T.YXRY = GX.RYXX
           AND GX.JZRQ > VN_TJRQ
         GROUP BY T.YXRY, GX.GXLX, GX.YYB, T.CPDM, T.CPFL;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品成交情况(关联DSC_STAT.VW_KHGX_TJRQ)，插入临时表[DSC_STAT.TMP_T_STAT_RY_JRCP_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10001-2】';
    --金融产品持有情况及市值
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品持有情况及市值数据(关联DSC_STAT.VW_KHGX_TJRQ)，插入临时表[DSC_STAT.TMP_T_STAT_RY_JRCP_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_RY_JRCP_R
        (RQ,
         RYXX,
         GXLX,
         YYB,
         CPDM,
         CPFL,
         CYRS,
         CYRS_JG,
         XZKHS,
         XZKHS_JG,
         CYSL,
         CYSL_JG,
         CYSZ,
         CYSZ_JG)
        SELECT VN_TJRQ AS RQ,
               C.RYXX,
               C.GXLX,
               C.YYB,
               A.CPDM,
               NVL(A.CPFL, 1) CPFL,
               COUNT(A.KHH) CYRS,
               SUM(CASE
                       WHEN NVL(B.GRJG, 0) = 1 THEN
                        1
                       ELSE
                        NULL
                   END) CYSL_JG,
               SUM(CASE
                       WHEN KCRQ = VN_TJRQ THEN
                        1
                       ELSE
                        0
                   END) XZKHS,
               SUM(CASE
                       WHEN KCRQ = VN_TJRQ AND B.GRJG = 1 THEN
                        1
                       ELSE
                        0
                   END) XZKHS_JG,
               SUM(A.CPSL) CYSL,
               SUM(CASE
                       WHEN NVL(B.GRJG, 0) = 1 THEN
                        A.CPSL
                       ELSE
                        0
                   END) CYSL_JG,
               SUM(A.ZXSZ) CYSZ,
               SUM(CASE
                       WHEN NVL(B.GRJG, 0) = 1 THEN
                        A.ZXSZ
                       ELSE
                        0
                   END) CYSZ_JG

          FROM (SELECT RQ, KHH, YYB, CPDM, CPSL, ZXSZ, CPFL, KCRQ
                  FROM DSC_BAS.T_FP_CPFE
                UNION ALL
                SELECT RQ, KHH, YYB, CPDM, CPSL, ZXSZ, CPFL, 30001212 KCRQ
                  FROM DSC_HIS.T_FP_CPFE_HIS --历史表没有开仓日期，暂时赋值30001212
                ) A,
               (SELECT *
                  FROM DSC_BAS.T_KHXX T
                 WHERE EXISTS (SELECT 1 FROM DSC_BAS.T_FP_JRCPZH WHERE KHH = T.KHH)) B,
               DSC_STAT.VW_KHGX_TJRQ C
         WHERE A.KHH = B.KHH(+)
           AND A.RQ = VN_TJRQ
           AND A.KHH = C.KHH
           AND C.JZRQ > VN_TJRQ
         GROUP BY C.RYXX, C.GXLX, C.YYB, A.CPDM, A.CPFL;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品持有情况及市值数据(关联DSC_STAT.VW_KHGX_TJRQ)，插入临时表[DSC_STAT.TMP_T_STAT_RY_JRCP_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10001-3】';
    --金融产品成交情况
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品成交情况(关联DSC_STAT.VW_KHGX_TJRQ_UNIQUE)，插入临时表[DSC_STAT.TMP_T_STAT_RY_JRCP_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_RY_JRCP_R
        (RQ,
         RYXX,
         GXLX,
         YYB,
         CPDM,
         CPFL,
         CJSL,
         CJJE,
         CJSL_RG,
         CJJE_RG,
         CJSL_SG,
         CJJE_SG,
         CJSL_SH,
         CJJE_SH,
         CJBS,
         CJBS_SH,
         SXF_RG,
         SXF_SG,
         SXF_SH,
         TJF_RG,
         TJF_SG,
         TJF_SH,
         KHS_MR,
         KHS_RG,
         KHS_SG,
         KHS_SH)
        SELECT VN_TJRQ AS RQ,
               T.YXRY RYXX,
               0 GXLX, ---唯一的关系
               GX.YYB,
               T.CPDM,
               NVL(CPFL, 1) AS CPFL,
               SUM(NVL(CJSL, 0)) CJSL,
               SUM(NVL(CJJE, 0)) CJJE,
               SUM(CASE
                       WHEN YWDM IN ('130') THEN
                        CJSL
                       ELSE
                        0
                   END) CJSL_RG,
               SUM(CASE
                       WHEN YWDM IN ('130') THEN
                        CJJE
                       ELSE
                        0
                   END) CJJE_RG,
               SUM(CASE
                       WHEN YWDM IN ('122', '123') THEN
                        CJSL
                       ELSE
                        0
                   END) CJSL_SG,
               SUM(CASE
                       WHEN YWDM IN ('122', '123') THEN
                        CJJE
                       ELSE
                        0
                   END) CJJE_SG,
               SUM(CASE
                       WHEN YWDM IN ('124', '125', '142') THEN
                        CJSL
                       ELSE
                        0
                   END) CJSL_SH,
               SUM(CASE
                       WHEN YWDM IN ('124', '125', '142') THEN
                        CJJE
                       ELSE
                        0
                   END) CJJE_SH,
               COUNT(LSH) CJBS,
               SUM(CASE
                       WHEN YWDM IN ('124', '125', '142') THEN
                        1
                       ELSE
                        0
                   END) CJBS_SH,
               SUM(CASE
                       WHEN YWDM IN ('130') THEN
                        SXF
                       ELSE
                        0
                   END) SXF_RG,
               SUM(CASE
                       WHEN YWDM IN ('122', '123') THEN
                        SXF
                       ELSE
                        0
                   END) SXF_SG,
               SUM(CASE
                       WHEN YWDM IN ('124', '125', '142') THEN
                        SXF
                       ELSE
                        0
                   END) SXF_SH,
               SUM(CASE
                       WHEN YWDM IN ('130') THEN
                        TJF
                       ELSE
                        0
                   END) TJF_RG,
               SUM(CASE
                       WHEN YWDM IN ('122', '123') THEN
                        TJF
                       ELSE
                        0
                   END) TJF_SG,
               SUM(CASE
                       WHEN YWDM IN ('124', '125', '142') THEN
                        TJF
                       ELSE
                        0
                   END) TJF_SH,
               COUNT(DISTINCT CASE
                         WHEN YWDM IN ('122', '123', '130') THEN
                          T.KHH
                         ELSE
                          NULL
                     END) KHS_MR,
               COUNT(DISTINCT CASE
                         WHEN YWDM IN ('130') THEN
                          T.KHH
                         ELSE
                          NULL
                     END) KHS_RG,
               COUNT(DISTINCT CASE
                         WHEN YWDM IN ('122', '123') THEN
                          T.KHH
                         ELSE
                          NULL
                     END) KHS_SG,
               COUNT(DISTINCT CASE
                         WHEN YWDM IN ('124', '125', '142') THEN
                          T.KHH
                         ELSE
                          NULL
                     END) KHS_SH

          FROM SRC_BSS.TFP_CPXSGX T, DSC_STAT.VW_KHGX_TJRQ_UNIQUE GX
         WHERE T.CJRQ = VN_TJRQ
           AND T.KHH = GX.KHH
           AND T.YXRY = GX.RYXX
           AND GX.JZRQ > VN_TJRQ
         GROUP BY T.YXRY, GX.YYB, T.CPDM, T.CPFL;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品成交情况(关联DSC_STAT.VW_KHGX_TJRQ_UNIQUE)，插入临时表[DSC_STAT.TMP_T_STAT_RY_JRCP_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10001-4】';
    --金融产品持有情况及市值
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品持有情况及市值数据(关联DSC_STAT.VW_KHGX_TJRQ_UNIQUE)，插入临时表[DSC_STAT.TMP_T_STAT_RY_JRCP_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_RY_JRCP_R
        (RQ,
         RYXX,
         GXLX,
         YYB,
         CPDM,
         CPFL,
         CYRS,
         CYRS_JG,
         XZKHS,
         XZKHS_JG,
         CYSL,
         CYSL_JG,
         CYSZ,
         CYSZ_JG)
        SELECT VN_TJRQ AS RQ,
               C.RYXX,
               0 GXLX, ---唯一的关系
               C.YYB,
               A.CPDM,
               NVL(A.CPFL, 1) CPFL,
               COUNT(A.KHH) CYRS,
               SUM(CASE
                       WHEN NVL(B.GRJG, 0) = 1 THEN
                        1
                       ELSE
                        NULL
                   END) CYSL_JG,
               SUM(CASE
                       WHEN KCRQ = VN_TJRQ THEN
                        1
                       ELSE
                        0
                   END) XZKHS,
               SUM(CASE
                       WHEN KCRQ = VN_TJRQ AND B.GRJG = 1 THEN
                        1
                       ELSE
                        0
                   END) XZKHS_JG,
               SUM(A.CPSL) CYSL,
               SUM(CASE
                       WHEN NVL(B.GRJG, 0) = 1 THEN
                        A.CPSL
                       ELSE
                        0
                   END) CYSL_JG,
               SUM(A.ZXSZ) CYSZ,
               SUM(CASE
                       WHEN NVL(B.GRJG, 0) = 1 THEN
                        A.ZXSZ
                       ELSE
                        0
                   END) CYSZ_JG

          FROM (SELECT RQ, KHH, YYB, CPDM, CPSL, ZXSZ, CPFL, KCRQ
                  FROM DSC_BAS.T_FP_CPFE
                UNION ALL
                SELECT RQ, KHH, YYB, CPDM, CPSL, ZXSZ, CPFL, 30001212 KCRQ
                  FROM DSC_HIS.T_FP_CPFE_HIS --历史表没有开仓日期，暂时赋值30001212
                ) A,
               (SELECT *
                  FROM DSC_BAS.T_KHXX T
                 WHERE EXISTS (SELECT 1 FROM DSC_BAS.T_FP_JRCPZH WHERE KHH = T.KHH)) B,
               DSC_STAT.VW_KHGX_TJRQ_UNIQUE C
         WHERE A.KHH = B.KHH(+)
           AND A.RQ = VN_TJRQ
           AND A.KHH = C.KHH
           AND C.JZRQ > VN_TJRQ
         GROUP BY C.RYXX, C.YYB, A.CPDM, A.CPFL;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品持有情况及市值数据(关联DSC_STAT.VW_KHGX_TJRQ_UNIQUE)，插入临时表[DSC_STAT.TMP_T_STAT_RY_JRCP_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10002】';
    ------------写入结果表-----------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_RY_JRCP_R]进行汇总统计，插入目标表[DSC_STAT.T_STAT_RY_JRCP_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_RY_JRCP_R

        (RQ,
         RYXX,
         GXLX,
         YYB,
         CPDM,
         CPFL,
         CJSL,
         CJJE,
         CJSL_RG,
         CJJE_RG,
         CJSL_SG,
         CJJE_SG,
         CJSL_SH,
         CJJE_SH,
         CJBS,
         CJBS_SH,
         SXF_RG,
         SXF_SG,
         SXF_SH,
         TJF_RG,
         TJF_SG,
         TJF_SH,
         KHS_MR,
         KHS_RG,
         KHS_SG,
         KHS_SH,
         CYRS,
         CYRS_JG,
         CYSL,
         CYSL_JG,
         CYSZ,
         CYSZ_JG,
         XZKHS,
         XZKHS_JG)

        SELECT VN_TJRQ RQ,
               T.RYXX,
               T.GXLX,
               T.YYB,
               T.CPDM,
               T.CPFL,
               SUM(NVL(CJSL, 0)) CJSL,
               SUM(NVL(CJJE, 0)) CJJE,
               SUM(NVL(CJSL_RG, 0)) CJSL_RG,
               SUM(NVL(CJJE_RG, 0)) CJJE_RG,
               SUM(NVL(CJSL_SG, 0)) CJSL_SG,
               SUM(NVL(CJJE_SG, 0)) CJJE_SG,
               SUM(NVL(CJSL_SH, 0)) CJSL_SH,
               SUM(NVL(CJJE_SH, 0)) CJJE_SH,
               SUM(NVL(CJBS, 0)) CJBS,
               SUM(NVL(CJBS_SH, 0)) CJBS_SH,
               SUM(NVL(SXF_RG, 0)) SXF_RG,
               SUM(NVL(SXF_SG, 0)) SXF_SG,
               SUM(NVL(SXF_SH, 0)) SXF_SH,
               SUM(NVL(TJF_RG, 0)) TJF_RG,
               SUM(NVL(TJF_SG, 0)) TJF_SG,
               SUM(NVL(TJF_SH, 0)) TJF_SH,
               SUM(NVL(KHS_MR, 0)) KHS_MR,
               SUM(NVL(KHS_RG, 0)) KHS_RG,
               SUM(NVL(KHS_SG, 0)) KHS_SG,
               SUM(NVL(KHS_SH, 0)) KHS_SH,
               SUM(NVL(CYRS, 0)) CYRS,
               SUM(NVL(CYRS_JG, 0)) CYRS_JG,
               SUM(NVL(CYSL, 0)) CYSL,
               SUM(NVL(CYSL_JG, 0)) CYSL_JG,
               SUM(NVL(CYSZ, 0)) CYSZ,
               SUM(NVL(CYSZ_JG, 0)) CYSZ_JG,

               SUM(NVL(XZKHS, 0)) XZKHS,
               SUM(NVL(XZKHS_JG, 0)) XZKHS_JG
          FROM DSC_STAT.TMP_T_STAT_RY_JRCP_R T
         GROUP BY T.RYXX, T.GXLX, T.YYB, T.CPDM, T.CPFL;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_RY_JRCP_R]进行汇总统计，插入目标表[DSC_STAT.T_STAT_RY_JRCP_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_RY_JRCP_R';

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_RY_JRCP_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_RY_JRCP_Y(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN INT,
                                                      I_N_REDO IN NUMBER DEFAULT 0) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_RY_JRCP_Y
         功能简述：   金融产品_人员月综合状况表
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做     1：重做
        返回：

         算法：

         注意事项：

         数据源：
                 DSC_STAT.T_STAT_RY_JRCP_R：金融产品_人员日综合状况表


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         吴邦杰      2015/09/06                 创建
    */
    VS_PROC_NAME       VARCHAR2(100) := $$PLSQL_UNIT;
    VN_TJRQ            NUMBER(8) := I_N_TJRQ;
    VN_YF              NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --月份
    VN_FIRSTDAY_OF_MON NUMBER(8) := VN_YF * 100 + 1; --月初
    VN_LOGID           INT; --LOG 表记录ID
    VN_ROWCOUNT        INT; --记录数
    VN_STEP            INT; --动作步数
    VN_PROC_NO         PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER            VARCHAR2(30);

BEGIN

    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);

    O_S_NOTE := '【ERROR-10000】';
    --重做删除原数据
    IF I_N_REDO IN (0, 1, 2) THEN
        --分区删除
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_RY_JRCP_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        EXECUTE IMMEDIATE 'ALTER TABLE DSC_STAT.T_STAT_RY_JRCP_Y TRUNCATE PARTITION PY_' ||
                          VN_YF || '  UPDATE GLOBAL INDEXES';

        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_RY_JRCP_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_RY_JRCP_Y]分区数据删除成功！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    O_S_NOTE := '【ERROR-10001】';

    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_人员日统计数据到表[DSC_STAT.T_STAT_RY_JRCP_Y]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_STAT_RY_JRCP_Y
        (YF,
         RYXX,
         GXLX,
         YYB,
         CPDM,
         CPFL,
         CJSL,
         CJJE,
         CJSL_RG,
         CJJE_RG,
         CJSL_SG,
         CJJE_SG,
         CJSL_SH,
         CJJE_SH,
         CJBS,
         CJBS_SH,
         SXF_RG,
         SXF_SG,
         SXF_SH,
         TJF_RG,
         TJF_SG,
         TJF_SH,
         KHS_MR,
         KHS_RG,
         KHS_SG,
         KHS_SH,
         CYRS,
         CYRS_JG,
         CYSL,
         CYSL_JG,
         CYSZ,
         CYSZ_JG,
         XZKHS,
         XZKHS_JG)
        SELECT VN_YF YF,
               RYXX,
               GXLX,
               YYB,
               CPDM,
               CPFL,
               SUM(NVL(CJSL, 0)) CJSL,
               SUM(NVL(CJJE, 0)) CJJE,
               SUM(NVL(CJSL_RG, 0)) CJSL_RG,
               SUM(NVL(CJJE_RG, 0)) CJJE_RG,
               SUM(NVL(CJSL_SG, 0)) CJSL_SG,
               SUM(NVL(CJJE_SG, 0)) CJJE_SG,
               SUM(NVL(CJSL_SH, 0)) CJSL_SH,
               SUM(NVL(CJJE_SH, 0)) CJJE_SH,
               SUM(NVL(CJBS, 0)) CJBS,
               SUM(NVL(CJBS_SH, 0)) CJBS_SH,
               SUM(NVL(SXF_RG, 0)) SXF_RG,
               SUM(NVL(SXF_SG, 0)) SXF_SG,
               SUM(NVL(SXF_SH, 0)) SXF_SH,
               SUM(NVL(TJF_RG, 0)) TJF_RG,
               SUM(NVL(TJF_SG, 0)) TJF_SG,
               SUM(NVL(TJF_SH, 0)) TJF_SH,
               SUM(NVL(KHS_MR, 0)) KHS_MR,
               SUM(NVL(KHS_RG, 0)) KHS_RG,
               SUM(NVL(KHS_SG, 0)) KHS_SG,
               SUM(NVL(KHS_SH, 0)) KHS_SH,
               SUM(NVL(CYRS, 0)) CYRS,
               SUM(NVL(CYRS_JG, 0)) CYRS_JG,
               SUM(NVL(CYSL, 0)) CYSL,
               SUM(NVL(CYSL_JG, 0)) CYSL_JG,
               SUM(NVL(CYSZ, 0)) CYSZ,
               SUM(NVL(CYSZ_JG, 0)) CYSZ_JG,
               SUM(NVL(XZKHS, 0)) XZKHS,
               SUM(NVL(XZKHS_JG, 0)) XZKHS_JG

          FROM DSC_STAT.T_STAT_RY_JRCP_R
         WHERE RQ BETWEEN VN_FIRSTDAY_OF_MON AND VN_TJRQ
         GROUP BY RYXX, GXLX, YYB, CPDM, CPFL;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_人员日统计数据到表[DSC_STAT.T_STAT_RY_JRCP_Y]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_RY_JRCP_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_RY_JYSR_R(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN NUMBER,
                                                      I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
      -- CREATED ON 2013/05/20 BY LUZHIFEI ,APEXSOFT
      -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_RY_JYSR_R
      功能简述：   在人员这个级别计算交易收入的信息
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
           人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
           组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY

      数据源：

      修改记录;
      -----------------------------------------------------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/20 15:18:05               新增
      LZF      2013/06/25 10:00:00               修改-统一是运用预先算好的数据vw_khgx_tjrq
      林伟     2013/08/29                        修改，增加YYB字段
      陈德铸   2015/06/07                        修改：YYB字段取自DSC_BAS.T_RYXX中的ORGID字段

    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '06';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_RY_JYSR_R';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    -------------------------------------------------------------------------------------
    IF I_N_REDO IN (0, 1) THEN
        --SELECT COUNT(*) INTO VN_COUNT FROM T_STAT_YYBZC_R WHERE RQ=VN_TJRQ;
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_RY_JYSR_R WHERE RQ = VN_TJRQ;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --2.0 统计关系的分组
    -------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_RY_JYSR_R
        (RQ,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         ZSR,
         YJSR,
         YJSR_HAZB,
         YJSR_SAZB,
         YJSR_ZXB,
         YJSR_CYB,
         YJSR_HB,
         YJSR_SB,
         YJSR_SB_A,
         YJSR_SB_B,
         YJSR_FBSJJ,
         YJSR_ETF,
         YJSR_LOF,
         YJSR_SZJJT,
         YJSR_DXJJ,
         YJSR_QZ,
         YJSR_GZ,
         YJSR_GSQYZ,
         YJSR_KZZ,
         YJSR_HG,
         YJSR_SG,
         YJSR_QT,
         JYJ,
         JYJ_HAZB,
         JYJ_SAZB,
         JYJ_ZXB,
         JYJ_CYB,
         JYJ_HB,
         JYJ_SB,
         JYJ_SB_A,
         JYJ_SB_B,
         JYJ_FBSJJ,
         JYJ_ETF,
         JYJ_LOF,
         JYJ_SZJJT,
         JYJ_DXJJ,
         JYJ_QZ,
         JYJ_GZ,
         JYJ_GSQYZ,
         JYJ_KZZ,
         JYJ_HG,
         JYJ_SG,
         JYJ_QT,
         JYL,
         JYL_HAZB,
         JYL_SAZB,
         JYL_ZXB,
         JYL_CYB,
         JYL_HB,
         JYL_SB,
         JYL_SB_A,
         JYL_SB_B,
         JYL_FBSJJ,
         JYL_ETF,
         JYL_LOF,
         JYL_SZJJT,
         JYL_DXJJ,
         JYL_DXJJ_SG,
         JYL_DXJJ_RG,
         JYL_DXJJ_SH,
         JYL_DXJJ_DSDT,
         JYL_QZ,
         JYL_GZ,
         JYL_GSQYZ,
         JYL_KZZ,
         JYL_HG,
         JYL_SG,
         JYL_QT,
         JYL_ST,
         JYL_XC,
         JYL_CK,
         JYL_RJ,
         JYL_GT,
         JYL_SJ,
         JYL_DH,
         JYL_HLW,
         JYFY,
         JYBS,
         JYL_JRCP,
         YJSR_JRCP,
         JYJ_JRCP,
         HLCS_HKD,
         HLCS_USD)
        SELECT VN_TJRQ,
               CON_ORG_LVL || '-' || GX.RYXX U_ID,
               GX.RYXX YS_ID,
               GX.RYXX_YYB AS YYB, -- 这里-1(未知)表示RYXX表中找不到对应营业部
               GX.GXLX,
               NVL(SUM(A.ZSR * GX.SYQZ), 0) ZSR,
               NVL(SUM(A.YJSR * GX.SYQZ), 0) YJSR,
               NVL(SUM(A.YJSR_HAZB * GX.SYQZ), 0) YJSR_HAZB,
               NVL(SUM(A.YJSR_SAZB * GX.SYQZ), 0) YJSR_SAZB,
               NVL(SUM(A.YJSR_ZXB * GX.SYQZ), 0) YJSR_ZXB,
               NVL(SUM(A.YJSR_CYB * GX.SYQZ), 0) YJSR_CYB,
               NVL(SUM(A.YJSR_HB * GX.SYQZ), 0) YJSR_HB,
               NVL(SUM(A.YJSR_SB * GX.SYQZ), 0) YJSR_SB,
               NVL(SUM(A.YJSR_SB_A * GX.SYQZ), 0) YJSR_SB_A,
               NVL(SUM(A.YJSR_SB_B * GX.SYQZ), 0) YJSR_SB_B,
               NVL(SUM(A.YJSR_FBSJJ * GX.SYQZ), 0) YJSR_FBSJJ,
               NVL(SUM(A.YJSR_ETF * GX.SYQZ), 0) YJSR_ETF,
               NVL(SUM(A.YJSR_LOF * GX.SYQZ), 0) YJSR_LOF,
               NVL(SUM(A.YJSR_SZJJT * GX.SYQZ), 0) YJSR_SZJJT,
               NVL(SUM(A.YJSR_DXJJ * GX.SYQZ), 0) YJSR_DXJJ,
               NVL(SUM(A.YJSR_QZ * GX.SYQZ), 0) YJSR_QZ,
               NVL(SUM(A.YJSR_GZ * GX.SYQZ), 0) YJSR_GZ,
               NVL(SUM(A.YJSR_GSQYZ * GX.SYQZ), 0) YJSR_GSQYZ,
               NVL(SUM(A.YJSR_KZZ * GX.SYQZ), 0) YJSR_KZZ,
               NVL(SUM(A.YJSR_HG * GX.SYQZ), 0) YJSR_HG,
               NVL(SUM(A.YJSR_SG * GX.SYQZ), 0) YJSR_SG,
               NVL(SUM(A.YJSR_QT * GX.SYQZ), 0) YJSR_QT,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.JYJ_HAZB * GX.SYQZ), 0) JYJ_HAZB,
               NVL(SUM(A.JYJ_SAZB * GX.SYQZ), 0) JYJ_SAZB,
               NVL(SUM(A.JYJ_ZXB * GX.SYQZ), 0) JYJ_ZXB,
               NVL(SUM(A.JYJ_CYB * GX.SYQZ), 0) JYJ_CYB,
               NVL(SUM(A.JYJ_HB * GX.SYQZ), 0) JYJ_HB,
               NVL(SUM(A.JYJ_SB * GX.SYQZ), 0) JYJ_SB,
               NVL(SUM(A.JYJ_SB_A * GX.SYQZ), 0) JYJ_SB_A,
               NVL(SUM(A.JYJ_SB_B * GX.SYQZ), 0) JYJ_SB_B,
               NVL(SUM(A.JYJ_FBSJJ * GX.SYQZ), 0) JYJ_FBSJJ,
               NVL(SUM(A.JYJ_ETF * GX.SYQZ), 0) JYJ_ETF,
               NVL(SUM(A.JYJ_LOF * GX.SYQZ), 0) JYJ_LOF,
               NVL(SUM(A.JYJ_SZJJT * GX.SYQZ), 0) JYJ_SZJJT,
               NVL(SUM(A.JYJ_DXJJ * GX.SYQZ), 0) JYJ_DXJJ,
               NVL(SUM(A.JYJ_QZ * GX.SYQZ), 0) JYJ_QZ,
               NVL(SUM(A.JYJ_GZ * GX.SYQZ), 0) JYJ_GZ,
               NVL(SUM(A.JYJ_GSQYZ * GX.SYQZ), 0) JYJ_GSQYZ,
               NVL(SUM(A.JYJ_KZZ * GX.SYQZ), 0) JYJ_KZZ,
               NVL(SUM(A.JYJ_HG * GX.SYQZ), 0) JYJ_HG,
               NVL(SUM(A.JYJ_SG * GX.SYQZ), 0) JYJ_SG,
               NVL(SUM(A.JYJ_QT * GX.SYQZ), 0) JYJ_QT,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_HAZB * GX.SYQZ), 0) JYL_HAZB,
               NVL(SUM(A.JYL_SAZB * GX.SYQZ), 0) JYL_SAZB,
               NVL(SUM(A.JYL_ZXB * GX.SYQZ), 0) JYL_ZXB,
               NVL(SUM(A.JYL_CYB * GX.SYQZ), 0) JYL_CYB,
               NVL(SUM(A.JYL_HB * GX.SYQZ), 0) JYL_HB,
               NVL(SUM(A.JYL_SB * GX.SYQZ), 0) JYL_SB,
               NVL(SUM(A.JYL_SB_A * GX.SYQZ), 0) JYL_SB_A,
               NVL(SUM(A.JYL_SB_B * GX.SYQZ), 0) JYL_SB_B,
               NVL(SUM(A.JYL_FBSJJ * GX.SYQZ), 0) JYL_FBSJJ,
               NVL(SUM(A.JYL_ETF * GX.SYQZ), 0) JYL_ETF,
               NVL(SUM(A.JYL_LOF * GX.SYQZ), 0) JYL_LOF,
               NVL(SUM(A.JYL_SZJJT * GX.SYQZ), 0) JYL_SZJJT,
               NVL(SUM(A.JYL_DXJJ * GX.SYQZ), 0) JYL_DXJJ,
               NVL(SUM(A.JYL_DXJJ_SG * GX.SYQZ), 0) JYL_DXJJ_SG,
               NVL(SUM(A.JYL_DXJJ_RG * GX.SYQZ), 0) JYL_DXJJ_RG,
               NVL(SUM(A.JYL_DXJJ_SH * GX.SYQZ), 0) JYL_DXJJ_SH,
               NVL(SUM(A.JYL_DXJJ_DSDT * GX.SYQZ), 0) JYL_DXJJ_DSDT,
               NVL(SUM(A.JYL_QZ * GX.SYQZ), 0) JYL_QZ,
               NVL(SUM(A.JYL_GZ * GX.SYQZ), 0) JYL_GZ,
               NVL(SUM(A.JYL_GSQYZ * GX.SYQZ), 0) JYL_GSQYZ,
               NVL(SUM(A.JYL_KZZ * GX.SYQZ), 0) JYL_KZZ,
               NVL(SUM(A.JYL_HG * GX.SYQZ), 0) JYL_HG,
               NVL(SUM(A.JYL_SG * GX.SYQZ), 0) JYL_SG,
               NVL(SUM(A.JYL_QT * GX.SYQZ), 0) JYL_QT,
               NVL(SUM(A.JYL_ST * GX.SYQZ), 0) JYL_ST,
               NVL(SUM(A.JYL_XC * GX.SYQZ), 0) JYL_XC,
               NVL(SUM(A.JYL_CK * GX.SYQZ), 0) JYL_CK,
               NVL(SUM(A.JYL_RJ * GX.SYQZ), 0) JYL_RJ,
               NVL(SUM(A.JYL_GT * GX.SYQZ), 0) JYL_GT,
               NVL(SUM(A.JYL_SJ * GX.SYQZ), 0) JYL_SJ,
               NVL(SUM(A.JYL_DH * GX.SYQZ), 0) JYL_DH,
               NVL(SUM(A.JYL_HLW * GX.SYQZ), 0) JYL_HLW,
               NVL(SUM(A.JYFY * GX.SYQZ), 0) JYFY,
               NVL(SUM(A.JYBS * GX.SYQZ), 0) JYBS,
               NVL(SUM(A.JYL_JRCP * GX.SYQZ), 0) JYL_JRCP,
               NVL(SUM(A.YJSR_JRCP * GX.SYQZ), 0) YJSR_JRCP,
               NVL(SUM(A.JYJ_JRCP * GX.SYQZ), 0) JYJ_JRCP,
               A.HLCS_HKD,
               A.HLCS_USD
          FROM DSC_STAT.T_STAT_KHJYSR_R A
          JOIN DSC_STAT.VW_KHGX_TJRQ GX ON GX.KHH = A.KHH
                                       AND GX.JZRQ > VN_TJRQ
        /*
                          JOIN DSC_STAT.VW_KHGX_ALL GX ON GX.KHH = A.KHH
                                                      AND GX.SXRQ <= VN_TJRQ
                                                      AND (GX.JZRQ IS NULL OR GX.JZRQ > VN_TJRQ)
                         */
         WHERE A.RQ = VN_TJRQ
         GROUP BY GX.RYXX_YYB, GX.RYXX, GX.GXLX, A.HLCS_HKD, A.HLCS_USD;

    VN_ROWCOUNT := SQL%ROWCOUNT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3.0 统计唯一关系
    --增加gxlx=0单位（即唯一的关系，且以sxrq最小的为准)
    -------------------------------------------------------------------------------------

    VN_STEP := VN_STEP + 1;

    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_RY_JYSR_R
        (RQ,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         ZSR,
         YJSR,
         YJSR_HAZB,
         YJSR_SAZB,
         YJSR_ZXB,
         YJSR_CYB,
         YJSR_HB,
         YJSR_SB,
         YJSR_SB_A,
         YJSR_SB_B,
         YJSR_FBSJJ,
         YJSR_ETF,
         YJSR_LOF,
         YJSR_SZJJT,
         YJSR_DXJJ,
         YJSR_QZ,
         YJSR_GZ,
         YJSR_GSQYZ,
         YJSR_KZZ,
         YJSR_HG,
         YJSR_SG,
         YJSR_QT,
         JYJ,
         JYJ_HAZB,
         JYJ_SAZB,
         JYJ_ZXB,
         JYJ_CYB,
         JYJ_HB,
         JYJ_SB,
         JYJ_SB_A,
         JYJ_SB_B,
         JYJ_FBSJJ,
         JYJ_ETF,
         JYJ_LOF,
         JYJ_SZJJT,
         JYJ_DXJJ,
         JYJ_QZ,
         JYJ_GZ,
         JYJ_GSQYZ,
         JYJ_KZZ,
         JYJ_HG,
         JYJ_SG,
         JYJ_QT,
         JYL,
         JYL_HAZB,
         JYL_SAZB,
         JYL_ZXB,
         JYL_CYB,
         JYL_HB,
         JYL_SB,
         JYL_SB_A,
         JYL_SB_B,
         JYL_FBSJJ,
         JYL_ETF,
         JYL_LOF,
         JYL_SZJJT,
         JYL_DXJJ,
         JYL_DXJJ_SG,
         JYL_DXJJ_RG,
         JYL_DXJJ_SH,
         JYL_DXJJ_DSDT,
         JYL_QZ,
         JYL_GZ,
         JYL_GSQYZ,
         JYL_KZZ,
         JYL_HG,
         JYL_SG,
         JYL_QT,
         JYL_ST,
         JYL_XC,
         JYL_CK,
         JYL_RJ,
         JYL_GT,
         JYL_SJ,
         JYL_DH,
         JYL_HLW,
         JYFY,
         JYBS,
         JYL_JRCP,
         YJSR_JRCP,
         JYJ_JRCP,
         HLCS_HKD,
         HLCS_USD)
        SELECT VN_TJRQ,
               CON_ORG_LVL || '-' || GX.RYXX U_ID,
               GX.RYXX YS_ID,
               GX.RYXX_YYB AS YYB, -- 这里-1(未知)表示RYXX表中找不到对应营业部
               0 GXLX, ---唯一的关系
               NVL(SUM(A.ZSR * GX.SYQZ), 0) ZSR,
               NVL(SUM(A.YJSR * GX.SYQZ), 0) YJSR,
               NVL(SUM(A.YJSR_HAZB * GX.SYQZ), 0) YJSR_HAZB,
               NVL(SUM(A.YJSR_SAZB * GX.SYQZ), 0) YJSR_SAZB,
               NVL(SUM(A.YJSR_ZXB * GX.SYQZ), 0) YJSR_ZXB,
               NVL(SUM(A.YJSR_CYB * GX.SYQZ), 0) YJSR_CYB,
               NVL(SUM(A.YJSR_HB * GX.SYQZ), 0) YJSR_HB,
               NVL(SUM(A.YJSR_SB * GX.SYQZ), 0) YJSR_SB,
               NVL(SUM(A.YJSR_SB_A * GX.SYQZ), 0) YJSR_SB_A,
               NVL(SUM(A.YJSR_SB_B * GX.SYQZ), 0) YJSR_SB_B,
               NVL(SUM(A.YJSR_FBSJJ * GX.SYQZ), 0) YJSR_FBSJJ,
               NVL(SUM(A.YJSR_ETF * GX.SYQZ), 0) YJSR_ETF,
               NVL(SUM(A.YJSR_LOF * GX.SYQZ), 0) YJSR_LOF,
               NVL(SUM(A.YJSR_SZJJT * GX.SYQZ), 0) YJSR_SZJJT,
               NVL(SUM(A.YJSR_DXJJ * GX.SYQZ), 0) YJSR_DXJJ,
               NVL(SUM(A.YJSR_QZ * GX.SYQZ), 0) YJSR_QZ,
               NVL(SUM(A.YJSR_GZ * GX.SYQZ), 0) YJSR_GZ,
               NVL(SUM(A.YJSR_GSQYZ * GX.SYQZ), 0) YJSR_GSQYZ,
               NVL(SUM(A.YJSR_KZZ * GX.SYQZ), 0) YJSR_KZZ,
               NVL(SUM(A.YJSR_HG * GX.SYQZ), 0) YJSR_HG,
               NVL(SUM(A.YJSR_SG * GX.SYQZ), 0) YJSR_SG,
               NVL(SUM(A.YJSR_QT * GX.SYQZ), 0) YJSR_QT,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.JYJ_HAZB * GX.SYQZ), 0) JYJ_HAZB,
               NVL(SUM(A.JYJ_SAZB * GX.SYQZ), 0) JYJ_SAZB,
               NVL(SUM(A.JYJ_ZXB * GX.SYQZ), 0) JYJ_ZXB,
               NVL(SUM(A.JYJ_CYB * GX.SYQZ), 0) JYJ_CYB,
               NVL(SUM(A.JYJ_HB * GX.SYQZ), 0) JYJ_HB,
               NVL(SUM(A.JYJ_SB * GX.SYQZ), 0) JYJ_SB,
               NVL(SUM(A.JYJ_SB_A * GX.SYQZ), 0) JYJ_SB_A,
               NVL(SUM(A.JYJ_SB_B * GX.SYQZ), 0) JYJ_SB_B,
               NVL(SUM(A.JYJ_FBSJJ * GX.SYQZ), 0) JYJ_FBSJJ,
               NVL(SUM(A.JYJ_ETF * GX.SYQZ), 0) JYJ_ETF,
               NVL(SUM(A.JYJ_LOF * GX.SYQZ), 0) JYJ_LOF,
               NVL(SUM(A.JYJ_SZJJT * GX.SYQZ), 0) JYJ_SZJJT,
               NVL(SUM(A.JYJ_DXJJ * GX.SYQZ), 0) JYJ_DXJJ,
               NVL(SUM(A.JYJ_QZ * GX.SYQZ), 0) JYJ_QZ,
               NVL(SUM(A.JYJ_GZ * GX.SYQZ), 0) JYJ_GZ,
               NVL(SUM(A.JYJ_GSQYZ * GX.SYQZ), 0) JYJ_GSQYZ,
               NVL(SUM(A.JYJ_KZZ * GX.SYQZ), 0) JYJ_KZZ,
               NVL(SUM(A.JYJ_HG * GX.SYQZ), 0) JYJ_HG,
               NVL(SUM(A.JYJ_SG * GX.SYQZ), 0) JYJ_SG,
               NVL(SUM(A.JYJ_QT * GX.SYQZ), 0) JYJ_QT,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_HAZB * GX.SYQZ), 0) JYL_HAZB,
               NVL(SUM(A.JYL_SAZB * GX.SYQZ), 0) JYL_SAZB,
               NVL(SUM(A.JYL_ZXB * GX.SYQZ), 0) JYL_ZXB,
               NVL(SUM(A.JYL_CYB * GX.SYQZ), 0) JYL_CYB,
               NVL(SUM(A.JYL_HB * GX.SYQZ), 0) JYL_HB,
               NVL(SUM(A.JYL_SB * GX.SYQZ), 0) JYL_SB,
               NVL(SUM(A.JYL_SB_A * GX.SYQZ), 0) JYL_SB_A,
               NVL(SUM(A.JYL_SB_B * GX.SYQZ), 0) JYL_SB_B,
               NVL(SUM(A.JYL_FBSJJ * GX.SYQZ), 0) JYL_FBSJJ,
               NVL(SUM(A.JYL_ETF * GX.SYQZ), 0) JYL_ETF,
               NVL(SUM(A.JYL_LOF * GX.SYQZ), 0) JYL_LOF,
               NVL(SUM(A.JYL_SZJJT * GX.SYQZ), 0) JYL_SZJJT,
               NVL(SUM(A.JYL_DXJJ * GX.SYQZ), 0) JYL_DXJJ,
               NVL(SUM(A.JYL_DXJJ_SG * GX.SYQZ), 0) JYL_DXJJ_SG,
               NVL(SUM(A.JYL_DXJJ_RG * GX.SYQZ), 0) JYL_DXJJ_RG,
               NVL(SUM(A.JYL_DXJJ_SH * GX.SYQZ), 0) JYL_DXJJ_SH,
               NVL(SUM(A.JYL_DXJJ_DSDT * GX.SYQZ), 0) JYL_DXJJ_DSDT,
               NVL(SUM(A.JYL_QZ * GX.SYQZ), 0) JYL_QZ,
               NVL(SUM(A.JYL_GZ * GX.SYQZ), 0) JYL_GZ,
               NVL(SUM(A.JYL_GSQYZ * GX.SYQZ), 0) JYL_GSQYZ,
               NVL(SUM(A.JYL_KZZ * GX.SYQZ), 0) JYL_KZZ,
               NVL(SUM(A.JYL_HG * GX.SYQZ), 0) JYL_HG,
               NVL(SUM(A.JYL_SG * GX.SYQZ), 0) JYL_SG,
               NVL(SUM(A.JYL_QT * GX.SYQZ), 0) JYL_QT,
               NVL(SUM(A.JYL_ST * GX.SYQZ), 0) JYL_ST,
               NVL(SUM(A.JYL_XC * GX.SYQZ), 0) JYL_XC,
               NVL(SUM(A.JYL_CK * GX.SYQZ), 0) JYL_CK,
               NVL(SUM(A.JYL_RJ * GX.SYQZ), 0) JYL_RJ,
               NVL(SUM(A.JYL_GT * GX.SYQZ), 0) JYL_GT,
               NVL(SUM(A.JYL_SJ * GX.SYQZ), 0) JYL_SJ,
               NVL(SUM(A.JYL_DH * GX.SYQZ), 0) JYL_DH,
               NVL(SUM(A.JYL_HLW * GX.SYQZ), 0) JYL_HLW,
               NVL(SUM(A.JYFY * GX.SYQZ), 0) JYFY,
               NVL(SUM(A.JYBS * GX.SYQZ), 0) JYBS,
               NVL(SUM(A.JYL_JRCP * GX.SYQZ), 0) JYL_JRCP,
               NVL(SUM(A.YJSR_JRCP * GX.SYQZ), 0) YJSR_JRCP,
               NVL(SUM(A.JYJ_JRCP * GX.SYQZ), 0) JYJ_JRCP,
               A.HLCS_HKD,
               A.HLCS_USD
          FROM DSC_STAT.T_STAT_KHJYSR_R A
          JOIN DSC_STAT.VW_KHGX_TJRQ_UNIQUE GX ON GX.KHH = A.KHH
                                              AND GX.JZRQ > VN_TJRQ
         WHERE A.RQ = VN_TJRQ
         GROUP BY GX.RYXX_YYB, GX.RYXX, A.HLCS_HKD, A.HLCS_USD;

    VN_ROWCOUNT := SQL%ROWCOUNT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_RY_JYSR_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_RY_JYSR_Y(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN NUMBER,
                                                      I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
      -- CREATED ON 2013/05/20 BY LUZHIFEI ,APEXSOFT
      -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_RY_JYSR_Y
      功能简述：   在人员这个级别计算交易收入的信息(月份)
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
           人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
           组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY

      数据源：

      修改记录;
      -----------------------------------------------------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/20 09:49:05               新增
      LZF      2013/06/25 10:00:00               修改-统一是运用预先算好的数据vw_khgx_tjrq
      林伟     2013/08/29                        修改，增加YYB字段
      黄玉钰   2013/09/11                        修改：修改删除月分区
      陈德铸   2015/06/07                        修改：YYB字段取自DSC_BAS.T_RYXX中的ORGID字段

    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '06';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6);
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_RY_JYSR_Y';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME ||
                                                        ']目标分区：=PY_' || VN_TJYF || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        --分区删除
        EXECUTE IMMEDIATE 'ALTER TABLE ' || VS_TABNAME || ' TRUNCATE PARTITION PY_' ||
                          VN_TJYF || '  UPDATE GLOBAL INDEXES';

        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME ||
                                                        ']目标分区：=PY_' || VN_TJYF || '的数据！',
                                  I_S_CHANGEDESC     => '[' || VS_TABNAME || ']表' ||
                                                        VN_TJYF || '分区已删除！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --2.0 统计分组的关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_RY_JYSR_Y
        (YF,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         ZSR,
         YJSR,
         YJSR_HAZB,
         YJSR_SAZB,
         YJSR_ZXB,
         YJSR_CYB,
         YJSR_HB,
         YJSR_SB,
         YJSR_SB_A,
         YJSR_SB_B,
         YJSR_FBSJJ,
         YJSR_ETF,
         YJSR_LOF,
         YJSR_SZJJT,
         YJSR_DXJJ,
         YJSR_QZ,
         YJSR_GZ,
         YJSR_GSQYZ,
         YJSR_KZZ,
         YJSR_HG,
         YJSR_SG,
         YJSR_QT,
         JYJ,
         JYJ_HAZB,
         JYJ_SAZB,
         JYJ_ZXB,
         JYJ_CYB,
         JYJ_HB,
         JYJ_SB,
         JYJ_SB_A,
         JYJ_SB_B,
         JYJ_FBSJJ,
         JYJ_ETF,
         JYJ_LOF,
         JYJ_SZJJT,
         JYJ_DXJJ,
         JYJ_QZ,
         JYJ_GZ,
         JYJ_GSQYZ,
         JYJ_KZZ,
         JYJ_HG,
         JYJ_SG,
         JYJ_QT,
         JYL,
         JYL_HAZB,
         JYL_SAZB,
         JYL_ZXB,
         JYL_CYB,
         JYL_HB,
         JYL_SB,
         JYL_SB_A,
         JYL_SB_B,
         JYL_FBSJJ,
         JYL_ETF,
         JYL_LOF,
         JYL_SZJJT,
         JYL_DXJJ,
         JYL_DXJJ_SG,
         JYL_DXJJ_RG,
         JYL_DXJJ_SH,
         JYL_DXJJ_DSDT,
         JYL_QZ,
         JYL_GZ,
         JYL_GSQYZ,
         JYL_KZZ,
         JYL_HG,
         JYL_SG,
         JYL_QT,
         JYL_ST,
         JYL_XC,
         JYL_CK,
         JYL_RJ,
         JYL_GT,
         JYL_SJ,
         JYL_DH,
         JYL_HLW,
         JYFY,
         JYBS,
         JYL_JRCP,
         YJSR_JRCP,
         JYJ_JRCP,
         HLCS_HKD,
         HLCS_USD)
        SELECT VN_TJYF,
               CON_ORG_LVL || '-' || GX.RYXX U_ID,
               GX.RYXX YS_ID,
               GX.RYXX_YYB AS YYB, -- 这里-1(未知)表示RYXX表中找不到对应营业部
               GX.GXLX,
               NVL(SUM(A.ZSR * GX.SYQZ), 0) ZSR,
               NVL(SUM(A.YJSR * GX.SYQZ), 0) YJSR,
               NVL(SUM(A.YJSR_HAZB * GX.SYQZ), 0) YJSR_HAZB,
               NVL(SUM(A.YJSR_SAZB * GX.SYQZ), 0) YJSR_SAZB,
               NVL(SUM(A.YJSR_ZXB * GX.SYQZ), 0) YJSR_ZXB,
               NVL(SUM(A.YJSR_CYB * GX.SYQZ), 0) YJSR_CYB,
               NVL(SUM(A.YJSR_HB * GX.SYQZ), 0) YJSR_HB,
               NVL(SUM(A.YJSR_SB * GX.SYQZ), 0) YJSR_SB,
               NVL(SUM(A.YJSR_SB_A * GX.SYQZ), 0) YJSR_SB_A,
               NVL(SUM(A.YJSR_SB_B * GX.SYQZ), 0) YJSR_SB_B,
               NVL(SUM(A.YJSR_FBSJJ * GX.SYQZ), 0) YJSR_FBSJJ,
               NVL(SUM(A.YJSR_ETF * GX.SYQZ), 0) YJSR_ETF,
               NVL(SUM(A.YJSR_LOF * GX.SYQZ), 0) YJSR_LOF,
               NVL(SUM(A.YJSR_SZJJT * GX.SYQZ), 0) YJSR_SZJJT,
               NVL(SUM(A.YJSR_DXJJ * GX.SYQZ), 0) YJSR_DXJJ,
               NVL(SUM(A.YJSR_QZ * GX.SYQZ), 0) YJSR_QZ,
               NVL(SUM(A.YJSR_GZ * GX.SYQZ), 0) YJSR_GZ,
               NVL(SUM(A.YJSR_GSQYZ * GX.SYQZ), 0) YJSR_GSQYZ,
               NVL(SUM(A.YJSR_KZZ * GX.SYQZ), 0) YJSR_KZZ,
               NVL(SUM(A.YJSR_HG * GX.SYQZ), 0) YJSR_HG,
               NVL(SUM(A.YJSR_SG * GX.SYQZ), 0) YJSR_SG,
               NVL(SUM(A.YJSR_QT * GX.SYQZ), 0) YJSR_QT,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.JYJ_HAZB * GX.SYQZ), 0) JYJ_HAZB,
               NVL(SUM(A.JYJ_SAZB * GX.SYQZ), 0) JYJ_SAZB,
               NVL(SUM(A.JYJ_ZXB * GX.SYQZ), 0) JYJ_ZXB,
               NVL(SUM(A.JYJ_CYB * GX.SYQZ), 0) JYJ_CYB,
               NVL(SUM(A.JYJ_HB * GX.SYQZ), 0) JYJ_HB,
               NVL(SUM(A.JYJ_SB * GX.SYQZ), 0) JYJ_SB,
               NVL(SUM(A.JYJ_SB_A * GX.SYQZ), 0) JYJ_SB_A,
               NVL(SUM(A.JYJ_SB_B * GX.SYQZ), 0) JYJ_SB_B,
               NVL(SUM(A.JYJ_FBSJJ * GX.SYQZ), 0) JYJ_FBSJJ,
               NVL(SUM(A.JYJ_ETF * GX.SYQZ), 0) JYJ_ETF,
               NVL(SUM(A.JYJ_LOF * GX.SYQZ), 0) JYJ_LOF,
               NVL(SUM(A.JYJ_SZJJT * GX.SYQZ), 0) JYJ_SZJJT,
               NVL(SUM(A.JYJ_DXJJ * GX.SYQZ), 0) JYJ_DXJJ,
               NVL(SUM(A.JYJ_QZ * GX.SYQZ), 0) JYJ_QZ,
               NVL(SUM(A.JYJ_GZ * GX.SYQZ), 0) JYJ_GZ,
               NVL(SUM(A.JYJ_GSQYZ * GX.SYQZ), 0) JYJ_GSQYZ,
               NVL(SUM(A.JYJ_KZZ * GX.SYQZ), 0) JYJ_KZZ,
               NVL(SUM(A.JYJ_HG * GX.SYQZ), 0) JYJ_HG,
               NVL(SUM(A.JYJ_SG * GX.SYQZ), 0) JYJ_SG,
               NVL(SUM(A.JYJ_QT * GX.SYQZ), 0) JYJ_QT,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_HAZB * GX.SYQZ), 0) JYL_HAZB,
               NVL(SUM(A.JYL_SAZB * GX.SYQZ), 0) JYL_SAZB,
               NVL(SUM(A.JYL_ZXB * GX.SYQZ), 0) JYL_ZXB,
               NVL(SUM(A.JYL_CYB * GX.SYQZ), 0) JYL_CYB,
               NVL(SUM(A.JYL_HB * GX.SYQZ), 0) JYL_HB,
               NVL(SUM(A.JYL_SB * GX.SYQZ), 0) JYL_SB,
               NVL(SUM(A.JYL_SB_A * GX.SYQZ), 0) JYL_SB_A,
               NVL(SUM(A.JYL_SB_B * GX.SYQZ), 0) JYL_SB_B,
               NVL(SUM(A.JYL_FBSJJ * GX.SYQZ), 0) JYL_FBSJJ,
               NVL(SUM(A.JYL_ETF * GX.SYQZ), 0) JYL_ETF,
               NVL(SUM(A.JYL_LOF * GX.SYQZ), 0) JYL_LOF,
               NVL(SUM(A.JYL_SZJJT * GX.SYQZ), 0) JYL_SZJJT,
               NVL(SUM(A.JYL_DXJJ * GX.SYQZ), 0) JYL_DXJJ,
               NVL(SUM(A.JYL_DXJJ_SG * GX.SYQZ), 0) JYL_DXJJ_SG,
               NVL(SUM(A.JYL_DXJJ_RG * GX.SYQZ), 0) JYL_DXJJ_RG,
               NVL(SUM(A.JYL_DXJJ_SH * GX.SYQZ), 0) JYL_DXJJ_SH,
               NVL(SUM(A.JYL_DXJJ_DSDT * GX.SYQZ), 0) JYL_DXJJ_DSDT,
               NVL(SUM(A.JYL_QZ * GX.SYQZ), 0) JYL_QZ,
               NVL(SUM(A.JYL_GZ * GX.SYQZ), 0) JYL_GZ,
               NVL(SUM(A.JYL_GSQYZ * GX.SYQZ), 0) JYL_GSQYZ,
               NVL(SUM(A.JYL_KZZ * GX.SYQZ), 0) JYL_KZZ,
               NVL(SUM(A.JYL_HG * GX.SYQZ), 0) JYL_HG,
               NVL(SUM(A.JYL_SG * GX.SYQZ), 0) JYL_SG,
               NVL(SUM(A.JYL_QT * GX.SYQZ), 0) JYL_QT,
               NVL(SUM(A.JYL_ST * GX.SYQZ), 0) JYL_ST,
               NVL(SUM(A.JYL_XC * GX.SYQZ), 0) JYL_XC,
               NVL(SUM(A.JYL_CK * GX.SYQZ), 0) JYL_CK,
               NVL(SUM(A.JYL_RJ * GX.SYQZ), 0) JYL_RJ,
               NVL(SUM(A.JYL_GT * GX.SYQZ), 0) JYL_GT,
               NVL(SUM(A.JYL_SJ * GX.SYQZ), 0) JYL_SJ,
               NVL(SUM(A.JYL_DH * GX.SYQZ), 0) JYL_DH,
               NVL(SUM(A.JYL_HLW * GX.SYQZ), 0) JYL_HLW,
               NVL(SUM(A.JYFY * GX.SYQZ), 0) JYFY,
               NVL(SUM(A.JYBS * GX.SYQZ), 0) JYBS,
               NVL(SUM(A.JYL_JRCP * GX.SYQZ), 0) JYL_JRCP,
               NVL(SUM(A.YJSR_JRCP * GX.SYQZ), 0) YJSR_JRCP,
               NVL(SUM(A.JYJ_JRCP * GX.SYQZ), 0) JYJ_JRCP,
               A.HLCS_HKD,
               A.HLCS_USD
          FROM DSC_STAT.T_STAT_KHJYSR_Y A
          JOIN DSC_STAT.VW_KHGX_TJRQ GX ON GX.KHH = A.KHH
                                       AND GX.JZRQ > VN_TJRQ
         WHERE A.YF = VN_TJYF
         GROUP BY GX.RYXX_YYB, GX.RYXX, GX.GXLX, A.HLCS_HKD, A.HLCS_USD;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3.0 统计唯一关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_RY_JYSR_Y
        (YF,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         ZSR,
         YJSR,
         YJSR_HAZB,
         YJSR_SAZB,
         YJSR_ZXB,
         YJSR_CYB,
         YJSR_HB,
         YJSR_SB,
         YJSR_SB_A,
         YJSR_SB_B,
         YJSR_FBSJJ,
         YJSR_ETF,
         YJSR_LOF,
         YJSR_SZJJT,
         YJSR_DXJJ,
         YJSR_QZ,
         YJSR_GZ,
         YJSR_GSQYZ,
         YJSR_KZZ,
         YJSR_HG,
         YJSR_SG,
         YJSR_QT,
         JYJ,
         JYJ_HAZB,
         JYJ_SAZB,
         JYJ_ZXB,
         JYJ_CYB,
         JYJ_HB,
         JYJ_SB,
         JYJ_SB_A,
         JYJ_SB_B,
         JYJ_FBSJJ,
         JYJ_ETF,
         JYJ_LOF,
         JYJ_SZJJT,
         JYJ_DXJJ,
         JYJ_QZ,
         JYJ_GZ,
         JYJ_GSQYZ,
         JYJ_KZZ,
         JYJ_HG,
         JYJ_SG,
         JYJ_QT,
         JYL,
         JYL_HAZB,
         JYL_SAZB,
         JYL_ZXB,
         JYL_CYB,
         JYL_HB,
         JYL_SB,
         JYL_SB_A,
         JYL_SB_B,
         JYL_FBSJJ,
         JYL_ETF,
         JYL_LOF,
         JYL_SZJJT,
         JYL_DXJJ,
         JYL_DXJJ_SG,
         JYL_DXJJ_RG,
         JYL_DXJJ_SH,
         JYL_DXJJ_DSDT,
         JYL_QZ,
         JYL_GZ,
         JYL_GSQYZ,
         JYL_KZZ,
         JYL_HG,
         JYL_SG,
         JYL_QT,
         JYL_ST,
         JYL_XC,
         JYL_CK,
         JYL_RJ,
         JYL_GT,
         JYL_SJ,
         JYL_DH,
         JYL_HLW,
         JYFY,
         JYBS,
         JYL_JRCP,
         YJSR_JRCP,
         JYJ_JRCP,
         HLCS_HKD,
         HLCS_USD)
        SELECT VN_TJYF,
               CON_ORG_LVL || '-' || GX.RYXX U_ID,
               GX.RYXX YS_ID,
               GX.RYXX_YYB AS YYB, -- 这里-1(未知)表示RYXX表中找不到对应营业部
               0 GXLX,
               NVL(SUM(A.ZSR * GX.SYQZ), 0) ZSR,
               NVL(SUM(A.YJSR * GX.SYQZ), 0) YJSR,
               NVL(SUM(A.YJSR_HAZB * GX.SYQZ), 0) YJSR_HAZB,
               NVL(SUM(A.YJSR_SAZB * GX.SYQZ), 0) YJSR_SAZB,
               NVL(SUM(A.YJSR_ZXB * GX.SYQZ), 0) YJSR_ZXB,
               NVL(SUM(A.YJSR_CYB * GX.SYQZ), 0) YJSR_CYB,
               NVL(SUM(A.YJSR_HB * GX.SYQZ), 0) YJSR_HB,
               NVL(SUM(A.YJSR_SB * GX.SYQZ), 0) YJSR_SB,
               NVL(SUM(A.YJSR_SB_A * GX.SYQZ), 0) YJSR_SB_A,
               NVL(SUM(A.YJSR_SB_B * GX.SYQZ), 0) YJSR_SB_B,
               NVL(SUM(A.YJSR_FBSJJ * GX.SYQZ), 0) YJSR_FBSJJ,
               NVL(SUM(A.YJSR_ETF * GX.SYQZ), 0) YJSR_ETF,
               NVL(SUM(A.YJSR_LOF * GX.SYQZ), 0) YJSR_LOF,
               NVL(SUM(A.YJSR_SZJJT * GX.SYQZ), 0) YJSR_SZJJT,
               NVL(SUM(A.YJSR_DXJJ * GX.SYQZ), 0) YJSR_DXJJ,
               NVL(SUM(A.YJSR_QZ * GX.SYQZ), 0) YJSR_QZ,
               NVL(SUM(A.YJSR_GZ * GX.SYQZ), 0) YJSR_GZ,
               NVL(SUM(A.YJSR_GSQYZ * GX.SYQZ), 0) YJSR_GSQYZ,
               NVL(SUM(A.YJSR_KZZ * GX.SYQZ), 0) YJSR_KZZ,
               NVL(SUM(A.YJSR_HG * GX.SYQZ), 0) YJSR_HG,
               NVL(SUM(A.YJSR_SG * GX.SYQZ), 0) YJSR_SG,
               NVL(SUM(A.YJSR_QT * GX.SYQZ), 0) YJSR_QT,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.JYJ_HAZB * GX.SYQZ), 0) JYJ_HAZB,
               NVL(SUM(A.JYJ_SAZB * GX.SYQZ), 0) JYJ_SAZB,
               NVL(SUM(A.JYJ_ZXB * GX.SYQZ), 0) JYJ_ZXB,
               NVL(SUM(A.JYJ_CYB * GX.SYQZ), 0) JYJ_CYB,
               NVL(SUM(A.JYJ_HB * GX.SYQZ), 0) JYJ_HB,
               NVL(SUM(A.JYJ_SB * GX.SYQZ), 0) JYJ_SB,
               NVL(SUM(A.JYJ_SB_A * GX.SYQZ), 0) JYJ_SB_A,
               NVL(SUM(A.JYJ_SB_B * GX.SYQZ), 0) JYJ_SB_B,
               NVL(SUM(A.JYJ_FBSJJ * GX.SYQZ), 0) JYJ_FBSJJ,
               NVL(SUM(A.JYJ_ETF * GX.SYQZ), 0) JYJ_ETF,
               NVL(SUM(A.JYJ_LOF * GX.SYQZ), 0) JYJ_LOF,
               NVL(SUM(A.JYJ_SZJJT * GX.SYQZ), 0) JYJ_SZJJT,
               NVL(SUM(A.JYJ_DXJJ * GX.SYQZ), 0) JYJ_DXJJ,
               NVL(SUM(A.JYJ_QZ * GX.SYQZ), 0) JYJ_QZ,
               NVL(SUM(A.JYJ_GZ * GX.SYQZ), 0) JYJ_GZ,
               NVL(SUM(A.JYJ_GSQYZ * GX.SYQZ), 0) JYJ_GSQYZ,
               NVL(SUM(A.JYJ_KZZ * GX.SYQZ), 0) JYJ_KZZ,
               NVL(SUM(A.JYJ_HG * GX.SYQZ), 0) JYJ_HG,
               NVL(SUM(A.JYJ_SG * GX.SYQZ), 0) JYJ_SG,
               NVL(SUM(A.JYJ_QT * GX.SYQZ), 0) JYJ_QT,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_HAZB * GX.SYQZ), 0) JYL_HAZB,
               NVL(SUM(A.JYL_SAZB * GX.SYQZ), 0) JYL_SAZB,
               NVL(SUM(A.JYL_ZXB * GX.SYQZ), 0) JYL_ZXB,
               NVL(SUM(A.JYL_CYB * GX.SYQZ), 0) JYL_CYB,
               NVL(SUM(A.JYL_HB * GX.SYQZ), 0) JYL_HB,
               NVL(SUM(A.JYL_SB * GX.SYQZ), 0) JYL_SB,
               NVL(SUM(A.JYL_SB_A * GX.SYQZ), 0) JYL_SB_A,
               NVL(SUM(A.JYL_SB_B * GX.SYQZ), 0) JYL_SB_B,
               NVL(SUM(A.JYL_FBSJJ * GX.SYQZ), 0) JYL_FBSJJ,
               NVL(SUM(A.JYL_ETF * GX.SYQZ), 0) JYL_ETF,
               NVL(SUM(A.JYL_LOF * GX.SYQZ), 0) JYL_LOF,
               NVL(SUM(A.JYL_SZJJT * GX.SYQZ), 0) JYL_SZJJT,
               NVL(SUM(A.JYL_DXJJ * GX.SYQZ), 0) JYL_DXJJ,
               NVL(SUM(A.JYL_DXJJ_SG * GX.SYQZ), 0) JYL_DXJJ_SG,
               NVL(SUM(A.JYL_DXJJ_RG * GX.SYQZ), 0) JYL_DXJJ_RG,
               NVL(SUM(A.JYL_DXJJ_SH * GX.SYQZ), 0) JYL_DXJJ_SH,
               NVL(SUM(A.JYL_DXJJ_DSDT * GX.SYQZ), 0) JYL_DXJJ_DSDT,
               NVL(SUM(A.JYL_QZ * GX.SYQZ), 0) JYL_QZ,
               NVL(SUM(A.JYL_GZ * GX.SYQZ), 0) JYL_GZ,
               NVL(SUM(A.JYL_GSQYZ * GX.SYQZ), 0) JYL_GSQYZ,
               NVL(SUM(A.JYL_KZZ * GX.SYQZ), 0) JYL_KZZ,
               NVL(SUM(A.JYL_HG * GX.SYQZ), 0) JYL_HG,
               NVL(SUM(A.JYL_SG * GX.SYQZ), 0) JYL_SG,
               NVL(SUM(A.JYL_QT * GX.SYQZ), 0) JYL_QT,
               NVL(SUM(A.JYL_ST * GX.SYQZ), 0) JYL_ST,
               NVL(SUM(A.JYL_XC * GX.SYQZ), 0) JYL_XC,
               NVL(SUM(A.JYL_CK * GX.SYQZ), 0) JYL_CK,
               NVL(SUM(A.JYL_RJ * GX.SYQZ), 0) JYL_RJ,
               NVL(SUM(A.JYL_GT * GX.SYQZ), 0) JYL_GT,
               NVL(SUM(A.JYL_SJ * GX.SYQZ), 0) JYL_SJ,
               NVL(SUM(A.JYL_DH * GX.SYQZ), 0) JYL_DH,
               NVL(SUM(A.JYL_HLW * GX.SYQZ), 0) JYL_HLW,
               NVL(SUM(A.JYFY * GX.SYQZ), 0) JYFY,
               NVL(SUM(A.JYBS * GX.SYQZ), 0) JYBS,
               NVL(SUM(A.JYL_JRCP * GX.SYQZ), 0) JYL_JRCP,
               NVL(SUM(A.YJSR_JRCP * GX.SYQZ), 0) YJSR_JRCP,
               NVL(SUM(A.JYJ_JRCP * GX.SYQZ), 0) JYJ_JRCP,
               A.HLCS_HKD,
               A.HLCS_USD
          FROM DSC_STAT.T_STAT_KHJYSR_Y A
          JOIN DSC_STAT.VW_KHGX_TJRQ_UNIQUE GX ON GX.KHH = A.KHH
                                              AND GX.JZRQ > VN_TJRQ
         WHERE A.YF = VN_TJYF
         GROUP BY GX.RYXX_YYB, GX.RYXX, A.HLCS_HKD, A.HLCS_USD;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    ---------------------------------------------------------------------------------------
    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_RY_JYSR_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_RY_RZRQ_R(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN NUMBER,
                                                      I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
      -- CREATED ON 2013/05/20 BY LUZHIFEI ,APEXSOFT
      -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_RY_RZRQ_R
      功能简述：   在人员这个级别计算融资融券（日）
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
           1)人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
             组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
           2)但没有指定关系类别的时候，默认使用服务关系。

      数据源：

      修改记录;
      -----------------------------------------------------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/20 09:56:00               新增
      林伟     2013/08/29                        修改：增加YYB字段
      林伟     2013/09/03                        修改：增加融资金额和融券金额
      陈德铸   2015/06/07                        修改：YYB字段取自DSC_BAS.T_RYXX中的ORGID字段

    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '06';
    --CON_GXLX_FW CONSTANT INTEGER := 1;
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_RY_RZRQ_R';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        --SELECT COUNT(*) INTO VN_COUNT FROM T_STAT_YYBZC_R WHERE RQ=VN_TJRQ;
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_RY_RZRQ_R WHERE RQ = VN_TJRQ;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --2.0 统计分组关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_RY_RZRQ_R
        (RQ,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         KHS,
         ZZC,
         ZFZ,
         ZJYE,
         ZQSZ,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         YJ,
         JYJ,
         RZFZ,
         RQFZ,
         GHBJ,
         XZFZ,
         GHLX,
         XZLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         XZRQLX,
         XZRZLX,
         RZFY,
         RQFY,
         PCCS,
         ZBCS,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ_PT,
         JYJ_XY,
         YK,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         XZRZFZ,
         XZRQFZ,
         RZJE,
         RQJE)
        SELECT VN_TJRQ,
               CON_ORG_LVL || '-' || GX.RYXX U_ID,
               GX.RYXX YS_ID,
               GX.RYXX_YYB AS YYB, -- 这里-1(未知)表示RYXX表中找不到对应营业部
               GX.GXLX GXLX,
               COUNT(DISTINCT A.KHH) KHS,
               NVL(SUM(A.ZZC * GX.SYQZ), 0) ZZC,
               NVL(SUM(A.ZFZ * GX.SYQZ), 0) ZFZ,
               NVL(SUM(A.ZJYE * GX.SYQZ), 0) ZJYE,
               NVL(SUM(A.ZQSZ * GX.SYQZ), 0) ZQSZ,
               NVL(SUM(A.RZSXED * GX.SYQZ), 0) RZSXED,
               NVL(SUM(A.RQSXED * GX.SYQZ), 0) RQSXED,
               NVL(SUM(A.JYL_RZ * GX.SYQZ), 0) JYL_RZ,
               NVL(SUM(A.JYL_RQ * GX.SYQZ), 0) JYL_RQ,
               NVL(SUM(A.YJ * GX.SYQZ), 0) YJ,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.RZFZ * GX.SYQZ), 0) RZFZ,
               NVL(SUM(A.RQFZ * GX.SYQZ), 0) RQFZ,
               NVL(SUM(A.GHBJ * GX.SYQZ), 0) GHBJ,
               NVL(SUM(A.XZFZ * GX.SYQZ), 0) XZFZ,
               NVL(SUM(A.GHLX * GX.SYQZ), 0) GHLX,
               NVL(SUM(A.XZLX * GX.SYQZ), 0) XZLX,
               NVL(SUM(A.YJLX * GX.SYQZ), 0) YJLX,
               NVL(SUM(A.RZYJLX * GX.SYQZ), 0) RZYJLX,
               NVL(SUM(A.RQYJLX * GX.SYQZ), 0) RQYJLX,
               NVL(SUM(A.XZRQLX * GX.SYQZ), 0) XZRQLX,
               NVL(SUM(A.XZRZLX * GX.SYQZ), 0) XZRZLX,
               NVL(SUM(A.RZFY * GX.SYQZ), 0) RZFY,
               NVL(SUM(A.RQFY * GX.SYQZ), 0) RQFY,
               NVL(SUM(A.PCCS * GX.SYQZ), 0) PCCS,
               NVL(SUM(A.ZBCS * GX.SYQZ), 0) ZBCS,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_PT * GX.SYQZ), 0) JYL_PT,
               NVL(SUM(A.JYL_XY * GX.SYQZ), 0) JYL_XY,
               NVL(SUM(A.YJ_PT * GX.SYQZ), 0) YJ_PT,
               NVL(SUM(A.YJ_XY * GX.SYQZ), 0) YJ_XY,
               NVL(SUM(A.JYJ_PT * GX.SYQZ), 0) JYJ_PT,
               NVL(SUM(A.JYJ_XY * GX.SYQZ), 0) JYJ_XY,
               NVL(SUM(A.YK * GX.SYQZ), 0) YK,
               NVL(SUM(A.KYBZJ * GX.SYQZ), 0) KYBZJ,
               NVL(SUM(A.ZRJE * GX.SYQZ), 0) ZRJE,
               NVL(SUM(A.ZCJE * GX.SYQZ), 0) ZCJE,
               NVL(SUM(A.ZRSZ * GX.SYQZ), 0) ZRSZ,
               NVL(SUM(A.ZCSZ * GX.SYQZ), 0) ZCSZ,
               NVL(SUM(A.FWYJ * GX.SYQZ), 0) FWYJ,
               NVL(SUM(A.XZRZFZ * GX.SYQZ), 0) XZRZFZ,
               NVL(SUM(A.XZRQFZ * GX.SYQZ), 0) XZRQFZ,
               NVL(SUM(A.RZJE * GX.SYQZ), 0) RZJE,
               NVL(SUM(A.RQJE * GX.SYQZ), 0) RQJE
          FROM DSC_STAT.T_STAT_RZRQ_R A
          JOIN DSC_STAT.VW_KHGX_TJRQ GX ON GX.KHH = A.KHH
                                       AND GX.JZRQ > VN_TJRQ
         WHERE A.RQ = VN_TJRQ
         GROUP BY GX.RYXX_YYB, GX.RYXX, GX.GXLX;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3.0 统计唯一关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_RY_RZRQ_R
        (RQ,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         KHS,
         ZZC,
         ZFZ,
         ZJYE,
         ZQSZ,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         YJ,
         JYJ,
         RZFZ,
         RQFZ,
         GHBJ,
         XZFZ,
         GHLX,
         XZLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         XZRQLX,
         XZRZLX,
         RZFY,
         RQFY,
         PCCS,
         ZBCS,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ_PT,
         JYJ_XY,
         YK,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         XZRZFZ,
         XZRQFZ,
         RZJE,
         RQJE)
        SELECT VN_TJRQ,
               CON_ORG_LVL || '-' || GX.RYXX U_ID,
               GX.RYXX YS_ID,
               GX.RYXX_YYB AS YYB, -- 这里-1(未知)表示RYXX表中找不到对应营业部
               0 GXLX,
               COUNT(DISTINCT A.KHH) KHS,
               NVL(SUM(A.ZZC * GX.SYQZ), 0) ZZC,
               NVL(SUM(A.ZFZ * GX.SYQZ), 0) ZFZ,
               NVL(SUM(A.ZJYE * GX.SYQZ), 0) ZJYE,
               NVL(SUM(A.ZQSZ * GX.SYQZ), 0) ZQSZ,
               NVL(SUM(A.RZSXED * GX.SYQZ), 0) RZSXED,
               NVL(SUM(A.RQSXED * GX.SYQZ), 0) RQSXED,
               NVL(SUM(A.JYL_RZ * GX.SYQZ), 0) JYL_RZ,
               NVL(SUM(A.JYL_RQ * GX.SYQZ), 0) JYL_RQ,
               NVL(SUM(A.YJ * GX.SYQZ), 0) YJ,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.RZFZ * GX.SYQZ), 0) RZFZ,
               NVL(SUM(A.RQFZ * GX.SYQZ), 0) RQFZ,
               NVL(SUM(A.GHBJ * GX.SYQZ), 0) GHBJ,
               NVL(SUM(A.XZFZ * GX.SYQZ), 0) XZFZ,
               NVL(SUM(A.GHLX * GX.SYQZ), 0) GHLX,
               NVL(SUM(A.XZLX * GX.SYQZ), 0) XZLX,
               NVL(SUM(A.YJLX * GX.SYQZ), 0) YJLX,
               NVL(SUM(A.RZYJLX * GX.SYQZ), 0) RZYJLX,
               NVL(SUM(A.RQYJLX * GX.SYQZ), 0) RQYJLX,
               NVL(SUM(A.XZRQLX * GX.SYQZ), 0) XZRQLX,
               NVL(SUM(A.XZRZLX * GX.SYQZ), 0) XZRZLX,
               NVL(SUM(A.RZFY * GX.SYQZ), 0) RZFY,
               NVL(SUM(A.RQFY * GX.SYQZ), 0) RQFY,
               NVL(SUM(A.PCCS * GX.SYQZ), 0) PCCS,
               NVL(SUM(A.ZBCS * GX.SYQZ), 0) ZBCS,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_PT * GX.SYQZ), 0) JYL_PT,
               NVL(SUM(A.JYL_XY * GX.SYQZ), 0) JYL_XY,
               NVL(SUM(A.YJ_PT * GX.SYQZ), 0) YJ_PT,
               NVL(SUM(A.YJ_XY * GX.SYQZ), 0) YJ_XY,
               NVL(SUM(A.JYJ_PT * GX.SYQZ), 0) JYJ_PT,
               NVL(SUM(A.JYJ_XY * GX.SYQZ), 0) JYJ_XY,
               NVL(SUM(A.YK * GX.SYQZ), 0) YK,
               NVL(SUM(A.KYBZJ * GX.SYQZ), 0) KYBZJ,
               NVL(SUM(A.ZRJE * GX.SYQZ), 0) ZRJE,
               NVL(SUM(A.ZCJE * GX.SYQZ), 0) ZCJE,
               NVL(SUM(A.ZRSZ * GX.SYQZ), 0) ZRSZ,
               NVL(SUM(A.ZCSZ * GX.SYQZ), 0) ZCSZ,
               NVL(SUM(A.FWYJ * GX.SYQZ), 0) FWYJ,
               NVL(SUM(A.XZRZFZ * GX.SYQZ), 0) XZRZFZ,
               NVL(SUM(A.XZRQFZ * GX.SYQZ), 0) XZRQFZ,
               NVL(SUM(A.RZJE * GX.SYQZ), 0) RZJE,
               NVL(SUM(A.RQJE * GX.SYQZ), 0) RQJE
          FROM DSC_STAT.T_STAT_RZRQ_R A
          JOIN DSC_STAT.VW_KHGX_TJRQ_UNIQUE GX ON GX.KHH = A.KHH
                                              AND GX.JZRQ > VN_TJRQ
         WHERE A.RQ = VN_TJRQ
         GROUP BY GX.RYXX_YYB, GX.RYXX;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_RY_RZRQ_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_RY_RZRQ_Y(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN NUMBER,
                                                      I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
      -- CREATED ON 2013/05/20 BY LUZHIFEI ,APEXSOFT
      -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_RY_RZRQ_Y
      功能简述：   在人员这个级别计算融资融券（日）
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
           1)人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
             组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
           2)但没有指定关系类别的时候，默认使用服务关系。

      数据源：

      修改记录;
      -----------------------------------------------------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/20 09:56:00               新增
      LZF      2013/06/25 10:00:00               修改-统一是运用预先算好的数据vw_khgx_tjrq，增加gxlx
      林伟     2013/08/29                        修改：增加YYB字段
      林伟     2013/09/03                        修改：增加融资金额和融券金额
      陈德铸   2015/06/07                        修改：YYB字段取自DSC_BAS.T_RYXX中的ORGID字段

    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '06';
    --CON_GXLX_FW CONSTANT INTEGER := 1;
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_RY_RZRQ_Y';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        --SELECT COUNT(*) INTO VN_COUNT FROM T_STAT_YYBZC_R WHERE RQ=VN_TJRQ;
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_RY_RZRQ_Y WHERE YF = VN_TJYF;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --2.0 统计分组关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_RY_RZRQ_Y
        (YF,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         KHS,
         ZZC,
         ZFZ,
         ZJYE,
         ZQSZ,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         YJ,
         JYJ,
         RZFZ,
         RQFZ,
         GHBJ,
         XZFZ,
         XZRZFZ,
         XZRQFZ,
         GHLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         XZLX,
         XZRQLX,
         XZRZLX,
         RZFY,
         RQFY,
         PCCS,
         ZBCS,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ_PT,
         JYJ_XY,
         YK,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         QCZC,
         RJZC,
         RJRZRQ,
         RJRZFZ,
         RJRQFZ,
         RJZQSZ,
         YMRZJE,
         YMRQJE)
        SELECT VN_TJYF,
               CON_ORG_LVL || '-' || GX.RYXX U_ID,
               GX.RYXX YS_ID,
               GX.RYXX_YYB AS YYB, -- 这里-1(未知)表示RYXX表中找不到对应营业部
               GX.GXLX GXLX,
               COUNT(DISTINCT A.KHH) KHS,
               NVL(SUM(A.ZZC * GX.SYQZ), 0) ZZC,
               NVL(SUM(A.ZFZ * GX.SYQZ), 0) ZFZ,
               NVL(SUM(A.ZJYE * GX.SYQZ), 0) ZJYE,
               NVL(SUM(A.ZQSZ * GX.SYQZ), 0) ZQSZ,
               NVL(SUM(A.RZSXED * GX.SYQZ), 0) RZSXED,
               NVL(SUM(A.RQSXED * GX.SYQZ), 0) RQSXED,
               NVL(SUM(A.JYL_RZ * GX.SYQZ), 0) JYL_RZ,
               NVL(SUM(A.JYL_RQ * GX.SYQZ), 0) JYL_RQ,
               NVL(SUM(A.YJ * GX.SYQZ), 0) YJ,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.RZFZ * GX.SYQZ), 0) RZFZ,
               NVL(SUM(A.RQFZ * GX.SYQZ), 0) RQFZ,
               NVL(SUM(A.GHBJ * GX.SYQZ), 0) GHBJ,
               NVL(SUM(A.XZFZ * GX.SYQZ), 0) XZFZ,
               NVL(SUM(A.XZRZFZ * GX.SYQZ), 0) XZRZFZ,
               NVL(SUM(A.XZRQFZ * GX.SYQZ), 0) XZRQFZ,
               NVL(SUM(A.GHLX * GX.SYQZ), 0) GHLX,
               NVL(SUM(A.YJLX * GX.SYQZ), 0) YJLX,
               NVL(SUM(A.RZYJLX * GX.SYQZ), 0) RZYJLX,
               NVL(SUM(A.RQYJLX * GX.SYQZ), 0) RQYJLX,
               NVL(SUM(A.XZLX * GX.SYQZ), 0) XZLX,
               NVL(SUM(A.XZRQLX * GX.SYQZ), 0) XZRQLX,
               NVL(SUM(A.XZRZLX * GX.SYQZ), 0) XZRZLX,
               NVL(SUM(A.RZFY * GX.SYQZ), 0) RZFY,
               NVL(SUM(A.RQFY * GX.SYQZ), 0) RQFY,
               NVL(SUM(A.PCCS * GX.SYQZ), 0) PCCS,
               NVL(SUM(A.ZBCS * GX.SYQZ), 0) ZBCS,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_PT * GX.SYQZ), 0) JYL_PT,
               NVL(SUM(A.JYL_XY * GX.SYQZ), 0) JYL_XY,
               NVL(SUM(A.YJ_PT * GX.SYQZ), 0) YJ_PT,
               NVL(SUM(A.YJ_XY * GX.SYQZ), 0) YJ_XY,
               NVL(SUM(A.JYJ_PT * GX.SYQZ), 0) JYJ_PT,
               NVL(SUM(A.JYJ_XY * GX.SYQZ), 0) JYJ_XY,
               NVL(SUM(A.YK * GX.SYQZ), 0) YK,
               NVL(SUM(A.KYBZJ * GX.SYQZ), 0) KYBZJ,
               NVL(SUM(A.ZRJE * GX.SYQZ), 0) ZRJE,
               NVL(SUM(A.ZCJE * GX.SYQZ), 0) ZCJE,
               NVL(SUM(A.ZRSZ * GX.SYQZ), 0) ZRSZ,
               NVL(SUM(A.ZCSZ * GX.SYQZ), 0) ZCSZ,
               NVL(SUM(A.FWYJ * GX.SYQZ), 0) FWYJ,
               NVL(SUM(A.QCZC * GX.SYQZ), 0) QCZC,
               NVL(SUM(A.RJZC * GX.SYQZ), 0) RJZC,
               NVL(SUM(A.RJRZRQ * GX.SYQZ), 0) RJRZRQ,
               NVL(SUM(A.RJRZFZ * GX.SYQZ), 0) RJRZFZ,
               NVL(SUM(A.RJRQFZ * GX.SYQZ), 0) RJRQFZ,
               NVL(SUM(A.RJZQSZ * GX.SYQZ), 0) RJZQSZ,
               NVL(SUM(A.YMRZJE * GX.SYQZ), 0) YMRZJE,
               NVL(SUM(A.YMRQJE * GX.SYQZ), 0) YMRQJE
          FROM DSC_STAT.T_STAT_RZRQ_Y A
          JOIN DSC_STAT.VW_KHGX_TJRQ GX ON GX.KHH = A.KHH
                                       AND GX.JZRQ > VN_TJRQ
         WHERE A.YF = VN_TJYF
         GROUP BY GX.RYXX_YYB, GX.RYXX, GX.GXLX;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3.0 统计唯一关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_RY_RZRQ_Y
        (YF,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         KHS,
         ZZC,
         ZFZ,
         ZJYE,
         ZQSZ,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         YJ,
         JYJ,
         RZFZ,
         RQFZ,
         GHBJ,
         XZFZ,
         XZRZFZ,
         XZRQFZ,
         GHLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         XZLX,
         XZRQLX,
         XZRZLX,
         RZFY,
         RQFY,
         PCCS,
         ZBCS,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ_PT,
         JYJ_XY,
         YK,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         QCZC,
         RJZC,
         RJRZRQ,
         RJRZFZ,
         RJRQFZ,
         RJZQSZ,
         YMRZJE,
         YMRQJE)
        SELECT VN_TJYF,
               CON_ORG_LVL || '-' || GX.RYXX U_ID,
               GX.RYXX YS_ID,
               GX.RYXX_YYB AS YYB, -- 这里-1(未知)表示RYXX表中找不到对应营业部
               0 GXLX,
               COUNT(DISTINCT A.KHH) KHS,
               NVL(SUM(A.ZZC * GX.SYQZ), 0) ZZC,
               NVL(SUM(A.ZFZ * GX.SYQZ), 0) ZFZ,
               NVL(SUM(A.ZJYE * GX.SYQZ), 0) ZJYE,
               NVL(SUM(A.ZQSZ * GX.SYQZ), 0) ZQSZ,
               NVL(SUM(A.RZSXED * GX.SYQZ), 0) RZSXED,
               NVL(SUM(A.RQSXED * GX.SYQZ), 0) RQSXED,
               NVL(SUM(A.JYL_RZ * GX.SYQZ), 0) JYL_RZ,
               NVL(SUM(A.JYL_RQ * GX.SYQZ), 0) JYL_RQ,
               NVL(SUM(A.YJ * GX.SYQZ), 0) YJ,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.RZFZ * GX.SYQZ), 0) RZFZ,
               NVL(SUM(A.RQFZ * GX.SYQZ), 0) RQFZ,
               NVL(SUM(A.GHBJ * GX.SYQZ), 0) GHBJ,
               NVL(SUM(A.XZFZ * GX.SYQZ), 0) XZFZ,
               NVL(SUM(A.XZRZFZ * GX.SYQZ), 0) XZRZFZ,
               NVL(SUM(A.XZRQFZ * GX.SYQZ), 0) XZRQFZ,
               NVL(SUM(A.GHLX * GX.SYQZ), 0) GHLX,
               NVL(SUM(A.YJLX * GX.SYQZ), 0) YJLX,
               NVL(SUM(A.RZYJLX * GX.SYQZ), 0) RZYJLX,
               NVL(SUM(A.RQYJLX * GX.SYQZ), 0) RQYJLX,
               NVL(SUM(A.XZLX * GX.SYQZ), 0) XZLX,
               NVL(SUM(A.XZRQLX * GX.SYQZ), 0) XZRQLX,
               NVL(SUM(A.XZRZLX * GX.SYQZ), 0) XZRZLX,
               NVL(SUM(A.RZFY * GX.SYQZ), 0) RZFY,
               NVL(SUM(A.RQFY * GX.SYQZ), 0) RQFY,
               NVL(SUM(A.PCCS * GX.SYQZ), 0) PCCS,
               NVL(SUM(A.ZBCS * GX.SYQZ), 0) ZBCS,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_PT * GX.SYQZ), 0) JYL_PT,
               NVL(SUM(A.JYL_XY * GX.SYQZ), 0) JYL_XY,
               NVL(SUM(A.YJ_PT * GX.SYQZ), 0) YJ_PT,
               NVL(SUM(A.YJ_XY * GX.SYQZ), 0) YJ_XY,
               NVL(SUM(A.JYJ_PT * GX.SYQZ), 0) JYJ_PT,
               NVL(SUM(A.JYJ_XY * GX.SYQZ), 0) JYJ_XY,
               NVL(SUM(A.YK * GX.SYQZ), 0) YK,
               NVL(SUM(A.KYBZJ * GX.SYQZ), 0) KYBZJ,
               NVL(SUM(A.ZRJE * GX.SYQZ), 0) ZRJE,
               NVL(SUM(A.ZCJE * GX.SYQZ), 0) ZCJE,
               NVL(SUM(A.ZRSZ * GX.SYQZ), 0) ZRSZ,
               NVL(SUM(A.ZCSZ * GX.SYQZ), 0) ZCSZ,
               NVL(SUM(A.FWYJ * GX.SYQZ), 0) FWYJ,
               NVL(SUM(A.QCZC * GX.SYQZ), 0) QCZC,
               NVL(SUM(A.RJZC * GX.SYQZ), 0) RJZC,
               NVL(SUM(A.RJRZRQ * GX.SYQZ), 0) RJRZRQ,
               NVL(SUM(A.RJRZFZ * GX.SYQZ), 0) RJRZFZ,
               NVL(SUM(A.RJRQFZ * GX.SYQZ), 0) RJRQFZ,
               NVL(SUM(A.RJZQSZ * GX.SYQZ), 0) RJZQSZ,
               NVL(SUM(A.YMRZJE * GX.SYQZ), 0) YMRZJE,
               NVL(SUM(A.YMRQJE * GX.SYQZ), 0) YMRQJE
          FROM DSC_STAT.T_STAT_RZRQ_Y A
          JOIN DSC_STAT.VW_KHGX_TJRQ_UNIQUE GX ON GX.KHH = A.KHH
                                              AND GX.JZRQ > VN_TJRQ
         WHERE A.YF = VN_TJYF
         GROUP BY GX.RYXX_YYB, GX.RYXX;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_RY_RZRQ_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_RY_XKKH_Y(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN NUMBER,
                                                      I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
    -- CREATED ON 2013/05/20 BY LUZHIFEI ,APEXSOFT
    -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_RY_XKKH_Y
      功能简述：   在人员这个级别计算新开客户的统计
                   统计的内容表示客户在本月的交易和资产信息
                   所谓新开客户，指在本月内开户的客户
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
           1)人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
              组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
           2)资产部分暂时不考虑在途等等问题。

      数据源：

      修改记录;
      ----------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/20 15:18:05               新增
      林伟     2013/08/29                        修改：增加YYB字段
      黄玉钰   2013/09/11                        修改：修改删除月分区
                                                 调整主表为T_KHXX_JJYW及DSC_STAT.VW_KHGX_TJRQ
      黄玉钰   2013/09/22                        修改：获取资产/交易量等值时关联上T_STAT_RZRQ_Y表
      陈德铸   2015/06/07                        修改：YYB字段取自DSC_BAS.T_RYXX中的ORGID字段
      洪国力   2016/01/18                        修改：新增关系类型字段，修复因关系类型为空取不到团队数据的问题
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '06';
    --    CON_GXLX_FW CONSTANT INTEGER := 1; --关系类型（服务关系，含主和辅助两种)
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF_KSRQ NUMBER(8); --统计日期所在的开始日期
    VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_RY_XKKH_Y';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;
    VN_TJYF_KSRQ := VN_TJYF * 100 + 1;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME ||
                                                        ']目标分区：=PY_' || VN_TJYF || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        --分区删除
        EXECUTE IMMEDIATE 'ALTER TABLE ' || VS_TABNAME || ' TRUNCATE PARTITION PY_' ||
                          VN_TJYF || '  UPDATE GLOBAL INDEXES';

        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME ||
                                                        ']目标分区：=PY_' || VN_TJYF || '的数据！',
                                  I_S_CHANGEDESC     => '[' || VS_TABNAME || ']表' ||
                                                        VN_TJYF || '分区已删除！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_RY_XKKH_Y
        (YF,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         BYXKKHS,
         BYXKKHZC,
         BYXKKHJYL,
         BYXKKHYJ,
         BYXKKHJYJ,
         BYXKKHZRZJ,
         BYXKKHZCZJ,
         BYXKKHJZRZJ,
         BYXKKHZRSZ,
         BYXKKHZCSZ,
         BYXKKHJZRSZ)
        SELECT VN_TJYF,
               CON_ORG_LVL || '-' || GX.RYXX U_ID,
               GX.RYXX YS_ID,
               GX.RYXX_YYB AS YYB, -- 这里-1(未知)表示RYXX表中找不到对应营业部
               NVL(GX.GXLX, 0) AS GXLX,
               COUNT(KH.KHH) BYXKKHS,
               SUM(A.YMZZC * GX.SYQZ) BYXKKHZC,
               NVL(SUM(JY.JYL * GX.SYQZ), 0) BYXKKHJYL,
               NVL(SUM(JY.YJSR * GX.SYQZ), 0) BYXKKHYJ,
               NVL(SUM(JY.JYJ * GX.SYQZ), 0) BYXKKHJYJ,
               SUM(A.CRJE * GX.SYQZ) ZRZJ,
               SUM(A.QCJE * GX.SYQZ) ZCZJ,
               SUM((NVL(A.CRJE, 0) - NVL(A.QCJE, 0)) * GX.SYQZ) JZRZJ,
               SUM(A.ZRZQSZ * GX.SYQZ) ZRSZ,
               SUM(A.ZCZQSZ * GX.SYQZ) ZCSZ,
               SUM((NVL(A.ZRZQSZ, 0) - NVL(A.ZCZQSZ, 0)) * GX.SYQZ) JZRSZ
          FROM DSC_BAS.T_KHXX_JJYW KH
         INNER JOIN DSC_STAT.VW_KHGX_TJRQ GX
            ON GX.KHH = KH.KHH
           AND GX.JZRQ > VN_TJRQ
          LEFT JOIN (SELECT KHH,
                            NVL(SUM(YMZZC), 0) YMZZC,
                            NVL(SUM(CRJE), 0) CRJE,
                            NVL(SUM(QCJE), 0) QCJE,
                            NVL(SUM(ZRZQSZ), 0) ZRZQSZ,
                            NVL(SUM(ZCZQSZ), 0) ZCZQSZ
                       FROM (SELECT YF, KHH, YMZZC, CRJE, QCJE, ZRZQSZ, ZCZQSZ
                               FROM DSC_STAT.T_STAT_KHZC_Y
                             UNION ALL
                             SELECT YF, KHH, ZZC, ZRJE, ZCJE, ZRSZ, ZCSZ
                               FROM DSC_STAT.T_STAT_RZRQ_Y)
                      WHERE YF = VN_TJYF
                      GROUP BY KHH) A
            ON KH.KHH = A.KHH
          LEFT JOIN (SELECT KHH,
                            NVL(SUM(JYL), 0) JYL,
                            NVL(SUM(YJSR), 0) YJSR,
                            NVL(SUM(JYJ), 0) JYJ
                       FROM (SELECT YF, KHH, JYL, YJSR, JYJ
                               FROM DSC_STAT.T_STAT_KHJYSR_Y
                             UNION ALL
                             SELECT YF, KHH, JYL, YJ, JYJ FROM DSC_STAT.T_STAT_RZRQ_Y)
                      WHERE YF = VN_TJYF
                      GROUP BY KHH) JY
            ON JY.KHH = KH.KHH
         WHERE KH.KHRQ BETWEEN VN_TJYF_KSRQ AND VN_TJRQ
         GROUP BY GX.RYXX_YYB, NVL(GX.GXLX, 0), GX.RYXX;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    /*
     -- 对于人员而言，不存在gxlx=0的情况。
    */

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_RY_XKKH_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_RY_ZC_R(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN NUMBER,
                                                    I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
      -- CREATED ON 2013/05/20 BY LUZHIFEI ,APEXSOFT
      -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_RY_ZC_R
      功能简述：   在人员这个级别计算资产的信息（日）
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
           1)人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
           组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
           2) ry_zc统计，只会包含标准的，其他回购，融资融券等等，在专门的表实现。

      数据源：

      修改记录;
      -----------------------------------------------------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/20 09:56:00               新增
      LZF      2013/06/25 10:00:00               修改-统一是运用预先算好的数据vw_khgx_tjrq
      林伟     2013/08/29                        修改：增加YYB字段
      刘官勤   2015/02/02                        修改：增加字段ZFZ_RZRQ总负债_融资融券
      陈德铸   2015/06/07                        修改：YYB字段取自DSC_BAS.T_RYXX中的ORGID字段

    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '06';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_RY_ZC_R';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        --SELECT COUNT(*) INTO VN_COUNT FROM T_STAT_YYBZC_R WHERE RQ=VN_TJRQ;
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_RY_ZC_R WHERE RQ = VN_TJRQ;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --2.0 统计分组关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_RY_ZC_R
        (RQ,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         ZZC,
         ZTZC,
         ZQZC,
         DYPSZ,
         ZZC_RMB,
         ZZC_HKD,
         ZZC_USD,
         QTZC_RMB,
         QTZC_HKD,
         QTZC_USD,
         ZJYE_RMB,
         ZJYE_HKD,
         ZJYE_USD,
         ZQSZ,
         ZQSZ_RMB,
         ZQSZ_HKD,
         ZQSZ_USD,
         ZQSZ_ZB,
         ZQSZ_HAZB,
         ZQSZ_SAZB,
         ZQSZ_ZXB,
         ZQSZ_CYB,
         ZQSZ_HB,
         ZQSZ_SB,
         ZQSZ_SB_A,
         ZQSZ_SB_B,
         ZQSZ_FBSJJ,
         ZQSZ_ETF,
         ZQSZ_LOF,
         ZQSZ_SZJJT,
         ZQSZ_DXJJ,
         ZQSZ_JRCP,
         ZQSZ_QZ,
         ZQSZ_GZ,
         ZQSZ_GSQYZ,
         ZQSZ_KZZ,
         ZQSZ_SG,
         ZQSZ_QT,
         SZXZJE,
         CRJE_RMB,
         CRJE_HKD,
         CRJE_USD,
         QCJE_RMB,
         QCJE_HKD,
         QCJE_USD,
         ZRZQSZ,
         ZD_RMB,
         ZD_USD,
         ZTGZR_RMB,
         ZTGZR_HKD,
         ZCZQSZ,
         CZD_RMB,
         CZD_USD,
         ZTGZC_RMB,
         ZTGZC_HKD,
         DRYK,
         ZFZ,
         FLTZC,
         ZZC_RZRQ,
         DBXJ_RZRQ,
         DBGPSZ_RZRQ,
         HLCS_HKD,
         HLCS_USD,
         ZFZ_RZRQ)
        SELECT VN_TJRQ,
               CON_ORG_LVL || '-' || GX.RYXX U_ID,
               GX.RYXX YS_ID,
               NVL(GX.RYXX_YYB, '-1') AS YYB, -- 这里-1(未知)表示RYXX表中找不到对应营业部
               GX.GXLX,
               NVL(SUM(A.ZZC * GX.SYQZ), 0) ZZC,
               NVL(SUM(A.ZTZC * GX.SYQZ), 0) ZTZC,
               NVL(SUM(A.ZQZC * GX.SYQZ), 0) ZQZC,
               NVL(SUM(A.DYPSZ * GX.SYQZ), 0) DYPSZ,
               NVL(SUM(A.ZZC_RMB * GX.SYQZ), 0) ZZC_RMB,
               NVL(SUM(A.ZZC_HKD * GX.SYQZ), 0) ZZC_HKD,
               NVL(SUM(A.ZZC_USD * GX.SYQZ), 0) ZZC_USD,
               NVL(SUM(A.QTZC_RMB * GX.SYQZ), 0) QTZC_RMB,
               NVL(SUM(A.QTZC_HKD * GX.SYQZ), 0) QTZC_HKD,
               NVL(SUM(A.QTZC_USD * GX.SYQZ), 0) QTZC_USD,
               NVL(SUM(A.ZJYE_RMB * GX.SYQZ), 0) ZJYE_RMB,
               NVL(SUM(A.ZJYE_HKD * GX.SYQZ), 0) ZJYE_HKD,
               NVL(SUM(A.ZJYE_USD * GX.SYQZ), 0) ZJYE_USD,
               NVL(SUM(A.ZQSZ * GX.SYQZ), 0) ZQSZ,
               NVL(SUM(A.ZQSZ_RMB * GX.SYQZ), 0) ZQSZ_RMB,
               NVL(SUM(A.ZQSZ_HKD * GX.SYQZ), 0) ZQSZ_HKD,
               NVL(SUM(A.ZQSZ_USD * GX.SYQZ), 0) ZQSZ_USD,
               NVL(SUM(A.ZQSZ_ZB * GX.SYQZ), 0) ZQSZ_ZB,
               NVL(SUM(A.ZQSZ_HAZB * GX.SYQZ), 0) ZQSZ_HAZB,
               NVL(SUM(A.ZQSZ_SAZB * GX.SYQZ), 0) ZQSZ_SAZB,
               NVL(SUM(A.ZQSZ_ZXB * GX.SYQZ), 0) ZQSZ_ZXB,
               NVL(SUM(A.ZQSZ_CYB * GX.SYQZ), 0) ZQSZ_CYB,
               NVL(SUM(A.ZQSZ_HB * GX.SYQZ), 0) ZQSZ_HB,
               NVL(SUM(A.ZQSZ_SB * GX.SYQZ), 0) ZQSZ_SB,
               NVL(SUM(A.ZQSZ_SB_A * GX.SYQZ), 0) ZQSZ_SB_A,
               NVL(SUM(A.ZQSZ_SB_B * GX.SYQZ), 0) ZQSZ_SB_B,
               NVL(SUM(A.ZQSZ_FBSJJ * GX.SYQZ), 0) ZQSZ_FBSJJ,
               NVL(SUM(A.ZQSZ_ETF * GX.SYQZ), 0) ZQSZ_ETF,
               NVL(SUM(A.ZQSZ_LOF * GX.SYQZ), 0) ZQSZ_LOF,
               NVL(SUM(A.ZQSZ_SZJJT * GX.SYQZ), 0) ZQSZ_SZJJT,
               NVL(SUM(A.ZQSZ_DXJJ * GX.SYQZ), 0) ZQSZ_DXJJ,
               NVL(SUM(A.ZQSZ_JRCP * GX.SYQZ), 0) ZQSZ_JRCP,
               NVL(SUM(A.ZQSZ_QZ * GX.SYQZ), 0) ZQSZ_QZ,
               NVL(SUM(A.ZQSZ_GZ * GX.SYQZ), 0) ZQSZ_GZ,
               NVL(SUM(A.ZQSZ_GSQYZ * GX.SYQZ), 0) ZQSZ_GSQYZ,
               NVL(SUM(A.ZQSZ_KZZ * GX.SYQZ), 0) ZQSZ_KZZ,
               NVL(SUM(A.ZQSZ_SG * GX.SYQZ), 0) ZQSZ_SG,
               NVL(SUM(A.ZQSZ_QT * GX.SYQZ), 0) ZQSZ_QT,
               NVL(SUM(A.SZXZJE * GX.SYQZ), 0) SZXZJE,
               NVL(SUM(A.CRJE_RMB * GX.SYQZ), 0) CRJE_RMB,
               NVL(SUM(A.CRJE_HKD * GX.SYQZ), 0) CRJE_HKD,
               NVL(SUM(A.CRJE_USD * GX.SYQZ), 0) CRJE_USD,
               NVL(SUM(A.QCJE_RMB * GX.SYQZ), 0) QCJE_RMB,
               NVL(SUM(A.QCJE_HKD * GX.SYQZ), 0) QCJE_HKD,
               NVL(SUM(A.QCJE_USD * GX.SYQZ), 0) QCJE_USD,
               NVL(SUM(A.ZRZQSZ * GX.SYQZ), 0) ZRZQSZ,
               NVL(SUM(A.ZD_RMB * GX.SYQZ), 0) ZD_RMB,
               NVL(SUM(A.ZD_USD * GX.SYQZ), 0) ZD_USD,
               NVL(SUM(A.ZTGZR_RMB * GX.SYQZ), 0) ZTGZR_RMB,
               NVL(SUM(A.ZTGZR_HKD * GX.SYQZ), 0) ZTGZR_HKD,
               NVL(SUM(A.ZCZQSZ * GX.SYQZ), 0) ZCZQSZ,
               NVL(SUM(A.CZD_RMB * GX.SYQZ), 0) CZD_RMB,
               NVL(SUM(A.CZD_USD * GX.SYQZ), 0) CZD_USD,
               NVL(SUM(A.ZTGZC_RMB * GX.SYQZ), 0) ZTGZC_RMB,
               NVL(SUM(A.ZTGZC_HKD * GX.SYQZ), 0) ZTGZC_HKD,
               NVL(SUM(A.DRYK * GX.SYQZ), 0) DRYK,
               NVL(SUM(A.ZFZ * GX.SYQZ), 0) ZFZ,
               NVL(SUM(A.FLTZC * GX.SYQZ), 0) FLTZC,
               NVL(SUM(A.ZZC_RZRQ * GX.SYQZ), 0) ZZC_RZRQ,
               NVL(SUM(A.DBXJ_RZRQ * GX.SYQZ), 0) DBXJ_RZRQ,
               NVL(SUM(A.DBGPSZ_RZRQ * GX.SYQZ), 0) DBGPSZ_RZRQ,
               A.HLCS_HKD,
               A.HLCS_USD,
               NVL(SUM(A.ZFZ_RZRQ * GX.SYQZ), 0) ZFZ_RZRQ
          FROM DSC_STAT.T_STAT_KHZC_R A
          JOIN DSC_STAT.VW_KHGX_TJRQ GX ON GX.KHH = A.KHH
                                       AND GX.JZRQ > VN_TJRQ
         WHERE A.RQ = VN_TJRQ
         GROUP BY GX.RYXX_YYB, GX.RYXX, GX.GXLX, A.HLCS_HKD, A.HLCS_USD;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3.0 统计唯一关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_RY_ZC_R
        (RQ,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         ZZC,
         ZTZC,
         ZQZC,
         DYPSZ,
         ZZC_RMB,
         ZZC_HKD,
         ZZC_USD,
         QTZC_RMB,
         QTZC_HKD,
         QTZC_USD,
         ZJYE_RMB,
         ZJYE_HKD,
         ZJYE_USD,
         ZQSZ,
         ZQSZ_RMB,
         ZQSZ_HKD,
         ZQSZ_USD,
         ZQSZ_ZB,
         ZQSZ_HAZB,
         ZQSZ_SAZB,
         ZQSZ_ZXB,
         ZQSZ_CYB,
         ZQSZ_HB,
         ZQSZ_SB,
         ZQSZ_SB_A,
         ZQSZ_SB_B,
         ZQSZ_FBSJJ,
         ZQSZ_ETF,
         ZQSZ_LOF,
         ZQSZ_SZJJT,
         ZQSZ_DXJJ,
         ZQSZ_JRCP,
         ZQSZ_QZ,
         ZQSZ_GZ,
         ZQSZ_GSQYZ,
         ZQSZ_KZZ,
         ZQSZ_SG,
         ZQSZ_QT,
         SZXZJE,
         CRJE_RMB,
         CRJE_HKD,
         CRJE_USD,
         QCJE_RMB,
         QCJE_HKD,
         QCJE_USD,
         ZRZQSZ,
         ZD_RMB,
         ZD_USD,
         ZTGZR_RMB,
         ZTGZR_HKD,
         ZCZQSZ,
         CZD_RMB,
         CZD_USD,
         ZTGZC_RMB,
         ZTGZC_HKD,
         DRYK,
         ZFZ,
         FLTZC,
         ZZC_RZRQ,
         DBXJ_RZRQ,
         DBGPSZ_RZRQ,
         HLCS_HKD,
         HLCS_USD,
         ZFZ_RZRQ)
        SELECT VN_TJRQ,
               CON_ORG_LVL || '-' || GX.RYXX U_ID,
               GX.RYXX YS_ID,
               NVL(GX.RYXX_YYB, '-1') AS YYB, -- 这里-1(未知)表示RYXX表中找不到对应营业部
               0 GXLX,
               NVL(SUM(A.ZZC * GX.SYQZ), 0) ZZC,
               NVL(SUM(A.ZTZC * GX.SYQZ), 0) ZTZC,
               NVL(SUM(A.ZQZC * GX.SYQZ), 0) ZQZC,
               NVL(SUM(A.DYPSZ * GX.SYQZ), 0) DYPSZ,
               NVL(SUM(A.ZZC_RMB * GX.SYQZ), 0) ZZC_RMB,
               NVL(SUM(A.ZZC_HKD * GX.SYQZ), 0) ZZC_HKD,
               NVL(SUM(A.ZZC_USD * GX.SYQZ), 0) ZZC_USD,
               NVL(SUM(A.QTZC_RMB * GX.SYQZ), 0) QTZC_RMB,
               NVL(SUM(A.QTZC_HKD * GX.SYQZ), 0) QTZC_HKD,
               NVL(SUM(A.QTZC_USD * GX.SYQZ), 0) QTZC_USD,
               NVL(SUM(A.ZJYE_RMB * GX.SYQZ), 0) ZJYE_RMB,
               NVL(SUM(A.ZJYE_HKD * GX.SYQZ), 0) ZJYE_HKD,
               NVL(SUM(A.ZJYE_USD * GX.SYQZ), 0) ZJYE_USD,
               NVL(SUM(A.ZQSZ * GX.SYQZ), 0) ZQSZ,
               NVL(SUM(A.ZQSZ_RMB * GX.SYQZ), 0) ZQSZ_RMB,
               NVL(SUM(A.ZQSZ_HKD * GX.SYQZ), 0) ZQSZ_HKD,
               NVL(SUM(A.ZQSZ_USD * GX.SYQZ), 0) ZQSZ_USD,
               NVL(SUM(A.ZQSZ_ZB * GX.SYQZ), 0) ZQSZ_ZB,
               NVL(SUM(A.ZQSZ_HAZB * GX.SYQZ), 0) ZQSZ_HAZB,
               NVL(SUM(A.ZQSZ_SAZB * GX.SYQZ), 0) ZQSZ_SAZB,
               NVL(SUM(A.ZQSZ_ZXB * GX.SYQZ), 0) ZQSZ_ZXB,
               NVL(SUM(A.ZQSZ_CYB * GX.SYQZ), 0) ZQSZ_CYB,
               NVL(SUM(A.ZQSZ_HB * GX.SYQZ), 0) ZQSZ_HB,
               NVL(SUM(A.ZQSZ_SB * GX.SYQZ), 0) ZQSZ_SB,
               NVL(SUM(A.ZQSZ_SB_A * GX.SYQZ), 0) ZQSZ_SB_A,
               NVL(SUM(A.ZQSZ_SB_B * GX.SYQZ), 0) ZQSZ_SB_B,
               NVL(SUM(A.ZQSZ_FBSJJ * GX.SYQZ), 0) ZQSZ_FBSJJ,
               NVL(SUM(A.ZQSZ_ETF * GX.SYQZ), 0) ZQSZ_ETF,
               NVL(SUM(A.ZQSZ_LOF * GX.SYQZ), 0) ZQSZ_LOF,
               NVL(SUM(A.ZQSZ_SZJJT * GX.SYQZ), 0) ZQSZ_SZJJT,
               NVL(SUM(A.ZQSZ_DXJJ * GX.SYQZ), 0) ZQSZ_DXJJ,
               NVL(SUM(A.ZQSZ_JRCP * GX.SYQZ), 0) ZQSZ_JRCP,
               NVL(SUM(A.ZQSZ_QZ * GX.SYQZ), 0) ZQSZ_QZ,
               NVL(SUM(A.ZQSZ_GZ * GX.SYQZ), 0) ZQSZ_GZ,
               NVL(SUM(A.ZQSZ_GSQYZ * GX.SYQZ), 0) ZQSZ_GSQYZ,
               NVL(SUM(A.ZQSZ_KZZ * GX.SYQZ), 0) ZQSZ_KZZ,
               NVL(SUM(A.ZQSZ_SG * GX.SYQZ), 0) ZQSZ_SG,
               NVL(SUM(A.ZQSZ_QT * GX.SYQZ), 0) ZQSZ_QT,
               NVL(SUM(A.SZXZJE * GX.SYQZ), 0) SZXZJE,
               NVL(SUM(A.CRJE_RMB * GX.SYQZ), 0) CRJE_RMB,
               NVL(SUM(A.CRJE_HKD * GX.SYQZ), 0) CRJE_HKD,
               NVL(SUM(A.CRJE_USD * GX.SYQZ), 0) CRJE_USD,
               NVL(SUM(A.QCJE_RMB * GX.SYQZ), 0) QCJE_RMB,
               NVL(SUM(A.QCJE_HKD * GX.SYQZ), 0) QCJE_HKD,
               NVL(SUM(A.QCJE_USD * GX.SYQZ), 0) QCJE_USD,
               NVL(SUM(A.ZRZQSZ * GX.SYQZ), 0) ZRZQSZ,
               NVL(SUM(A.ZD_RMB * GX.SYQZ), 0) ZD_RMB,
               NVL(SUM(A.ZD_USD * GX.SYQZ), 0) ZD_USD,
               NVL(SUM(A.ZTGZR_RMB * GX.SYQZ), 0) ZTGZR_RMB,
               NVL(SUM(A.ZTGZR_HKD * GX.SYQZ), 0) ZTGZR_HKD,
               NVL(SUM(A.ZCZQSZ * GX.SYQZ), 0) ZCZQSZ,
               NVL(SUM(A.CZD_RMB * GX.SYQZ), 0) CZD_RMB,
               NVL(SUM(A.CZD_USD * GX.SYQZ), 0) CZD_USD,
               NVL(SUM(A.ZTGZC_RMB * GX.SYQZ), 0) ZTGZC_RMB,
               NVL(SUM(A.ZTGZC_HKD * GX.SYQZ), 0) ZTGZC_HKD,
               NVL(SUM(A.DRYK * GX.SYQZ), 0) DRYK,
               NVL(SUM(A.ZFZ * GX.SYQZ), 0) ZFZ,
               NVL(SUM(A.FLTZC * GX.SYQZ), 0) FLTZC,
               NVL(SUM(A.ZZC_RZRQ * GX.SYQZ), 0) ZZC_RZRQ,
               NVL(SUM(A.DBXJ_RZRQ * GX.SYQZ), 0) DBXJ_RZRQ,
               NVL(SUM(A.DBGPSZ_RZRQ * GX.SYQZ), 0) DBGPSZ_RZRQ,
               A.HLCS_HKD,
               A.HLCS_USD,
               NVL(SUM(A.ZFZ_RZRQ * GX.SYQZ), 0) ZFZ_RZRQ
          FROM DSC_STAT.T_STAT_KHZC_R A
          JOIN DSC_STAT.VW_KHGX_TJRQ_UNIQUE GX ON GX.KHH = A.KHH
                                              AND GX.JZRQ > VN_TJRQ
         WHERE A.RQ = VN_TJRQ
         GROUP BY GX.RYXX_YYB, GX.RYXX, A.HLCS_HKD, A.HLCS_USD;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_RY_ZC_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_RY_ZC_Y(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN NUMBER,
                                                    I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
      -- CREATED ON 2013/05/20 BY LUZHIFEI ,APEXSOFT
      -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_RY_ZC_Y
      功能简述：   在人员这个级别计算资产的信息（月）
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
           1)人员有关的统计表，其重点在于关系：dsc_stat.vw_khgx_all
           组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
           2) ry_zc统计，只会包含标准的，其他回购，融资融券等等，在专门的表实现。

      数据源：

      修改记录;
      -----------------------------------------------------------------------------------------------------------------------
      操作人   操作时间                          操作
      LZF      2013/05/20 09:56:00               新增
      LZF      2013/06/25 10:00:00               修改-统一是运用预先算好的数据vw_khgx_tjrq
      林伟     2013/08/29                        修改：增加YYB字段
      黄玉钰   2013/09/11                        修改：修改删除月分区
      刘官勤   2015/02/02                        修改：增加字段YMZFZ_RZRQ月末总负债_融资融券
      陈德铸   2015/06/07                        修改：YYB字段取自DSC_BAS.T_RYXX中的ORGID字段
      洪国力   2015/12/24                        修改：新增字段YMZZC_RZRQ（月末总资产_融资融券）、
                                                       YMDBXJ_RZRQ（月末担保现金_融资融券）、
                                                       YMDBGPSZ_RZRQ（月末担保股票市值_融资融券）
      洪国力   2016/01/19                        修改：峰值取客户月最高资产错误，应从日表取数
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '06';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_FIRST_DAY NUMBER(8); --月初
    VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6);
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_RY_ZC_Y';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --月初
    VN_FIRST_DAY := PUB_SYS.F_GET_DATE(VN_TJRQ, 0);

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME ||
                                                        ']目标分区：=PY_' || VN_TJYF || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        --分区删除
        EXECUTE IMMEDIATE 'ALTER TABLE ' || VS_TABNAME || ' TRUNCATE PARTITION PY_' ||
                          VN_TJYF || '  UPDATE GLOBAL INDEXES';

        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME ||
                                                        ']目标分区：=PY_' || VN_TJYF || '的数据！',
                                  I_S_CHANGEDESC     => '[' || VS_TABNAME || ']表' ||
                                                        VN_TJYF || '分区已删除！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --2.0 统计分组关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_RY_ZC_Y
        (YF,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         YCZZC,
         YCZZC_RMB,
         YCZZC_HKD,
         YCZZC_USD,
         YMZZC,
         YMZZC_RMB,
         YMZZC_HKD,
         YMZZC_USD,
         YMQTZC_RMB,
         YMQTZC_HKD,
         YMQTZC_USD,
         YMZJYE_RMB,
         YMZJYE_HKD,
         YMZJYE_USD,
         YMZQSZ,
         YMZQSZ_RMB,
         YMZQSZ_HKD,
         YMZQSZ_USD,
         YMZQSZ_ZB,
         YMZQSZ_HAZB,
         YMZQSZ_SAZB,
         YMZQSZ_ZXB,
         YMZQSZ_CYB,
         YMZQSZ_HB,
         YMZQSZ_SB,
         YMZQSZ_SB_A,
         YMZQSZ_SB_B,
         YMZQSZ_FBSJJ,
         YMZQSZ_ETF,
         YMZQSZ_LOF,
         YMZQSZ_SZJJT,
         YMZQSZ_DXJJ,
         YMZQSZ_JRCP,
         YMZQSZ_QZ,
         YMZQSZ_GZ,
         YMZQSZ_GSZ,
         YMZQSZ_KZZ,
         YMZQSZ_SG,
         YMZQSZ_QT,
         RJZZC,
         RJZC_RMB,
         RJZC_HKD,
         RJZC_USD,
         RJZQSZ,
         RJZQSZ_RMB,
         RJZQSZ_HKD,
         RJZQSZ_USD,
         RJZQSZ_ZB,
         RJZQSZ_HAZB,
         RJZQSZ_SAZB,
         RJZQSZ_ZXB,
         RJZQSZ_CYB,
         RJZQSZ_HB,
         RJZQSZ_SB,
         RJZQSZ_SB_A,
         RJZQSZ_SB_B,
         RJZQSZ_FBSJJ,
         RJZQSZ_ETF,
         RJZQSZ_LOF,
         RJZQSZ_SZJJT,
         RJZQSZ_DXJJ,
         RJZQSZ_JRCP,
         RJZQSZ_QZ,
         RJZQSZ_GZ,
         RJZQSZ_GSQYZ,
         RJZQSZ_KZZ,
         RJZQSZ_SG,
         RJZQSZ_QT,
         CRJE,
         CRJE_RMB,
         CRJE_USD,
         CRJE_HKD,
         QCJE,
         QCJE_RMB,
         QCJE_USD,
         QCJE_HKD,
         ZRZQSZ,
         ZD_RMB,
         ZD_USD,
         ZTGZR_RMB,
         ZTGZR_HKD,
         ZCZQSZ,
         CZD_RMB,
         CZD_USD,
         ZTGZC_RMB,
         ZTGZC_HKD,
         DYYK,
         FZZZC_30,
         BGZZC_30,
         LXJS,
         LCSR,
         RJZFZ,
         RJZZC_RZRQ,
         RJDBXJ_RZRQ,
         RJDBGPSZ_RZRQ,
         FLTZC,
         ZTZC,
         ZQZC,
         DYPSZ,
         SZXZJE,
         ZFZ,
         HLCS_HKD,
         HLCS_USD,
         YMZFZ_RZRQ,
         YMZZC_RZRQ,
         YMDBXJ_RZRQ,
         YMDBGPSZ_RZRQ)
        SELECT B.YF,
               B.U_ID,
               B.YS_ID,
               B.YYB,
               B.GXLX,
               B.YCZZC,
               B.YCZZC_RMB,
               B.YCZZC_HKD,
               B.YCZZC_USD,
               B.YMZZC,
               B.YMZZC_RMB,
               B.YMZZC_HKD,
               B.YMZZC_USD,
               B.YMQTZC_RMB,
               B.YMQTZC_HKD,
               B.YMQTZC_USD,
               B.YMZJYE_RMB,
               B.YMZJYE_HKD,
               B.YMZJYE_USD,
               B.YMZQSZ,
               B.YMZQSZ_RMB,
               B.YMZQSZ_HKD,
               B.YMZQSZ_USD,
               B.YMZQSZ_ZB,
               B.YMZQSZ_HAZB,
               B.YMZQSZ_SAZB,
               B.YMZQSZ_ZXB,
               B.YMZQSZ_CYB,
               B.YMZQSZ_HB,
               B.YMZQSZ_SB,
               B.YMZQSZ_SB_A,
               B.YMZQSZ_SB_B,
               B.YMZQSZ_FBSJJ,
               B.YMZQSZ_ETF,
               B.YMZQSZ_LOF,
               B.YMZQSZ_SZJJT,
               B.YMZQSZ_DXJJ,
               B.YMZQSZ_JRCP,
               B.YMZQSZ_QZ,
               B.YMZQSZ_GZ,
               B.YMZQSZ_GSZ,
               B.YMZQSZ_KZZ,
               B.YMZQSZ_SG,
               B.YMZQSZ_QT,
               B.RJZZC,
               B.RJZC_RMB,
               B.RJZC_HKD,
               B.RJZC_USD,
               B.RJZQSZ,
               B.RJZQSZ_RMB,
               B.RJZQSZ_HKD,
               B.RJZQSZ_USD,
               B.RJZQSZ_ZB,
               B.RJZQSZ_HAZB,
               B.RJZQSZ_SAZB,
               B.RJZQSZ_ZXB,
               B.RJZQSZ_CYB,
               B.RJZQSZ_HB,
               B.RJZQSZ_SB,
               B.RJZQSZ_SB_A,
               B.RJZQSZ_SB_B,
               B.RJZQSZ_FBSJJ,
               B.RJZQSZ_ETF,
               B.RJZQSZ_LOF,
               B.RJZQSZ_SZJJT,
               B.RJZQSZ_DXJJ,
               B.RJZQSZ_JRCP,
               B.RJZQSZ_QZ,
               B.RJZQSZ_GZ,
               B.RJZQSZ_GSQYZ,
               B.RJZQSZ_KZZ,
               B.RJZQSZ_SG,
               B.RJZQSZ_QT,
               B.CRJE,
               B.CRJE_RMB,
               B.CRJE_USD,
               B.CRJE_HKD,
               B.QCJE,
               B.QCJE_RMB,
               B.QCJE_USD,
               B.QCJE_HKD,
               B.ZRZQSZ,
               B.ZD_RMB,
               B.ZD_USD,
               B.ZTGZR_RMB,
               B.ZTGZR_HKD,
               B.ZCZQSZ,
               B.CZD_RMB,
               B.CZD_USD,
               B.ZTGZC_RMB,
               B.ZTGZC_HKD,
               B.DYYK,
               NVL(C.FZ_ZZC, 0) AS FZZZC,
               NVL(C.BG_ZZC, 0) AS BGZZC,
               B.LXJS,
               B.LCSR,
               B.RJZFZ,
               B.RJZZC_RZRQ,
               B.RJDBXJ_RZRQ,
               B.RJDBGPSZ_RZRQ,
               B.FLTZC,
               B.ZTZC,
               B.ZQZC,
               B.DYPSZ,
               B.SZXZJE,
               B.ZFZ,
               B.HLCS_HKD,
               B.HLCS_USD,
               B.YMZFZ_RZRQ,
               B.YMZZC_RZRQ,
               B.YMDBXJ_RZRQ,
               B.YMDBGPSZ_RZRQ
          FROM (SELECT /*+ NO_USE_HASH_AGGREGATION */
                 VN_TJYF AS YF,
                 CON_ORG_LVL || '-' || GX.RYXX U_ID,
                 GX.RYXX YS_ID,
                 NVL(GX.RYXX_YYB, '-1') AS YYB, -- 这里-1(未知)表示RYXX表中找不到对应营业部
                 GX.GXLX,
                 NVL(SUM(A.YCZZC * GX.SYQZ), 0) YCZZC,
                 NVL(SUM(A.YCZZC_RMB * GX.SYQZ), 0) YCZZC_RMB,
                 NVL(SUM(A.YCZZC_HKD * GX.SYQZ), 0) YCZZC_HKD,
                 NVL(SUM(A.YCZZC_USD * GX.SYQZ), 0) YCZZC_USD,
                 NVL(SUM(A.YMZZC * GX.SYQZ), 0) YMZZC,
                 NVL(SUM(A.YMZZC_RMB * GX.SYQZ), 0) YMZZC_RMB,
                 NVL(SUM(A.YMZZC_HKD * GX.SYQZ), 0) YMZZC_HKD,
                 NVL(SUM(A.YMZZC_USD * GX.SYQZ), 0) YMZZC_USD,
                 NVL(SUM(A.YMQTZC_RMB * GX.SYQZ), 0) YMQTZC_RMB,
                 NVL(SUM(A.YMQTZC_HKD * GX.SYQZ), 0) YMQTZC_HKD,
                 NVL(SUM(A.YMQTZC_USD * GX.SYQZ), 0) YMQTZC_USD,
                 NVL(SUM(A.YMZJYE_RMB * GX.SYQZ), 0) YMZJYE_RMB,
                 NVL(SUM(A.YMZJYE_HKD * GX.SYQZ), 0) YMZJYE_HKD,
                 NVL(SUM(A.YMZJYE_USD * GX.SYQZ), 0) YMZJYE_USD,
                 NVL(SUM(A.YMZQSZ * GX.SYQZ), 0) YMZQSZ,
                 NVL(SUM(A.YMZQSZ_RMB * GX.SYQZ), 0) YMZQSZ_RMB,
                 NVL(SUM(A.YMZQSZ_HKD * GX.SYQZ), 0) YMZQSZ_HKD,
                 NVL(SUM(A.YMZQSZ_USD * GX.SYQZ), 0) YMZQSZ_USD,
                 NVL(SUM(A.YMZQSZ_ZB * GX.SYQZ), 0) YMZQSZ_ZB,
                 NVL(SUM(A.YMZQSZ_HAZB * GX.SYQZ), 0) YMZQSZ_HAZB,
                 NVL(SUM(A.YMZQSZ_SAZB * GX.SYQZ), 0) YMZQSZ_SAZB,
                 NVL(SUM(A.YMZQSZ_ZXB * GX.SYQZ), 0) YMZQSZ_ZXB,
                 NVL(SUM(A.YMZQSZ_CYB * GX.SYQZ), 0) YMZQSZ_CYB,
                 NVL(SUM(A.YMZQSZ_HB * GX.SYQZ), 0) YMZQSZ_HB,
                 NVL(SUM(A.YMZQSZ_SB * GX.SYQZ), 0) YMZQSZ_SB,
                 NVL(SUM(A.YMZQSZ_SB_A * GX.SYQZ), 0) YMZQSZ_SB_A,
                 NVL(SUM(A.YMZQSZ_SB_B * GX.SYQZ), 0) YMZQSZ_SB_B,
                 NVL(SUM(A.YMZQSZ_FBSJJ * GX.SYQZ), 0) YMZQSZ_FBSJJ,
                 NVL(SUM(A.YMZQSZ_ETF * GX.SYQZ), 0) YMZQSZ_ETF,
                 NVL(SUM(A.YMZQSZ_LOF * GX.SYQZ), 0) YMZQSZ_LOF,
                 NVL(SUM(A.YMZQSZ_SZJJT * GX.SYQZ), 0) YMZQSZ_SZJJT,
                 NVL(SUM(A.YMZQSZ_DXJJ * GX.SYQZ), 0) YMZQSZ_DXJJ,
                 NVL(SUM(A.YMZQSZ_JRCP * GX.SYQZ), 0) YMZQSZ_JRCP,
                 NVL(SUM(A.YMZQSZ_QZ * GX.SYQZ), 0) YMZQSZ_QZ,
                 NVL(SUM(A.YMZQSZ_GZ * GX.SYQZ), 0) YMZQSZ_GZ,
                 NVL(SUM(A.YMZQSZ_GSZ * GX.SYQZ), 0) YMZQSZ_GSZ,
                 NVL(SUM(A.YMZQSZ_KZZ * GX.SYQZ), 0) YMZQSZ_KZZ,
                 NVL(SUM(A.YMZQSZ_SG * GX.SYQZ), 0) YMZQSZ_SG,
                 NVL(SUM(A.YMZQSZ_QT * GX.SYQZ), 0) YMZQSZ_QT,
                 NVL(SUM(A.RJZZC * GX.SYQZ), 0) RJZZC,
                 NVL(SUM(A.RJZC_RMB * GX.SYQZ), 0) RJZC_RMB,
                 NVL(SUM(A.RJZC_HKD * GX.SYQZ), 0) RJZC_HKD,
                 NVL(SUM(A.RJZC_USD * GX.SYQZ), 0) RJZC_USD,
                 NVL(SUM(A.RJZQSZ * GX.SYQZ), 0) RJZQSZ,
                 NVL(SUM(A.RJZQSZ_RMB * GX.SYQZ), 0) RJZQSZ_RMB,
                 NVL(SUM(A.RJZQSZ_HKD * GX.SYQZ), 0) RJZQSZ_HKD,
                 NVL(SUM(A.RJZQSZ_USD * GX.SYQZ), 0) RJZQSZ_USD,
                 NVL(SUM(A.RJZQSZ_ZB * GX.SYQZ), 0) RJZQSZ_ZB,
                 NVL(SUM(A.RJZQSZ_HAZB * GX.SYQZ), 0) RJZQSZ_HAZB,
                 NVL(SUM(A.RJZQSZ_SAZB * GX.SYQZ), 0) RJZQSZ_SAZB,
                 NVL(SUM(A.RJZQSZ_ZXB * GX.SYQZ), 0) RJZQSZ_ZXB,
                 NVL(SUM(A.RJZQSZ_CYB * GX.SYQZ), 0) RJZQSZ_CYB,
                 NVL(SUM(A.RJZQSZ_HB * GX.SYQZ), 0) RJZQSZ_HB,
                 NVL(SUM(A.RJZQSZ_SB * GX.SYQZ), 0) RJZQSZ_SB,
                 NVL(SUM(A.RJZQSZ_SB_A * GX.SYQZ), 0) RJZQSZ_SB_A,
                 NVL(SUM(A.RJZQSZ_SB_B * GX.SYQZ), 0) RJZQSZ_SB_B,
                 NVL(SUM(A.RJZQSZ_FBSJJ * GX.SYQZ), 0) RJZQSZ_FBSJJ,
                 NVL(SUM(A.RJZQSZ_ETF * GX.SYQZ), 0) RJZQSZ_ETF,
                 NVL(SUM(A.RJZQSZ_LOF * GX.SYQZ), 0) RJZQSZ_LOF,
                 NVL(SUM(A.RJZQSZ_SZJJT * GX.SYQZ), 0) RJZQSZ_SZJJT,
                 NVL(SUM(A.RJZQSZ_DXJJ * GX.SYQZ), 0) RJZQSZ_DXJJ,
                 NVL(SUM(A.RJZQSZ_JRCP * GX.SYQZ), 0) RJZQSZ_JRCP,
                 NVL(SUM(A.RJZQSZ_QZ * GX.SYQZ), 0) RJZQSZ_QZ,
                 NVL(SUM(A.RJZQSZ_GZ * GX.SYQZ), 0) RJZQSZ_GZ,
                 NVL(SUM(A.RJZQSZ_GSQYZ * GX.SYQZ), 0) RJZQSZ_GSQYZ,
                 NVL(SUM(A.RJZQSZ_KZZ * GX.SYQZ), 0) RJZQSZ_KZZ,
                 NVL(SUM(A.RJZQSZ_SG * GX.SYQZ), 0) RJZQSZ_SG,
                 NVL(SUM(A.RJZQSZ_QT * GX.SYQZ), 0) RJZQSZ_QT,
                 NVL(SUM(A.CRJE * GX.SYQZ), 0) CRJE,
                 NVL(SUM(A.CRJE_RMB * GX.SYQZ), 0) CRJE_RMB,
                 NVL(SUM(A.CRJE_USD * GX.SYQZ), 0) CRJE_USD,
                 NVL(SUM(A.CRJE_HKD * GX.SYQZ), 0) CRJE_HKD,
                 NVL(SUM(A.QCJE * GX.SYQZ), 0) QCJE,
                 NVL(SUM(A.QCJE_RMB * GX.SYQZ), 0) QCJE_RMB,
                 NVL(SUM(A.QCJE_USD * GX.SYQZ), 0) QCJE_USD,
                 NVL(SUM(A.QCJE_HKD * GX.SYQZ), 0) QCJE_HKD,
                 NVL(SUM(A.ZRZQSZ * GX.SYQZ), 0) ZRZQSZ,
                 NVL(SUM(A.ZD_RMB * GX.SYQZ), 0) ZD_RMB,
                 NVL(SUM(A.ZD_USD * GX.SYQZ), 0) ZD_USD,
                 NVL(SUM(A.ZTGZR_RMB * GX.SYQZ), 0) ZTGZR_RMB,
                 NVL(SUM(A.ZTGZR_HKD * GX.SYQZ), 0) ZTGZR_HKD,
                 NVL(SUM(A.ZCZQSZ * GX.SYQZ), 0) ZCZQSZ,
                 NVL(SUM(A.CZD_RMB * GX.SYQZ), 0) CZD_RMB,
                 NVL(SUM(A.CZD_USD * GX.SYQZ), 0) CZD_USD,
                 NVL(SUM(A.ZTGZC_RMB * GX.SYQZ), 0) ZTGZC_RMB,
                 NVL(SUM(A.ZTGZC_HKD * GX.SYQZ), 0) ZTGZC_HKD,
                 NVL(SUM(A.DYYK * GX.SYQZ), 0) DYYK,
                 NVL(SUM(A.FZZZC_30 * GX.SYQZ), 0) FZZZC_30,
                 NVL(SUM(A.BGZZC_30 * GX.SYQZ), 0) BGZZC_30,
                 NVL(SUM(A.LXJS * GX.SYQZ), 0) LXJS,
                 NVL(SUM(A.LCSR * GX.SYQZ), 0) LCSR,
                 NVL(SUM(A.RJZFZ * GX.SYQZ), 0) RJZFZ,
                 NVL(SUM(A.RJZZC_RZRQ * GX.SYQZ), 0) RJZZC_RZRQ,
                 NVL(SUM(A.RJDBXJ_RZRQ * GX.SYQZ), 0) RJDBXJ_RZRQ,
                 NVL(SUM(A.RJDBGPSZ_RZRQ * GX.SYQZ), 0) RJDBGPSZ_RZRQ,
                 NVL(SUM(A.FLTZC * GX.SYQZ), 0) FLTZC,
                 NVL(SUM(A.ZTZC * GX.SYQZ), 0) ZTZC,
                 NVL(SUM(A.ZQZC * GX.SYQZ), 0) ZQZC,
                 NVL(SUM(A.DYPSZ * GX.SYQZ), 0) DYPSZ,
                 NVL(SUM(A.SZXZJE * GX.SYQZ), 0) SZXZJE,
                 NVL(SUM(A.ZFZ * GX.SYQZ), 0) ZFZ,
                 A.HLCS_HKD,
                 A.HLCS_USD,
                 NVL(SUM(A.YMZFZ_RZRQ * GX.SYQZ), 0) YMZFZ_RZRQ,
                 NVL(SUM(A.YMZZC_RZRQ * GX.SYQZ), 0) YMZZC_RZRQ,
                 NVL(SUM(A.YMDBXJ_RZRQ * GX.SYQZ), 0) YMDBXJ_RZRQ,
                 NVL(SUM(A.YMDBGPSZ_RZRQ * GX.SYQZ), 0) YMDBGPSZ_RZRQ
                  FROM DSC_STAT.T_STAT_KHZC_Y A
                  JOIN DSC_STAT.VW_KHGX_TJRQ GX
                    ON GX.KHH = A.KHH
                   AND GX.JZRQ > VN_TJRQ
                 WHERE A.YF = VN_TJYF
                 GROUP BY GX.RYXX_YYB, GX.RYXX, GX.GXLX, A.HLCS_HKD, A.HLCS_USD) B
         INNER JOIN (SELECT RYXX, MAX(ZZC) FZ_ZZC, MIN(ZZC) BG_ZZC
                       FROM (SELECT A.RQ, GX.RYXX, SUM(A.ZZC * GX.SYQZ) AS ZZC
                               FROM DSC_STAT.T_STAT_KHZC_R A
                              INNER JOIN DSC_STAT.VW_KHGX_TJRQ GX
                                 ON GX.KHH = A.KHH
                                AND GX.JZRQ > VN_TJRQ
                              WHERE A.RQ < = VN_TJRQ
                                AND A.RQ > = VN_FIRST_DAY
                              GROUP BY A.RQ, GX.RYXX)
                      GROUP BY RYXX) C
            ON B.YS_ID = C.RYXX;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3.0 统计唯一关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_RY_ZC_Y
        (YF,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         YCZZC,
         YCZZC_RMB,
         YCZZC_HKD,
         YCZZC_USD,
         YMZZC,
         YMZZC_RMB,
         YMZZC_HKD,
         YMZZC_USD,
         YMQTZC_RMB,
         YMQTZC_HKD,
         YMQTZC_USD,
         YMZJYE_RMB,
         YMZJYE_HKD,
         YMZJYE_USD,
         YMZQSZ,
         YMZQSZ_RMB,
         YMZQSZ_HKD,
         YMZQSZ_USD,
         YMZQSZ_ZB,
         YMZQSZ_HAZB,
         YMZQSZ_SAZB,
         YMZQSZ_ZXB,
         YMZQSZ_CYB,
         YMZQSZ_HB,
         YMZQSZ_SB,
         YMZQSZ_SB_A,
         YMZQSZ_SB_B,
         YMZQSZ_FBSJJ,
         YMZQSZ_ETF,
         YMZQSZ_LOF,
         YMZQSZ_SZJJT,
         YMZQSZ_DXJJ,
         YMZQSZ_JRCP,
         YMZQSZ_QZ,
         YMZQSZ_GZ,
         YMZQSZ_GSZ,
         YMZQSZ_KZZ,
         YMZQSZ_SG,
         YMZQSZ_QT,
         RJZZC,
         RJZC_RMB,
         RJZC_HKD,
         RJZC_USD,
         RJZQSZ,
         RJZQSZ_RMB,
         RJZQSZ_HKD,
         RJZQSZ_USD,
         RJZQSZ_ZB,
         RJZQSZ_HAZB,
         RJZQSZ_SAZB,
         RJZQSZ_ZXB,
         RJZQSZ_CYB,
         RJZQSZ_HB,
         RJZQSZ_SB,
         RJZQSZ_SB_A,
         RJZQSZ_SB_B,
         RJZQSZ_FBSJJ,
         RJZQSZ_ETF,
         RJZQSZ_LOF,
         RJZQSZ_SZJJT,
         RJZQSZ_DXJJ,
         RJZQSZ_JRCP,
         RJZQSZ_QZ,
         RJZQSZ_GZ,
         RJZQSZ_GSQYZ,
         RJZQSZ_KZZ,
         RJZQSZ_SG,
         RJZQSZ_QT,
         CRJE,
         CRJE_RMB,
         CRJE_USD,
         CRJE_HKD,
         QCJE,
         QCJE_RMB,
         QCJE_USD,
         QCJE_HKD,
         ZRZQSZ,
         ZD_RMB,
         ZD_USD,
         ZTGZR_RMB,
         ZTGZR_HKD,
         ZCZQSZ,
         CZD_RMB,
         CZD_USD,
         ZTGZC_RMB,
         ZTGZC_HKD,
         DYYK,
         FZZZC_30,
         BGZZC_30,
         LXJS,
         LCSR,
         RJZFZ,
         RJZZC_RZRQ,
         RJDBXJ_RZRQ,
         RJDBGPSZ_RZRQ,
         FLTZC,
         ZTZC,
         ZQZC,
         DYPSZ,
         SZXZJE,
         ZFZ,
         HLCS_HKD,
         HLCS_USD,
         YMZFZ_RZRQ,
         YMZZC_RZRQ,
         YMDBXJ_RZRQ,
         YMDBGPSZ_RZRQ)
        SELECT B.YF,
               B.U_ID,
               B.YS_ID,
               B.YYB,
               B.GXLX,
               B.YCZZC,
               B.YCZZC_RMB,
               B.YCZZC_HKD,
               B.YCZZC_USD,
               B.YMZZC,
               B.YMZZC_RMB,
               B.YMZZC_HKD,
               B.YMZZC_USD,
               B.YMQTZC_RMB,
               B.YMQTZC_HKD,
               B.YMQTZC_USD,
               B.YMZJYE_RMB,
               B.YMZJYE_HKD,
               B.YMZJYE_USD,
               B.YMZQSZ,
               B.YMZQSZ_RMB,
               B.YMZQSZ_HKD,
               B.YMZQSZ_USD,
               B.YMZQSZ_ZB,
               B.YMZQSZ_HAZB,
               B.YMZQSZ_SAZB,
               B.YMZQSZ_ZXB,
               B.YMZQSZ_CYB,
               B.YMZQSZ_HB,
               B.YMZQSZ_SB,
               B.YMZQSZ_SB_A,
               B.YMZQSZ_SB_B,
               B.YMZQSZ_FBSJJ,
               B.YMZQSZ_ETF,
               B.YMZQSZ_LOF,
               B.YMZQSZ_SZJJT,
               B.YMZQSZ_DXJJ,
               B.YMZQSZ_JRCP,
               B.YMZQSZ_QZ,
               B.YMZQSZ_GZ,
               B.YMZQSZ_GSZ,
               B.YMZQSZ_KZZ,
               B.YMZQSZ_SG,
               B.YMZQSZ_QT,
               B.RJZZC,
               B.RJZC_RMB,
               B.RJZC_HKD,
               B.RJZC_USD,
               B.RJZQSZ,
               B.RJZQSZ_RMB,
               B.RJZQSZ_HKD,
               B.RJZQSZ_USD,
               B.RJZQSZ_ZB,
               B.RJZQSZ_HAZB,
               B.RJZQSZ_SAZB,
               B.RJZQSZ_ZXB,
               B.RJZQSZ_CYB,
               B.RJZQSZ_HB,
               B.RJZQSZ_SB,
               B.RJZQSZ_SB_A,
               B.RJZQSZ_SB_B,
               B.RJZQSZ_FBSJJ,
               B.RJZQSZ_ETF,
               B.RJZQSZ_LOF,
               B.RJZQSZ_SZJJT,
               B.RJZQSZ_DXJJ,
               B.RJZQSZ_JRCP,
               B.RJZQSZ_QZ,
               B.RJZQSZ_GZ,
               B.RJZQSZ_GSQYZ,
               B.RJZQSZ_KZZ,
               B.RJZQSZ_SG,
               B.RJZQSZ_QT,
               B.CRJE,
               B.CRJE_RMB,
               B.CRJE_USD,
               B.CRJE_HKD,
               B.QCJE,
               B.QCJE_RMB,
               B.QCJE_USD,
               B.QCJE_HKD,
               B.ZRZQSZ,
               B.ZD_RMB,
               B.ZD_USD,
               B.ZTGZR_RMB,
               B.ZTGZR_HKD,
               B.ZCZQSZ,
               B.CZD_RMB,
               B.CZD_USD,
               B.ZTGZC_RMB,
               B.ZTGZC_HKD,
               B.DYYK,
               NVL(C.FZ_ZZC, 0) AS FZZZC,
               NVL(C.BG_ZZC, 0) AS BGZZC,
               B.LXJS,
               B.LCSR,
               B.RJZFZ,
               B.RJZZC_RZRQ,
               B.RJDBXJ_RZRQ,
               B.RJDBGPSZ_RZRQ,
               B.FLTZC,
               B.ZTZC,
               B.ZQZC,
               B.DYPSZ,
               B.SZXZJE,
               B.ZFZ,
               B.HLCS_HKD,
               B.HLCS_USD,
               B.YMZFZ_RZRQ,
               B.YMZZC_RZRQ,
               B.YMDBXJ_RZRQ,
               B.YMDBGPSZ_RZRQ
          FROM (SELECT /*+ NO_USE_HASH_AGGREGATION */
                 VN_TJYF AS YF,
                 CON_ORG_LVL || '-' || GX.RYXX U_ID,
                 GX.RYXX YS_ID,
                 GX.RYXX_YYB AS YYB, -- 这里-1(未知)表示RYXX表中找不到对应营业部
                 0 GXLX,
                 NVL(SUM(A.YCZZC * GX.SYQZ), 0) YCZZC,
                 NVL(SUM(A.YCZZC_RMB * GX.SYQZ), 0) YCZZC_RMB,
                 NVL(SUM(A.YCZZC_HKD * GX.SYQZ), 0) YCZZC_HKD,
                 NVL(SUM(A.YCZZC_USD * GX.SYQZ), 0) YCZZC_USD,
                 NVL(SUM(A.YMZZC * GX.SYQZ), 0) YMZZC,
                 NVL(SUM(A.YMZZC_RMB * GX.SYQZ), 0) YMZZC_RMB,
                 NVL(SUM(A.YMZZC_HKD * GX.SYQZ), 0) YMZZC_HKD,
                 NVL(SUM(A.YMZZC_USD * GX.SYQZ), 0) YMZZC_USD,
                 NVL(SUM(A.YMQTZC_RMB * GX.SYQZ), 0) YMQTZC_RMB,
                 NVL(SUM(A.YMQTZC_HKD * GX.SYQZ), 0) YMQTZC_HKD,
                 NVL(SUM(A.YMQTZC_USD * GX.SYQZ), 0) YMQTZC_USD,
                 NVL(SUM(A.YMZJYE_RMB * GX.SYQZ), 0) YMZJYE_RMB,
                 NVL(SUM(A.YMZJYE_HKD * GX.SYQZ), 0) YMZJYE_HKD,
                 NVL(SUM(A.YMZJYE_USD * GX.SYQZ), 0) YMZJYE_USD,
                 NVL(SUM(A.YMZQSZ * GX.SYQZ), 0) YMZQSZ,
                 NVL(SUM(A.YMZQSZ_RMB * GX.SYQZ), 0) YMZQSZ_RMB,
                 NVL(SUM(A.YMZQSZ_HKD * GX.SYQZ), 0) YMZQSZ_HKD,
                 NVL(SUM(A.YMZQSZ_USD * GX.SYQZ), 0) YMZQSZ_USD,
                 NVL(SUM(A.YMZQSZ_ZB * GX.SYQZ), 0) YMZQSZ_ZB,
                 NVL(SUM(A.YMZQSZ_HAZB * GX.SYQZ), 0) YMZQSZ_HAZB,
                 NVL(SUM(A.YMZQSZ_SAZB * GX.SYQZ), 0) YMZQSZ_SAZB,
                 NVL(SUM(A.YMZQSZ_ZXB * GX.SYQZ), 0) YMZQSZ_ZXB,
                 NVL(SUM(A.YMZQSZ_CYB * GX.SYQZ), 0) YMZQSZ_CYB,
                 NVL(SUM(A.YMZQSZ_HB * GX.SYQZ), 0) YMZQSZ_HB,
                 NVL(SUM(A.YMZQSZ_SB * GX.SYQZ), 0) YMZQSZ_SB,
                 NVL(SUM(A.YMZQSZ_SB_A * GX.SYQZ), 0) YMZQSZ_SB_A,
                 NVL(SUM(A.YMZQSZ_SB_B * GX.SYQZ), 0) YMZQSZ_SB_B,
                 NVL(SUM(A.YMZQSZ_FBSJJ * GX.SYQZ), 0) YMZQSZ_FBSJJ,
                 NVL(SUM(A.YMZQSZ_ETF * GX.SYQZ), 0) YMZQSZ_ETF,
                 NVL(SUM(A.YMZQSZ_LOF * GX.SYQZ), 0) YMZQSZ_LOF,
                 NVL(SUM(A.YMZQSZ_SZJJT * GX.SYQZ), 0) YMZQSZ_SZJJT,
                 NVL(SUM(A.YMZQSZ_DXJJ * GX.SYQZ), 0) YMZQSZ_DXJJ,
                 NVL(SUM(A.YMZQSZ_JRCP * GX.SYQZ), 0) YMZQSZ_JRCP,
                 NVL(SUM(A.YMZQSZ_QZ * GX.SYQZ), 0) YMZQSZ_QZ,
                 NVL(SUM(A.YMZQSZ_GZ * GX.SYQZ), 0) YMZQSZ_GZ,
                 NVL(SUM(A.YMZQSZ_GSZ * GX.SYQZ), 0) YMZQSZ_GSZ,
                 NVL(SUM(A.YMZQSZ_KZZ * GX.SYQZ), 0) YMZQSZ_KZZ,
                 NVL(SUM(A.YMZQSZ_SG * GX.SYQZ), 0) YMZQSZ_SG,
                 NVL(SUM(A.YMZQSZ_QT * GX.SYQZ), 0) YMZQSZ_QT,
                 NVL(SUM(A.RJZZC * GX.SYQZ), 0) RJZZC,
                 NVL(SUM(A.RJZC_RMB * GX.SYQZ), 0) RJZC_RMB,
                 NVL(SUM(A.RJZC_HKD * GX.SYQZ), 0) RJZC_HKD,
                 NVL(SUM(A.RJZC_USD * GX.SYQZ), 0) RJZC_USD,
                 NVL(SUM(A.RJZQSZ * GX.SYQZ), 0) RJZQSZ,
                 NVL(SUM(A.RJZQSZ_RMB * GX.SYQZ), 0) RJZQSZ_RMB,
                 NVL(SUM(A.RJZQSZ_HKD * GX.SYQZ), 0) RJZQSZ_HKD,
                 NVL(SUM(A.RJZQSZ_USD * GX.SYQZ), 0) RJZQSZ_USD,
                 NVL(SUM(A.RJZQSZ_ZB * GX.SYQZ), 0) RJZQSZ_ZB,
                 NVL(SUM(A.RJZQSZ_HAZB * GX.SYQZ), 0) RJZQSZ_HAZB,
                 NVL(SUM(A.RJZQSZ_SAZB * GX.SYQZ), 0) RJZQSZ_SAZB,
                 NVL(SUM(A.RJZQSZ_ZXB * GX.SYQZ), 0) RJZQSZ_ZXB,
                 NVL(SUM(A.RJZQSZ_CYB * GX.SYQZ), 0) RJZQSZ_CYB,
                 NVL(SUM(A.RJZQSZ_HB * GX.SYQZ), 0) RJZQSZ_HB,
                 NVL(SUM(A.RJZQSZ_SB * GX.SYQZ), 0) RJZQSZ_SB,
                 NVL(SUM(A.RJZQSZ_SB_A * GX.SYQZ), 0) RJZQSZ_SB_A,
                 NVL(SUM(A.RJZQSZ_SB_B * GX.SYQZ), 0) RJZQSZ_SB_B,
                 NVL(SUM(A.RJZQSZ_FBSJJ * GX.SYQZ), 0) RJZQSZ_FBSJJ,
                 NVL(SUM(A.RJZQSZ_ETF * GX.SYQZ), 0) RJZQSZ_ETF,
                 NVL(SUM(A.RJZQSZ_LOF * GX.SYQZ), 0) RJZQSZ_LOF,
                 NVL(SUM(A.RJZQSZ_SZJJT * GX.SYQZ), 0) RJZQSZ_SZJJT,
                 NVL(SUM(A.RJZQSZ_DXJJ * GX.SYQZ), 0) RJZQSZ_DXJJ,
                 NVL(SUM(A.RJZQSZ_JRCP * GX.SYQZ), 0) RJZQSZ_JRCP,
                 NVL(SUM(A.RJZQSZ_QZ * GX.SYQZ), 0) RJZQSZ_QZ,
                 NVL(SUM(A.RJZQSZ_GZ * GX.SYQZ), 0) RJZQSZ_GZ,
                 NVL(SUM(A.RJZQSZ_GSQYZ * GX.SYQZ), 0) RJZQSZ_GSQYZ,
                 NVL(SUM(A.RJZQSZ_KZZ * GX.SYQZ), 0) RJZQSZ_KZZ,
                 NVL(SUM(A.RJZQSZ_SG * GX.SYQZ), 0) RJZQSZ_SG,
                 NVL(SUM(A.RJZQSZ_QT * GX.SYQZ), 0) RJZQSZ_QT,
                 NVL(SUM(A.CRJE * GX.SYQZ), 0) CRJE,
                 NVL(SUM(A.CRJE_RMB * GX.SYQZ), 0) CRJE_RMB,
                 NVL(SUM(A.CRJE_USD * GX.SYQZ), 0) CRJE_USD,
                 NVL(SUM(A.CRJE_HKD * GX.SYQZ), 0) CRJE_HKD,
                 NVL(SUM(A.QCJE * GX.SYQZ), 0) QCJE,
                 NVL(SUM(A.QCJE_RMB * GX.SYQZ), 0) QCJE_RMB,
                 NVL(SUM(A.QCJE_USD * GX.SYQZ), 0) QCJE_USD,
                 NVL(SUM(A.QCJE_HKD * GX.SYQZ), 0) QCJE_HKD,
                 NVL(SUM(A.ZRZQSZ * GX.SYQZ), 0) ZRZQSZ,
                 NVL(SUM(A.ZD_RMB * GX.SYQZ), 0) ZD_RMB,
                 NVL(SUM(A.ZD_USD * GX.SYQZ), 0) ZD_USD,
                 NVL(SUM(A.ZTGZR_RMB * GX.SYQZ), 0) ZTGZR_RMB,
                 NVL(SUM(A.ZTGZR_HKD * GX.SYQZ), 0) ZTGZR_HKD,
                 NVL(SUM(A.ZCZQSZ * GX.SYQZ), 0) ZCZQSZ,
                 NVL(SUM(A.CZD_RMB * GX.SYQZ), 0) CZD_RMB,
                 NVL(SUM(A.CZD_USD * GX.SYQZ), 0) CZD_USD,
                 NVL(SUM(A.ZTGZC_RMB * GX.SYQZ), 0) ZTGZC_RMB,
                 NVL(SUM(A.ZTGZC_HKD * GX.SYQZ), 0) ZTGZC_HKD,
                 NVL(SUM(A.DYYK * GX.SYQZ), 0) DYYK,
                 NVL(SUM(A.FZZZC_30 * GX.SYQZ), 0) FZZZC_30,
                 NVL(SUM(A.BGZZC_30 * GX.SYQZ), 0) BGZZC_30,
                 NVL(SUM(A.LXJS * GX.SYQZ), 0) LXJS,
                 NVL(SUM(A.LCSR * GX.SYQZ), 0) LCSR,
                 NVL(SUM(A.RJZFZ * GX.SYQZ), 0) RJZFZ,
                 NVL(SUM(A.RJZZC_RZRQ * GX.SYQZ), 0) RJZZC_RZRQ,
                 NVL(SUM(A.RJDBXJ_RZRQ * GX.SYQZ), 0) RJDBXJ_RZRQ,
                 NVL(SUM(A.RJDBGPSZ_RZRQ * GX.SYQZ), 0) RJDBGPSZ_RZRQ,
                 NVL(SUM(A.FLTZC * GX.SYQZ), 0) FLTZC,
                 NVL(SUM(A.ZTZC * GX.SYQZ), 0) ZTZC,
                 NVL(SUM(A.ZQZC * GX.SYQZ), 0) ZQZC,
                 NVL(SUM(A.DYPSZ * GX.SYQZ), 0) DYPSZ,
                 NVL(SUM(A.SZXZJE * GX.SYQZ), 0) SZXZJE,
                 NVL(SUM(A.ZFZ * GX.SYQZ), 0) ZFZ,
                 A.HLCS_HKD,
                 A.HLCS_USD,
                 NVL(SUM(A.YMZFZ_RZRQ * GX.SYQZ), 0) YMZFZ_RZRQ,
                 NVL(SUM(A.YMZZC_RZRQ * GX.SYQZ), 0) YMZZC_RZRQ,
                 NVL(SUM(A.YMDBXJ_RZRQ * GX.SYQZ), 0) YMDBXJ_RZRQ,
                 NVL(SUM(A.YMDBGPSZ_RZRQ * GX.SYQZ), 0) YMDBGPSZ_RZRQ
                  FROM DSC_STAT.T_STAT_KHZC_Y A
                  JOIN DSC_STAT.VW_KHGX_TJRQ_UNIQUE GX
                    ON GX.KHH = A.KHH
                   AND GX.JZRQ > VN_TJRQ
                 WHERE A.YF = VN_TJYF
                 GROUP BY GX.RYXX_YYB, GX.RYXX, A.HLCS_HKD, A.HLCS_USD) B
         INNER JOIN (SELECT RYXX, MAX(ZZC) FZ_ZZC, MIN(ZZC) BG_ZZC
                       FROM (SELECT A.RQ, GX.RYXX, SUM(A.ZZC * GX.SYQZ) AS ZZC
                               FROM DSC_STAT.T_STAT_KHZC_R A
                              INNER JOIN DSC_STAT.VW_KHGX_TJRQ_UNIQUE GX
                                 ON GX.KHH = A.KHH
                                AND GX.JZRQ > VN_TJRQ
                              WHERE A.RQ < = VN_TJRQ
                                AND A.RQ > = VN_FIRST_DAY
                              GROUP BY A.RQ, GX.RYXX)
                      GROUP BY RYXX) C
            ON B.YS_ID = C.RYXX;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_RY_ZC_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_RZRQ_HS06_R(O_N_CODE OUT INT,
                                                        O_S_NOTE OUT VARCHAR2,
                                                        I_N_TJRQ IN INT,
                                                        I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   融资融券综合状况日表(HS06版专用)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
               担保比例：=总资产/总负债

         注意事项：
         数据源：
                 DSC_BAS.T_XY_JGMXLS         ：交割明细流水
                 DSC_BAS.T_KHXX_RZRQ         ：客户信息-融资融券
                 DSC_BAS.T_HTXX              ：合同信息
                 DSC_BAS.T_XY_ZJYE           ：资金余额
                 DSC_BAS.T_XY_ZQYE           ：证券余额
                 DSC_BAS.T_XY_ZHDBZCFZ       ：账户担保资产负债
         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                    操作
         林伟        2014/03/18                  创建
         金石        2015/03/26                  修改：1、修改预计利。取数公式改为 yjlx + ghlx + wjzlx
                                                       2、修改当日归还利息。 ghlx为时点数，故当日归还利息=今日ghlx - 昨日ghlx
                                                       3、新增利息 = 今日预计利息-  上日预计利息
         黄玉钰      2015/04/10                  修改：调整盈亏的计算，使用净资产计算
         胡丹丹      2015/06/29                  修改：1、调整总负债的计算，加上预计利息
                                                       2、融资负债，融券负债增加历史数据的获取
                                                       3、调整盈亏的计算
         吴邦杰      2015/08/13                  修改：交易笔数取值调整
         黄宏峰      2015/09/18                  修改：1、计算普通佣金时排除融资强平、融券强平，计算信用净佣金加入融资强平、融券强平
                                                       2、计算总负债的时候加上其他负债、费用负债与预计利息
                                                       3、计算预计利息时，考虑其他负债的利息，同时预计利息直接从负债明细流水取即可
                                                       4、计算HKJE的时不用再扣除购回利息，HKJE即为HKBJ
                                                       5、合并计算新增利息、新增归还本金、新增归还利息过程，同时不取上个交易日的已结清的数据
         黄宏峰      2016/01/06                  修改：1、证券市值、持仓成本取值逻辑调整，只取计算市值部分
                                                       2、增加多币种判断处理
         黄宏峰      2016/02/01                  修改：1、调整汇率取值位置，当取不到汇率参数时，能够将错误写入日志表
                                                       2、增加费用负债、其他负债取值
    */
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_T_DATE    NUMBER(8) := DSC_CFG.F_GET_JYR_DATE(I_N_TJRQ, -1); --上个交易日
    VN_HL_HKD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD    DSC_CFG.T_HLCS.GSBL%TYPE;
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;

    --重做删除原数据
    IF I_N_REDO = 1 THEN
        O_S_NOTE := '【ERROR-10001】';
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_RZRQ_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE DSC_STAT.T_STAT_RZRQ_R WHERE RQ = I_N_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        O_S_NOTE := '运行正常';
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_RZRQ_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_RZRQ_KHH_ZHZK_R]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --清空临时表
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表[TMP_T_STAT_RZRQ_R]。',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_T_STAT_RZRQ_R';
    O_S_NOTE := '运行正常';
    --记录日志明细——结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表[TMP_T_STAT_RZRQ_R]。',
                              I_S_CHANGEDESC     => '[TMP_T_STAT_RZRQ_R]表已清空！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '【ERROR-10002】';
    -----------------------------------------------
    ------1.1获取上日还款金额和上日归还利息
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计上日还款金额和上日归还利息，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, SRGHBJ, SRGHLX, SRZZC, SRZFZ)
        SELECT YYB, KHH, GHBJ AS SRGHBJ, GHLX AS SRGHLX, ZZC AS SRZZC, ZFZ AS SRZFZ
          FROM DSC_STAT.T_STAT_RZRQ_R
         WHERE RQ = VN_T_DATE;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计上日还款金额和上日归还利息，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10002_0】';
    -----------------------------------------------
    ------1.1获取上日预计利息，融资预计利息，融券预计利息
    -----需要从原始表获取，日期限制为上一交易日
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计上日预计利息，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, SRYJLX, SRRZYJLX, SRRQYJLX, SRQTYJLX)
        SELECT YYB,
               KHH,
               SUM(NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) YJLX, --上日预计利息,包括费用预计利息
               SUM(CASE
                       WHEN JYLB = '61' THEN
                        NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RZYJLX, --上日融资预计利息
               SUM(CASE
                       WHEN JYLB = '64' THEN
                        NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RQYJLX, --上日融券预计利息
               SUM(CASE
                       WHEN JYLB = '101' THEN
                        NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) QTYJLX --上日其他预计利息
          FROM (SELECT BZ, RQ, KHH, JYLB, YJLX, GHLX, YYB, FZZT, WJZLX
                  FROM DSC_HIS.T_XY_FZMXLS_HIS
                UNION ALL
                SELECT BZ, RQ, KHH, JYLB, YJLX, GHLX, YYB, FZZT, WJZLX
                  FROM DSC_BAS.T_XY_FZMXLS)
         WHERE RQ = VN_T_DATE
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计上日预计利息，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10002_1】';
    -----------------------------------------------
    ------1.11从指令信息表中获取追保次数
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计指令信息表中的追保次数，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZBCS)
        SELECT YYB, KHH, COUNT(1) AS ZBCS
          FROM DSC_BAS.T_XY_ZLXX
         WHERE JSRQ = VN_TJRQ
           AND ZLLB = '1'
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计指令信息表中的追保次数，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10003】';
    ------1.1融资/融券成交金额，融资/融券费用，融券费用=jysfy+S1  --jysfy交易所费用 交割表不知道怎么算
    --- 交易所费用
    -- 交易所费用
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计两融相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB,
         KHH,
         JYL_RZ,
         JYL_RQ,
         RZFY,
         RQFY,
         YJ,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ,
         JYJ_PT,
         JYJ_XY,
         PCCS,
         JYBS,
         JYBS_RZ,
         JYBS_RQ)
        SELECT YYB,
               KHH,
               SUM(CASE
                       WHEN JYLB IN ('61', '62') THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_RZ, --融资成交金额，根据crm口径
               SUM(CASE
                       WHEN JYLB IN ('63', '64') THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_RQ, --融券成交金额，根据crm口径
               SUM(CASE
                       WHEN JYLB = '61' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6) *
                        DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RZFY, --融资费用
               SUM(CASE
                       WHEN JYLB = '64' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6) *
                        DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RQFY, --融券费用
               SUM(S1 * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) YJ, --融资融券毛佣金
               SUM(CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) JYL, --所有成交金额
               SUM(CASE
                       WHEN JYLB NOT IN ('61', '62', '63', '64', '71', '72') THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_PT, --普通成交金额
               SUM(CASE
                       WHEN JYLB IN ('61', '62', '63', '64', '71', '72') THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_XY, --信用交易
               SUM(CASE
                       WHEN JYLB NOT IN ('61', '62', '63', '64', '71', '72') THEN
                        S1 * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) YJ_PT, --普通佣金
               SUM(CASE
                       WHEN JYLB IN ('61', '62', '63', '64', '71', '72') THEN
                        S1 * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) YJ_XY, --信用佣金
               SUM(JYJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) JYJ,
               SUM(CASE
                       WHEN JYLB NOT IN ('61', '62', '63', '64', '71', '72') THEN
                        JYJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYJ_PT, --普通净佣金
               SUM(CASE
                       WHEN JYLB IN ('61', '62', '63', '64', '71', '72') THEN
                        JYJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYJ_XY, --信用净佣金
               SUM(CASE
                       WHEN JYLB IN ('71', '72') THEN
                        1
                       ELSE
                        0
                   END) AS PCCS, --平仓次数
               COUNT(*) AS JYBS,
               SUM(CASE
                       WHEN JYLB IN ('61') THEN
                        1
                       ELSE
                        0
                   END) AS JYBS_RZ,
               SUM(CASE
                       WHEN JYLB IN ('64') THEN
                        1
                       ELSE
                        0
                   END) AS JYBS_RQ
          FROM (SELECT BZ, KHH, CJRQ, YYB, JYLB, CJJE, JYJ, S1, S2, S3, S4, S5, S6
                  FROM DSC_BAS.T_XY_JGMXLS
                UNION ALL
                SELECT BZ, KHH, CJRQ, YYB, JYLB, CJJE, JYJ, S1, S2, S3, S4, S5, S6
                  FROM DSC_HIS.T_XY_JGMXLS_HIS)
         WHERE CJRQ = VN_TJRQ
           AND JYLB IN (SELECT JYLB FROM DSC_CFG.T_JYLB WHERE IS_JSJYL = 1)
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;

    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计两融相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    ------担保划入，划出
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保划入，担保划出，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZRSZ, ZCSZ)
        SELECT YYB,
               KHH,

               SUM(CASE
                       WHEN JYLB = '65' THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) ZRSZ, --委托类别=担保划入
               SUM(CASE
                       WHEN JYLB = '66' THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) ZCSZ --委托类别=担保划出
          FROM DSC_STAT.VW_XY_JGMXLS_JS
         WHERE CJRQ = VN_TJRQ
           AND JYLB IN ('66', '65')
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保划入，担保划出，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10004】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计预计信息相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --1.3统计预计利息的相关指标
    --融资预计利息，融券预计利息，预计利息，归还利息，还款金额
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, RZYJLX, RQYJLX, QTYJLX, YJLX, GHLX, GHBJ)
        SELECT YYB,
               KHH,
               SUM(CASE
                       WHEN JYLB = '61' THEN
                        NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RZYJLX,
               SUM(CASE
                       WHEN JYLB = '64' THEN
                        NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RQYJLX,
               SUM(CASE
                       WHEN JYLB = '101' THEN
                        NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) QTYJLX,
               SUM(NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS YJLX,
               SUM(NVL(GHLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS GHLX,
               SUM(NVL(HKJE, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS HKBJ
          FROM (SELECT BZ, RQ, KHH, JYLB, YJLX, GHLX, YYB, FZZT, WJZLX, HKJE
                  FROM DSC_HIS.T_XY_FZMXLS_HIS
                UNION ALL
                SELECT BZ, RQ, KHH, JYLB, YJLX, GHLX, YYB, FZZT, WJZLX, HKJE
                  FROM DSC_BAS.T_XY_FZMXLS)
         WHERE RQ = VN_TJRQ
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计预计信息相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '【ERROR-10004_1】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计融资融券负债信息相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --1.3.1统计负债的相关指标
    --融资负债，融券负债
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, RZFZ, RQFZ, FYFZ, QTFZ)
        SELECT YYB,
               KHH,
               SUM(NVL(T.SSRZFZJE, 0) * DECODE(BZLB, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS RZFZ,
               SUM(NVL(T.SSRQFZJE, 0) * DECODE(BZLB, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS RQFZ,
               SUM(NVL(T.SSFYFZ, 0) * DECODE(BZLB, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) FYFZ,
               SUM(NVL(T.SSQTFZ, 0) * DECODE(BZLB, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS QTFZ
          FROM (SELECT BZLB, YYB, KHH, SSRZFZJE, SSRQFZJE, SSFYFZ, SSQTFZ, FSRQ
                  FROM DSC_BAS.T_XY_ZHDBZCFZ
                UNION ALL
                SELECT BZLB, YYB, KHH, SSRZFZJE, SSRQFZJE, SSFYFZ, SSQTFZ, FSRQ
                  FROM DSC_HIS.T_XY_ZHDBZCFZ_HIS) T
         WHERE T.FSRQ = VN_TJRQ
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计融资融券负债信息相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10004_2】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计本日预计利息、归还本金、归还利息相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --1.3统计负债的相关指标
    --本日预计利息，本日融资利息，本日融券利息，当日归还本金，归还利息指标  ps:新增预计利息 = 本日预计利息 - 上日预计利息
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, XZLX, XZRZLX, XZRQLX, XZQTLX, DRGHBJ, DRGHLX)
        SELECT A.KHH,
               A.YYB,
               NVL(A.YJLX, 0) - NVL(B.YJLX, 0) AS XZLX,
               NVL(A.RZYJLX, 0) - NVL(B.RZYJLX, 0) AS XZRZLX,
               NVL(A.RQYJLX, 0) - NVL(B.RQYJLX, 0) AS XZRQLX,
               NVL(A.QTYJLX, 0) - NVL(B.QTYJLX, 0) AS XZQTLX,
               NVL(A.GHBJ, 0) - NVL(B.GHBJ, 0) AS DRGHBJ,
               NVL(A.GHLX, 0) - NVL(B.GHLX, 0) AS DRGHLX
          FROM (SELECT KHH,
                       YYB,
                       SUM((NVL(YJLX, 0) + NVL(GHLX, 0)) *
                           DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS YJLX,
                       SUM(CASE
                               WHEN JYLB = '61' THEN
                                (NVL(YJLX, 0) + NVL(GHLX, 0)) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) RZYJLX,
                       SUM(CASE
                               WHEN JYLB = '64' THEN
                                (NVL(YJLX, 0) + NVL(GHLX, 0)) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) RQYJLX,
                       SUM(CASE
                               WHEN JYLB = '101' THEN
                                (NVL(YJLX, 0) + NVL(GHLX, 0)) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) QTYJLX,
                       SUM(HKJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) GHBJ,
                       SUM(GHLX * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) GHLX
                  FROM (SELECT BZ, RQ, KHH, YYB, JYLB, YJLX, GHLX, WJZLX, HKJE
                          FROM DSC_HIS.T_XY_FZMXLS_HIS
                        UNION ALL
                        SELECT BZ, RQ, KHH, YYB, JYLB, YJLX, GHLX, WJZLX, HKJE
                          FROM DSC_BAS.T_XY_FZMXLS)
                 WHERE RQ = VN_TJRQ
                 GROUP BY KHH, YYB) A
          LEFT JOIN (SELECT KHH,
                            YYB,
                            SUM((NVL(YJLX, 0) + NVL(GHLX, 0)) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS YJLX,
                            SUM(CASE
                                    WHEN JYLB = '61' THEN
                                     (NVL(YJLX, 0) + NVL(GHLX, 0)) *
                                     DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) RZYJLX,
                            SUM(CASE
                                    WHEN JYLB = '64' THEN
                                     (NVL(YJLX, 0) + NVL(GHLX, 0)) *
                                     DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) RQYJLX,
                            SUM(CASE
                                    WHEN JYLB = '101' THEN
                                     (NVL(YJLX, 0) + NVL(GHLX, 0)) *
                                     DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) QTYJLX,
                            SUM(HKJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) GHBJ,
                            SUM(GHLX * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) GHLX
                       FROM (SELECT BZ, RQ, KHH, YYB, JYLB, YJLX, GHLX, WJZLX, FZZT, HKJE
                               FROM DSC_HIS.T_XY_FZMXLS_HIS
                             UNION ALL
                             SELECT BZ, RQ, KHH, YYB, JYLB, YJLX, GHLX, WJZLX, FZZT, HKJE
                               FROM DSC_BAS.T_XY_FZMXLS)
                      WHERE RQ = VN_T_DATE
                        AND FZZT != 3
                      GROUP BY KHH, YYB) B
            ON A.KHH = B.KHH
           AND A.YYB = B.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计本日预计利息、归还本金、归还利息相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10005】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保现金指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --1.4 担保现金
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZJYE)
        SELECT YYB, KHH, SUM(DBXJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) ZJYE
          FROM DSC_STAT.VW_XY_DBXJ
         WHERE RQ = VN_TJRQ
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保现金指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10006】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保市值指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --1.4 担保市值
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZQSZ, CCCB)
        SELECT A.YYB,
               A.KHH,
               SUM(A.ZXSZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) ZQSZ,
               SUM(A.CCCB * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS CCCB
          FROM (SELECT RQ, JYS, ZQLB, YYB, ZXSZ, CCCB, BZ, KHH
                  FROM DSC_BAS.T_XY_ZQYE
                UNION ALL
                SELECT RQ, JYS, ZQLB, YYB, ZXSZ, CCCB, BZ, KHH FROM DSC_HIS.T_XY_ZQYELS) A
         WHERE A.RQ = VN_TJRQ
           AND (JYS, ZQLB) IN
               (SELECT DISTINCT JYS, ZQLB FROM DSC_CFG.T_ZQPZ_DY B WHERE B.IS_JSSZ = 1)
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保市值指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10007】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计资金转入转出，服务佣金指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --1.5资金转入出--注意这是绝对值
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZRJE, ZCJE, FWYJ)
        SELECT YYB,
               KHH,
               SUM(CASE
                       WHEN YWKM IN (SELECT C.PARAM_VALUE
                                       FROM T_PARAM_VALUE C
                                      WHERE C.PARAM_KIND = '01') THEN
                        (SRJE - FCJE) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) AS ZRJE,
               SUM(CASE
                       WHEN YWKM IN (SELECT C.PARAM_VALUE
                                       FROM T_PARAM_VALUE C
                                      WHERE C.PARAM_KIND = '02') THEN
                        (FCJE - SRJE) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) AS ZCJE,
               SUM(CASE
                       WHEN YWKM IN (SELECT C.PARAM_VALUE
                                       FROM T_PARAM_VALUE C
                                      WHERE C.PARAM_KIND = '03') THEN
                        (FCJE - SRJE) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) AS FWYJ --服务佣金
          FROM DSC_STAT.VW_XY_ZJMXLS
         WHERE RQ = VN_TJRQ
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计资金转入转出，服务佣金指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10008】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“融资余额，融券余额，授信额度，可用保证金，担保比例”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --统计融资余额，融券余额
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, RZJE, RQJE, RZSXED, RQSXED, KYBZJ, DBBL)
        SELECT YYB,
               KHH,
               SUM(RZJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)),
               SUM(RQJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)),
               SUM(RZED * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS RZSXED,
               SUM(RQED * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS RQSXED,
               SUM(KYBZJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS KYBZJ,
               SUM(DBBL * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS DBBL
          FROM (SELECT BZ, RQ, YYB, KHH, RZJE, RQJE, RZED, RQED, BZJKYYE AS KYBZJ, DBBL
                  FROM DSC_BAS.T_XY_HTXX
                UNION ALL
                SELECT BZ, RQ, YYB, KHH, RZJE, RQJE, RZED, RQED, BZJKYYE AS KYBZJ, DBBL
                  FROM DSC_HIS.T_XY_HTXX_HIS)
         WHERE RQ = VN_TJRQ
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“融资余额，融券余额，授信额度，可用保证金，担保比例”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10009】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“沪A市值，深A市值”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --统计沪A市值，深A市值
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (KHH, YYB, ZQSZ_HA, ZQSZ_SA)
        SELECT KHH,
               YYB,
               SUM(ZQSZ_HAZB) AS ZQSZ_HA,
               SUM(ZQSZ_SAZB + ZQSZ_CYB + ZQSZ_ZXB) AS ZQSZ_SA
          FROM (SELECT KHH,
                       YYB,
                       SUM(CASE
                               WHEN T.ZQPZ = '110' THEN --沪A主板
                                ZQSZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZQSZ_HAZB,

                       SUM(CASE
                               WHEN T.ZQPZ = '111' THEN --深A主板
                                ZQSZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZQSZ_SAZB,

                       SUM(CASE
                               WHEN T.ZQPZ = '113' THEN --创业板
                                ZQSZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZQSZ_CYB,
                       0 AS ZQSZ_ZXB
                  FROM (SELECT A.KHH,
                               A.YYB,
                               A.BZ,
                               ZXSZ AS ZQSZ, --市值=证券数量*交易单位*(最新收盘价+1*最新利息)
                               NVL(C.JB3_ZQPZ, 999) AS ZQPZ
                          FROM (SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, LJYK, CCCB, BZ
                                  FROM DSC_BAS.T_XY_ZQYE
                                UNION ALL
                                SELECT RQ,
                                       KHH,
                                       YYB,
                                       ZQDM,
                                       JYS,
                                       ZQLB,
                                       ZXSZ,
                                       0 AS LJYK,
                                       CCCB,
                                       BZ
                                  FROM DSC_HIS.T_XY_ZQYELS) A,
                               (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ
                                  FROM DSC_CFG.T_ZQPZ_DY D
                                 WHERE D.JB3_ZQPZ <> '112'
                                   AND IS_JSSZ = 1) C
                         WHERE A.RQ = VN_TJRQ
                           AND A.ZQLB = C.ZQLB
                           AND A.JYS = C.JYS
                           AND NOT (A.ZQDM LIKE '002%' AND A.ZQLB = 'A0' AND A.JYS = '1') --排除中小板数据（002开头的有申购 ZQLB=A3 的数据）
                           AND C.JB3_ZQPZ IN ('110', '111', '113')) T
                 GROUP BY KHH, YYB
                UNION ALL
                SELECT A.KHH,
                       A.YYB,
                       0 AS ZQSZ_HAZB,
                       0 AS ZQSZ_SAZB,
                       0 AS ZQSZ_CYB,
                       SUM(A.ZXSZ) AS ZQSZ_ZXB
                  FROM (SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, LJYK, CCCB, BZ
                          FROM DSC_BAS.T_XY_ZQYE
                        UNION ALL
                        SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, 0 AS LJYK, CCCB, BZ
                          FROM DSC_HIS.T_XY_ZQYELS) A
                 WHERE A.RQ = VN_TJRQ
                   AND A.ZQLB = 'A0'
                   AND A.JYS = '1'
                   AND A.ZQDM LIKE '002%' --中小板数据
                 GROUP BY A.KHH, A.YYB)
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“沪A市值，深A市值”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10010】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表汇总统计插入表[DSC_STAT.T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --2.1将指标统计到目标表
    --插入数据
    INSERT INTO DSC_STAT.T_STAT_RZRQ_R
        (RQ,
         YYB,
         GRJG,
         KHH,
         ZZC,
         ZFZ,
         ZJYE,
         ZQSZ,
         ZQSZ_HA,
         ZQSZ_SA,
         XYDJ,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         YJ,
         JYJ,
         RZFZ,
         RQFZ,
         GHBJ,
         XZFZ,
         GHLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         RZFY,
         XZRZFZ,
         XZRQFZ,
         RQFY,
         PCCS,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ_PT,
         JYJ_XY,
         YK,
         DBBL,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         JYBS,
         JYBS_RZ,
         JYBS_RQ,
         XZLX,
         XZRZLX,
         XZRQLX,
         ZBCS,
         RZJE,
         RQJE,
         CCCB,
         DRGHBJ,
         DRGHLX,
         FYFZ,
         QTFZ)
        SELECT RQ,
               B.YYB,
               B.GRJG AS GRJG,
               B.KHH,
               ZZC,
               ZFZ,
               ZJYE,
               ZQSZ,
               ZQSZ_HA,
               ZQSZ_SA,
               B.XYDJ,
               RZSXED,
               RQSXED,
               JYL_RZ,
               JYL_RQ,
               YJ,
               JYJ,
               RZFZ,
               RQFZ,
               GHBJ,
               XZFZ,
               GHLX,
               YJLX,
               RZYJLX,
               RQYJLX,
               RZFY,
               XZRZFZ,
               XZRQFZ,
               RQFY,
               PCCS,
               JYL,
               JYL_PT,
               JYL_XY,
               YJ_PT,
               YJ_XY,
               JYJ_PT,
               JYJ_XY,
               (ZZC - ZFZ) - (SRZZC - SRZFZ) - (ZRJE - ZCJE) - (ZRSZ - ZCSZ) YK,
               DBBL,
               KYBZJ,
               ZRJE,
               ZCJE,
               ZRSZ,
               ZCSZ,
               FWYJ,
               JYBS,
               JYBS_RZ,
               JYBS_RQ,
               XZLX,
               XZRZLX,
               XZRQLX,
               ZBCS,
               RZJE,
               RQJE,
               CCCB,
               DRGHBJ,
               DRGHLX,
               FYFZ,
               QTFZ
          FROM (SELECT VN_TJRQ AS RQ,
                       KHH, --客户号
                       SUM(NVL(ZJYE, 0) + NVL(ZQSZ, 0)) AS ZZC, --总资产 = 担保现金+ 担保股票市值
                       SUM(NVL(RZFZ, 0) + NVL(RQFZ, 0) + NVL(FYFZ, 0) + NVL(QTFZ, 0) +
                           NVL(YJLX, 0)) AS ZFZ, --负债
                       SUM(NVL(ZJYE, 0)) AS ZJYE, --担保现金
                       SUM(NVL(ZQSZ, 0)) AS ZQSZ, --担保股票市值
                       SUM(NVL(ZQSZ_HA, 0)) AS ZQSZ_HA, --沪A证券市值
                       SUM(NVL(ZQSZ_SA, 0)) AS ZQSZ_SA, --深A证券市值
                       SUM(NVL(RZSXED, 0)) AS RZSXED, --融资授信额度
                       SUM(NVL(RQSXED, 0)) AS RQSXED, --融券授信额度
                       SUM(NVL(JYL_RQ, 0)) AS JYL_RQ, --融资成交金额
                       SUM(NVL(JYL_RZ, 0)) AS JYL_RZ, --融券成交金额
                       SUM(NVL(YJ, 0)) AS YJ, --毛佣金
                       SUM(NVL(JYJ, 0)) AS JYJ, --净佣金
                       SUM(NVL(RZFZ, 0)) AS RZFZ, --融资负债
                       SUM(NVL(RQFZ, 0)) AS RQFZ, --融券负债
                       SUM(NVL(GHBJ, 0)) AS GHBJ, --归还本金
                       SUM(NVL(JYL_RZ, 0) + NVL(JYL_RQ, 0) + NVL(RZFY, 0) + NVL(RQFY, 0)) AS XZFZ, --新增负债=融资成交金额+融券成交金额+融资费用+融券费用
                       SUM(NVL(JYL_RZ, 0) + NVL(RZFY, 0)) XZRZFZ,
                       SUM(NVL(JYL_RQ, 0) + NVL(RQFY, 0)) XZRQFZ,
                       SUM(NVL(GHLX, 0)) AS GHLX, --归还利息
                       SUM(NVL(YJLX, 0)) AS YJLX, --预计利息
                       SUM(NVL(RZYJLX, 0)) AS RZYJLX, --融资使用预计利息
                       SUM(NVL(RQYJLX, 0)) AS RQYJLX, --融券使用预计利息
                       SUM(NVL(RZFY, 0)) AS RZFY, --融资费用
                       SUM(NVL(RQFY, 0)) AS RQFY, --融券费用
                       SUM(NVL(PCCS, 0)) AS PCCS, --当日平仓次数
                       SUM(NVL(JYL, 0)) AS JYL, --成交金额
                       SUM(NVL(JYL_PT, 0)) AS JYL_PT,
                       SUM(NVL(JYL_XY, 0)) AS JYL_XY,
                       SUM(NVL(YJ_PT, 0)) AS YJ_PT,
                       SUM(NVL(YJ_XY, 0)) AS YJ_XY,
                       SUM(NVL(JYJ_PT, 0)) AS JYJ_PT,
                       SUM(NVL(JYJ_XY, 0)) AS JYJ_XY,
                       SUM(NVL(SRZZC, 0)) AS SRZZC,
                       SUM(NVL(SRZFZ, 0)) AS SRZFZ,
                       /*SUM(NVL(ZJYE, 0) + NVL(ZQSZ, 0) - NVL(RZFZ, 0) - NVL(RQFZ, 0) -
                       (NVL(SRZZC, 0) - NVL(SRZFZ, 0)) - NVL(ZRJE, 0) + NVL(ZCJE, 0) -
                       NVL(ZRSZ, 0) + NVL(ZCSZ, 0)) AS YK,*/
                       SUM(NVL(DBBL, 0)) AS DBBL, --担保比例：=总资产/总负债
                       SUM(NVL(KYBZJ, 0)) KYBZJ,
                       SUM(NVL(ZRJE, 0)) ZRJE,
                       SUM(NVL(ZCJE, 0)) ZCJE,
                       SUM(NVL(ZRSZ, 0)) ZRSZ,
                       SUM(NVL(ZCSZ, 0)) ZCSZ,
                       SUM(NVL(FWYJ, 0)) AS FWYJ,
                       SUM(NVL(JYBS, 0)) AS JYBS,
                       SUM(NVL(JYBS_RZ, 0)) AS JYBS_RZ,
                       SUM(NVL(JYBS_RQ, 0)) AS JYBS_RQ,
                       SUM(NVL(XZRZLX, 0) + NVL(XZRQLX, 0)) AS XZLX,
                       SUM(NVL(XZRZLX, 0)) AS XZRZLX,
                       SUM(NVL(XZRQLX, 0)) AS XZRQLX,
                       SUM(NVL(ZBCS, 0)) AS ZBCS, --当日追保次数
                       SUM(NVL(RZJE, 0)) AS RZJE,
                       SUM(NVL(RQJE, 0)) AS RQJE,
                       SUM(NVL(CCCB, 0)) AS CCCB,
                       SUM(NVL(DRGHBJ, 0)) AS DRGHBJ,
                       SUM(NVL(DRGHLX, 0)) AS DRGHLX,
                       SUM(NVL(FYFZ, 0)) AS FYFZ,
                       SUM(NVL(QTFZ, 0)) AS QTFZ
                  FROM TMP_T_STAT_RZRQ_R
                 GROUP BY KHH) A,
               DSC_BAS.T_KHXX_RZRQ B
         WHERE A.KHH = B.KHH;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表汇总统计插入表[DSC_STAT.T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --清空临时表
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表[TMP_T_STAT_RZRQ_R]。',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_T_STAT_RZRQ_R';
    --记录日志明细——结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表[TMP_T_STAT_RZRQ_R]。',
                              I_S_CHANGEDESC     => '[TMP_T_STAT_RZRQ_R]表已清空！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_RZRQ_HS06_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_RZRQ_HS08_R(O_N_CODE OUT INT,
                                                        O_S_NOTE OUT VARCHAR2,
                                                        I_N_TJRQ IN INT,
                                                        I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   融资融券综合状况日表(HS08版专用)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
               担保比例：=总资产/总负债

         注意事项：
         数据源：
                 DSC_BAS.T_XY_JGMXLS         ：交割明细流水
                 DSC_BAS.T_KHXX_RZRQ         ：客户信息-融资融券
                 DSC_BAS.T_HTXX              ：合同信息
                 DSC_BAS.T_XY_ZJYE           ：资金余额
                 DSC_BAS.T_XY_ZQYE           ：证券余额
                 DSC_BAS.T_XY_ZHDBZCFZ       ：账户担保资产负债
         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                    操作
         林伟        2014/03/18                  创建
         金石        2015/03/26                  修改：1、修改预计利。取数公式改为 yjlx + ghlx + wjzlx
                                                       2、修改当日归还利息。 ghlx为时点数，故当日归还利息=今日ghlx - 昨日ghlx
                                                       3、新增利息 = 今日预计利息-  上日预计利息
         吴邦杰      2015/08/13                  修改：交易笔数取值调整
         黄宏峰      2015/08/24                  修改：1、计算普通佣金时排除融资强平、融券强平，计算信用净佣金加入融资强平、融券强平
                                                       2、计算总负债的时候加上其他负债、费用负债与预计利息
                                                       3、计算预计利息时，考虑其他负债的利息，同时，限制条件FZZT!=3的数据
         黄宏峰      2015/10/13                  修改：修改预计利息、新增预计利息、当日归还本金，当日归还利息取值逻辑
         黄宏峰      2015/12/13                  修改：修正盈亏（YK）取值逻辑，调整ZFZ没经过计算就纳入盈亏取值计算公式
         黄宏峰      2016/01/05                  修改：1、证券市值、持仓成本取值逻辑调整，只取计算市值部分
                                                       2、增加多币种判断处理
         黄宏峰      2016/02/01                  修改：1、调整汇率取值位置，当取不到汇率参数时，能够将错误写入日志表
                                                       2、增加费用负债、其他负债取值
    */
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_T_DATE    NUMBER(8) := DSC_CFG.F_GET_JYR_DATE(I_N_TJRQ, -1); --上个交易日
    VN_HL_HKD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD    DSC_CFG.T_HLCS.GSBL%TYPE;
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --重做删除原数据
    IF I_N_REDO = 1 THEN
        O_S_NOTE := '【ERROR-10000】';
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_RZRQ_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE DSC_STAT.T_STAT_RZRQ_R WHERE RQ = I_N_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        O_S_NOTE := '运行正常';
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_RZRQ_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_RZRQ_R]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;
    O_S_NOTE := '【ERROR-10001】';
    --清空临时表
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表[TMP_T_STAT_RZRQ_R]。',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_T_STAT_RZRQ_R';
    O_S_NOTE := '运行正常';
    --记录日志明细——结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表[TMP_T_STAT_RZRQ_R]。',
                              I_S_CHANGEDESC     => '临时表[TMP_T_STAT_RZRQ_R]已清空。',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10002】';
    -----------------------------------------------
    ------1.1获取上日还款金额和上日归还利息
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计上日还款金额和上日归还利息，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, SRGHBJ, SRGHLX, SRZZC, SRZFZ)
        SELECT YYB, KHH, GHBJ AS SRGHBJ, GHLX AS SRGHLX, ZZC AS SRZZC, ZFZ AS SRZFZ
          FROM DSC_STAT.T_STAT_RZRQ_R
         WHERE RQ = VN_T_DATE;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计上日还款金额和上日归还利息，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10002_0】';
    -----------------------------------------------
    ------1.1获取上日预计利息，融资预计利息，融券预计利息
    -----需要从原始表获取，取不能加FZZT条件限制
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计上日预计利息，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, SRYJLX, SRRZYJLX, SRRQYJLX, SRQTYJLX)
        SELECT YYB,
               KHH,
               SUM(NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) YJLX, --上日预计利息  （预计利息+已归还利息+未结转利息）
               SUM(CASE
                       WHEN JYLB = '61' THEN
                        NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RZYJLX, --上日融资预计利息
               SUM(CASE
                       WHEN JYLB = '64' THEN
                        NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RQYJLX, --上日融券预计利息
               SUM(CASE
                       WHEN JYLB = '101' THEN
                        NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) QTYJLX --上日其他预计利息
          FROM (SELECT BZ, RZFZ, RQFZ, JYLB, YJLX, KHH, YYB, FZZT
                  FROM DSC_HIS.T_XY_FZXX_HIS
                 WHERE RQ = VN_T_DATE
                UNION ALL
                SELECT BZ, RZFZ, RQFZ, JYLB, YJLX, KHH, YYB, FZZT
                  FROM DSC_BAS.T_XY_FZXX
                 WHERE RQ = VN_T_DATE)
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计上日预计利息，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10002_1】';
    -----------------------------------------------
    ------1.11从指令信息表中获取追保次数
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计指令信息表中的追保次数，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZBCS)
        SELECT YYB, KHH, COUNT(1) AS ZBCS
          FROM DSC_BAS.T_XY_ZLXX
         WHERE JSRQ = VN_TJRQ
           AND ZLLB = '1'
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计指令信息表中的追保次数，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10003】';
    ------1.1融资/融券成交金额，融资/融券费用，融券费用=jysfy+S1  --jysfy交易所费用 交割表不知道怎么算
    --- 交易所费用
    -- 交易所费用
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计两融相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB,
         KHH,
         JYL_RZ,
         JYL_RQ,
         RZFY,
         RQFY,
         YJ,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ,
         JYJ_PT,
         JYJ_XY,
         PCCS,
         JYBS,
         JYBS_RZ,
         JYBS_RQ)
        SELECT YYB,
               KHH,
               SUM(CASE
                       WHEN JYLB IN ('61', '62') THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_RZ, --融资成交金额，根据crm口径
               SUM(CASE
                       WHEN JYLB IN ('63', '64') THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_RQ, --融券成交金额，根据crm口径
               SUM(CASE
                       WHEN JYLB = '61' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6) *
                        DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RZFY, --融资费用
               SUM(CASE
                       WHEN JYLB = '64' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6) *
                        DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RQFY, --融券费用
               SUM(S1 * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) YJ, --融资融券毛佣金
               SUM(CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) JYL, --所有成交金额
               SUM(CASE
                       WHEN JYLB NOT IN ('61', '62', '63', '64', '71', '72') THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_PT, --普通成交金额
               SUM(CASE
                       WHEN JYLB IN ('61', '62', '63', '64', '71', '72') THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_XY, --信用交易
               SUM(CASE
                       WHEN JYLB NOT IN ('61', '62', '63', '64', '71', '72') THEN
                        S1 * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) YJ_PT, --普通佣金
               SUM(CASE
                       WHEN JYLB IN ('61', '62', '63', '64', '71', '72') THEN
                        S1 * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) YJ_XY, --信用佣金
               SUM(JYJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) JYJ,
               SUM(CASE
                       WHEN JYLB NOT IN ('61', '62', '63', '64', '71', '72') THEN
                        JYJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYJ_PT, --普通净佣金
               SUM(CASE
                       WHEN JYLB IN ('61', '62', '63', '64', '71', '72') THEN
                        JYJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYJ_XY, --信用净佣金
               SUM(CASE
                       WHEN JYLB IN ('71', '72') THEN
                        1
                       ELSE
                        0
                   END) AS PCCS, --平仓次数
               COUNT(*) AS JYBS,
               SUM(CASE
                       WHEN JYLB IN ('61') THEN
                        1
                       ELSE
                        0
                   END) AS JYBS_RZ,
               SUM(CASE
                       WHEN JYLB IN ('64') THEN
                        1
                       ELSE
                        0
                   END) AS JYBS_RQ
          FROM (SELECT CJRQ, BZ, YYB, KHH, JYLB, CJJE, S1, S2, S3, S4, S5, S6, JYJ
                  FROM DSC_BAS.T_XY_JGMXLS
                UNION ALL
                SELECT CJRQ, BZ, YYB, KHH, JYLB, CJJE, S1, S2, S3, S4, S5, S6, JYJ
                  FROM DSC_HIS.T_XY_JGMXLS_HIS)
         WHERE CJRQ = VN_TJRQ
           AND JYLB IN (SELECT JYLB FROM DSC_CFG.T_JYLB WHERE IS_JSJYL = 1)
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;

    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计两融相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    ------担保划入，划出
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保划入，担保划出，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZRSZ, ZCSZ)
        SELECT YYB,
               KHH,

               SUM(CASE
                       WHEN JYLB = '65' THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) ZRSZ, --委托类别=担保划入
               SUM(CASE
                       WHEN JYLB = '66' THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) ZCSZ --委托类别=担保划出
          FROM DSC_STAT.VW_XY_JGMXLS_JS
         WHERE CJRQ = VN_TJRQ
           AND JYLB IN ('66', '65')
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保划入，担保划出，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10004】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计预计信息相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --1.3统计预计利息的相关指标
    --融资预计利息，融券预计利息，预计利息，归还利息，还款金额
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, RZYJLX, RQYJLX, QTYJLX, YJLX, GHLX, GHBJ)
        SELECT YYB,
               KHH,
               SUM(CASE
                       WHEN JYLB = '61' THEN
                        NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RZYJLX,
               SUM(CASE
                       WHEN JYLB = '64' THEN
                        NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RQYJLX,
               SUM(CASE
                       WHEN JYLB = '101' THEN
                        NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) QTYJLX,
               SUM(NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS YJLX,
               SUM(GHLX * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) GHLX, --归还利息
               SUM(HKJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) GHBJ --还款金额
          FROM (SELECT BZ, RZFZ, RQFZ, JYLB, YJLX, GHLX, HKJE, KHH, YYB, FZZT
                  FROM DSC_HIS.T_XY_FZXX_HIS
                 WHERE RQ = VN_TJRQ
                UNION ALL
                SELECT BZ, RZFZ, RQFZ, JYLB, YJLX, GHLX, HKJE, KHH, YYB, FZZT
                  FROM DSC_BAS.T_XY_FZXX
                 WHERE RQ = VN_TJRQ)
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计预计信息相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '【ERROR-10004_1】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计融资融券负债信息相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --1.3.1统计负债的相关指标
    --融资负债，融券负债
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, RZFZ, RQFZ, FYFZ, QTFZ)
        SELECT YYB,
               KHH,
               SUM(NVL(T.SSRZFZJE, 0) * DECODE(BZLB, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS RZFZ,
               SUM(NVL(T.SSRQFZJE, 0) * DECODE(BZLB, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS RQFZ,
               SUM(NVL(T.SSFYFZ, 0) * DECODE(BZLB, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) FYFZ,
               SUM(NVL(T.SSQTFZ, 0) * DECODE(BZLB, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS QTFZ
          FROM (SELECT BZLB, YYB, KHH, SSRZFZJE, SSRQFZJE, SSFYFZ, SSQTFZ, FSRQ
                  FROM DSC_BAS.T_XY_ZHDBZCFZ
                UNION ALL
                SELECT BZLB, YYB, KHH, SSRZFZJE, SSRQFZJE, SSFYFZ, SSQTFZ, FSRQ
                  FROM DSC_HIS.T_XY_ZHDBZCFZ_HIS) T
         WHERE T.FSRQ = VN_TJRQ
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计融资融券负债信息相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10004_2】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计本日预计相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --1.3统计负债的相关指标
    --本日预计利息，本日融资利息，本日融券利息，本日归还本金，本日归还利息  ps:新增预计利息 = 本日预计利息 - 上日预计利息
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, XZLX, XZRZLX, XZRQLX, XZQTLX, DRGHBJ, DRGHLX)
        SELECT A.YYB,
               A.KHH,
               (NVL(A.YJLX, 0) - (NVL(B.YJLX, 0))) AS XZLX,
               (NVL(A.RZYJLX, 0) - (NVL(B.RZYJLX, 0))) AS XZRZLX,
               (NVL(A.RQYJLX, 0) - (NVL(B.RQYJLX, 0))) AS XZRQLX,
               (NVL(A.QTYJLX, 0) - (NVL(B.QTYJLX, 0))) AS XZQTLX,
               (NVL(A.GHBJ, 0) - (NVL(B.GHBJ, 0))) AS DRGHBJ,
               (NVL(A.GHLX, 0) - (NVL(B.GHLX, 0))) AS DRGHLX
          FROM (SELECT KHH,
                       YYB,
                       SUM((NVL(YJLX, 0) + NVL(GHLX, 0)) *
                           DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS YJLX, --预计利息
                       SUM(CASE
                               WHEN JYLB = '61' THEN
                                (NVL(YJLX, 0) + NVL(GHLX, 0)) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS RZYJLX, --融资预计利息
                       SUM(CASE
                               WHEN JYLB = '64' THEN
                                (NVL(YJLX, 0) + NVL(GHLX, 0)) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS RQYJLX,
                       SUM(CASE
                               WHEN JYLB = '101' THEN
                                (NVL(YJLX, 0) + NVL(GHLX, 0)) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS QTYJLX,
                       SUM(HKJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS GHBJ,
                       SUM(GHLX * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS GHLX
                  FROM (SELECT BZ, RZFZ, RQFZ, JYLB, YJLX, GHLX, HKJE, KHH, YYB, FZZT
                          FROM DSC_HIS.T_XY_FZXX_HIS
                         WHERE RQ = VN_TJRQ
                        UNION ALL
                        SELECT BZ, RZFZ, RQFZ, JYLB, YJLX, GHLX, HKJE, KHH, YYB, FZZT
                          FROM DSC_BAS.T_XY_FZXX
                         WHERE RQ = VN_TJRQ)
                 GROUP BY KHH, YYB) A
          LEFT JOIN (SELECT KHH,
                            YYB,
                            SUM((NVL(YJLX, 0) + NVL(GHLX, 0)) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS YJLX, --预计利息
                            SUM(CASE
                                    WHEN JYLB = '61' THEN
                                     (NVL(YJLX, 0) + NVL(GHLX, 0)) *
                                     DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) AS RZYJLX, --融资预计利息
                            SUM(CASE
                                    WHEN JYLB = '64' THEN
                                     (NVL(YJLX, 0) + NVL(GHLX, 0)) *
                                     DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) AS RQYJLX,
                            SUM(CASE
                                    WHEN JYLB = '101' THEN
                                     (NVL(YJLX, 0) + NVL(GHLX, 0)) *
                                     DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) AS QTYJLX,
                            SUM(HKJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS GHBJ,
                            SUM(GHLX * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS GHLX
                       FROM (SELECT BZ, RZFZ, RQFZ, JYLB, YJLX, GHLX, HKJE, KHH, YYB, FZZT
                               FROM DSC_HIS.T_XY_FZXX_HIS
                              WHERE RQ = VN_T_DATE
                                AND FZZT != 3
                             UNION ALL
                             SELECT BZ, RZFZ, RQFZ, JYLB, YJLX, GHLX, HKJE, KHH, YYB, FZZT
                               FROM DSC_BAS.T_XY_FZXX
                              WHERE RQ = VN_T_DATE
                                AND FZZT != 3)
                      GROUP BY KHH, YYB) B
            ON A.KHH = B.KHH
           AND A.YYB = B.YYB;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计本日预计相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10005】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保现金指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --1.4 担保现金
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZJYE)
        SELECT YYB, KHH, SUM(DBXJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) ZJYE
          FROM DSC_STAT.VW_XY_DBXJ
         WHERE RQ = VN_TJRQ
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保现金指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10006】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保市值指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --1.4 担保市值
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZQSZ, CCCB)
        SELECT A.YYB,
               A.KHH,
               SUM(A.ZXSZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) ZQSZ,
               SUM(A.CCCB * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS CCCB
          FROM (SELECT RQ, JYS, ZQLB, YYB, ZXSZ, CCCB, BZ, KHH
                  FROM DSC_BAS.T_XY_ZQYE
                UNION ALL
                SELECT RQ, JYS, ZQLB, YYB, ZXSZ, CCCB, BZ, KHH FROM DSC_HIS.T_XY_ZQYELS) A
         WHERE A.RQ = VN_TJRQ
           AND (JYS, ZQLB) IN
               (SELECT DISTINCT JYS, ZQLB FROM DSC_CFG.T_ZQPZ_DY B WHERE B.IS_JSSZ = 1)
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保市值指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10007】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计资金转入转出，服务佣金指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --1.5资金转入出--注意这是绝对值
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZRJE, ZCJE, FWYJ)
        SELECT YYB,
               KHH,
               SUM(CASE
                       WHEN YWKM IN (SELECT C.PARAM_VALUE
                                       FROM T_PARAM_VALUE C
                                      WHERE C.PARAM_KIND = '01') THEN
                        (SRJE - FCJE) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) AS ZRJE,
               SUM(CASE
                       WHEN YWKM IN (SELECT C.PARAM_VALUE
                                       FROM T_PARAM_VALUE C
                                      WHERE C.PARAM_KIND = '02') THEN
                        (FCJE - SRJE) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) AS ZCJE,
               SUM(CASE
                       WHEN YWKM IN (SELECT C.PARAM_VALUE
                                       FROM T_PARAM_VALUE C
                                      WHERE C.PARAM_KIND = '03') THEN
                        (FCJE - SRJE) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) AS FWYJ --服务佣金
          FROM DSC_STAT.VW_XY_ZJMXLS
         WHERE RQ = VN_TJRQ
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计资金转入转出，服务佣金指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10008】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“融资余额，融券余额，授信额度，可用保证金，担保比例”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --统计融资余额，融券余额
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, RZJE, RQJE, RZSXED, RQSXED, KYBZJ, DBBL)
        SELECT YYB,
               KHH,
               SUM(RZJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)),
               SUM(RQJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)),
               SUM(RZED * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS RZSXED,
               SUM(RQED * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS RQSXED,
               SUM(KYBZJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS KYBZJ,
               SUM(DBBL) AS DBBL
          FROM (SELECT RQ, BZ, YYB, KHH, RZJE, RQJE, RZED, RQED, BZJKYYE AS KYBZJ, DBBL
                  FROM DSC_BAS.T_XY_HTXX
                UNION ALL
                SELECT RQ, BZ, YYB, KHH, RZJE, RQJE, RZED, RQED, BZJKYYE AS KYBZJ, DBBL
                  FROM DSC_HIS.T_XY_HTXX_HIS)
         WHERE RQ = VN_TJRQ
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“融资余额，融券余额，授信额度，可用保证金，担保比例”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10009】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“沪A市值，深A市值”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --统计沪A市值，深A市值
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (KHH, YYB, ZQSZ_HA, ZQSZ_SA)
        SELECT KHH,
               YYB,
               SUM(ZQSZ_HAZB) AS ZQSZ_HA,
               SUM(ZQSZ_SAZB + ZQSZ_CYB + ZQSZ_ZXB) AS ZQSZ_SA
          FROM (SELECT KHH,
                       YYB,
                       SUM(CASE
                               WHEN T.ZQPZ = '110' THEN --沪A主板
                                ZQSZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZQSZ_HAZB,

                       SUM(CASE
                               WHEN T.ZQPZ = '111' THEN --深A主板
                                ZQSZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZQSZ_SAZB,

                       SUM(CASE
                               WHEN T.ZQPZ = '113' THEN --创业板
                                ZQSZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZQSZ_CYB,
                       0 AS ZQSZ_ZXB
                  FROM (SELECT A.KHH,
                               A.YYB,
                               A.BZ,
                               ZXSZ AS ZQSZ, --市值=证券数量*交易单位*(最新收盘价+1*最新利息)
                               NVL(C.JB3_ZQPZ, 999) AS ZQPZ
                          FROM (SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, LJYK, CCCB, BZ
                                  FROM DSC_BAS.T_XY_ZQYE
                                UNION ALL
                                SELECT RQ,
                                       KHH,
                                       YYB,
                                       ZQDM,
                                       JYS,
                                       ZQLB,
                                       ZXSZ,
                                       0 AS LJYK,
                                       CCCB,
                                       BZ
                                  FROM DSC_HIS.T_XY_ZQYELS) A,
                               (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ
                                  FROM DSC_CFG.T_ZQPZ_DY D
                                 WHERE D.JB3_ZQPZ <> '112'
                                   AND IS_JSSZ = 1) C
                         WHERE A.RQ = VN_TJRQ
                           AND A.ZQLB = C.ZQLB
                           AND A.JYS = C.JYS
                           AND NOT (A.ZQDM LIKE '002%' AND A.ZQLB = 'A0' AND A.JYS = '1') --排除中小板数据（002开头的有申购 ZQLB=A3 的数据）
                           AND C.JB3_ZQPZ IN ('110', '111', '113')) T
                 GROUP BY KHH, YYB
                UNION ALL
                SELECT A.KHH,
                       A.YYB,
                       0 AS ZQSZ_HAZB,
                       0 AS ZQSZ_SAZB,
                       0 AS ZQSZ_CYB,
                       SUM(A.ZXSZ) AS ZQSZ_ZXB
                  FROM (SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, LJYK, CCCB, BZ
                          FROM DSC_BAS.T_XY_ZQYE
                        UNION ALL
                        SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, 0 AS LJYK, CCCB, BZ
                          FROM DSC_HIS.T_XY_ZQYELS) A
                 WHERE A.RQ = VN_TJRQ
                   AND A.ZQLB = 'A0'
                   AND A.JYS = '1'
                   AND A.ZQDM LIKE '002%' --中小板数据
                 GROUP BY A.KHH, A.YYB)
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“沪A市值，深A市值”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10010】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表汇总统计插入表[DSC_STAT.T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --2.1将指标统计到目标表
    --插入数据
    INSERT INTO DSC_STAT.T_STAT_RZRQ_R
        (RQ,
         YYB,
         GRJG,
         KHH,
         ZZC,
         ZFZ,
         ZJYE,
         ZQSZ,
         ZQSZ_HA,
         ZQSZ_SA,
         XYDJ,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         YJ,
         JYJ,
         RZFZ,
         RQFZ,
         GHBJ,
         XZFZ,
         GHLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         RZFY,
         XZRZFZ,
         XZRQFZ,
         RQFY,
         PCCS,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ_PT,
         JYJ_XY,
         YK,
         DBBL,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         JYBS,
         JYBS_RZ,
         JYBS_RQ,
         XZLX,
         XZRZLX,
         XZRQLX,
         ZBCS,
         RZJE,
         RQJE,
         CCCB,
         DRGHBJ,
         DRGHLX,
         FYFZ,
         QTFZ)
        SELECT RQ,
               B.YYB,
               B.GRJG AS GRJG,
               B.KHH,
               ZZC,
               ZFZ,
               ZJYE,
               ZQSZ,
               ZQSZ_HA,
               ZQSZ_SA,
               B.XYDJ,
               RZSXED,
               RQSXED,
               JYL_RZ,
               JYL_RQ,
               YJ,
               JYJ,
               RZFZ,
               RQFZ,
               GHBJ,
               XZFZ,
               GHLX,
               YJLX,
               RZYJLX,
               RQYJLX,
               RZFY,
               XZRZFZ,
               XZRQFZ,
               RQFY,
               PCCS,
               JYL,
               JYL_PT,
               JYL_XY,
               YJ_PT,
               YJ_XY,
               JYJ_PT,
               JYJ_XY,
               (ZZC - ZFZ) - (SRZZC - SRZFZ) - (ZRJE - ZCJE) - (ZRSZ - ZCSZ) YK,
               DBBL,
               KYBZJ,
               ZRJE,
               ZCJE,
               ZRSZ,
               ZCSZ,
               FWYJ,
               JYBS,
               JYBS_RZ,
               JYBS_RQ,
               XZLX,
               XZRZLX,
               XZRQLX,
               ZBCS,
               RZJE,
               RQJE,
               CCCB,
               DRGHBJ,
               DRGHLX,
               FYFZ,
               QTFZ
          FROM (SELECT VN_TJRQ AS RQ,
                       KHH, --客户号
                       SUM(NVL(ZJYE, 0) + NVL(ZQSZ, 0)) AS ZZC, --总资产 = 担保现金+ 担保股票市值
                       SUM(NVL(RZFZ, 0) + NVL(RQFZ, 0) + NVL(QTFZ, 0) + NVL(FYFZ, 0) +
                           NVL(YJLX, 0)) AS ZFZ, --负债
                       SUM(NVL(ZJYE, 0)) AS ZJYE, --担保现金
                       SUM(NVL(ZQSZ, 0)) AS ZQSZ, --担保股票市值
                       SUM(NVL(ZQSZ_HA, 0)) AS ZQSZ_HA, --沪A证券市值
                       SUM(NVL(ZQSZ_SA, 0)) AS ZQSZ_SA, --深A证券市值
                       SUM(NVL(RZSXED, 0)) AS RZSXED, --融资授信额度
                       SUM(NVL(RQSXED, 0)) AS RQSXED, --融券授信额度
                       SUM(NVL(JYL_RQ, 0)) AS JYL_RQ, --融资成交金额
                       SUM(NVL(JYL_RZ, 0)) AS JYL_RZ, --融券成交金额
                       SUM(NVL(YJ, 0)) AS YJ, --毛佣金
                       SUM(NVL(JYJ, 0)) AS JYJ, --净佣金
                       SUM(NVL(RZFZ, 0)) AS RZFZ, --融资负债
                       SUM(NVL(RQFZ, 0)) AS RQFZ, --融券负债
                       SUM(NVL(GHBJ, 0)) AS GHBJ, --归还本金
                       SUM(NVL(JYL_RZ, 0) + NVL(JYL_RQ, 0) + NVL(RZFY, 0) + NVL(RQFY, 0)) AS XZFZ, --新增负债=融资成交金额+融券成交金额+融资费用+融券费用
                       SUM(NVL(JYL_RZ, 0) + NVL(RZFY, 0)) XZRZFZ,
                       SUM(NVL(JYL_RQ, 0) + NVL(RQFY, 0)) XZRQFZ,
                       SUM(NVL(GHLX, 0)) AS GHLX, --归还利息
                       SUM(NVL(YJLX, 0)) AS YJLX, --预计利息
                       SUM(NVL(RZYJLX, 0)) AS RZYJLX, --融资使用预计利息
                       SUM(NVL(RQYJLX, 0)) AS RQYJLX, --融券使用预计利息
                       SUM(NVL(RZFY, 0)) AS RZFY, --融资费用
                       SUM(NVL(RQFY, 0)) AS RQFY, --融券费用
                       SUM(NVL(PCCS, 0)) AS PCCS, --当日平仓次数
                       SUM(NVL(JYL, 0)) AS JYL, --成交金额
                       SUM(NVL(JYL_PT, 0)) AS JYL_PT,
                       SUM(NVL(JYL_XY, 0)) AS JYL_XY,
                       SUM(NVL(YJ_PT, 0)) AS YJ_PT,
                       SUM(NVL(YJ_XY, 0)) AS YJ_XY,
                       SUM(NVL(JYJ_PT, 0)) AS JYJ_PT,
                       SUM(NVL(JYJ_XY, 0)) AS JYJ_XY,
                       SUM(NVL(SRZZC, 0)) AS SRZZC,
                       SUM(NVL(SRZFZ, 0)) AS SRZFZ,
                       SUM(NVL(DBBL, 0)) AS DBBL, --担保比例：=总资产/总负债
                       SUM(NVL(KYBZJ, 0)) KYBZJ,
                       SUM(NVL(ZRJE, 0)) ZRJE,
                       SUM(NVL(ZCJE, 0)) ZCJE,
                       SUM(NVL(ZRSZ, 0)) ZRSZ,
                       SUM(NVL(ZCSZ, 0)) ZCSZ,
                       SUM(NVL(FWYJ, 0)) AS FWYJ,
                       SUM(NVL(JYBS, 0)) AS JYBS,
                       SUM(NVL(JYBS_RZ, 0)) AS JYBS_RZ,
                       SUM(NVL(JYBS_RQ, 0)) AS JYBS_RQ,
                       SUM(NVL(XZRZLX, 0) + NVL(XZRQLX, 0) + NVL(XZQTLX, 0)) AS XZLX,
                       SUM(NVL(XZRZLX, 0)) AS XZRZLX,
                       SUM(NVL(XZRQLX, 0)) AS XZRQLX,
                       SUM(NVL(ZBCS, 0)) AS ZBCS, --当日追保次数
                       SUM(NVL(RZJE, 0)) AS RZJE,
                       SUM(NVL(RQJE, 0)) AS RQJE,
                       SUM(NVL(CCCB, 0)) AS CCCB,
                       SUM(NVL(DRGHBJ, 0)) AS DRGHBJ,
                       SUM(NVL(DRGHLX, 0)) AS DRGHLX,
                       SUM(NVL(FYFZ, 0)) AS FYFZ,
                       SUM(NVL(QTFZ, 0)) AS QTFZ
                  FROM DSC_STAT.TMP_T_STAT_RZRQ_R
                 GROUP BY KHH) A,
               DSC_BAS.T_KHXX_RZRQ B
         WHERE A.KHH = B.KHH;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表汇总统计插入表[DSC_STAT.T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --清空临时表
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表[TMP_T_STAT_RZRQ_R]。',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_T_STAT_RZRQ_R';
    --记录日志明细——结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表[TMP_T_STAT_RZRQ_R]。',
                              I_S_CHANGEDESC     => '临时表[TMP_T_STAT_RZRQ_R]已清空。',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_RZRQ_HS08_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_RZRQ_JZU_R(O_N_CODE OUT INT,
                                                       O_S_NOTE OUT VARCHAR2,
                                                       I_N_TJRQ IN INT,
                                                       I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   融资融券综合状况日表
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
               担保比例：= 总资产/总负债

         注意事项：
         数据源：
                 DSC_BAS.T_XY_JGMXLS         ：交割明细流水
                 DSC_BAS.T_KHXX_RZRQ         ：客户信息-融资融券
                 DSC_BAS.T_HTXX              ：合同信息
                 DSC_BAS.T_XY_ZJYE           ：资金余额
                 DSC_BAS.T_XY_ZQYE           ：证券余额
                 DSC_BAS.T_FZXX              ：负债信息
         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                    操作
         胡阳明      2013/05/20                  创建
         林伟        2013/05/20                  修改：临时表增加上日归还利息，融资融券授信额度从合同信息表统计
         胡阳明      2013/05/21                  修改：表的指标和名称进行大副调整，过程也进行整改。
         胡阳明      2013/06/21                  修改：负债信息取值时增加限定条件fzzt=0
         胡阳明　　　2013/08/28                  修改：新增负债利息的取法，指标不要加FZZT=0
         胡阳明      2013/10/17                  修改：新增持仓成本指标
         胡阳明      2013/10/22                  修改：净佣金算取值，从“交割明细”直接取
         胡阳明      2013/11/11                  修改：取融资负债，融券负债增加条件限制
         林伟        2014/01/15                  修改：新增沪A市值和深A市值指标
         黄玉钰      2014/04/03                  修改：合同信息中加htzt=0的限制
         陈德铸      2014/06/30                  修改：新增沪A负债和深A负债指标
         陈德铸      2014/07/29                  修改：1）总负债由原先“融资负债+融券负债”调整为“融资负债+融券负债+利息负债”
                                                       2）盈亏算法调整为“（本日总资产-本日总负债）-（上日总资产-上日总负债）-（存入金额-取出金额）-（转入市值-转出市值）”
                                                       3）成交笔数改为一条交割一笔，而不是SUM(CJBS)
         刘官勤     2014/09/17                   修改：DSC_STAT.T_STAT_RZRQ_R中RZSXED, RQSXED两个字段取值从DSC_BAS.T_XY_HTXX表中的RZED、RQED调整为从RZXYED、RQXYED取值
         徐群智     2014/04/15                   修改:在最后一步插入数据到目标表时，临时表和客户信息表直接通过KHH关联，去掉YYB的关联条件
         吴邦杰     2015/07/09                   修改：增加JYL_PT_MR,JYL_PT_MC,JYL_XY_MR,JYL_XY_MC字段
         吴邦杰     2015/09/22                   修改：1、修改日志O_S_NOTE
                                                       2、插入目标表时，调整JYL_PT_MR,JYL_PT_MC,JYL_XY_MR,JYL_XY_MC的位置对应没有问题
                                                       3、插入目标表时，YYB从T_KHXX_RZRQ中取
         陈德铸     2015/11/28                   修改：修正新增利息、归还利息等的数据处理问题
         黄宏峰     2016/01/05                   修改：1、证券市值、持仓成本取值逻辑调整，只取计算市值部分，
                                                       2、增加多币种判断处理
         黄宏峰     2016/02/01                   修改：1、调整汇率取值位置，当取不到汇率参数时，能够将错误写入日志表
         胡丹丹     2016/08/02                   修改：1、修改融资金额、融券金额从负债信息表取数；2、在计算新增利息时考虑已归还利息
         黄宏峰     2016/08/17                   修改：调整YJLX取值逻辑，原有取值字段已包含FDLX与FXYJLX，不用再次加上FDLX与FDYJLX
    */
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_T_DATE    NUMBER(8) := DSC_CFG.F_GET_JYR_DATE(I_N_TJRQ, -1); --上个交易日
    VN_HL_HKD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD    DSC_CFG.T_HLCS.GSBL%TYPE;
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --重做删除原数据
    IF I_N_REDO = 1 THEN
        O_S_NOTE := '【ERROR-10001】';
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_RZRQ_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE DSC_STAT.T_STAT_RZRQ_R WHERE RQ = I_N_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;

        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_RZRQ_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_RZRQ_KHH_ZHZK_R]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --清空临时表
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表[TMP_T_STAT_RZRQ_R]。',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_T_STAT_RZRQ_R';
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表[TMP_T_STAT_RZRQ_R]。',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '【ERROR-10002】';
    -----------------------------------------------
    ------1.1获取上日还款金额和上日归还利息
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计上日还款金额和上日归还利息，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, SRGHBJ, SRGHLX, SRZZC, SRZFZ)
        SELECT YYB, KHH, GHBJ AS SRGHBJ, GHLX AS SRGHLX, ZZC AS SRZZC, ZFZ AS SRZFZ --ADD BY CHENDEZHU AT 20140729 增加SRZFZ
          FROM DSC_STAT.T_STAT_RZRQ_R
         WHERE RQ = VN_T_DATE;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计上日还款金额和上日归还利息，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10002_1】';
    -----------------------------------------------
    ------1.11从指令信息表中获取追保次数
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计指令信息表中的追保次数，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZBCS)
        SELECT YYB, KHH, COUNT(1) AS ZBCS
          FROM DSC_BAS.T_XY_ZLXX
         WHERE JSRQ = VN_TJRQ
           AND ZLLB = '1'
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计指令信息表中的追保次数，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10003】';
    ------1.1融资/融券成交金额，融资/融券费用，融券费用=jysfy+S1  --jysfy交易所费用 交割表不知道怎么算
    --- 交易所费用
    -- 交易所费用
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计两融相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB,
         KHH,
         JYL_RZ,
         JYL_RQ,
         RZFY,
         RQFY,
         YJ,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ,
         JYJ_PT,
         JYJ_XY,
         PCCS,
         JYBS,
         JYBS_RZ,
         JYBS_RQ,
         JYL_PT_MR,
         JYL_PT_MC,
         JYL_XY_MR,
         JYL_XY_MC)
        SELECT YYB,
               KHH,
               SUM(CASE
                       WHEN JYLB = '61' THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_RZ, --融资成交金额
               SUM(CASE
                       WHEN JYLB = '64' THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_RQ, --融券成交金额
               SUM(CASE
                       WHEN JYLB = '61' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6) *
                        DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RZFY, --融资费用
               SUM(CASE
                       WHEN JYLB = '64' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6) *
                        DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RQFY, --融券费用
               SUM(S1 * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) YJ, --融资融券毛佣金
               SUM(CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) JYL, --所有成交金额
               SUM(CASE
                       WHEN JYLB NOT IN ('61', '62', '63', '64', '71', '72') THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_PT, --普通成交金额
               SUM(CASE
                       WHEN JYLB IN ('61', '62', '63', '64', '71', '72') THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_XY, --信用交易
               SUM(CASE
                       WHEN JYLB NOT IN ('61', '62', '63', '64', '71', '72') THEN
                        S1 * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) YJ_PT, --普通佣金
               SUM(CASE
                       WHEN JYLB IN ('61', '62', '63', '64', '71', '72') THEN
                        S1 * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) YJ_XY, --信用佣金
               SUM(JYJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) JYJ,
               SUM(CASE
                       WHEN JYLB NOT IN ('61', '62', '63', '64', '71', '72') THEN
                        JYJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYJ_PT, --普通净佣金
               SUM(CASE
                       WHEN JYLB IN ('61', '62', '63', '64', '71', '72') THEN
                        JYJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYJ_XY, --信用净佣金
               SUM(CASE
                       WHEN JYLB IN ('71', '72') THEN
                        1
                       ELSE
                        0
                   END) AS PCCS, --平仓次数
               COUNT(*) AS JYBS,
               SUM(CASE
                       WHEN JYLB IN ('61') THEN
                        1
                       ELSE
                        0
                   END) AS JYBS_RZ,
               SUM(CASE
                       WHEN JYLB IN ('64') THEN
                        1
                       ELSE
                        0
                   END) AS JYBS_RQ,
               SUM(CASE
                       WHEN JYLB NOT IN ('61', '62', '63', '64', '71', '72') AND
                            (YSJE < 0 AND JYLB <> '2') THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_PT_MR, --普通成交金额_买入
               SUM(CASE
                       WHEN JYLB NOT IN ('61', '62', '63', '64', '71', '72') AND
                            (YSJE > 0 OR (YSJE < 0 AND JYLB = '2')) THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_PT_MC, --普通成交金额_卖出
               SUM(CASE
                       WHEN JYLB IN ('61', '62', '63', '64', '71', '72') AND YSJE < 0 THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_XY_MR, --信用交易__买入
               SUM(CASE
                       WHEN JYLB IN ('61', '62', '63', '64', '71', '72') AND YSJE > 0 THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_XY_MC --信用交易_卖出
          FROM (SELECT *
                  FROM DSC_BAS.T_XY_JGMXLS
                UNION ALL
                SELECT *
                  FROM DSC_HIS.T_XY_JGMXLS_HIS)
         WHERE CJRQ = VN_TJRQ
           AND JYLB IN (SELECT JYLB FROM DSC_CFG.T_JYLB WHERE IS_JSJYL = 1)
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;

    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计两融相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    ------担保划入，划出
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保划入，担保划出，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZRSZ, ZCSZ)
        SELECT YYB,
               KHH,

               SUM(CASE
                       WHEN JYLB = '65' THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) ZRSZ, --委托类别=担保划入
               SUM(CASE
                       WHEN JYLB = '66' THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) ZCSZ --委托类别=担保划出
          FROM DSC_STAT.VW_XY_JGMXLS_JS
         WHERE CJRQ = VN_TJRQ
           AND JYLB IN ('66', '65')
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保划入，担保划出，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10004】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计负债信息相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --1.3统计负债的相关指标
    --融资负债，融券负债，融资预计利息，融券预计利息，预计利息，归还利息，还款金额
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, RZFZ, RQFZ, RZYJLX, RQYJLX, YJLX)
        SELECT YYB,
               KHH,
               SUM(CASE
                       WHEN JYLB = '61' THEN
                        RZFZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RZFZ, --融资负债
               SUM(CASE
                       WHEN JYLB = '64' THEN
                        RQFZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RQFZ, --融券负债
               SUM(CASE
                       WHEN JYLB = '61' THEN
                        NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RZYJLX, --融资预计利息
               SUM(CASE
                       WHEN JYLB = '64' THEN
                        NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RQYJLX, --融券预计利息
               SUM(NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) YJLX -- 预计利息

          FROM (SELECT BZ, RZFZ, RQFZ, JYLB, YJLX, GHLX, HKJE, KHH, YYB, FXYJLX, FDLX
                  FROM DSC_HIS.T_XY_FZXX_HIS
                 WHERE RQ = VN_TJRQ
                   AND FZZT IN ('0', '1')
                UNION ALL
                SELECT BZ, RZFZ, RQFZ, JYLB, YJLX, GHLX, HKJE, KHH, YYB, FXYJLX, FDLX
                  FROM DSC_BAS.T_XY_FZXX
                 WHERE RQ = VN_TJRQ
                   AND FZZT IN ('0', '1'))
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计负债信息相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10004】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计本日新增预计相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --1.3统计负债的相关指标
    --本日预计利息，本日融资利息，本日融券利息
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, XZLX, XZRZLX, XZRQLX, GHLX, GHBJ, RZJE, RQJE)
        SELECT T1.YYB,
               T1.KHH,
               NVL(T1.YJLX_BR, 0) - NVL(T2.YJLX_SR, 0) AS XZLX,
               NVL(T1.RZYJLX_BR, 0) - NVL(T2.RZYJLX_SR, 0) AS XZRZLX,
               NVL(T1.RQYJLX_BR, 0) - NVL(T2.RQYJLX_SR, 0) AS XZRQLX,
               GHLX AS GHLX,
               GHBJ AS GHBJ,
               T1.RZJE,
               T1.RQJE
          FROM (SELECT YYB,
                       KHH,
                       SUM(NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS YJLX_BR, --预计利息
                       SUM(CASE
                               WHEN JYLB = '61' THEN
                                NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS RZYJLX_BR, --融资预计利息
                       SUM(CASE
                               WHEN JYLB = '64' THEN
                                NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS RQYJLX_BR, --融券预计利息
                       SUM(GHLX * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS GHLX, --归还利息
                       SUM(HKJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS GHBJ, --还款金额
                       SUM(RZJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) RZJE,
                       SUM(RQJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) RQJE
                  FROM (SELECT BZ,
                               RZFZ,
                               RQFZ,
                               JYLB,
                               NVL(YJLX, 0) + NVL(GHLX, 0) YJLX,
                               GHLX,
                               HKJE,
                               KHH,
                               YYB,
                               FXYJLX,
                               FDLX,
                               NVL(RZFZ, 0) - NVL(RZFY, 0) RZJE,
                               RQFZ RQJE
                          FROM DSC_HIS.T_XY_FZXX_HIS
                         WHERE RQ = VN_TJRQ
                        UNION ALL
                        SELECT BZ,
                               RZFZ,
                               RQFZ,
                               JYLB,
                               NVL(YJLX, 0) + NVL(GHLX, 0) YJLX,
                               GHLX,
                               HKJE,
                               KHH,
                               YYB,
                               FXYJLX,
                               FDLX,
                               NVL(RZFZ, 0) - NVL(RZFY, 0) RZJE,
                               RQFZ RQJE
                          FROM DSC_BAS.T_XY_FZXX
                         WHERE RQ = VN_TJRQ)
                 GROUP BY KHH, YYB) T1,
               (SELECT KHH,
                       SUM(NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) YJLX_SR, --上日预计利息
                       SUM(CASE
                               WHEN JYLB = '61' THEN
                                NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) RZYJLX_SR, --上日融资预计利息
                       SUM(CASE
                               WHEN JYLB = '64' THEN
                                NVL(YJLX, 0) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) RQYJLX_SR --上日融券预计利息
                  FROM (SELECT BZ,
                               RZFZ,
                               RQFZ,
                               JYLB,
                               YJLX + GHLX YJLX,
                               GHLX,
                               HKJE,
                               KHH,
                               YYB,
                               FXYJLX,
                               FDLX
                          FROM DSC_HIS.T_XY_FZXX_HIS
                         WHERE RQ = VN_T_DATE
                           AND FZZT != 3
                        UNION ALL
                        SELECT BZ,
                               RZFZ,
                               RQFZ,
                               JYLB,
                               YJLX + GHLX YJLX,
                               GHLX,
                               HKJE,
                               KHH,
                               YYB,
                               FXYJLX,
                               FDLX
                          FROM DSC_BAS.T_XY_FZXX
                         WHERE RQ = VN_T_DATE
                           AND FZZT != 3)
                 GROUP BY KHH) T2
         WHERE T1.KHH = T2.KHH(+);
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计本日新增预计相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10005】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保现金指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --1.4 担保现金
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZJYE)
        SELECT YYB, KHH, SUM(DBXJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) ZJYE
          FROM DSC_STAT.VW_XY_DBXJ
         WHERE RQ = VN_TJRQ
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保现金指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10006】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保市值指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --1.4 担保市值
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZQSZ, CCCB)
        SELECT A.YYB,
               A.KHH,
               SUM(A.ZXSZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) ZQSZ,
               SUM(A.CCCB * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS CCCB
          FROM (SELECT RQ, JYS, ZQLB, YYB, ZXSZ, CCCB, BZ, KHH
                  FROM DSC_BAS.T_XY_ZQYE
                UNION ALL
                SELECT RQ, JYS, ZQLB, YYB, ZXSZ, CCCB, BZ, KHH
                  FROM DSC_HIS.T_XY_ZQYELS) A
         WHERE A.RQ = VN_TJRQ
           AND (JYS, ZQLB) IN
               (SELECT DISTINCT JYS, ZQLB FROM DSC_CFG.T_ZQPZ_DY B WHERE B.IS_JSSZ = 1)
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保市值指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10007】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计资金转入转出，服务佣金指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --1.5资金转入出--注意这是绝对值
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZRJE, ZCJE, FWYJ)
        SELECT YYB,
               KHH,
               SUM(CASE
                       WHEN YWKM IN (SELECT C.PARAM_VALUE
                                       FROM T_PARAM_VALUE C
                                      WHERE C.PARAM_KIND = '01') THEN
                        (SRJE - FCJE) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) AS ZRJE,
               SUM(CASE
                       WHEN YWKM IN (SELECT C.PARAM_VALUE
                                       FROM T_PARAM_VALUE C
                                      WHERE C.PARAM_KIND = '02') THEN
                        (FCJE - SRJE) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) AS ZCJE,
               SUM(CASE
                       WHEN YWKM IN (SELECT C.PARAM_VALUE
                                       FROM T_PARAM_VALUE C
                                      WHERE C.PARAM_KIND = '03') THEN
                        (FCJE - SRJE) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) AS FWYJ --服务佣金
          FROM DSC_STAT.VW_XY_ZJMXLS
         WHERE RQ = VN_TJRQ
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计资金转入转出，服务佣金指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10008】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“融资余额，融券余额，授信额度，可用保证金，担保比例”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --统计融资余额，融券余额
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, RZSXED, RQSXED, KYBZJ, DBBL)
        SELECT YYB,
               KHH,
               SUM(RZXYED * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS RZSXED,
               SUM(RQXYED * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS RQSXED,
               SUM(KYBZJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS KYBZJ,
               SUM(DBBL) AS DBBL
          FROM (SELECT RQ,
                       BZ,
                       YYB,
                       KHH,
                       RZJE,
                       RQJE,
                       RZXYED,
                       RQXYED,
                       BZJKYYE AS KYBZJ,
                       DBBL,
                       HTZT
                  FROM DSC_BAS.T_XY_HTXX
                UNION ALL
                SELECT RQ,
                       BZ,
                       YYB,
                       KHH,
                       RZJE,
                       RQJE,
                       RZXYED,
                       RQXYED,
                       BZJKYYE AS KYBZJ,
                       DBBL,
                       HTZT
                  FROM DSC_HIS.T_XY_HTXX_HIS)
         WHERE RQ = VN_TJRQ
           AND HTZT = 0
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“融资余额，融券余额，授信额度，可用保证金，担保比例”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10009】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“沪A市值，深A市值”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --统计沪A市值，深A市值
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (KHH, YYB, ZQSZ_HA, ZQSZ_SA)
        SELECT KHH,
               YYB,
               SUM(ZQSZ_HAZB) AS ZQSZ_HA,
               SUM(ZQSZ_SAZB + ZQSZ_CYB + ZQSZ_ZXB) AS ZQSZ_SA
          FROM (SELECT KHH,
                       YYB,
                       SUM(CASE
                               WHEN T.ZQPZ = '110' THEN --沪A主板
                                ZQSZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZQSZ_HAZB,

                       SUM(CASE
                               WHEN T.ZQPZ = '111' THEN --深A主板
                                ZQSZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZQSZ_SAZB,

                       SUM(CASE
                               WHEN T.ZQPZ = '113' THEN --创业板
                                ZQSZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZQSZ_CYB,
                       0 AS ZQSZ_ZXB
                  FROM (SELECT A.KHH,
                               A.YYB,
                               A.BZ,
                               ZXSZ AS ZQSZ, --市值=证券数量*交易单位*(最新收盘价+1*最新利息)
                               NVL(C.JB3_ZQPZ, 999) AS ZQPZ
                          FROM (SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, LJYK, CCCB, BZ
                                  FROM DSC_BAS.T_XY_ZQYE
                                UNION ALL
                                SELECT RQ,
                                       KHH,
                                       YYB,
                                       ZQDM,
                                       JYS,
                                       ZQLB,
                                       ZXSZ,
                                       0 AS LJYK,
                                       CCCB,
                                       BZ
                                  FROM DSC_HIS.T_XY_ZQYELS) A,
                               (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ
                                  FROM DSC_CFG.T_ZQPZ_DY D
                                 WHERE D.JB3_ZQPZ <> '112'
                                   AND IS_JSSZ = 1) C
                         WHERE A.RQ = VN_TJRQ
                           AND A.ZQLB = C.ZQLB
                           AND A.JYS = C.JYS
                           AND NOT (A.ZQDM LIKE '002%' AND A.ZQLB = 'A0' AND A.JYS = '1') --排除中小板数据（002开头的有申购 ZQLB=A3 的数据）
                           AND C.JB3_ZQPZ IN ('110', '111', '113')) T
                 GROUP BY KHH, YYB
                UNION ALL
                SELECT A.KHH,
                       A.YYB,
                       0 AS ZQSZ_HAZB,
                       0 AS ZQSZ_SAZB,
                       0 AS ZQSZ_CYB,
                       SUM(A.ZXSZ) AS ZQSZ_ZXB
                  FROM (SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, LJYK, CCCB, BZ
                          FROM DSC_BAS.T_XY_ZQYE
                        UNION ALL
                        SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, 0 AS LJYK, CCCB, BZ
                          FROM DSC_HIS.T_XY_ZQYELS) A
                 WHERE A.RQ = VN_TJRQ
                   AND A.ZQLB = 'A0'
                   AND A.JYS = '1'
                   AND A.ZQDM LIKE '002%' --中小板数据
                 GROUP BY A.KHH, A.YYB)
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“沪A市值，深A市值”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10010】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“沪A负债，深A负债”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --统计沪A负债，深A负债
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (KHH, YYB, ZFZ_HA, ZFZ_SA)
        SELECT KHH,
               YYB,
               SUM(ZFZ_HAZB) AS ZFZ_HA,
               SUM(ZFZ_SAZB + ZFZ_CYB + ZFZ_ZXB) AS ZFZ_SA
          FROM (SELECT KHH,
                       YYB,
                       SUM(CASE
                               WHEN T.ZQPZ = '110' THEN --沪A主板
                                (RZFZ + RQFZ + RZYJLX + RQYJLX) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZFZ_HAZB,

                       SUM(CASE
                               WHEN T.ZQPZ = '111' THEN --深A主板
                                (RZFZ + RQFZ + RZYJLX + RQYJLX) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZFZ_SAZB,

                       SUM(CASE
                               WHEN T.ZQPZ = '113' THEN --创业板
                                (RZFZ + RQFZ + RZYJLX + RQYJLX) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZFZ_CYB,
                       0 AS ZFZ_ZXB
                  FROM (SELECT A.KHH,
                               A.YYB,
                               A.BZ,
                               CASE
                                   WHEN JYLB = '61' THEN
                                    RZFZ
                                   ELSE
                                    0
                               END AS RZFZ, --融资负债
                               CASE
                                   WHEN JYLB = '64' THEN
                                    RQFZ
                                   ELSE
                                    0
                               END AS RQFZ, --融券负债
                               CASE
                                   WHEN JYLB = '61' THEN
                                    NVL(YJLX, 0)
                                   ELSE
                                    0
                               END RZYJLX, --融资预计利息
                               CASE
                                   WHEN JYLB = '64' THEN
                                    NVL(YJLX, 0)
                                   ELSE
                                    0
                               END RQYJLX, --融券预计利息
                               NVL(C.JB3_ZQPZ, 999) AS ZQPZ
                          FROM (SELECT BZ,
                                       RZFZ,
                                       RQFZ,
                                       JYLB,
                                       KHH,
                                       YYB,
                                       ZQDM,
                                       JYS,
                                       ZQLB,
                                       YJLX,
                                       FXYJLX,
                                       FDLX
                                  FROM DSC_HIS.T_XY_FZXX_HIS
                                 WHERE RQ = VN_TJRQ
                                   AND FZZT IN ('0', '1')
                                UNION ALL
                                SELECT BZ,
                                       RZFZ,
                                       RQFZ,
                                       JYLB,
                                       KHH,
                                       YYB,
                                       ZQDM,
                                       JYS,
                                       ZQLB,
                                       YJLX,
                                       FXYJLX,
                                       FDLX
                                  FROM DSC_BAS.T_XY_FZXX
                                 WHERE RQ = VN_TJRQ
                                   AND FZZT IN ('0', '1')) A,
                               (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ
                                  FROM DSC_CFG.T_ZQPZ_DY D
                                 WHERE D.JB3_ZQPZ <> '112'
                                   AND IS_JSSZ = 1) C
                         WHERE A.ZQLB = C.ZQLB
                           AND A.JYS = C.JYS
                           AND NOT (A.ZQDM LIKE '002%' AND A.ZQLB = 'A0' AND A.JYS = '1') --排除中小板数据（002开头的有申购 ZQLB=A3 的数据）
                           AND C.JB3_ZQPZ IN ('110', '111', '113')) T
                 GROUP BY KHH, YYB
                UNION ALL
                SELECT A.KHH,
                       A.YYB,
                       0 AS ZFZ_HAZB,
                       0 AS ZFZ_SAZB,
                       0 AS ZFZ_CYB,
                       SUM((NVL(RZFZ, 0) + NVL(RQFZ, 0) + NVL(RZYJLX, 0) + NVL(RQYJLX, 0)) *
                           DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS ZFZ_ZXB
                  FROM (SELECT BZ,
                               JYLB,
                               KHH,
                               YYB,
                               ZQDM,
                               JYS,
                               ZQLB,
                               CASE
                                   WHEN JYLB = '61' THEN
                                    RZFZ --融资负债
                                   ELSE
                                    0
                               END AS RZFZ,
                               CASE
                                   WHEN JYLB = '64' THEN
                                    RQFZ --融券负债
                                   ELSE
                                    0
                               END AS RQFZ,
                               CASE
                                   WHEN JYLB = '61' THEN
                                    NVL(YJLX, 0) --融资预计利息
                                   ELSE
                                    0
                               END AS RZYJLX,
                               CASE
                                   WHEN JYLB = '64' THEN
                                    NVL(YJLX, 0) --融券预计利息
                                   ELSE
                                    0
                               END AS RQYJLX
                          FROM DSC_HIS.T_XY_FZXX_HIS
                         WHERE RQ = VN_TJRQ
                           AND FZZT IN ('0', '1')
                        UNION ALL
                        SELECT BZ,
                               JYLB,
                               KHH,
                               YYB,
                               ZQDM,
                               JYS,
                               ZQLB,
                               CASE
                                   WHEN JYLB = '61' THEN
                                    RZFZ --融资负债
                                   ELSE
                                    0
                               END AS RZFZ,
                               CASE
                                   WHEN JYLB = '64' THEN
                                    RQFZ --融券负债
                                   ELSE
                                    0
                               END AS RQFZ,
                               CASE
                                   WHEN JYLB = '61' THEN
                                    NVL(YJLX, 0) --融资预计利息
                                   ELSE
                                    0
                               END AS RZYJLX,
                               CASE
                                   WHEN JYLB = '64' THEN
                                    NVL(YJLX, 0) --融券预计利息
                                   ELSE
                                    0
                               END AS RQYJLX
                          FROM DSC_BAS.T_XY_FZXX
                         WHERE RQ = VN_TJRQ
                           AND FZZT IN ('0', '1')) A
                 WHERE A.ZQLB = 'A0'
                   AND A.JYS = '1'
                   AND A.ZQDM LIKE '002%' --中小板数据
                 GROUP BY A.KHH, A.YYB)
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“沪A负债，深A负债”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10011】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表汇总统计插入表[DSC_STAT.T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --2.1将指标统计到目标表
    --插入数据
    INSERT INTO DSC_STAT.T_STAT_RZRQ_R
        (RQ,
         YYB,
         GRJG,
         KHH,
         ZZC,
         ZFZ,
         ZFZ_HA,
         ZFZ_SA,
         ZJYE,
         ZQSZ,
         ZQSZ_HA,
         ZQSZ_SA,
         XYDJ,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         YJ,
         JYJ,
         RZFZ,
         RQFZ,
         GHBJ,
         XZFZ,
         GHLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         RZFY,
         XZRZFZ,
         XZRQFZ,
         RQFY,
         PCCS,
         JYL,
         JYL_PT,
         JYL_XY,
         JYL_PT_MR,
         JYL_PT_MC,
         JYL_XY_MR,
         JYL_XY_MC,
         YJ_PT,
         YJ_XY,
         JYJ_PT,
         JYJ_XY,
         YK,
         DBBL,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         JYBS,
         JYBS_RZ,
         JYBS_RQ,
         XZLX,
         XZRZLX,
         XZRQLX,
         ZBCS,
         RZJE,
         RQJE,
         CCCB)
        SELECT RQ,
               B.YYB,
               B.GRJG AS GRJG,
               A.KHH,
               ZZC,
               ZFZ,
               ZFZ_HA,
               ZFZ_SA,
               ZJYE,
               ZQSZ,
               ZQSZ_HA,
               ZQSZ_SA,
               B.XYDJ,
               RZSXED,
               RQSXED,
               JYL_RZ,
               JYL_RQ,
               YJ,
               JYJ,
               RZFZ,
               RQFZ,
               GHBJ,
               XZFZ,
               GHLX,
               YJLX,
               RZYJLX,
               RQYJLX,
               RZFY,
               XZRZFZ,
               XZRQFZ,
               RQFY,
               PCCS,
               JYL,
               JYL_PT,
               JYL_XY,
               JYL_PT_MR,
               JYL_PT_MC,
               JYL_XY_MR,
               JYL_XY_MC,
               YJ_PT,
               YJ_XY,
               JYJ_PT,
               JYJ_XY,
               (NVL(ZZC, 0) - NVL(ZFZ, 0)) - (NVL(SRZZC, 0) - NVL(SRZFZ, 0)) -
               (NVL(ZRJE, 0) - NVL(ZCJE, 0)) - (NVL(ZRSZ, 0) - NVL(ZCSZ, 0)) AS YK, --盈亏：本日净资产-上日净资产-资金净流入-证券净流入
               DBBL,
               KYBZJ,
               ZRJE,
               ZCJE,
               ZRSZ,
               ZCSZ,
               FWYJ,
               JYBS,
               JYBS_RZ,
               JYBS_RQ,
               XZLX,
               XZRZLX,
               XZRQLX,
               ZBCS,
               RZJE,
               RQJE,
               CCCB
          FROM (SELECT VN_TJRQ AS RQ,
                       0 YYB, --直接给个默认值
                       KHH, --客户号
                       SUM(NVL(ZJYE, 0) + NVL(ZQSZ, 0)) AS ZZC, --总资产 = 担保现金+ 担保股票市值
                       SUM(NVL(RZFZ, 0) + NVL(RQFZ, 0) + NVL(YJLX, 0)) AS ZFZ, --负债:融资负债+融券负债+利息负债  MOD BY CHENDEZHU AT 20140728
                       SUM(NVL(ZFZ_HA, 0)) AS ZFZ_HA, --负债_沪A
                       SUM(NVL(ZFZ_SA, 0)) AS ZFZ_SA, --负债_深A
                       SUM(NVL(ZJYE, 0)) AS ZJYE, --担保现金
                       SUM(NVL(ZQSZ, 0)) AS ZQSZ, --担保股票市值
                       SUM(NVL(ZQSZ_HA, 0)) AS ZQSZ_HA, --沪A证券市值
                       SUM(NVL(ZQSZ_SA, 0)) AS ZQSZ_SA, --深A证券市值
                       SUM(NVL(RZSXED, 0)) AS RZSXED, --融资授信额度
                       SUM(NVL(RQSXED, 0)) AS RQSXED, --融券授信额度
                       SUM(NVL(JYL_RQ, 0)) AS JYL_RQ, --融资成交金额
                       SUM(NVL(JYL_RZ, 0)) AS JYL_RZ, --融券成交金额
                       SUM(NVL(YJ, 0)) AS YJ, --毛佣金
                       SUM(NVL(JYJ, 0)) AS JYJ, --净佣金
                       SUM(NVL(RZFZ, 0)) AS RZFZ, --融资负债
                       SUM(NVL(RQFZ, 0)) AS RQFZ, --融券负债
                       SUM(NVL(GHBJ, 0)) AS GHBJ, --归还本金
                       SUM(NVL(JYL_RZ, 0) + NVL(JYL_RQ, 0) + NVL(RZFY, 0) + NVL(RQFY, 0)) AS XZFZ, --新增负债=融资成交金额+融券成交金额+融资费用+融券费用
                       SUM(NVL(JYL_RZ, 0) + NVL(RZFY, 0)) XZRZFZ,
                       SUM(NVL(JYL_RQ, 0) + NVL(RQFY, 0)) XZRQFZ,
                       SUM(NVL(GHLX, 0)) AS GHLX, --归还利息
                       SUM(NVL(YJLX, 0)) AS YJLX, --预计利息
                       SUM(NVL(RZYJLX, 0)) AS RZYJLX, --融资使用预计利息
                       SUM(NVL(RQYJLX, 0)) AS RQYJLX, --融券使用预计利息
                       SUM(NVL(RZFY, 0)) AS RZFY, --融资费用
                       SUM(NVL(RQFY, 0)) AS RQFY, --融券费用
                       SUM(NVL(PCCS, 0)) AS PCCS, --当日平仓次数
                       SUM(NVL(JYL, 0)) AS JYL, --成交金额
                       SUM(NVL(JYL_PT, 0)) AS JYL_PT,
                       SUM(NVL(JYL_XY, 0)) AS JYL_XY,
                       SUM(NVL(JYL_PT_MR, 0)) JYL_PT_MR,
                       SUM(NVL(JYL_PT_MC, 0)) JYL_PT_MC,
                       SUM(NVL(JYL_XY_MR, 0)) JYL_XY_MR,
                       SUM(NVL(JYL_XY_MC, 0)) JYL_XY_MC,
                       SUM(NVL(YJ_PT, 0)) AS YJ_PT,
                       SUM(NVL(YJ_XY, 0)) AS YJ_XY,
                       SUM(NVL(JYJ_PT, 0)) AS JYJ_PT,
                       SUM(NVL(JYJ_XY, 0)) AS JYJ_XY,
                       /*SUM(NVL(ZJYE, 0) + NVL(ZQSZ, 0) - NVL(SRZZC, 0) - NVL(ZRJE, 0) +
                       NVL(ZCJE, 0) - NVL(ZRSZ, 0) + NVL(ZCSZ, 0)) AS YK,*/
                       SUM(NVL(DBBL, 0)) AS DBBL, --担保比例：=总资产/总负债
                       SUM(NVL(KYBZJ, 0)) KYBZJ,
                       SUM(NVL(ZRJE, 0)) ZRJE,
                       SUM(NVL(ZCJE, 0)) ZCJE,
                       SUM(NVL(ZRSZ, 0)) ZRSZ,
                       SUM(NVL(ZCSZ, 0)) ZCSZ,
                       SUM(NVL(FWYJ, 0)) AS FWYJ,
                       SUM(NVL(JYBS, 0)) AS JYBS,
                       SUM(NVL(JYBS_RZ, 0)) AS JYBS_RZ,
                       SUM(NVL(JYBS_RQ, 0)) AS JYBS_RQ,
                       SUM(NVL(XZLX, 0)) AS XZLX,
                       SUM(NVL(XZRZLX, 0)) AS XZRZLX,
                       SUM(NVL(XZRQLX, 0)) AS XZRQLX,
                       SUM(NVL(ZBCS, 0)) AS ZBCS, --当日追保次数
                       SUM(NVL(RZJE, 0)) AS RZJE,
                       SUM(NVL(RQJE, 0)) AS RQJE,
                       SUM(NVL(CCCB, 0)) AS CCCB,
                       SUM(NVL(SRZZC, 0)) AS SRZZC, --上日总资产
                       SUM(NVL(SRZFZ, 0)) AS SRZFZ --上日总负债
                  FROM TMP_T_STAT_RZRQ_R
                 GROUP BY KHH) A
          JOIN DSC_BAS.T_KHXX_RZRQ B
            ON A.KHH = B.KHH;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表汇总统计插入表[DSC_STAT.T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --清空临时表
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表[TMP_T_STAT_RZRQ_R]。',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_T_STAT_RZRQ_R';
    --记录日志明细——结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表[TMP_T_STAT_RZRQ_R]。',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_RZRQ_JZU_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_RZRQ_JZ_R(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN INT,
                                                      I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
          项目名称：   NDSC-数据服务中心
          用户名  ：   DSC_STAT
          过程名称：   融资融券综合状况日表
          参数：
                   英文名称            中文名称                可能取值
                   O_N_CODE            返回代码                0 正常；-1 异常
                   O_S_NOTE            返回信息                字符串信息
                   I_N_TJRQ            统计日期
                   I_N_REDO            0：不重做    1：重做
          返回：

          算法：

          注意事项：
          数据源：
                  DSC_BAS.T_XY_JGMXLS         ：交割明细流水
                  DSC_BAS.T_KHXX_RZRQ      ：客户信息-融资融券
                  DSC_BAS.T_HTXX ：合同信息
                  DSC_BAS.T_XY_ZJYE ：资金余额
                  DSC_BAS.T_XY_ZQYE ：证券余额
                  DSC_BAS.T_FZXX ：负债信息
                  DSC_HIS.T_KHPCJL ：平仓记录
                  DSC_CFG.T_ZQLB_FY :证券类别费率  (这个表暂时没用到)
                  DSC_BAS.T_XY_KHTJ :客户日统计
                  DSC_HIS.T_XY_KHTJ_HIS:客户统计历史
          修改记录;
          ------------------------------------------------------------------------
          操作人      操作时间                    操作
          卢智飞      2013/02/17                  新建，基于陈建平的基础上，适应金正融资融券平台的
                                                        由于许多的数据需要从客户统计获取，所以，需要一个单独的定制。
                                                  修改：增加 DRGHLX,LJGHLX 需要加 GHFY_RQ
          胡阳明      2013/03/13                  修正，资金转入转出的错误和服务佣金取值
          黄玉钰      2013/05/16                  修改：根据NDSC版本调整（删除平仓次数和追保次数赋值）
          胡阳明      2013/05/28                  修改：由于两融进行大副的调整。进行大幅修改。
          黄玉钰      2013/07/11                  修正：YJLX，从T_XY_FZXX改为从T_XY_FZBDMX中统计
                                                        RZFZ RQFZ 改成取RZJE RQJE
          黄玉钰      2013/09/18                  修改：查询DSC_BAS.T_XY_HTXX时，union all DSC_HIS.T_XY_HTXX_HIS表
          黄玉钰      2014/06/05                  修改；对于净佣金的获取，直接使用交割表中的JYJ
          胡丹丹      2014/12/22                  修改：1）总负债由原先“融资负债+融券负债”调整为“融资负债+融券负债+利息负债”
                                                        2）盈亏算法调整为“（本日总资产-本日总负债）-（上日总资产-上日总负债）-（存入金额-取出金额）-（转入市值-转出市值）”
                                                        3）成交笔数改为一条交割一笔，而不是SUM(CJBS)
          胡丹丹      2015/01/09                  修改：由于DSC_BAS.T_XY_FZBDMX表的FSJE是当日产生利息，获取预计利息时，取字段SXF（累计利息）
          黄玉钰      2015/01/27                  修改：YJLX，从T_XY_FZBDMX改为从T_XY_FZXX中统计
                                                        RZFZ RQFZ 改成取RZBJ+WHSYFY_RZ RQSZ+WHSYFY_RQ
                                                        新增RZJE RQJE赋值
          陈德铸      2015/11/05                  修改：新增利息直接从T_XY_FZBDMX表统计，对于非交易日的利息金证柜台会在非交易日前一个交易日提前算好
          黄宏峰      2016/01/05                  修改：1）证券市值取值逻辑调整,只取计算市值部分，增加持仓成本取值;
                                                        2）增加多币种判断处理
          黄宏峰      2016/02/01                  修改：1、调整汇率取值位置，当取不到汇率参数时，能够将错误写入日志表
    */
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_T_DATE    NUMBER(8) := DSC_CFG.F_GET_JYR_DATE(I_N_TJRQ, -1); --上个交易日
    VN_HL_HKD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD    DSC_CFG.T_HLCS.GSBL%TYPE;
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_RZRQ_KHH_ZHZK_R';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --重做删除原数据
    IF I_N_REDO = 1 THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_RZRQ_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE DSC_STAT.T_STAT_RZRQ_R WHERE RQ = I_N_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;

        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_RZRQ_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_RZRQ_KHH_ZHZK_R]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;
    --1.1 生成累计归还利息等统计数据
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成临时统计数据[DSC_STAT.TMP_COMMON]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    /*
      理论上，融资融券目前只有人民币，
      当有多个币种的情况的时候，wcdbbl统计到单个客户名下则是无意义的
    */
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_COMMON';
    INSERT INTO DSC_STAT.TMP_COMMON
        (KHH,
         N1, --RZSXED
         N2, --RQSXED
         N3, --DRGHLX
         N4, --ZC_KQ
         N5, --RZFZ
         N6, --RQFZ
         N7, --ZFZ
         N8, --HKJE
         N9, --WCDBBL 维持担保比率
         N10, --RZJE
         N11 --RQJE
         )
        SELECT KHH,
               SUM(RZSXED * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) RZSXED,
               SUM(RQSXED * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) RZSXED,
               SUM((GHLX_RZ + GHFY_RQ) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) DRGHLX,
               SUM(ZC_KQ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) ZC_KQ, --累计归还利息=客户开户依赖累计归还的每日利息
               SUM((RZBJ + WHSYFY_RZ) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) RZFZ,
               SUM((RQSZ + WHSYFY_RQ) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) RQFZ,
               SUM((RZBJ + WHSYFY_RZ + RQSZ + WHSYFY_RQ) *
                   DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) ZFZ,
               0 HKJE,
               SUM(DBBL_WC) WCDBBL,
               SUM(RZJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) RZJE,
               SUM(RQJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) RQJE
          FROM (SELECT RQ,
                       KHH,
                       RZSXED,
                       RQSXED,
                       GHLX_RZ,
                       GHFY_RQ,
                       RZJE,
                       RQJE,
                       DBBL_WC,
                       BZ,
                       ZC_KQ,
                       RZBJ,
                       RQSZ,
                       WHSYFY_RZ,
                       WHSYFY_RQ
                  FROM DSC_BAS.T_XY_KHTJ
                UNION ALL
                SELECT RQ,
                       KHH,
                       RZSXED,
                       RQSXED,
                       GHLX_RZ,
                       GHFY_RQ,
                       RZJE,
                       RQJE,
                       DBBL_WC,
                       BZ,
                       ZC_KQ,
                       RZBJ,
                       RQSZ,
                       WHSYFY_RZ,
                       WHSYFY_RQ
                  FROM DSC_HIS.T_XY_KHTJ_HIS) A
         WHERE A.RQ = VN_TJRQ
         GROUP BY KHH;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成临时统计数据[DSC_STAT.TMP_COMMON]',
                              I_S_CHANGEDESC     => '插入DSC_STAT.TMP_COMMON【' ||
                                                    VN_ROWCOUNT || '】条记录！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --1.2 还款金额
    --更新tmp_common.n8即还款金额
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '更新临时统计数据[DSC_STAT.TMP_COMMON]的还款金额',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    /*
      YWKM指的是未转换的科目-即金正自身的科目。
    */
    MERGE INTO DSC_STAT.TMP_COMMON A
    USING (SELECT KHH, SUM((SRJE - FCJE) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) HKJE
             FROM (SELECT KHH, SRJE, FCJE, BZ
                     FROM DSC_BAS.T_XY_ZJMXLS
                    WHERE YWKM IN ('552001', '552017') --偿还融资利息   ,偿还融资负债本金
                      AND RQ = VN_TJRQ
                   UNION ALL
                   SELECT KHH, SRJE, FCJE, BZ
                     FROM DSC_HIS.T_XY_ZJMXLS_HIS
                    WHERE YWKM IN ('552001', '552017')
                      AND RQ = VN_TJRQ) A
            GROUP BY KHH) B
    ON (B.KHH = A.KHH)
    WHEN MATCHED THEN
        UPDATE SET A.N8 = B.HKJE;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '更新临时统计数据[DSC_STAT.TMP_COMMON]的还款金额',
                              I_S_CHANGEDESC     => '更新【' || VN_ROWCOUNT || '】条记录！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    --1.3
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[DSC_STAT.T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    /*
      lzf  20130217
      融资费用，融券费用这里指的是融资融券交易中产生的费用，并非如新增一个合同，然后由此生成的费用以及利息等等。
      融资成交金额和融券成交金额具体哪些才算，可以和客户确认后再修改，问题不大。
      新增负载=暂时定义为 新增融资负债（融资买入+融资买入费用)+新增融券负债(融券卖出+融券卖出费用)

      预计利息由于对方的柜台也没有定义，所以暂时不修改。
      单个客户无所谓担保比率，所以这里的担保比率，应该是维持担保比率,而且也只有一个币种一个资金账户才有意义.
      可用保证金余额=资金账户的可用余额-总负债 ？

      --由于目前都是人民币，所以，代码的很多部分是暂时没有和bz关联的。少数和bz有关的都是后期增加
      --后续请按照这个方式来处理。
    */
    --插入数据
    INSERT INTO DSC_STAT.T_STAT_RZRQ_R
        (RQ,
         YYB,
         KHH,
         GRJG,
         XYDJ,
         ZZC,
         ZJYE,
         ZQSZ,
         ZFZ,
         RZFZ,
         RQFZ,
         RZFY,
         RQFY,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ,
         YJ_PT,
         YJ_XY,
         JYJ,
         JYJ_PT,
         JYJ_XY,
         JYBS,
         JYBS_RZ,
         JYBS_RQ,
         GHBJ,
         XZFZ,
         XZRZFZ,
         XZRQFZ,
         GHLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         XZLX,
         XZRZLX,
         XZRQLX,
         PCCS,
         ZBCS,
         YK,
         DBBL,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         RZJE,
         RQJE,
         CCCB)
        SELECT VN_TJRQ AS RQ,
               M.YYB AS YYB,
               M.KHH,
               M.GRJG AS GRJG,
               M.XYDJ AS XYDJ, --信用等级
               NVL(B.DBXJ, 0) + NVL(C.DBSZ, 0) AS ZZC, --总资产 = 担保现金+ 担保股票市值
               NVL(B.DBXJ, 0) AS ZJYE, --担保现金
               NVL(C.DBSZ, 0) AS ZQSZ, --担保股票市值
               NVL(KHTJ.RZFZ, 0) + NVL(KHTJ.RQFZ, 0) AS ZFZ, --负债 --update by hdd 20141222加上YJLX  --删掉预计利息
               NVL(KHTJ.RZFZ, 0) AS RZFZ, --融资负债
               NVL(KHTJ.RQFZ, 0) AS RQFZ, --融券负债
               NVL(JG.RZFY, 0) AS RZFY, --融资费用
               NVL(JG.RQFY, 0) AS RQFY, --融券费用
               NVL(KHTJ.RZSXED, 0) AS RZSXED, --融资授信额度
               NVL(KHTJ.RQSXED, 0) AS RQSXED, --融券授信额度
               NVL(JG.RZCJJE, 0) AS JYL_RZ, --融资成交金额
               NVL(JG.RQCJJE, 0) AS JYL_RQ, --融券成交金额
               NVL(JG.CJJE_XY, 0) + NVL(JG.CJJE_PT, 0) AS JYL, --成交金额
               NVL(JG.CJJE_PT, 0) AS JYL_PT,
               NVL(JG.CJJE_XY, 0) AS JYL_XY,
               NVL(JG.YJ_PT, 0) + NVL(JG.YJ_XY, 0) AS YJ, --毛佣金
               NVL(JG.YJ_PT, 0) AS YJ_PT,
               NVL(JG.YJ_XY, 0) AS YJ_XY,
               NVL(JG.JYJ_PT, 0) + NVL(JG.JYJ_XY, 0) AS JYJ, --净佣金
               NVL(JG.JYJ_PT, 0) AS JYJ_PT,
               NVL(JG.JYJ_XY, 0) AS JYJ_XY,
               NVL(JG.JYBS, 0) AS JYBS, --交易笔数
               NVL(JG.JYBS_RZ, 0) JYBS_RZ, --交易笔数_融资
               NVL(JG.JYBS_RQ, 0) JYBS_RQ, --交易笔数_融券
               NVL(KHTJ.HKJE, 0) AS GHBJ, --还款金额
               NVL(JG.RZCJJE, 0) + NVL(JG.RQCJJE, 0) + NVL(JG.RZFY, 0) + NVL(JG.RQFY, 0) AS XZFZ, --本日新增负债
               NVL(JG.RZCJJE, 0) + NVL(JG.RZFY, 0) AS XZRZFZ, --本日新增融资负债
               NVL(JG.RQCJJE, 0) + NVL(JG.RQFY, 0) AS XZRQFZ, --本日新增融券负债
               NVL(KHTJ.DRGHLX, 0) AS GHLX, --当日归还利息
               NVL(A.YJLX, 0) AS YJLX, --预计利息
               NVL(A.YJLX_RZ, 0) AS RZYJLX, --融资使用预计利息
               NVL(A.YJLX_RQ, 0) AS RQYJLX, --融券使用预计利息 = 预计利息 - 融资使用预计利息
               NVL(BDMX.XZLX, 0) /*NVL(A.YJLX, 0) - NVL(SR.YJLX, 0) */ AS XZLX, --本日新增利息
               NVL(BDMX.XZRZLX, 0) /*NVL(A.YJLX_RZ, 0) - NVL(SR.RZYJLX, 0)*/ AS XZRZLX, --本日新增利息
               NVL(BDMX.XZRQLX, 0) /*NVL(A.YJLX_RQ, 0) - NVL(SR.RQYJLX, 0)*/ AS XZRQLX, --本日新增利息
               NVL(JG.PCCS, 0) AS PCCS, --当日平仓次数
               NVL(ZB.ZBCS, 0), --当日追保次数
               (NVL(B.DBXJ, 0) + NVL(C.DBSZ, 0)) -
               (NVL(KHTJ.RZFZ, 0) + NVL(KHTJ.RQFZ, 0) + NVL(A.YJLX, 0)) -
               (NVL(SR.ZZC, 0) - NVL(SR.ZFZ, 0)) -
               (NVL(ZJZY.ZRJE, 0) - NVL(ZJZY.ZCJE, 0)) -
               (NVL(DB.ZRSZ, 0) - NVL(DB.ZCSZ, 0)) AS YK, --update by hdd 20141222
               NVL(KHTJ.WCDBBL, 0) DBBL,
               NVL(KHTJ.ZC_KQ, 0) KYBZJ, --可用保证金
               NVL(ZJZY.ZRJE, 0) ZRJE,
               NVL(ZJZY.ZCJE, 0) ZCJE,
               NVL(DB.ZRSZ, 0) ZRSZ,
               NVL(DB.ZCSZ, 0) ZCSZ,
               NVL(ZJZY.FWYJ, 0) AS FWYJ,
               NVL(KHTJ.RZJE, 0) AS RZJE,
               NVL(KHTJ.RQJE, 0) AS RQJE,
               NVL(C.CCCB, 0) AS CCCB --持仓成本
          FROM (SELECT T1.KHH, T1.GRJG, T1.YYB, T1.XYDJ, T2.RQXYLX, T2.RZXYLX
                  FROM DSC_BAS.T_KHXX_RZRQ T1
                  LEFT JOIN (SELECT RQ,
                                   KHH,
                                   RQXYLX * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1) AS RQXYLX,
                                   RZXYLX * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1) AS RZXYLX
                              FROM (SELECT RQ, BZ, KHH, RQXYLX, RZXYLX, HTZT
                                      FROM DSC_BAS.T_XY_HTXX
                                    UNION ALL
                                    SELECT RQ, BZ, KHH, RQXYLX, RZXYLX, HTZT
                                      FROM DSC_HIS.T_XY_HTXX_HIS)
                             WHERE RQ = VN_TJRQ
                               AND HTZT = 0) T2
                    ON T1.KHH = T2.KHH) M
        --上日
          LEFT JOIN (SELECT * FROM DSC_STAT.T_STAT_RZRQ_R WHERE RQ = VN_T_DATE) SR
            ON M.KHH = SR.KHH
        --补充：交易所费用
          LEFT JOIN (SELECT KHH,
                            SUM(CASE
                                    WHEN JYLB = '61' THEN
                                     CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) RZCJJE,
                            SUM(CASE
                                    WHEN JYLB = '64' THEN
                                     CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) RQCJJE,
                            SUM(CASE
                                    WHEN JYLB = '61' THEN
                                    --  标准佣金+印花税+过户费+清算费+交易规费+经手费+证管费+其它费+前台费用（暂时0）
                                     (S1 + S2 + S3 + S4 + S5 + S6) *
                                     DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) RZFY,
                            SUM(CASE
                                    WHEN JYLB = '64' THEN
                                    --标准佣金+印花税+过户费+清算费+交易规费+经手费+证管费+其它费+前台费用（暂时0）
                                     (S1 + S2 + S3 + S4 + S5 + S6) *
                                     DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) RQFY,
                            SUM(CASE
                                    WHEN JYLB IN ('61', '64') THEN
                                     S1 * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                END) YJ,
                            SUM(CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) CJJE, --所有成交金额
                            SUM(CASE
                                    WHEN JYLB IN ('1', '2') THEN
                                     CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) CJJE_PT, --普通成交金额
                            SUM(CASE
                                    WHEN JYLB IN ('61', '62', '63', '64', '71', '72') THEN
                                     CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) CJJE_XY, --信用交易
                            SUM(CASE
                                    WHEN JYLB IN ('1', '2') THEN
                                     S1 * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) YJ_PT, --普通佣金
                            SUM(CASE
                                    WHEN JYLB IN ('61', '62', '63', '64', '71', '72') THEN
                                     S1 * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) YJ_XY, --信用佣金
                            SUM(CASE
                                    WHEN JYLB IN ('1', '2') THEN
                                     JYJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) JYJ_PT, --普通净佣金
                            SUM(CASE
                                    WHEN JYLB IN ('61', '62', '63', '64', '71', '72') THEN
                                     JYJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) JYJ_XY, --信用净佣金
                            SUM(CASE
                                    WHEN JYLB IN ('71', '72') THEN
                                     1
                                    ELSE
                                     0
                                END) AS PCCS, --平仓次数
                            COUNT(*) AS JYBS, --update by hdd 20141222
                            SUM(CASE
                                    WHEN JYLB = '61' THEN
                                     1
                                    ELSE
                                     0
                                END) AS JYBS_RZ,
                            SUM(CASE
                                    WHEN JYLB = '64' THEN
                                     1
                                    ELSE
                                     0
                                END) AS JYBS_RQ
                       FROM (SELECT *
                               FROM DSC_BAS.T_XY_JGMXLS
                              WHERE CJRQ = VN_TJRQ
                                AND JYLB IN
                                    (SELECT JYLB FROM DSC_CFG.T_JYLB WHERE IS_JSJYL = 1)
                             UNION ALL
                             SELECT *
                               FROM DSC_HIS.T_XY_JGMXLS_HIS
                              WHERE CJRQ = VN_TJRQ
                                AND JYLB IN
                                    (SELECT JYLB FROM DSC_CFG.T_JYLB WHERE IS_JSJYL = 1))
                      GROUP BY KHH) JG
            ON M.KHH = JG.KHH
          LEFT JOIN (SELECT KHH, ZRSZ, ZCSZ
                       FROM (SELECT KHH,
                                    SUM(CASE
                                            WHEN JYLB = '65' THEN
                                             CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                            ELSE
                                             0
                                        END) ZRSZ, --委托类别=担保划入
                                    SUM(CASE
                                            WHEN JYLB = '66' THEN
                                             CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                            ELSE
                                             0
                                        END) ZCSZ --委托类别=担保划出
                               FROM (SELECT *
                                       FROM DSC_BAS.T_XY_JGMXLS
                                      WHERE CJRQ = VN_TJRQ
                                        AND JYLB IN ('65', '66')
                                     UNION ALL
                                     SELECT *
                                       FROM DSC_HIS.T_XY_JGMXLS_HIS
                                      WHERE CJRQ = VN_TJRQ
                                        AND JYLB IN ('65', '66'))
                              GROUP BY KHH)) DB
            ON M.KHH = DB.KHH

        --融资预计利息，融券预计利息
          LEFT JOIN (SELECT SUM(RZFY * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) YJLX_RZ,
                            SUM(RQFY * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) YJLX_RQ,
                            SUM((RZFY + RQFY) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) YJLX, --YJLX
                            KHH
                       FROM (SELECT RQ,
                                    BZ,
                                    RZFZ,
                                    RQFZ,
                                    JYLB,
                                    YJLX,
                                    GHLX,
                                    HKJE,
                                    KHH,
                                    RZFY,
                                    RQFY,
                                    FZZT
                               FROM DSC_HIS.T_XY_FZXX_HIS
                             UNION ALL
                             SELECT RQ,
                                    BZ,
                                    RZFZ,
                                    RQFZ,
                                    JYLB,
                                    YJLX,
                                    GHLX,
                                    HKJE,
                                    KHH,
                                    RZFY,
                                    RQFY,
                                    FZZT
                               FROM DSC_BAS.T_XY_FZXX)
                      WHERE RQ = VN_TJRQ
                        AND FZZT IN ('0', '1')
                      GROUP BY KHH) A
            ON M.KHH = A.KHH
        --担保现金, 取最新
          LEFT JOIN (SELECT SUM(DBXJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) DBXJ,
                            KHH
                       FROM DSC_STAT.VW_XY_DBXJ
                      WHERE RQ = VN_TJRQ
                      GROUP BY KHH) B
            ON M.KHH = B.KHH
        --担保股票市值 , 取最新
          LEFT JOIN (SELECT A.KHH,
                            SUM(A.ZXSZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) DBSZ,
                            SUM(A.CCCB * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS CCCB
                       FROM (SELECT RQ, JYS, ZQLB, YYB, ZXSZ, CCCB, BZ, KHH
                               FROM DSC_BAS.T_XY_ZQYE
                             UNION ALL
                             SELECT RQ, JYS, ZQLB, YYB, ZXSZ, CCCB, BZ, KHH
                               FROM DSC_HIS.T_XY_ZQYELS) A
                      WHERE A.RQ = VN_TJRQ
                        AND (JYS, ZQLB) IN (SELECT DISTINCT JYS, ZQLB
                                              FROM DSC_CFG.T_ZQPZ_DY B
                                             WHERE B.IS_JSSZ = 1)
                      GROUP BY KHH) C
            ON M.KHH = C.KHH
        --资金转入出--注意这是绝对值
          LEFT JOIN (SELECT KHH,
                            SUM(CASE
                                    WHEN YWKM IN (SELECT C.PARAM_VALUE
                                                    FROM T_PARAM_VALUE C
                                                   WHERE C.PARAM_KIND = '01') THEN
                                     (SRJE - FCJE) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) AS ZRJE,
                            SUM(CASE
                                    WHEN YWKM IN (SELECT C.PARAM_VALUE
                                                    FROM T_PARAM_VALUE C
                                                   WHERE C.PARAM_KIND = '02') THEN
                                     (FCJE - SRJE) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) AS ZCJE,
                            SUM(CASE
                                    WHEN YWKM IN (SELECT C.PARAM_VALUE
                                                    FROM T_PARAM_VALUE C
                                                   WHERE C.PARAM_KIND = '03') THEN
                                     (FCJE - SRJE) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                                    ELSE
                                     0
                                END) AS FWYJ --服务佣金
                       FROM DSC_STAT.VW_XY_ZJMXLS
                      WHERE RQ = VN_TJRQ
                      GROUP BY KHH) ZJZY
            ON ZJZY.KHH = M.KHH

        --新增利息
          LEFT JOIN (SELECT KHH,
                            SUM(FSJE) AS XZLX,
                            SUM((CASE
                                    WHEN CXBZ IN ('c', 'e', 'g', 'k', 's') THEN
                                     FSJE
                                END)) AS XZRZLX,
                            SUM((CASE
                                    WHEN CXBZ IN ('d', 'f', 'h', 'l', 't') THEN
                                     FSJE
                                END)) AS XZRQLX
                       FROM DSC_BAS.T_XY_FZBDMX
                      WHERE CXBZ IN ('c', 'd', 'e', 'f', 'g', 'k', 's', 'h', 'l', 't')
                        AND FSJE > 0
                        AND FSRQ = VN_TJRQ
                      GROUP BY KHH) BDMX
            ON BDMX.KHH = M.KHH
          LEFT JOIN (SELECT KHH,
                            N1  AS RZSXED,
                            N2  AS RQSXED,
                            N3  AS DRGHLX,
                            N4  AS ZC_KQ,
                            N5  AS RZFZ,
                            N6  AS RQFZ,
                            N7  AS ZFZ,
                            N8  AS HKJE,
                            N9  AS WCDBBL,
                            N10 AS RZJE,
                            N11 AS RQJE
                       FROM DSC_STAT.TMP_COMMON) KHTJ
            ON KHTJ.KHH = M.KHH
        --追保次数
          LEFT JOIN (SELECT YYB, KHH, COUNT(1) AS ZBCS
                       FROM DSC_BAS.T_XY_ZLXX
                      WHERE JSRQ = VN_TJRQ
                        AND ZLLB = '1'
                      GROUP BY YYB, KHH) ZB
            ON ZB.KHH = M.KHH;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[DSC_STAT.T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_RZRQ_JZ_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_RZRQ_R(O_N_CODE OUT INT,
                                          O_S_NOTE OUT VARCHAR2,
                                          I_N_TJRQ IN INT,
                                          I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   融资融券综合状况日表
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
               担保比例：= 总资产/总负债

         注意事项：
         数据源：
                 DSC_BAS.T_XY_JGMXLS         ：交割明细流水
                 DSC_BAS.T_KHXX_RZRQ         ：客户信息-融资融券
                 DSC_BAS.T_HTXX              ：合同信息
                 DSC_BAS.T_XY_ZJYE           ：资金余额
                 DSC_BAS.T_XY_ZQYE           ：证券余额
                 DSC_BAS.T_FZXX              ：负债信息
         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                    操作
         胡阳明      2013/05/20                  创建
         林伟        2013/05/20                  修改：临时表增加上日归还利息，融资融券授信额度从合同信息表统计
         胡阳明      2013/05/21                  修改：表的指标和名称进行大副调整，过程也进行整改。
         胡阳明      2013/06/21                  修改：负债信息取值时增加限定条件fzzt=0
         胡阳明　　　2013/08/28                  修改：新增负债利息的取法，指标不要加FZZT=0
         胡阳明      2013/10/17                  修改：新增持仓成本指标
         胡阳明      2013/10/22                  修改：净佣金算取值，从“交割明细”直接取
         胡阳明      2013/11/11                  修改：取融资负债，融券负债增加条件限制
         林伟        2014/01/15                  修改：新增沪A市值和深A市值指标
         黄玉钰      2014/04/03                  修改：合同信息中加htzt=0的限制
         陈德铸      2014/06/30                  修改：新增沪A负债和深A负债指标
         陈德铸      2014/07/29                  修改：1）总负债由原先“融资负债+融券负债”调整为“融资负债+融券负债+利息负债”
                                                       2）盈亏算法调整为“（本日总资产-本日总负债）-（上日总资产-上日总负债）-（存入金额-取出金额）-（转入市值-转出市值）”
                                                       3）成交笔数改为一条交割一笔，而不是SUM(CJBS)
         刘官勤     2014/09/17                   修改：DSC_STAT.T_STAT_RZRQ_R中RZSXED, RQSXED两个字段取值从DSC_BAS.T_XY_HTXX表中的RZED、RQED调整为从RZXYED、RQXYED取值
         徐群智     2014/04/15                   修改:在最后一步插入数据到目标表时，临时表和客户信息表直接通过KHH关联，去掉YYB的关联条件
         吴邦杰     2015/07/09                   修改：增加JYL_PT_MR,JYL_PT_MC,JYL_XY_MR,JYL_XY_MC字段
         吴邦杰     2015/09/22                   修改：1、修改日志O_S_NOTE
                                                       2、插入目标表时，调整JYL_PT_MR,JYL_PT_MC,JYL_XY_MR,JYL_XY_MC的位置对应没有问题
                                                       3、插入目标表时，YYB从T_KHXX_RZRQ中取
         陈德铸     2015/11/28                   修改：修正新增利息、归还利息等的数据处理问题
         黄宏峰     2016/01/05                   修改：1、证券市值、持仓成本取值逻辑调整，只取计算市值部分，
                                                       2、增加多币种判断处理
         黄宏峰      2016/02/01                  修改：1、调整汇率取值位置，当取不到汇率参数时，能够将错误写入日志表
         黄致宇      20200423                    修改：1、取消fzzt=0的限制，与柜台保持一致
                                                       2、负债(ZFZ)需要减去归还利息(GHLX)
         熊杰凌      20201201                    修改：根据客户逻辑 ZZC, ZQSZ ,ZFZ 改为从 柜台 TXY_HTXXLS 取值
    */
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_T_DATE    NUMBER(8) := DSC_CFG.F_GET_JYR_DATE(I_N_TJRQ, -1); --上个交易日
    VN_HL_HKD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD    DSC_CFG.T_HLCS.GSBL%TYPE;
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER => VS_USER, I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --重做删除原数据
    IF I_N_REDO = 1 THEN
        O_S_NOTE := '【ERROR-10001】';
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_RZRQ_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE DSC_STAT.T_STAT_RZRQ_R WHERE RQ = I_N_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;

        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_RZRQ_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_RZRQ_KHH_ZHZK_R]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --清空临时表
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表[TMP_T_STAT_RZRQ_R]。',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_T_STAT_RZRQ_R';
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表[TMP_T_STAT_RZRQ_R]。',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '【ERROR-10002】';
    -----------------------------------------------
    ------1.1获取上日还款金额和上日归还利息
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计上日还款金额和上日归还利息，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, SRGHBJ, SRGHLX, SRZZC, SRZFZ)
        SELECT YYB, KHH, GHBJ AS SRGHBJ, GHLX AS SRGHLX, ZZC AS SRZZC, ZFZ AS SRZFZ --ADD BY CHENDEZHU AT 20140729 增加SRZFZ
          FROM DSC_STAT.T_STAT_RZRQ_R
         WHERE RQ = VN_T_DATE;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计上日还款金额和上日归还利息，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10002_1】';
    -----------------------------------------------
    ------1.11从指令信息表中获取追保次数
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计指令信息表中的追保次数，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZBCS)
        SELECT YYB, KHH, COUNT(1) AS ZBCS
          FROM DSC_BAS.T_XY_ZLXX   --追保信息表
         WHERE JSRQ = VN_TJRQ
           AND ZLLB = '1'
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计指令信息表中的追保次数，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10003】';
    ------1.1融资/融券成交金额，融资/融券费用，融券费用=jysfy+S1  --jysfy交易所费用 交割表不知道怎么算
    --- 交易所费用
    -- 交易所费用
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计两融相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB,
         KHH,
         JYL_RZ,
         JYL_RQ,
         RZFY,
         RQFY,
         YJ,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ,
         JYJ_PT,
         JYJ_XY,
         PCCS,
         JYBS,
         JYBS_RZ,
         JYBS_RQ,
         JYL_PT_MR,
         JYL_PT_MC,
         JYL_XY_MR,
         JYL_XY_MC)
        SELECT YYB,
               KHH,
               SUM(CASE
                       WHEN JYLB = '61' THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_RZ, --融资成交金额
               SUM(CASE
                       WHEN JYLB = '64' THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_RQ, --融券成交金额
               SUM(CASE
                       WHEN JYLB = '61' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RZFY, --融资费用
               SUM(CASE
                       WHEN JYLB = '64' THEN
                        (S1 + S2 + S3 + S4 + S5 + S6) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RQFY, --融券费用
               SUM(S1 * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) YJ, --融资融券毛佣金
               SUM(CASE
                       WHEN JYLB NOT IN ('80', '29') THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL, --所有成交金额
               SUM(CASE
                       WHEN JYLB NOT IN ('61', '62', '63', '64', '71', '72', '80', '29') THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_PT, --普通成交金额
               SUM(CASE
                       WHEN JYLB IN ('61', '62', '63', '64', '71', '72') THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_XY, --信用交易金额
               SUM(CASE
                       WHEN JYLB NOT IN ('61', '62', '63', '64', '71', '72', '80') THEN
                        S1 * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) YJ_PT, --普通佣金
               SUM(CASE
                       WHEN JYLB IN ('61', '62', '63', '64', '71', '72') THEN
                        S1 * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) YJ_XY, --信用佣金
               SUM(JYJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) JYJ,
               SUM(CASE
                       WHEN JYLB NOT IN ('61', '62', '63', '64', '71', '72') THEN
                        JYJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYJ_PT, --普通净佣金
               SUM(CASE
                       WHEN JYLB IN ('61', '62', '63', '64', '71', '72') THEN
                        JYJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYJ_XY, --信用净佣金
               SUM(CASE
                       WHEN JYLB IN ('71', '72') THEN
                        1
                       ELSE
                        0
                   END) AS PCCS, --平仓次数
               COUNT(*) AS JYBS,
               SUM(CASE
                       WHEN JYLB IN ('61') THEN
                        1
                       ELSE
                        0
                   END) AS JYBS_RZ,
               SUM(CASE
                       WHEN JYLB IN ('64') THEN
                        1
                       ELSE
                        0
                   END) AS JYBS_RQ,
               SUM(CASE
                       WHEN JYLB NOT IN ('61', '62', '63', '64', '71', '72') AND
                            (YSJE < 0 AND JYLB <> '2') THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_PT_MR, --普通成交金额_买入
               SUM(CASE
                       WHEN JYLB NOT IN ('61', '62', '63', '64', '71', '72') AND
                            (YSJE > 0 OR (YSJE < 0 AND JYLB = '2')) THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_PT_MC, --普通成交金额_卖出
               SUM(CASE
                       WHEN JYLB IN ('61', '62', '63', '64', '71', '72') AND YSJE < 0 THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_XY_MR, --信用交易__买入
               SUM(CASE
                       WHEN JYLB IN ('61', '62', '63', '64', '71', '72') AND YSJE > 0 THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) JYL_XY_MC --信用交易_卖出
          FROM (SELECT *
                  FROM DSC_BAS.T_XY_JGMXLS
                UNION ALL
                SELECT * FROM DSC_HIS.T_XY_JGMXLS_HIS)
         WHERE CJRQ = VN_TJRQ
           AND JYLB IN (SELECT JYLB FROM DSC_CFG.T_JYLB WHERE IS_JSJYL = 1)
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;

    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计两融相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    ------担保划入，划出
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保划入，担保划出，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZRSZ, ZCSZ)
        SELECT YYB,
               KHH,

               SUM(CASE
                       WHEN JYLB = '65' THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) ZRSZ, --委托类别=担保划入
               SUM(CASE
                       WHEN JYLB = '66' THEN
                        CJJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) ZCSZ --委托类别=担保划出
          FROM DSC_STAT.VW_XY_JGMXLS_JS
         WHERE CJRQ = VN_TJRQ
           AND JYLB IN ('66', '65')
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保划入，担保划出，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10004】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计负债信息相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --1.3统计负债的相关指标
    --融资负债，融券负债，融资预计利息，融券预计利息，预计利息，归还利息，还款金额
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, RZFZ, RQFZ, RZYJLX, RQYJLX, YJLX)
        SELECT YYB,
               KHH,
               SUM(CASE
                       WHEN JYLB = '61' THEN
                        RZFZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RZFZ, --融资负债
               SUM(CASE
                       WHEN JYLB = '64' THEN
                        RQFZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RQFZ, --融券负债
               SUM(CASE
                       WHEN JYLB = '61' THEN
                        (NVL(YJLX, 0) + NVL(FXYJLX, 0) + NVL(FDLX, 0)) *
                        DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RZYJLX, --融资预计利息
               SUM(CASE
                       WHEN JYLB = '64' THEN
                        (NVL(YJLX, 0) + NVL(FXYJLX, 0) + NVL(FDLX, 0)) *
                        DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) RQYJLX, --融券预计利息
               SUM((NVL(YJLX, 0) + NVL(FXYJLX, 0) + NVL(FDLX, 0)) *
                   DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) YJLX -- 预计利息  （预计利息+分段利息+罚息预计利息）

          FROM (SELECT BZ, RZFZ, RQFZ, JYLB, YJLX, GHLX, HKJE, KHH, YYB, FXYJLX, FDLX
                  FROM DSC_HIS.T_XY_FZXX_HIS
                 WHERE RQ = VN_TJRQ
                /*AND FZZT IN ('0', '1')*/
                UNION ALL
                SELECT BZ, RZFZ, RQFZ, JYLB, YJLX, GHLX, HKJE, KHH, YYB, FXYJLX, FDLX
                  FROM DSC_BAS.T_XY_FZXX
                 WHERE RQ = VN_TJRQ
                /*AND FZZT IN ('0', '1')*/
                )
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计负债信息相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10004】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计本日新增预计相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --1.3统计负债的相关指标
    --本日预计利息，本日融资利息，本日融券利息
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, XZLX, XZRZLX, XZRQLX, GHLX, GHBJ)
        SELECT T1.YYB,
               T1.KHH,
               NVL(T1.LXXZ, 0) + NVL(T1.FXXZ, 0) AS XZLX,
               NVL(T1.RZYJLX_BR, 0) - NVL(T2.RZYJLX_SR, 0) AS XZRZLX,
               NVL(T1.RQYJLX_BR, 0) - NVL(T2.RQYJLX_SR, 0) AS XZRQLX,
               GHLX AS GHLX,
               GHBJ AS GHBJ
          FROM (SELECT YYB,
                       KHH,
                       SUM((NVL(YJLX, 0) + NVL(FXYJLX, 0) + NVL(FDLX, 0)) *
                           DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS YJLX_BR, --预计利息  （预计利息+分段利息+罚息预计利息）
                       SUM(CASE
                               WHEN JYLB = '61' THEN
                                (NVL(YJLX, 0) + NVL(FXYJLX, 0) + NVL(FDLX, 0)) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS RZYJLX_BR, --融资预计利息
                       SUM(CASE
                               WHEN JYLB = '64' THEN
                                (NVL(YJLX, 0) + NVL(FXYJLX, 0) + NVL(FDLX, 0)) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS RQYJLX_BR, --融券预计利息
                       SUM(GHLX * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS GHLX, --归还利息
                       SUM(HKJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS GHBJ, --还款金额
                       SUM(LXXZ) LXXZ,
                       SUM(FXXZ) FXXZ
                  FROM (SELECT BZ,
                               RZFZ,
                               RQFZ,
                               JYLB,
                               YJLX,
                               GHLX,
                               HKJE,
                               KHH,
                               YYB,
                               FXYJLX,
                               FDLX,
                               LXXZ,
                               FXXZ
                          FROM DSC_HIS.T_XY_FZXX_HIS
                         WHERE RQ = VN_TJRQ
                        UNION ALL
                        SELECT BZ,
                               RZFZ,
                               RQFZ,
                               JYLB,
                               YJLX,
                               GHLX,
                               HKJE,
                               KHH,
                               YYB,
                               FXYJLX,
                               FDLX,
                               LXXZ,
                               FXXZ
                          FROM DSC_BAS.T_XY_FZXX
                         WHERE RQ = VN_TJRQ)
                 GROUP BY KHH, YYB) T1,
               (SELECT KHH,
                       SUM((NVL(YJLX, 0) + NVL(FXYJLX, 0) + NVL(FDLX, 0)) *
                           DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) YJLX_SR, --上日预计利息  （预计利息+分段利息+罚息预计利息）
                       SUM(CASE
                               WHEN JYLB = '61' THEN
                                (NVL(YJLX, 0) + NVL(FXYJLX, 0) + NVL(FDLX, 0)) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) RZYJLX_SR, --上日融资预计利息
                       SUM(CASE
                               WHEN JYLB = '64' THEN
                                (NVL(YJLX, 0) + NVL(FXYJLX, 0) + NVL(FDLX, 0)) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) RQYJLX_SR --上日融券预计利息
                  FROM (SELECT BZ, RZFZ, RQFZ, JYLB, YJLX, GHLX, HKJE, KHH, YYB, FXYJLX, FDLX
                          FROM DSC_HIS.T_XY_FZXX_HIS
                         WHERE RQ = VN_T_DATE
                        /*AND FZZT != 3*/
                        UNION ALL
                        SELECT BZ, RZFZ, RQFZ, JYLB, YJLX, GHLX, HKJE, KHH, YYB, FXYJLX, FDLX
                          FROM DSC_BAS.T_XY_FZXX
                         WHERE RQ = VN_T_DATE
                        /*AND FZZT != 3*/
                        )
                 GROUP BY KHH) T2
         WHERE T1.KHH = T2.KHH(+);
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计本日新增预计相关指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10005】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保现金指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --1.4 担保现金
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZJYE)
        SELECT YYB, KHH, SUM(DBXJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) ZJYE
          FROM DSC_STAT.VW_XY_DBXJ
         WHERE RQ = VN_TJRQ
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保现金指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10006】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保市值指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --1.4 担保市值
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZQSZ, CCCB)
        SELECT A.YYB,
               A.KHH,
               SUM(A.ZXSZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) ZQSZ,
               SUM(A.CCCB * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS CCCB
          FROM (SELECT RQ, JYS, ZQLB, YYB, ZXSZ, CCCB, BZ, KHH
                  FROM DSC_BAS.T_XY_ZQYE
                UNION ALL
                SELECT RQ, JYS, ZQLB, YYB, ZXSZ, CCCB, BZ, KHH FROM DSC_HIS.T_XY_ZQYELS) A
         WHERE A.RQ = VN_TJRQ
           AND (JYS, ZQLB) IN
               (SELECT DISTINCT JYS, ZQLB FROM DSC_CFG.T_ZQPZ_DY B WHERE B.IS_JSSZ = 1)
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计担保市值指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10007】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计资金转入转出，服务佣金指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --1.5资金转入出--注意这是绝对值
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, ZRJE, ZCJE, FWYJ)
        SELECT YYB,
               KHH,
               SUM(CASE
                       WHEN YWKM IN
                            (SELECT C.PARAM_VALUE FROM T_PARAM_VALUE C WHERE C.PARAM_KIND = '01') THEN
                        (SRJE - FCJE) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) AS ZRJE,
               SUM(CASE
                       WHEN YWKM IN
                            (SELECT C.PARAM_VALUE FROM T_PARAM_VALUE C WHERE C.PARAM_KIND = '02') THEN
                        (FCJE - SRJE) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) AS ZCJE,
               SUM(CASE
                       WHEN YWKM IN
                            (SELECT C.PARAM_VALUE FROM T_PARAM_VALUE C WHERE C.PARAM_KIND = '03') THEN
                        (FCJE - SRJE) * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                       ELSE
                        0
                   END) AS FWYJ --服务佣金
          FROM DSC_STAT.VW_XY_ZJMXLS
         WHERE RQ = VN_TJRQ
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计资金转入转出，服务佣金指标，插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10008】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“融资余额，融券余额，授信额度，可用保证金，担保比例”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --统计融资余额，融券余额
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (YYB, KHH, RZJE, RQJE, RZSXED, RQSXED, KYBZJ, DBBL)
        SELECT YYB,
               KHH,
               SUM(RZJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)),
               SUM(RQJE * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)),
               SUM(RZXYED * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS RZSXED,
               SUM(RQXYED * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS RQSXED,
               SUM(KYBZJ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS KYBZJ,
               SUM(DBBL) AS DBBL
          FROM (SELECT RQ,
                       BZ,
                       YYB,
                       KHH,
                       RZJE,
                       RQJE,
                       RZXYED,
                       RQXYED,
                       BZJKYYE AS KYBZJ,
                       DBBL,
                       HTZT
                  FROM DSC_BAS.T_XY_HTXX
                UNION ALL
                SELECT RQ,
                       BZ,
                       YYB,
                       KHH,
                       RZJE,
                       RQJE,
                       RZXYED,
                       RQXYED,
                       BZJKYYE AS KYBZJ,
                       DBBL,
                       HTZT
                  FROM DSC_HIS.T_XY_HTXX_HIS)
         WHERE RQ = VN_TJRQ
           AND HTZT = 0
         GROUP BY YYB, KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“融资余额，融券余额，授信额度，可用保证金，担保比例”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10009】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“沪A市值，深A市值”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --统计沪A市值，深A市值
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (KHH, YYB, ZQSZ_HA, ZQSZ_SA)
        SELECT KHH,
               YYB,
               SUM(ZQSZ_HAZB) AS ZQSZ_HA,
               SUM(ZQSZ_SAZB + ZQSZ_CYB + ZQSZ_ZXB) AS ZQSZ_SA
          FROM (SELECT KHH,
                       YYB,
                       SUM(CASE
                               WHEN T.ZQPZ = '110' THEN --沪A主板
                                ZQSZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZQSZ_HAZB,

                       SUM(CASE
                               WHEN T.ZQPZ = '111' THEN --深A主板
                                ZQSZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZQSZ_SAZB,

                       SUM(CASE
                               WHEN T.ZQPZ = '113' THEN --创业板
                                ZQSZ * DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZQSZ_CYB,
                       0 AS ZQSZ_ZXB
                  FROM (SELECT A.KHH,
                               A.YYB,
                               A.BZ,
                               ZXSZ AS ZQSZ, --市值=证券数量*交易单位*(最新收盘价+1*最新利息)
                               NVL(C.JB3_ZQPZ, 999) AS ZQPZ
                          FROM (SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, LJYK, CCCB, BZ
                                  FROM DSC_BAS.T_XY_ZQYE
                                UNION ALL
                                SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, 0 AS LJYK, CCCB, BZ
                                  FROM DSC_HIS.T_XY_ZQYELS) A,
                               (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ
                                  FROM DSC_CFG.T_ZQPZ_DY D
                                 WHERE D.JB3_ZQPZ <> '112'
                                   AND IS_JSSZ = 1) C
                         WHERE A.RQ = VN_TJRQ
                           AND A.ZQLB = C.ZQLB
                           AND A.JYS = C.JYS
                           AND NOT (A.ZQDM LIKE '002%' AND A.ZQLB = 'A0' AND A.JYS = '1') --排除中小板数据（002开头的有申购 ZQLB=A3 的数据）
                           AND C.JB3_ZQPZ IN ('110', '111', '113')) T
                 GROUP BY KHH, YYB
                UNION ALL
                SELECT A.KHH,
                       A.YYB,
                       0 AS ZQSZ_HAZB,
                       0 AS ZQSZ_SAZB,
                       0 AS ZQSZ_CYB,
                       SUM(A.ZXSZ) AS ZQSZ_ZXB
                  FROM (SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, LJYK, CCCB, BZ
                          FROM DSC_BAS.T_XY_ZQYE
                        UNION ALL
                        SELECT RQ, KHH, YYB, ZQDM, JYS, ZQLB, ZXSZ, 0 AS LJYK, CCCB, BZ
                          FROM DSC_HIS.T_XY_ZQYELS) A
                 WHERE A.RQ = VN_TJRQ
                   AND A.ZQLB = 'A0'
                   AND A.JYS = '1'
                   AND A.ZQDM LIKE '002%' --中小板数据
                 GROUP BY A.KHH, A.YYB)
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“沪A市值，深A市值”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10010】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“沪A负债，深A负债”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --统计沪A负债，深A负债
    INSERT INTO DSC_STAT.TMP_T_STAT_RZRQ_R
        (KHH, YYB, ZFZ_HA, ZFZ_SA)
        SELECT KHH, YYB, SUM(ZFZ_HAZB) AS ZFZ_HA, SUM(ZFZ_SAZB + ZFZ_CYB + ZFZ_ZXB) AS ZFZ_SA
          FROM (SELECT KHH,
                       YYB,
                       SUM(CASE
                               WHEN T.ZQPZ = '110' THEN --沪A主板
                                (RZFZ + RQFZ + RZYJLX + RQYJLX) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZFZ_HAZB,

                       SUM(CASE
                               WHEN T.ZQPZ = '111' THEN --深A主板
                                (RZFZ + RQFZ + RZYJLX + RQYJLX) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZFZ_SAZB,

                       SUM(CASE
                               WHEN T.ZQPZ = '113' THEN --创业板
                                (RZFZ + RQFZ + RZYJLX + RQYJLX) *
                                DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)
                               ELSE
                                0
                           END) AS ZFZ_CYB,
                       0 AS ZFZ_ZXB
                  FROM (SELECT A.KHH,
                               A.YYB,
                               A.BZ,
                               CASE
                                   WHEN JYLB = '61' THEN
                                    RZFZ
                                   ELSE
                                    0
                               END AS RZFZ, --融资负债
                               CASE
                                   WHEN JYLB = '64' THEN
                                    RQFZ
                                   ELSE
                                    0
                               END AS RQFZ, --融券负债
                               CASE
                                   WHEN JYLB = '61' THEN
                                    NVL(YJLX, 0) + NVL(FXYJLX, 0) + NVL(FDLX, 0)
                                   ELSE
                                    0
                               END RZYJLX, --融资预计利息
                               CASE
                                   WHEN JYLB = '64' THEN
                                    NVL(YJLX, 0) + NVL(FXYJLX, 0) + NVL(FDLX, 0)
                                   ELSE
                                    0
                               END RQYJLX, --融券预计利息
                               NVL(C.JB3_ZQPZ, 999) AS ZQPZ
                          FROM (SELECT BZ,
                                       RZFZ,
                                       RQFZ,
                                       JYLB,
                                       KHH,
                                       YYB,
                                       ZQDM,
                                       JYS,
                                       ZQLB,
                                       YJLX,
                                       FXYJLX,
                                       FDLX
                                  FROM DSC_HIS.T_XY_FZXX_HIS
                                 WHERE RQ = VN_TJRQ
                                /*AND FZZT IN ('0', '1')*/
                                UNION ALL
                                SELECT BZ,
                                       RZFZ,
                                       RQFZ,
                                       JYLB,
                                       KHH,
                                       YYB,
                                       ZQDM,
                                       JYS,
                                       ZQLB,
                                       YJLX,
                                       FXYJLX,
                                       FDLX
                                  FROM DSC_BAS.T_XY_FZXX
                                 WHERE RQ = VN_TJRQ
                                /*AND FZZT IN ('0', '1')*/
                                ) A,
                               (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ
                                  FROM DSC_CFG.T_ZQPZ_DY D
                                 WHERE D.JB3_ZQPZ <> '112'
                                   AND IS_JSSZ = 1) C
                         WHERE A.ZQLB = C.ZQLB
                           AND A.JYS = C.JYS
                           AND NOT (A.ZQDM LIKE '002%' AND A.ZQLB = 'A0' AND A.JYS = '1') --排除中小板数据（002开头的有申购 ZQLB=A3 的数据）
                           AND C.JB3_ZQPZ IN ('110', '111', '113')) T
                 GROUP BY KHH, YYB
                UNION ALL
                SELECT A.KHH,
                       A.YYB,
                       0 AS ZFZ_HAZB,
                       0 AS ZFZ_SAZB,
                       0 AS ZFZ_CYB,
                       SUM((NVL(RZFZ, 0) + NVL(RQFZ, 0) + NVL(RZYJLX, 0) + NVL(RQYJLX, 0)) *
                           DECODE(BZ, 2, VN_HL_HKD, 3, VN_HL_USD, 1)) AS ZFZ_ZXB
                  FROM (SELECT BZ,
                               JYLB,
                               KHH,
                               YYB,
                               ZQDM,
                               JYS,
                               ZQLB,
                               CASE
                                   WHEN JYLB = '61' THEN
                                    RZFZ --融资负债
                                   ELSE
                                    0
                               END AS RZFZ,
                               CASE
                                   WHEN JYLB = '64' THEN
                                    RQFZ --融券负债
                                   ELSE
                                    0
                               END AS RQFZ,
                               CASE
                                   WHEN JYLB = '61' THEN
                                    NVL(YJLX, 0) + NVL(FXYJLX, 0) + NVL(FDLX, 0) --融资预计利息
                                   ELSE
                                    0
                               END AS RZYJLX,
                               CASE
                                   WHEN JYLB = '64' THEN
                                    NVL(YJLX, 0) + NVL(FXYJLX, 0) + NVL(FDLX, 0) --融券预计利息
                                   ELSE
                                    0
                               END AS RQYJLX
                          FROM DSC_HIS.T_XY_FZXX_HIS
                         WHERE RQ = VN_TJRQ
                        /*AND FZZT IN ('0', '1')*/
                        UNION ALL
                        SELECT BZ,
                               JYLB,
                               KHH,
                               YYB,
                               ZQDM,
                               JYS,
                               ZQLB,
                               CASE
                                   WHEN JYLB = '61' THEN
                                    RZFZ --融资负债
                                   ELSE
                                    0
                               END AS RZFZ,
                               CASE
                                   WHEN JYLB = '64' THEN
                                    RQFZ --融券负债
                                   ELSE
                                    0
                               END AS RQFZ,
                               CASE
                                   WHEN JYLB = '61' THEN
                                    NVL(YJLX, 0) + NVL(FXYJLX, 0) + NVL(FDLX, 0) --融资预计利息
                                   ELSE
                                    0
                               END AS RZYJLX,
                               CASE
                                   WHEN JYLB = '64' THEN
                                    NVL(YJLX, 0) + NVL(FXYJLX, 0) + NVL(FDLX, 0) --融券预计利息
                                   ELSE
                                    0
                               END AS RQYJLX
                          FROM DSC_BAS.T_XY_FZXX
                         WHERE RQ = VN_TJRQ
                        /*AND FZZT IN ('0', '1')*/
                        ) A
                 WHERE A.ZQLB = 'A0'
                   AND A.JYS = '1'
                   AND A.ZQDM LIKE '002%' --中小板数据
                 GROUP BY A.KHH, A.YYB)
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计“沪A负债，深A负债”指标,插入到表[DSC_STAT.TMP_T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10011】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表汇总统计插入表[DSC_STAT.T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --2.1将指标统计到目标表
    --插入数据
    INSERT INTO DSC_STAT.T_STAT_RZRQ_R
        (RQ,
         YYB,
         GRJG,
         KHH,
         ZZC,
         ZFZ,
         ZFZ_HA,
         ZFZ_SA,
         ZJYE,
         ZQSZ,
         ZQSZ_HA,
         ZQSZ_SA,
         XYDJ,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         YJ,
         JYJ,
         RZFZ,
         RQFZ,
         GHBJ,
         XZFZ,
         GHLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         RZFY,
         XZRZFZ,
         XZRQFZ,
         RQFY,
         PCCS,
         JYL,
         JYL_PT,
         JYL_XY,
         JYL_PT_MR,
         JYL_PT_MC,
         JYL_XY_MR,
         JYL_XY_MC,
         YJ_PT,
         YJ_XY,
         JYJ_PT,
         JYJ_XY,
         YK,
         DBBL,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         JYBS,
         JYBS_RZ,
         JYBS_RQ,
         XZLX,
         XZRZLX,
         XZRQLX,
         ZBCS,
         RZJE,
         RQJE,
         CCCB)
        SELECT RQ,
               B.YYB,
               B.GRJG AS GRJG,
               A.KHH,
               ZZC,
               ZFZ,
               ZFZ_HA,
               ZFZ_SA,
               ZJYE,
               ZQSZ,
               ZQSZ_HA,
               ZQSZ_SA,
               B.XYDJ,
               RZSXED,
               RQSXED,
               JYL_RZ,
               JYL_RQ,
               YJ,
               JYJ,
               RZFZ,
               RQFZ,
               GHBJ,
               XZFZ,
               GHLX,
               YJLX,
               RZYJLX,
               RQYJLX,
               RZFY,
               XZRZFZ,
               XZRQFZ,
               RQFY,
               PCCS,
               JYL,
               JYL_PT,
               JYL_XY,
               JYL_PT_MR,
               JYL_PT_MC,
               JYL_XY_MR,
               JYL_XY_MC,
               YJ_PT,
               YJ_XY,
               JYJ_PT,
               JYJ_XY,
               (NVL(ZZC, 0) - NVL(ZFZ, 0)) - (NVL(SRZZC, 0) - NVL(SRZFZ, 0)) -
               (NVL(ZRJE, 0) - NVL(ZCJE, 0)) - (NVL(ZRSZ, 0) - NVL(ZCSZ, 0)) AS YK, --盈亏：本日净资产-上日净资产-资金净流入-证券净流入
               DBBL,
               KYBZJ,
               ZRJE,
               ZCJE,
               ZRSZ,
               ZCSZ,
               FWYJ,
               JYBS,
               JYBS_RZ,
               JYBS_RQ,
               XZLX,
               XZRZLX,
               XZRQLX,
               ZBCS,
               RZJE,
               RQJE,
               CCCB
          FROM (SELECT VN_TJRQ AS RQ,
                       0 YYB, --直接给个默认值
                       KHH, --客户号
                       SUM(NVL(ZJYE, 0) + NVL(ZQSZ, 0)) AS ZZC, --总资产 = 担保现金+ 担保股票市值
                       SUM(NVL(RZFZ, 0) + NVL(RQFZ, 0) + NVL(YJLX, 0) - NVL(GHLX, 0)) AS ZFZ, --负债:融资负债+融券负债+利息负债  MOD BY CHENDEZHU AT 20140728
                       --20200423 黄致宇 总负债需减去归还利息
                       SUM(NVL(ZFZ_HA, 0)) AS ZFZ_HA, --负债_沪A
                       SUM(NVL(ZFZ_SA, 0)) AS ZFZ_SA, --负债_深A
                       SUM(NVL(ZJYE, 0)) AS ZJYE, --担保现金
                       SUM(NVL(ZQSZ, 0)) AS ZQSZ, --担保股票市值
                       SUM(NVL(ZQSZ_HA, 0)) AS ZQSZ_HA, --沪A证券市值
                       SUM(NVL(ZQSZ_SA, 0)) AS ZQSZ_SA, --深A证券市值
                       SUM(NVL(RZSXED, 0)) AS RZSXED, --融资授信额度
                       SUM(NVL(RQSXED, 0)) AS RQSXED, --融券授信额度
                       SUM(NVL(JYL_RQ, 0)) AS JYL_RQ, --融资成交金额
                       SUM(NVL(JYL_RZ, 0)) AS JYL_RZ, --融券成交金额
                       SUM(NVL(YJ, 0)) AS YJ, --毛佣金
                       SUM(NVL(JYJ, 0)) AS JYJ, --净佣金    S1 + S3 - (S11 + S12 + S13 + S16)  AS JYJ
                       SUM(NVL(RZFZ, 0)) AS RZFZ, --融资负债
                       SUM(NVL(RQFZ, 0)) AS RQFZ, --融券负债
                       SUM(NVL(GHBJ, 0)) AS GHBJ, --归还本金
                       SUM(NVL(JYL_RZ, 0) + NVL(JYL_RQ, 0) + NVL(RZFY, 0) + NVL(RQFY, 0)) AS XZFZ, --新增负债=融资成交金额+融券成交金额+融资费用+融券费用
                       SUM(NVL(JYL_RZ, 0) + NVL(RZFY, 0)) XZRZFZ,
                       SUM(NVL(JYL_RQ, 0) + NVL(RQFY, 0)) XZRQFZ,
                       SUM(NVL(GHLX, 0)) AS GHLX, --归还利息
                       SUM(NVL(YJLX, 0)) AS YJLX, --预计利息
                       SUM(NVL(RZYJLX, 0)) AS RZYJLX, --融资使用预计利息
                       SUM(NVL(RQYJLX, 0)) AS RQYJLX, --融券使用预计利息
                       SUM(NVL(RZFY, 0)) AS RZFY, --融资费用
                       SUM(NVL(RQFY, 0)) AS RQFY, --融券费用
                       SUM(NVL(PCCS, 0)) AS PCCS, --当日平仓次数
                       SUM(NVL(JYL, 0)) AS JYL, --成交金额
                       SUM(NVL(JYL_PT, 0)) AS JYL_PT,
                       SUM(NVL(JYL_XY, 0)) AS JYL_XY,
                       SUM(NVL(JYL_PT_MR, 0)) JYL_PT_MR,
                       SUM(NVL(JYL_PT_MC, 0)) JYL_PT_MC,
                       SUM(NVL(JYL_XY_MR, 0)) JYL_XY_MR,
                       SUM(NVL(JYL_XY_MC, 0)) JYL_XY_MC,
                       SUM(NVL(YJ_PT, 0)) AS YJ_PT,
                       SUM(NVL(YJ_XY, 0)) AS YJ_XY,
                       SUM(NVL(JYJ_PT, 0)) AS JYJ_PT,
                       SUM(NVL(JYJ_XY, 0)) AS JYJ_XY,
                       /*SUM(NVL(ZJYE, 0) + NVL(ZQSZ, 0) - NVL(SRZZC, 0) - NVL(ZRJE, 0) +
                       NVL(ZCJE, 0) - NVL(ZRSZ, 0) + NVL(ZCSZ, 0)) AS YK,*/
                       SUM(NVL(DBBL, 0)) AS DBBL, --担保比例：=总资产/总负债
                       SUM(NVL(KYBZJ, 0)) KYBZJ,
                       SUM(NVL(ZRJE, 0)) ZRJE,
                       SUM(NVL(ZCJE, 0)) ZCJE,
                       SUM(NVL(ZRSZ, 0)) ZRSZ,
                       SUM(NVL(ZCSZ, 0)) ZCSZ,
                       SUM(NVL(FWYJ, 0)) AS FWYJ,
                       SUM(NVL(JYBS, 0)) AS JYBS,
                       SUM(NVL(JYBS_RZ, 0)) AS JYBS_RZ,
                       SUM(NVL(JYBS_RQ, 0)) AS JYBS_RQ,
                       SUM(NVL(XZLX, 0)) AS XZLX,
                       SUM(NVL(XZRZLX, 0)) AS XZRZLX,
                       SUM(NVL(XZRQLX, 0)) AS XZRQLX,
                       SUM(NVL(ZBCS, 0)) AS ZBCS, --当日追保次数
                       SUM(NVL(RZJE, 0)) AS RZJE,
                       SUM(NVL(RQJE, 0)) AS RQJE,
                       SUM(NVL(CCCB, 0)) AS CCCB,
                       SUM(NVL(SRZZC, 0)) AS SRZZC, --上日总资产
                       SUM(NVL(SRZFZ, 0)) AS SRZFZ --上日总负债
                  FROM TMP_T_STAT_RZRQ_R
                 GROUP BY KHH) A
          JOIN DSC_BAS.T_KHXX_RZRQ B
            ON A.KHH = B.KHH;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --20201201 XJL 根据客户逻辑 ZZC, ZQSZ ,ZFZ 改为从 柜台 TXY_HTXXLS 取值
    UPDATE DSC_STAT.T_STAT_RZRQ_R A
       SET (ZZC, ZQSZ, ZFZ) =
           (SELECT B.ZZC, B.SHDBSZ + B.SZDBSZ, B.FZJE
              FROM SRC_ABOSS.TXY_HTXXLS B
             WHERE A.KHH = B.KHH AND A.RQ = B.RQ)
     WHERE A.RQ = VN_TJRQ;
     COMMIT;

    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表汇总统计插入表[DSC_STAT.T_STAT_RZRQ_R]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --清空临时表
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表[TMP_T_STAT_RZRQ_R]。',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_T_STAT_RZRQ_R';
    --记录日志明细——结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表[TMP_T_STAT_RZRQ_R]。',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_RZRQ_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_RZRQ_Y(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN INT,
                                                   I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   融资融券综合状况日表
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做     1：重做
         返回：

         算法：

         注意事项：
         数据源：
               DSC_STAT.T_STAT_RZRQ_R
         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                    操作
         卢智飞      2012/08/30                  新增
         卢智飞      2012/09/03                  修改，增加R统计中对应的几个字段.
         胡阳明      2013/03/13                  修改，增加FWYJ取值
         卢智飞      2013/03/25                  修改, 增加字段qczc  ，RJZC  ，RJRZRQ，RJRZFZ，RJRQFZ
         胡阳明      2013/05/22                  修改, 因DSC_STAT.T_STAT_RZRQ_R表指标调整，需要修改月统计过程
         林伟        2013/05/28                  修改，由于月末交易日并非月末日期，故而在线交易日有误，修改在线交易日统计方式
         胡阳明      3013/06/03                  修改：新增30日峰值总资产，30日波谷总资产
         黄玉钰      2013/07/17                  修改，因为日表统计修改，调整yjlx rzyjlx rqyjlx的计算，取累计值
         黄玉钰      2013/07/24                  修改，zfz计算错误，由取累计值改为取期末值
         胡阳明      2013/09/02                  修改：新增月末融资余额，月末融券余额
         林伟        2013/09/03                  修改：新增YMRZJE->A.YMRZJE,YMRQJE->A.YMRQJE
         胡阳明      2013/10/17                  修改：新增CCCB指标,同时修改除非为0的出错机率
         黄玉钰      2014/06/11                  修改：按客户号汇总之后，关联客户信息表获取营业部，确保一个月一个客户仅有一条记录
         陈德铸      2014/06/30                  修改：新增沪A负债和深A负债、沪A市值和深A市值、日均沪A负债、日均深A负债、日均沪A市值、日均深A市值指标
         吴邦杰      2014/10/16                  修改：1、统计非交易日资产，补上日期取值在开户日期和销户日期区间，保持和取自然日/交易日的取值条件一致
                                                       2、预计利息和新增利息取值的逻辑有问题，预计利息是期末值，新增利息是个汇总值
                                                       3、自然日天数和交易日天数计算方式修正
         胡丹丹      2015/07/03     2.0.0.8      修改：增加日均总负债
         吴邦杰      2015/07/15     2.0.0.9      修改：修改本月自然日和交易日天数统计逻辑
         吴邦杰      2015/07/09     2.0.0.10     修改：增加JYL_PT_MR,JYL_PT_MC,JYL_XY_MR,JYL_XY_MC字段
         黄宏峰      2016/02/01     2.0.0.11     修改：增加FYFZ与QTFZ写入
    */
    VS_PROC_NAME       VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID           INT; --LOG 表记录ID
    VN_ROWCOUNT        INT; --记录数
    VN_STEP            INT; --动作步数
    VN_PROC_NO         PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER            VARCHAR2(30);
    VN_TJRQ            NUMBER(8) := I_N_TJRQ; --统计日期
    VN_MON             NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6);
    VN_FIRSTDAY_OF_MON NUMBER(8) := VN_MON * 100 + 1; --月初
    VN_ZRRTS           NUMBER(8); --本月自然日天数
    VN_LASTMON         NUMBER(8); --上月
    VN_JYRTS           NUMBER(8); --本月交易日天数
    VN_LASTDAY_OF_MON  NUMBER(8); --本月月末日期
    VN_LASTJYR_OF_MON  NUMBER(8); --本月月末交易日
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';

    VN_LASTMON := TO_CHAR(ADD_MONTHS(TO_DATE(VN_MON, 'yyyymm'), -1), 'yyyymm');
    --获取本月月末日期和月末交易日
    SELECT MAX(ZRR), MAX(JYR)
      INTO VN_LASTDAY_OF_MON, VN_LASTJYR_OF_MON
      FROM DSC_CFG.T_XTJYR T
     WHERE T.NY = VN_MON
       AND T.JYR <= VN_TJRQ;
    --获取本月自然日天数及本月交易日天数
    SELECT COUNT(ZRR), COUNT(DISTINCT JYR)
      INTO VN_ZRRTS, VN_JYRTS
      FROM DSC_CFG.T_XTJYR
     WHERE ZRR BETWEEN VN_FIRSTDAY_OF_MON AND
           DECODE(VN_TJRQ, VN_LASTJYR_OF_MON, VN_LASTDAY_OF_MON, VN_TJRQ);

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --重做删除原数据
    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_RZRQ_Y]目标表，月份：=' ||
                                                        VN_MON || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE DSC_STAT.T_STAT_RZRQ_Y WHERE YF = VN_MON;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;

        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_RZRQ_Y]目标表，月份：=' ||
                                                        VN_MON || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_RZRQ_R]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[DSC_STAT.T_STAT_RZRQ_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    /*
      lzf 20120830
      月份的内容直接从日期累计获得，即可。
    */
    --插入数据
    INSERT INTO DSC_STAT.T_STAT_RZRQ_Y
        (YF,
         YYB,
         KHH,
         GRJG,
         ZZC,
         ZFZ,
         ZFZ_HA,
         ZFZ_SA,
         ZJYE,
         ZQSZ,
         ZQSZ_HA,
         ZQSZ_SA,
         XYDJ,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         YJ,
         JYJ,
         RZFZ,
         RQFZ,
         GHBJ,
         XZFZ,
         XZRZFZ,
         XZRQFZ,
         GHLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         XZLX,
         XZRQLX,
         XZRZLX,
         RZFY,
         RQFY,
         PCCS,
         ZBCS,
         JYL,
         JYL_PT,
         JYL_XY,
         JYL_PT_MR,
         JYL_PT_MC,
         JYL_XY_MR,
         JYL_XY_MC,
         YJ_PT,
         YJ_XY,
         JYJ_PT,
         JYJ_XY,
         YK,
         DBBL,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         QCZC,
         RJZC,
         RJRZRQ,
         RJRZFZ,
         RJRQFZ,
         RJZJYE, --日均资金余额
         RJZQSZ, --日均证券市值
         JYBS, --交易笔数
         JYBS_RZ,
         JYBS_RQ,
         BYZRTS,
         BYJYRTS,
         FZZZC_30,
         BGZZC_30,
         YMRZJE,
         YMRQJE,
         CCCB,
         RJZQSZ_HA,
         RJZQSZ_SA,
         RJZFZ_HA,
         RJZFZ_SA,
         RJZFZ, --增加日均总负债 20150703 胡丹丹
         FYFZ,
         QTFZ,
         QCJZC)
        SELECT A.YF,
               TS.YYB,
               TS.KHH,
               TS.GRJG,
               A.ZZC,
               A.ZFZ,
               A.ZFZ_HA,
               A.ZFZ_SA,
               A.ZJYE,
               A.ZQSZ,
               A.ZQSZ_HA,
               A.ZQSZ_SA,
               NVL(A.XYDJ, 0),
               A.RZSXED,
               A.RQSXED,
               A.JYL_RZ,
               A.JYL_RQ,
               A.YJ,
               A.JYJ,
               A.RZFZ,
               A.RQFZ,
               A.GHBJ,
               A.XZFZ,
               A.XZRZFZ,
               A.XZRQFZ,
               A.GHLX,
               A.YJLX,
               A.RZYJLX,
               A.RQYJLX,
               A.XZLX,
               A.XZRQLX,
               A.XZRZLX,
               A.RZFY,
               A.RQFY,
               A.PCCS,
               A.ZBCS,
               A.JYL,
               A.JYL_PT,
               A.JYL_XY,
               A.JYL_PT_MR,
               A.JYL_PT_MC,
               A.JYL_XY_MR,
               A.JYL_XY_MC,
               A.YJ_PT,
               A.YJ_XY,
               A.JYJ_PT,
               A.JYJ_XY,
               A.YK,
               A.DBBL,
               A.KYBZJ,
               A.ZRJE,
               A.ZCJE,
               A.ZRSZ,
               A.ZCSZ,
               A.FWYJ,
               NVL(SY.ZZC, 0) QCZC,
               CASE
                   WHEN TS.ZRRTS = 0 THEN
                    0
                   ELSE
                    (NVL(A.TTL_ZZC, 0) + NVL(UN.TTL_ZZC, 0)) / TS.ZRRTS
               END AS RJZC,
               CASE
                   WHEN TS.ZRRTS = 0 THEN
                    0
                   ELSE
                    (NVL(A.LJRZRQFZ, 0) + NVL(UN.TTL_LJRZRQFZ, 0)) / TS.ZRRTS
               END AS RJRZRQ,
               CASE
                   WHEN TS.ZRRTS = 0 THEN
                    0
                   ELSE
                    (NVL(A.TTL_RZFZ, 0) + NVL(UN.TTL_RZFZ, 0)) / TS.ZRRTS
               END AS RZRZFZ,
               CASE
                   WHEN TS.ZRRTS = 0 THEN
                    0
                   ELSE
                    (NVL(A.TTL_RQFZ, 0) + NVL(UN.TTL_RQFZ, 0)) / TS.ZRRTS
               END AS RJRQFZ,
               CASE
                   WHEN TS.ZRRTS = 0 THEN
                    0
                   ELSE
                    (NVL(A.TTL_ZJYE, 0) + NVL(UN.TTL_ZJYE, 0)) / TS.ZRRTS
               END AS RJZJYE, --日均资金余额
               CASE
                   WHEN TS.ZRRTS = 0 THEN
                    0
                   ELSE
                    (NVL(A.TTL_ZQSZ, 0) + NVL(UN.TTL_ZQSZ, 0)) / TS.ZRRTS
               END AS RJZQSZ, --日均证券市值
               A.JYBS AS JYBS, --交易笔数
               A.JYBS_RZ AS JYBS_RZ,
               A.JYBS_RQ AS JYBS_RQ,
               TS.ZRRTS,
               TS.JYRTS,
               A.FZZZC_30,
               A.BGZZC_30,
               A.YMRZJE, --ADD BY LW
               A.YMRQJE,
               A.CCCB,
               CASE
                   WHEN TS.ZRRTS = 0 THEN
                    0
                   ELSE
                    (NVL(A.TTL_ZQSZ_HA, 0) + NVL(UN.TTL_ZQSZ_HA, 0)) / TS.ZRRTS
               END AS RJZQSZ_HA,
               CASE
                   WHEN TS.ZRRTS = 0 THEN
                    0
                   ELSE
                    (NVL(A.TTL_ZQSZ_SA, 0) + NVL(UN.TTL_ZQSZ_SA, 0)) / TS.ZRRTS
               END AS RJZQSZ_SA,
               CASE
                   WHEN TS.ZRRTS = 0 THEN
                    0
                   ELSE
                    (NVL(A.TTL_ZFZ_HA, 0) + NVL(UN.TTL_ZFZ_HA, 0)) / TS.ZRRTS
               END AS RJZFZ_HA,
               CASE
                   WHEN TS.ZRRTS = 0 THEN
                    0
                   ELSE
                    (NVL(A.TTL_ZFZ_SA, 0) + NVL(UN.TTL_ZFZ_SA, 0)) / TS.ZRRTS
               END AS RJZFZ_SA,
               CASE
                   WHEN TS.ZRRTS = 0 THEN
                    0
                   ELSE
                    (NVL(A.TTL_ZFZ, 0) + NVL(UN.TTL_ZFZ, 0)) / TS.ZRRTS
               END AS RJZFZ,
               A.FYFZ,
               A.QTFZ,
               NVL(SY.ZZC-SY.ZFZ,0) QCJZC
          FROM (SELECT VN_MON YF,
                       /*YYB, GRJG,*/
                       KHH,
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                ZZC
                               ELSE
                                0
                           END) ZZC,
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                ZFZ
                               ELSE
                                0
                           END) ZFZ,
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                ZFZ_HA
                               ELSE
                                0
                           END) ZFZ_HA,
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                ZFZ_SA
                               ELSE
                                0
                           END) ZFZ_SA,
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                ZJYE
                               ELSE
                                0
                           END) ZJYE, --资金余额
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                ZQSZ
                               ELSE
                                0
                           END) ZQSZ, --证券市值
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                ZQSZ_HA
                               ELSE
                                0
                           END) ZQSZ_HA,
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                ZQSZ_SA
                               ELSE
                                0
                           END) ZQSZ_SA,
                       WMSYS.WM_CONCAT(CASE
                                           WHEN RQ = VN_TJRQ THEN
                                            XYDJ
                                           ELSE
                                            ''
                                       END) XYDJ, --信用等级
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                RZSXED
                               ELSE
                                0
                           END) RZSXED, --融资额度
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                RQSXED
                               ELSE
                                0
                           END) RQSXED, --融券额度
                       SUM(JYL_RZ) JYL_RZ,
                       SUM(JYL_RQ) JYL_RQ,
                       SUM(YJ) YJ,
                       SUM(JYJ) JYJ,
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                RZFZ
                               ELSE
                                0
                           END) RZFZ, --融资负债
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                RQFZ
                               ELSE
                                0
                           END) RQFZ, --融券负债
                       SUM(GHBJ) GHBJ, --还款金额
                       SUM(XZFZ) XZFZ, --新增负债
                       SUM(XZRZFZ) XZRZFZ,
                       SUM(XZRQFZ) XZRQFZ,
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                GHLX
                               ELSE
                                0
                           END) GHLX, --归还利息(累计的）
                       --update by wubangjie ,20141016,预计利息和新增利息取值的逻辑有问题，预计利息是期末值，新增利息是个汇总值
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                YJLX
                               ELSE
                                0
                           END) YJLX, --预计利息
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                RZYJLX
                               ELSE
                                0
                           END) RZYJLX, --融资预计利息
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                RQYJLX
                               ELSE
                                0
                           END) RQYJLX, --融券预计利息
                       SUM(XZLX) XZLX, --新增利息
                       SUM(XZRQLX) XZRQLX, --融资占用利息
                       SUM(XZRZLX) XZRZLX, --融券占用利息
                       SUM(RZFY) RZFY,
                       SUM(RQFY) RQFY,
                       SUM(PCCS) PCCS,
                       SUM(ZBCS) ZBCS,
                       SUM(JYL) JYL,
                       SUM(JYL_PT) JYL_PT,
                       SUM(JYL_XY) JYL_XY,
                       SUM(JYL_PT_MR) JYL_PT_MR,
                       SUM(JYL_PT_MC) JYL_PT_MC,
                       SUM(JYL_XY_MR) JYL_XY_MR,
                       SUM(JYL_XY_MC) JYL_XY_MC,
                       SUM(YJ_PT) YJ_PT,
                       SUM(YJ_XY) YJ_XY,
                       SUM(JYJ_PT) JYJ_PT,
                       SUM(JYJ_XY) JYJ_XY,
                       SUM(YK) YK,
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                DBBL
                               ELSE
                                0
                           END) DBBL, --担保比例
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                KYBZJ
                               ELSE
                                0
                           END) KYBZJ, --保证金余额 可用保证金
                       SUM(ZRJE) ZRJE,
                       SUM(ZCJE) ZCJE,
                       SUM(ZRSZ) ZRSZ,
                       SUM(ZCSZ) ZCSZ,
                       SUM(FWYJ) FWYJ,
                       SUM(ZZC) TTL_ZZC,
                       SUM(RZFZ) TTL_RZFZ,
                       SUM(RQFZ) TTL_RQFZ,
                       SUM(AA.ZJYE) AS TTL_ZJYE,
                       SUM(AA.ZQSZ) AS TTL_ZQSZ,
                       SUM(JYBS) AS JYBS,
                       SUM(JYBS_RZ) AS JYBS_RZ,
                       SUM(JYBS_RQ) AS JYBS_RQ,
                       SUM(RZFZ + RQFZ) AS LJRZRQFZ,
                       MAX(ZZC) AS FZZZC_30,
                       MIN(ZZC) AS BGZZC_30,
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                RZJE
                               ELSE
                                0
                           END) YMRZJE,
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                RQJE
                               ELSE
                                0
                           END) YMRQJE,
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                CCCB
                               ELSE
                                0
                           END) CCCB,
                       SUM(ZQSZ_HA) TTL_ZQSZ_HA,
                       SUM(ZQSZ_SA) TTL_ZQSZ_SA,
                       SUM(ZFZ_HA) TTL_ZFZ_HA,
                       SUM(ZFZ_SA) TTL_ZFZ_SA,
                       SUM(ZFZ) TTL_ZFZ,
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                FYFZ
                               ELSE
                                0
                           END) FYFZ,
                       SUM(CASE
                               WHEN RQ = VN_TJRQ THEN
                                QTFZ
                               ELSE
                                0
                           END) QTFZ
                  FROM DSC_STAT.T_STAT_RZRQ_R AA
                 WHERE RQ BETWEEN VN_FIRSTDAY_OF_MON AND VN_TJRQ
                 GROUP BY /*YYB, GRJG,*/ KHH) A
        --吴邦杰，20141016，自然日天数和交易日天数计算方式修正
          JOIN (SELECT KHH,
                       YYB,
                       GRJG,
                       (SELECT COUNT(DISTINCT ZRR)
                          FROM DSC_CFG.T_XTJYR
                         WHERE ZRR BETWEEN VN_FIRSTDAY_OF_MON AND VN_LASTDAY_OF_MON
                           AND ZRR BETWEEN C.KHRQ AND C.ZXRQ) AS ZRRTS,
                       (SELECT COUNT(DISTINCT JYR)
                          FROM DSC_CFG.T_XTJYR
                         WHERE JYR BETWEEN VN_FIRSTDAY_OF_MON AND VN_TJRQ
                           AND JYR BETWEEN C.KHRQ AND C.ZXRQ) AS JYRTS --本月在线交易日天数
                  FROM DSC_BAS.T_KHXX_RZRQ C) TS
            ON TS.KHH = A.KHH
          LEFT JOIN (
                     --非交易日资产
                     --非交易日的特征:自然日>交易日
                     SELECT ZC.KHH,
                             SUM(ZZC) TTL_ZZC,
                             SUM(RZFZ) TTL_RZFZ,
                             SUM(RQFZ) TTL_RQFZ,
                             SUM(ZC.ZJYE) AS TTL_ZJYE,
                             SUM(ZC.ZQSZ) AS TTL_ZQSZ,
                             SUM(ZC.RZFZ + ZC.RQFZ) AS TTL_LJRZRQFZ,
                             SUM(ZQSZ_HA) TTL_ZQSZ_HA,
                             SUM(ZQSZ_SA) TTL_ZQSZ_SA,
                             SUM(ZFZ_HA) TTL_ZFZ_HA,
                             SUM(ZFZ_SA) TTL_ZFZ_SA,
                             SUM(ZFZ) TTL_ZFZ
                       FROM DSC_STAT.T_STAT_RZRQ_R ZC
                       JOIN DSC_BAS.T_KHXX_RZRQ KH
                         ON ZC.KHH = KH.KHH
                       JOIN DSC_CFG.T_XTJYR B
                         ON B.JYR = ZC.RQ
                        AND B.ZRR > B.JYR
                        AND B.ZRR BETWEEN VN_FIRSTDAY_OF_MON AND VN_LASTDAY_OF_MON
                        AND B.ZRR BETWEEN KH.KHRQ AND KH.ZXRQ --20141016，吴邦杰，统计非交易日资产，补上日期取值在开户日期和销户日期区间
                      GROUP BY ZC.KHH) UN
            ON UN.KHH = A.KHH
          LEFT JOIN DSC_STAT.T_STAT_RZRQ_Y SY
            ON SY.KHH = A.KHH
           AND SY.YF = VN_LASTMON;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[DSC_STAT.T_STAT_RZRQ_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_RZRQ_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_SCJYR(O_N_CODE OUT INT,
                                                  O_S_NOTE OUT VARCHAR2,
                                                  I_N_TJRQ IN INT,
                                                  I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   DSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_SCJYR
         功能简述：   首次交易日统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：
                 手工跑历史数据问题：
                 1）逐日运行处理
    DECLARE
        O_N_CODE INT;
        O_S_NOTE VARCHAR2(1000);
        VN_CNT   INT;
    BEGIN
        FOR CUR_RQ IN (SELECT T.JYR
                         FROM DSC_CFG.T_XTJYR T
                        WHERE T.JYR >= T.ZRR
                          AND T.ZRR >= 20130101 --输入一个起始时间
                          AND T.ZRR <= 20130513 --输入一个结束时间
                        ORDER BY T.JYR) LOOP
            SELECT COUNT(1)
              INTO VN_CNT
              FROM DSC_STAT.VW_JGMXLS T
             WHERE T.CJRQ = CUR_RQ.JYR
               AND ROWNUM <= 2;
            IF VN_CNT > 0 THEN
                DSC_STAT.P_STAT_SCJYR(O_N_CODE => O_N_CODE,
                                      O_S_NOTE => O_S_NOTE,
                                      I_N_TJRQ => CUR_RQ.JYR,
                                      I_N_REDO => 1);
            END IF;
        END LOOP;
    END;

                 2）全量运行处理可执行如下脚本：但尽量避免这样执行
                 DECLARE
                     O_N_CODE INT;
                     O_S_NOTE VARCHAR2(1000);
                     I_N_TJRQ NUMBER(8);
                     I_N_REDO INT;
                 BEGIN
                     I_N_TJRQ := 20151016;
                     I_N_REDO := 2; --全部重处理
                     DSC_STAT.P_STAT_SCJYR(O_N_CODE => O_N_CODE,
                                           O_S_NOTE => O_S_NOTE,
                                           I_N_TJRQ => I_N_TJRQ,
                                           I_N_REDO => I_N_REDO);
                 END;






         数据源：
                 1、DSC_BAS.T_JGMXLS             交割明细流水
                 2、DSC_HIS.T_JGMXLS_HIS         交割明细流水历史

                 1、DSC_BAS.T_XY_JGMXLS             信用交割明细流水
                 2、DSC_HIS.T_XY_JGMXLS_HIS         信用交割明细流水历史



         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         陈德铸      2015/10/19                 创建
         胡丹丹      2016/11/15                 修改：增加港股首次交易日
    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_1';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (2) THEN
        --初始化时清空数据，全量生成首次交易日，这个性能可能会有点慢，需要在空闲时期执行
        --这种运行性能极低，一般慎重使用

        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '初始化[DSC_STAT.T_STAT_SCJYR]表！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.T_STAT_SCJYR';

        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '初始化[DSC_STAT.T_STAT_SCJYR]表！',
                                  I_S_CHANGEDESC     => '表数据已清空！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

        --1.1：集中交易
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '【全量】生成集中交易的首次交易日数据到[DSC_STAT.T_STAT_SCJYR]表！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        INSERT INTO DSC_STAT.T_STAT_SCJYR
            (KHH, YYB, KHRQ, JYLB, ZHLB, SCJYR, CJSJ)
            SELECT KHH, YYB, KHRQ, JYLB, ZHLB, SCJYR, CJSJ
              FROM (SELECT A.KHH,
                           A.YYB,
                           B.KHRQ,
                           A.JYLB,
                           1 AS ZHLB,
                           A.CJRQ AS SCJYR,
                           A.CJSJ,
                           ROW_NUMBER() OVER(PARTITION BY A.KHH, A.JYLB ORDER BY CJRQ, CJSJ ASC) AS RN
                      FROM (SELECT KHH, YYB, CJRQ, CJSJ, JYLB
                              FROM DSC_BAS.T_JGMXLS
                            UNION ALL
                            SELECT KHH, YYB, CJRQ, CJSJ, JYLB FROM DSC_HIS.T_JGMXLS_HIS) A,
                           DSC_BAS.T_KHXX_JJYW B
                     WHERE A.KHH = B.KHH
                       AND A.JYLB IN
                           (SELECT D.JYLB FROM DSC_CFG.T_JYLB D WHERE D.IS_JSJYL = '1'))
             WHERE RN = 1;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '【全量】生成集中交易的首次交易日数据到[DSC_STAT.T_STAT_SCJYR]表！',
                                  I_S_CHANGEDESC     => '插入：' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

        --1.2：信用交易
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '【全量】生成信用交易的首次交易日数据到[DSC_STAT.T_STAT_SCJYR]表！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        INSERT INTO DSC_STAT.T_STAT_SCJYR
            (KHH, YYB, KHRQ, JYLB, ZHLB, SCJYR, CJSJ)
            SELECT KHH, YYB, KHRQ, JYLB, ZHLB, SCJYR, CJSJ
              FROM (SELECT A.KHH,
                           A.YYB,
                           B.KHRQ,
                           A.JYLB,
                           2 AS ZHLB,
                           A.CJRQ AS SCJYR,
                           A.CJSJ,
                           ROW_NUMBER() OVER(PARTITION BY A.KHH, A.JYLB ORDER BY CJRQ, CJSJ ASC) AS RN
                      FROM (SELECT KHH, YYB, CJRQ, CJSJ, JYLB
                              FROM DSC_BAS.T_XY_JGMXLS
                            UNION ALL
                            SELECT KHH, YYB, CJRQ, CJSJ, JYLB FROM DSC_HIS.T_XY_JGMXLS_HIS) A,
                           DSC_BAS.T_KHXX_RZRQ B
                     WHERE A.KHH = B.KHH
                       AND A.JYLB IN
                           (SELECT D.JYLB FROM DSC_CFG.T_JYLB D WHERE D.IS_JSJYL = '1'))
             WHERE RN = 1;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '【全量】生成信用交易的首次交易日数据到[DSC_STAT.T_STAT_SCJYR]表！',
                                  I_S_CHANGEDESC     => '插入：' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '初始化[DSC_STAT.T_STAT_SCJYR]表！',
                                  I_S_CHANGEDESC     => '表数据已清空！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

        --1.3：港股业务
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '【全量】生成港股业务的首次交易日数据到[DSC_STAT.T_STAT_SCJYR]表！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        INSERT INTO DSC_STAT.T_STAT_SCJYR
            (KHH, YYB, KHRQ, JYLB, ZHLB, SCJYR, CJSJ)
            SELECT KHH, YYB, KHRQ, JYLB, ZHLB, SCJYR, CJSJ
              FROM (SELECT A.KHH,
                           A.YYB,
                           B.KHRQ,
                           A.JYLB,
                           3 AS ZHLB,
                           A.CJRQ AS SCJYR,
                           A.CJSJ,
                           ROW_NUMBER() OVER(PARTITION BY A.KHH, A.JYLB ORDER BY CJRQ, CJSJ ASC) AS RN
                      FROM (SELECT KHH, YYB, CJRQ, CJSJ, JYLB
                              FROM DSC_BAS.T_JGMXLS
                             WHERE JYS IN ('8', '9')
                            UNION ALL
                            SELECT KHH, YYB, CJRQ, CJSJ, JYLB
                              FROM DSC_HIS.T_JGMXLS_HIS
                             WHERE JYS IN ('8', '9')) A,
                           DSC_BAS.T_KHXX_JJYW B
                     WHERE A.KHH = B.KHH
                       AND A.JYLB IN
                           (SELECT D.JYLB FROM DSC_CFG.T_JYLB D WHERE D.IS_JSJYL = '1'))
             WHERE RN = 1;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '【全量】生成港股业务的首次交易日数据到[DSC_STAT.T_STAT_SCJYR]表！',
                                  I_S_CHANGEDESC     => '插入：' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    ELSE
        ---------------------------------------------------------------------------------

        --2.1、生成集中交易统计数据

        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '生成集中交易的首次交易日数据到[DSC_STAT.T_STAT_SCJYR]表！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        MERGE INTO DSC_STAT.T_STAT_SCJYR A
        USING (SELECT KHH, YYB, KHRQ, JYLB, ZHLB, CJRQ AS SCJYR, CJSJ
                 FROM (SELECT C.KHH,
                              C.YYB,
                              D.KHRQ,
                              C.JYLB,
                              1 AS ZHLB,
                              C.CJRQ,
                              C.CJSJ,
                              ROW_NUMBER() OVER(PARTITION BY C.KHH, C.JYLB ORDER BY CJRQ, CJSJ ASC) AS RN
                         FROM (SELECT KHH, YYB, CJRQ, CJSJ, JYLB
                                 FROM DSC_BAS.T_JGMXLS
                                WHERE CJRQ = VN_TJRQ
                               UNION ALL
                               SELECT KHH, YYB, CJRQ, CJSJ, JYLB
                                 FROM DSC_HIS.T_JGMXLS_HIS
                                WHERE CJRQ = VN_TJRQ) C,
                              DSC_BAS.T_KHXX_JJYW D
                        WHERE C.KHH = D.KHH
                          AND C.JYLB IN
                              (SELECT D.JYLB FROM DSC_CFG.T_JYLB D WHERE D.IS_JSJYL = '1'))
                WHERE RN = 1) B
        ON (A.KHH = B.KHH AND A.JYLB = B.JYLB AND A.ZHLB = B.ZHLB)
        WHEN MATCHED THEN
            UPDATE SET A.SCJYR = B.SCJYR, A.CJSJ = B.CJSJ WHERE A.SCJYR > B.SCJYR
        WHEN NOT MATCHED THEN
            INSERT
                (A.KHH, A.YYB, A.KHRQ, A.JYLB, A.ZHLB, A.SCJYR, A.CJSJ)
            VALUES
                (B.KHH, B.YYB, B.KHRQ, B.JYLB, B.ZHLB, B.SCJYR, B.CJSJ);

        --执行SQL
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——成功结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '生成集中交易的首次交易日数据到[DSC_STAT.T_STAT_SCJYR]表！',
                                  I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

        --2.2、生成信用交易统计数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '生成信用交易的首次交易日数据到[DSC_STAT.T_STAT_SCJYR]表！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        MERGE INTO DSC_STAT.T_STAT_SCJYR A
        USING (SELECT KHH, YYB, KHRQ, JYLB, ZHLB, CJRQ AS SCJYR, CJSJ
                 FROM (SELECT C.KHH,
                              C.YYB,
                              D.KHRQ,
                              C.JYLB,
                              2 AS ZHLB,
                              C.CJRQ,
                              C.CJSJ,
                              ROW_NUMBER() OVER(PARTITION BY C.KHH, C.JYLB ORDER BY CJRQ, CJSJ ASC) AS RN
                         FROM (SELECT KHH, YYB, CJRQ, CJSJ, JYLB
                                 FROM DSC_BAS.T_XY_JGMXLS
                                WHERE CJRQ = VN_TJRQ
                               UNION ALL
                               SELECT KHH, YYB, CJRQ, CJSJ, JYLB
                                 FROM DSC_HIS.T_XY_JGMXLS_HIS
                                WHERE CJRQ = VN_TJRQ) C,
                              DSC_BAS.T_KHXX_RZRQ D
                        WHERE C.KHH = D.KHH
                          AND C.JYLB IN
                              (SELECT D.JYLB FROM DSC_CFG.T_JYLB D WHERE D.IS_JSJYL = '1'))
                WHERE RN = 1) B
        ON (A.KHH = B.KHH AND A.JYLB = B.JYLB AND A.ZHLB = B.ZHLB)
        WHEN MATCHED THEN
            UPDATE SET A.SCJYR = B.SCJYR, A.CJSJ = B.CJSJ WHERE A.SCJYR > B.SCJYR
        WHEN NOT MATCHED THEN
            INSERT
                (A.KHH, A.YYB, A.KHRQ, A.JYLB, A.ZHLB, A.SCJYR, A.CJSJ)
            VALUES
                (B.KHH, B.YYB, B.KHRQ, B.JYLB, B.ZHLB, B.SCJYR, B.CJSJ);

        --执行SQL
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——成功结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '生成信用交易的首次交易日数据到[DSC_STAT.T_STAT_SCJYR]表！',
                                  I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

        --2.3、港股业务

        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '生成港股业务的首次交易日数据到[DSC_STAT.T_STAT_SCJYR]表！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        MERGE INTO DSC_STAT.T_STAT_SCJYR A
        USING (SELECT KHH, YYB, KHRQ, JYLB, ZHLB, CJRQ AS SCJYR, CJSJ
                 FROM (SELECT C.KHH,
                              C.YYB,
                              D.KHRQ,
                              C.JYLB,
                              3 AS ZHLB,
                              C.CJRQ,
                              C.CJSJ,
                              ROW_NUMBER() OVER(PARTITION BY C.KHH, C.JYLB ORDER BY CJRQ, CJSJ ASC) AS RN
                         FROM (SELECT KHH, YYB, CJRQ, CJSJ, JYLB
                                 FROM DSC_BAS.T_JGMXLS
                                WHERE JYS IN ('8', '9')
                                  AND CJRQ = VN_TJRQ
                               UNION ALL
                               SELECT KHH, YYB, CJRQ, CJSJ, JYLB
                                 FROM DSC_HIS.T_JGMXLS_HIS
                                WHERE JYS IN ('8', '9')
                                  AND CJRQ = VN_TJRQ) C,
                              DSC_BAS.T_KHXX_JJYW D
                        WHERE C.KHH = D.KHH
                          AND C.JYLB IN
                              (SELECT D.JYLB FROM DSC_CFG.T_JYLB D WHERE D.IS_JSJYL = '1'))
                WHERE RN = 1) B
        ON (A.KHH = B.KHH AND A.JYLB = B.JYLB AND A.ZHLB = B.ZHLB)
        WHEN MATCHED THEN
            UPDATE SET A.SCJYR = B.SCJYR, A.CJSJ = B.CJSJ WHERE A.SCJYR > B.SCJYR
        WHEN NOT MATCHED THEN
            INSERT
                (A.KHH, A.YYB, A.KHRQ, A.JYLB, A.ZHLB, A.SCJYR, A.CJSJ)
            VALUES
                (B.KHH, B.YYB, B.KHRQ, B.JYLB, B.ZHLB, B.SCJYR, B.CJSJ);

        --执行SQL
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——成功结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '生成港股业务的首次交易日数据到[DSC_STAT.T_STAT_SCJYR]表！',
                                  I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_SCJYR;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_SC_JYL(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN NUMBER,
                                                   I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
      -- CREATED ON 2011/10/20 BY LUZHIFEI ,APEXSOFT
      -----------------------------------------------------------------------
      项目名称：   上海证券
      过程名称:    DSC_STAT
      功能简述：   统计市场交易量
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：
         1)假设条件一 DSC_HIS.T_ZQHQ_HIS具有T-1的数据。
         2)DSC_HIS.T_ZQHQ_HIS具有足够丰富的信息，包含CJJE
         3)如果t_zqhq没有指数的信息，那么就无法计算。 这种情况下，建议
           还是从其它地方获取资料吧！
         4) 暂时没有乘以币种。

      数据源：
         DSC_HIS.T_ZQHQ_HIS
         目标：T_STAT_SC_JYL
      修改记录;
      -----------------------------------------------------------------------------------------------------------------------
      操作人   操作时间                           操作
      LZF      2011/10/20 15:45:05                新增
      LZF      2012/05/18 09:16:00                修改，源为DSC
      胡阳明   2012/09/10                         修改，增加别名前缀
      黄玉钰   2013/09/18                         修改：查询DSC_BAS.T_ZQHQ时，union all DSC_HIS.T_ZQHQ_HIS表

    */
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_SCJYL';

    VN_HLCS_HKD NUMBER;
    VN_HLCS_USD NUMBER;

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --1.0 删除旧数据
    IF I_N_REDO = 1 THEN
        --SELECT COUNT(*) INTO VN_COUNT FROM T_STAT_YYBZC_R WHERE RQ=VN_TJRQ;
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_SC_JYL
         WHERE SJDW = 1
           AND SJZ = VN_TJRQ;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --2.0 插入数据
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --------------------------------------------------------------------------------
    --1.1）算上海
    --这个算法是基于T_ZQHQ包含指数的情况下。
    SELECT GSBL
      INTO VN_HLCS_HKD
      FROM DSC_CFG.T_HLCS
     WHERE BZ = '2'
       AND VN_TJRQ BETWEEN KSRQ AND JSRQ;

    SELECT GSBL
      INTO VN_HLCS_USD
      FROM DSC_CFG.T_HLCS
     WHERE BZ = '3'
       AND VN_TJRQ BETWEEN KSRQ AND JSRQ;

    INSERT INTO T_STAT_SC_JYL
        (SJDW,
         SJZ,
         JYS,
         JYL_A,
         JYL_B,
         JYL_TA,
         JYL_TB,
         JYL_JJ,
         JYL_QZ,
         JYL_ZQ,
         JYL_GJQ,
         JYL_GJ,
         JYL,
         JYL_ZB,
         JYL_ZXB,
         JYL_CYB,
         LOAD_TIME)
        SELECT 1,
               VN_TJRQ,
               1, --上海
               SUM(CASE
                       WHEN C.JB3_ZQPZ = '110' AND C.JYS = '2' THEN
                        A.CJJE
                       ELSE
                        0
                   END) + SUM(CASE
                                  WHEN C.JB3_ZQPZ = '112' AND C.JYS = '2' THEN
                                   A.CJJE
                                  ELSE
                                   0
                              END) + SUM(CASE
                                             WHEN C.JB3_ZQPZ = '113' AND C.JYS = '2' THEN
                                              A.CJJE
                                             ELSE
                                              0
                                         END), --上海A
               SUM(CASE
                       WHEN C.JB3_ZQPZ = '121' AND C.JYS = '4' THEN
                        A.CJJE
                       ELSE
                        0
                   END) * VN_HLCS_USD, --上海B
               0,
               0,
               SUM(CASE
                       WHEN C.JB3_ZQPZ IN ('211', '221', '231') AND C.JYS = '2' THEN
                        A.CJJE
                       ELSE
                        0
                   END), --上海基金
               SUM(CASE
                       WHEN C.JB3_ZQPZ = '311' THEN
                        A.CJJE
                       ELSE
                        0
                   END), --权证
               SUM(CASE
                       WHEN C.JB3_ZQPZ IN ('411', '431', '441') THEN
                        A.CJJE
                       ELSE
                        0
                   END), --债券
               0, --股基权
               0, --股票基金
               0, --所有交易量
               SUM(CASE
                       WHEN C.JB3_ZQPZ = '110' AND C.JYS = '2' THEN
                        A.CJJE
                       ELSE
                        0
                   END), --主板，
               SUM(CASE
                       WHEN C.JB3_ZQPZ = '112' AND C.JYS = '2' THEN
                        A.CJJE
                       ELSE
                        0
                   END), --中小板
               SUM(CASE
                       WHEN C.JB3_ZQPZ = '113' AND C.JYS = '2' THEN
                        A.CJJE
                       ELSE
                        0
                   END), --创业板
               SYSDATE
          FROM (SELECT RQ, JYS, ZQDM, CJJE
                  FROM DSC_HIS.T_ZQHQ_HIS
                UNION ALL
                SELECT RQ, JYS, ZQDM, CJJE FROM DSC_BAS.T_ZQHQ) A
          JOIN DSC_CFG.T_ZQDM B ON B.JYS = A.JYS
                               AND B.ZQDM = A.ZQDM
          JOIN DSC_CFG.T_ZQPZ_DY C ON C.JYS = B.JYS
                                  AND C.ZQLB = B.ZQLB
         WHERE RQ = VN_TJRQ;

    /*SELECT
    1,VN_TJRQ ,
    1,--上海
    SUM(CASE WHEN ZQDM='000002' AND JYS='SH' THEN CJJE ELSE 0 END),--上海A
    SUM(CASE WHEN ZQDM='000003' AND JYS='SH' THEN CJJE ELSE 0 END),--上海B
    0,
    0,
    SUM(CASE WHEN ZQDM='000011' AND JYS='SH' THEN CJJE ELSE 0 END),--上海基金
    0,--权证另外算
    0,--债券，另外算
    0,--股基权
    SUM(CASE WHEN ZQDM='000001' AND JYS='SH' THEN CJJE ELSE 0 END),--上海股基
    0,--所有交易量
    0,--主板，上海无所谓主板
    0,--中小板,上海无
    0,--创业板 ，上海无
    SYSDATE
    FROM  DSC_HIS.T_ZQHQ_HIS  --DSC_HIS.T_ZQHQ_HIS
    WHERE RQ=VN_TJRQ ; */
    --1.2)算权证，债券，
    --其中JYL=JYL_A+JYL_B+JYL_TA+JYL_TB+JYL_JJ+JYL_QZ+JYL_ZQ ,但其它的就不准了。
    --可以修改为MERGE

    --1.4)算股基权，所有辆
    UPDATE T_STAT_SC_JYL A
       SET A.JYL_GJQ = A.JYL_A + A.JYL_B + A.JYL_JJ + A.JYL_QZ,
           A.JYL_GJ  = A.JYL_A + A.JYL_B + A.JYL_JJ,
           A.JYL     = A.JYL_A + A.JYL_B + A.JYL_JJ + A.JYL_QZ + A.JYL_ZQ
     WHERE SJDW = 1
       AND SJZ = VN_TJRQ
       AND JYS = 1;

    --------------------------------------------------------------------------------
    --2.1）算深证
    --关于主板，中板，和小班如何算的问题。

    INSERT INTO T_STAT_SC_JYL
        (SJDW,
         SJZ,
         JYS,
         JYL_A,
         JYL_B,
         JYL_TA,
         JYL_TB,
         JYL_JJ,
         JYL_QZ,
         JYL_ZQ,
         JYL_GJQ,
         JYL_GJ,
         JYL,
         JYL_ZB,
         JYL_ZXB,
         JYL_CYB,
         LOAD_TIME)
    /*SELECT
             1,VN_TJRQ ,
             2,--深证
             SUM(CASE WHEN ZQDM='399107' AND JYS='SH' THEN CJJE ELSE 0 END),--深证A
             SUM(CASE WHEN ZQDM='399108' AND JYS='SH' THEN CJJE ELSE 0 END),--深证B
             0,
             0,
             0,
             SUM(CASE WHEN ZQDM='395041' AND JYS='SH' THEN CJJE ELSE 0 END),--权证
             0,--债券，另外算
             0,--股基权
             SUM(CASE WHEN ZQDM='399001' AND JYS='SH' THEN CJJE ELSE 0 END),--深证股基
             0,--所有交易量
             0,--主板，
             SUM(CASE WHEN ZQDM='399101' AND JYS='SH' THEN CJJE ELSE 0 END),--中小版
             SUM(CASE WHEN ZQDM='399102' AND JYS='SH' THEN CJJE ELSE 0 END),--,--创业板
             SYSDATE
             FROM DSC_HIS.T_ZQHQ_HIS
             WHERE RQ=VN_TJRQ ; */
        SELECT 1,
               VN_TJRQ,
               2, --深证
               SUM(CASE
                       WHEN C.JB3_ZQPZ IN ('111') AND A.JYS = '1' THEN
                        CJJE
                       ELSE
                        0
                   END), --深证A
               SUM(CASE
                       WHEN C.JB3_ZQPZ IN ('122') AND A.JYS = '3' THEN
                        CJJE
                       ELSE
                        0
                   END) * VN_HLCS_HKD, --深证B
               0,
               0,
               SUM(CASE
                       WHEN C.JB3_ZQPZ IN ('211', '221', '231') AND A.JYS = '1' THEN
                        CJJE
                       ELSE
                        0
                   END), --基金
               SUM(CASE
                       WHEN C.JB3_ZQPZ IN ('311') AND A.JYS = '1' THEN
                        CJJE
                       ELSE
                        0
                   END), --权证
               SUM(CASE
                       WHEN C.JB3_ZQPZ IN ('411', '431', '441') AND A.JYS = '1' THEN
                        CJJE
                       ELSE
                        0
                   END), --债券
               0, --股基权
               0, --股基
               0, --所有交易量
               SUM(CASE
                       WHEN C.JB3_ZQPZ IN ('111') AND A.JYS = '1' THEN
                        CJJE
                       ELSE
                        0
                   END), --主板，
               0, --无创业板
               0, --无中小板
               SYSDATE
          FROM (SELECT RQ, JYS, ZQDM, CJJE
                  FROM DSC_HIS.T_ZQHQ_HIS
                UNION ALL
                SELECT RQ, JYS, ZQDM, CJJE FROM DSC_BAS.T_ZQHQ) A
          JOIN DSC_CFG.T_ZQDM B ON B.JYS = A.JYS
                               AND B.ZQDM = A.ZQDM
          JOIN DSC_CFG.T_ZQPZ_DY C ON C.JYS = B.JYS
                                  AND C.ZQLB = B.ZQLB
         WHERE RQ = VN_TJRQ;

    --2.4)算股基权，所有交易量
    UPDATE T_STAT_SC_JYL A
       SET A.JYL_GJQ = A.JYL_A + A.JYL_B + A.JYL_JJ + A.JYL_QZ,
           A.JYL_GJ  = A.JYL_A + A.JYL_B + A.JYL_JJ,
           A.JYL     = A.JYL_A + A.JYL_B + A.JYL_JJ + A.JYL_QZ + A.JYL_ZQ
     WHERE SJDW = 1
       AND SJZ = VN_TJRQ
       AND JYS = 2;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --COMMIT;
    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_SC_JYL;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_TD_CLXZ_N(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN NUMBER,
                                                      I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
    --
    -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_TD_CLXZ_N
      功能简述：   按照团队计算团队存量、增量客户统计（年）


      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：

          组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
          这是个特殊的算法，如果为了和其他的一致，则应该以期末的客户关系算有关的值，
          但建议客户的年统计的数据量多大，这里只计算大约的值。

      数据源：

      修改记录;
      ----------------------------------------------------------------------------
      操作人            操作时间                      操作
      黄玉钰            2013/05/21                   创建
      林伟              2013/08/29                   修改：增加YYB字段
      黄玉钰            2013/09/10                   修改：merge中表名修改

    */
    --CON_ORG_LVL CONSTANT VARCHAR2(2) := '05';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_TD_CLXZ_N';

    VN_KSYF NUMBER(6);
    VN_JSYF NUMBER(6);
    VN_YEAR NUMBER(4); --年份

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    VN_YEAR := SUBSTR(VN_TJRQ, 1, 4);
    VN_KSYF := VN_YEAR * 100 + 1;
    VN_JSYF := SUBSTR(VN_TJRQ, 1, 6);

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN

        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        DELETE FROM DSC_STAT.T_STAT_TD_CLXZ_N WHERE NF = VN_YEAR;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --先插入资产
    INSERT INTO DSC_STAT.T_STAT_TD_CLXZ_N
        (NF,
         U_ID,
         YS_ID,
         YYB,
         KHS_CL,
         JYL_CL,
         YJ_CL,
         JYJ_CL,
         KHZC_CL,
         ZRZC_CL,
         ZCZC_CL,
         ZRSZ_CL,
         ZCSZ_CL,
         KHS_ZL,
         JYL_ZL,
         YJ_ZL,
         JYJ_ZL,
         KHZC_ZL,
         ZRZC_ZL,
         ZCZC_ZL,
         ZRSZ_ZL,
         ZCSZ_ZL)
        SELECT VN_YEAR,
               Y.U_ID,
               Y.YS_ID,
               Y.YYB,
               Y.KHS_CL,
               0 JYL_CL,
               0 YJ_CL,
               0 JYJ_CL,
               Y.KHZC_CL,
               0 ZRZC_CL,
               0 ZCZC_CL,
               0 ZRSZ_CL,
               0 ZCSZ_CL,
               Y.KHS_ZL,
               0 JYL_ZL,
               0 YJ_ZL,
               0 JYJ_ZL,
               Y.KHZC_ZL,
               0 ZRZC_ZL,
               0 ZCZC_ZL,
               0 ZRSZ_ZL,
               0 ZCSZ_ZL
          FROM DSC_STAT.T_STAT_TD_CLXZ_Y Y
         WHERE Y.YF = VN_JSYF;

    VN_ROWCOUNT := SQL%ROWCOUNT;

    MERGE INTO DSC_STAT.T_STAT_TD_CLXZ_N N
    USING (SELECT A.U_ID,
                  A.YS_ID,
                  A.YYB,
                  NVL(SUM(A.ZRZC_CL), 0) ZRZC_CL,
                  NVL(SUM(A.ZCZC_CL), 0) ZCZC_CL,
                  NVL(SUM(A.ZRSZ_CL), 0) ZRSZ_CL,
                  NVL(SUM(A.ZCSZ_CL), 0) ZCSZ_CL,
                  NVL(SUM(A.ZRZC_ZL), 0) ZRZC_ZL,
                  NVL(SUM(A.ZCZC_ZL), 0) ZCZC_ZL,
                  NVL(SUM(A.ZRSZ_ZL), 0) ZRSZ_ZL,
                  NVL(SUM(A.ZCSZ_ZL), 0) ZCSZ_ZL,
                  NVL(SUM(A.JYL_CL), 0) JYL_CL,
                  NVL(SUM(A.YJ_CL), 0) YJ_CL,
                  NVL(SUM(A.JYJ_CL), 0) JYJ_CL,
                  NVL(SUM(A.JYL_ZL), 0) JYL_ZL,
                  NVL(SUM(A.YJ_ZL), 0) YJ_ZL,
                  NVL(SUM(A.JYJ_ZL), 0) JYJ_ZL
             FROM DSC_STAT.T_STAT_TD_CLXZ_Y A
            WHERE A.YF BETWEEN VN_KSYF AND VN_JSYF
            GROUP BY A.U_ID, A.YS_ID, A.YYB) Y
    ON (N.U_ID = Y.U_ID AND N.YS_ID = Y.YS_ID AND N.YYB = Y.YYB AND N.NF = VN_YEAR)
    WHEN MATCHED THEN
        UPDATE
           SET N.ZRZC_CL = Y.ZRZC_CL,
               N.ZCZC_CL = Y.ZCZC_CL,
               N.ZRSZ_CL = Y.ZRSZ_CL,
               N.ZCSZ_CL = Y.ZCSZ_CL,
               N.ZRZC_ZL = Y.ZRZC_ZL,
               N.ZCZC_ZL = Y.ZCZC_ZL,
               N.ZRSZ_ZL = Y.ZRSZ_ZL,
               N.ZCSZ_ZL = Y.ZCSZ_ZL,
               N.JYL_CL  = Y.JYL_CL,
               N.YJ_CL   = Y.YJ_CL,
               N.JYJ_CL  = Y.JYJ_CL;

    O_S_NOTE := '运行正常';

    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_TD_CLXZ_N;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_TD_CLXZ_Y(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN NUMBER,
                                                      I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
    --
    -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_TD_CLXZ_Y
      功能简述：   按照团队计算团队存量、增量客户统计（月）


      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：

              组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY

      数据源：

      修改记录;
      ----------------------------------------------------------------------------
      操作人            操作时间                      操作
      黄玉钰            2013/05/21                   创建
      林伟              2013/08/29                   修改：增加YYB字段
      陈德铸            2015/06/07                   修改：YYB字段取自DSC_BAS.T_TDBM中的YY字段

    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '05';
    CON_GXLX_FW CONSTANT INTEGER := 1; --关系类型（服务关系，含主和辅助两种)
    VS_PROC_NAME        VARCHAR2(100);
    VN_LOGID            INT; --LOG 表记录ID
    VN_ROWCOUNT         INT; --记录数
    VN_STEP             INT; --动作步数
    VN_PROC_NO          NUMBER(10);
    VS_USER             VARCHAR2(30);
    VN_TJRQ             NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF             NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VS_TABNAME          VARCHAR2(100) := 'DSC_STAT.T_STAT_TD_CLXZ_Y';
    VN_FIRSTDAY_OF_YEAR NUMBER(8); --本年第一天

BEGIN
    --变量初始化
    O_N_CODE            := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE            := '运行正常';
    VS_USER             := 'DSC_STAT';
    VS_PROC_NAME        := $$PLSQL_UNIT;
    VN_FIRSTDAY_OF_YEAR := SUBSTR(VN_TJRQ, 1, 4) * 10000 + 101;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_TD_CLXZ_Y WHERE YF = VN_TJYF;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算全部客户',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_TD_CLXZ_Y
        (YF,
         U_ID,
         YS_ID,
         YYB,
         KHS_CL,
         JYL_CL,
         YJ_CL,
         JYJ_CL,
         KHZC_CL,
         ZRZC_CL,
         ZCZC_CL,
         ZRSZ_CL,
         ZCSZ_CL,
         KHS_ZL,
         JYL_ZL,
         YJ_ZL,
         JYJ_ZL,
         KHZC_ZL,
         ZRZC_ZL,
         ZCZC_ZL,
         ZRSZ_ZL,
         ZCSZ_ZL)
        SELECT VN_TJYF,
               CON_ORG_LVL || '-' || GX.TD_ID U_ID,
               GX.TD_ID YS_ID,
               GX.TD_YYB AS YYB,
               COUNT(CASE
                         WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                          A.KHH
                         ELSE
                          NULL
                     END) KHS_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                            NVL(JY.JYL, 0) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) JYL_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                            NVL(JY.YJSR, 0) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) YJ_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                            NVL(JY.JYJ, 0) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) JYJ_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                            A.YMZZC * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) KHZC_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                            (A.CRJE + A.ZRZQSZ) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) ZRZC_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                            (A.QCJE + A.ZCZQSZ) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) ZCZC_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                            A.ZRZQSZ * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) ZRSZ_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR THEN
                            A.ZCZQSZ * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) ZCSZ_CL,
               COUNT(CASE
                         WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                          A.KHH
                         ELSE
                          NULL
                     END) KHS_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                            NVL(JY.JYL, 0) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) JYL_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                            NVL(JY.YJSR, 0) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) YJ_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                            NVL(JY.JYJ, 0) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) JYJ_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                            A.YMZZC * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) KHZC_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                            (A.CRJE + A.ZRZQSZ) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) ZRZC_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                            (A.QCJE + A.ZCZQSZ) * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) ZCZC_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                            A.ZRZQSZ * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) ZRSZ_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR THEN
                            A.ZCZQSZ * GX.SYQZ
                           ELSE
                            0
                       END),
                   0) ZCSZ_ZL
          FROM DSC_STAT.T_STAT_KHZC_Y A
          JOIN DSC_BAS.T_KHXX_JJYW KH ON KH.KHH = A.KHH
          JOIN (SELECT B.TD_ID,
                       A.KHH,
                       NVL(TD.YYB, '-1') AS TD_YYB,
                       LEAST(SUM(A.SYQZ), 1) SYQZ
                  FROM DSC_STAT.VW_KHGX_TJRQ A
                  JOIN DSC_BAS.T_TDCY B ON B.RYXX = A.RYXX
                                       AND A.JZRQ > VN_TJRQ
                  JOIN DSC_BAS.T_TDBM TD ON B.TD_ID = TD.ID
                 WHERE B.SXRQ <= VN_TJRQ
                   AND NVL(B.JZRQ, 30000101) > VN_TJRQ
                   AND A.GXLX = CON_GXLX_FW --只要服务关系的
                 GROUP BY B.TD_ID, A.KHH, NVL(TD.YYB, '-1')) GX ON GX.KHH = A.KHH
          LEFT JOIN DSC_STAT.T_STAT_KHJYSR_Y JY ON JY.KHH = A.KHH
                                               AND JY.YF = A.YF
         WHERE A.YF = VN_TJYF
         GROUP BY GX.TD_YYB, GX.TD_ID;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_TD_CLXZ_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_TD_JYSR_R(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN NUMBER,
                                                      I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
      --
      -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_TD_JYSR_R
      功能简述：   在团队这个级别计算交易收入的信息（日）
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：

           组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY

      数据源：

      修改记录;
      -----------------------------------------------------------------------------------------------------------------------
      操作人            操作时间                      操作
      黄玉钰            2013/05/21                   创建
      林伟              2013/08/29                   修改：增加YYB字段
      黄玉钰            2013/09/22                   修改：有关系的数据乘以GX.SYQZ
      吴邦杰            2015/03/04                   修改：调整关联对象，团队有效客户关系和团队唯一客户关系直接从TMP_T_TD_KHGX、TMP_T_TD_KHGX_UNIQUE表取
      陈德铸            2015/06/07                   修改：YYB字段取自DSC_BAS.T_TDBM中的YYB字段

    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '05';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_TD_JYSR_R';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN

        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_TD_JYSR_R WHERE RQ = VN_TJRQ;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --2.0 统计分组关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_TD_JYSR_R
        (RQ,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         ZSR,
         YJSR,
         YJSR_HAZB,
         YJSR_SAZB,
         YJSR_ZXB,
         YJSR_CYB,
         YJSR_HB,
         YJSR_SB,
         YJSR_SB_A,
         YJSR_SB_B,
         YJSR_FBSJJ,
         YJSR_ETF,
         YJSR_LOF,
         YJSR_SZJJT,
         YJSR_DXJJ,
         YJSR_QZ,
         YJSR_GZ,
         YJSR_GSQYZ,
         YJSR_KZZ,
         YJSR_HG,
         YJSR_SG,
         YJSR_JRCP,
         YJSR_QT,
         JYJ,
         JYJ_HAZB,
         JYJ_SAZB,
         JYJ_ZXB,
         JYJ_CYB,
         JYJ_HB,
         JYJ_SB,
         JYJ_SB_A,
         JYJ_SB_B,
         JYJ_FBSJJ,
         JYJ_ETF,
         JYJ_LOF,
         JYJ_SZJJT,
         JYJ_DXJJ,
         JYJ_QZ,
         JYJ_GZ,
         JYJ_GSQYZ,
         JYJ_KZZ,
         JYJ_HG,
         JYJ_SG,
         JYJ_JRCP,
         JYJ_QT,
         JYL,
         JYL_HAZB,
         JYL_SAZB,
         JYL_ZXB,
         JYL_CYB,
         JYL_HB,
         JYL_SB,
         JYL_SB_A,
         JYL_SB_B,
         JYL_FBSJJ,
         JYL_ETF,
         JYL_LOF,
         JYL_SZJJT,
         JYL_DXJJ,
         JYL_DXJJ_SG,
         JYL_DXJJ_RG,
         JYL_DXJJ_SH,
         JYL_DXJJ_DSDT,
         JYL_QZ,
         JYL_GZ,
         JYL_GSQYZ,
         JYL_KZZ,
         JYL_HG,
         JYL_SG,
         JYL_JRCP,
         JYL_QT,
         JYL_ST,
         JYL_XC,
         JYL_CK,
         JYL_RJ,
         JYL_GT,
         JYL_SJ,
         JYL_DH,
         JYL_HLW,
         JYL_YC,
         JYFY,
         JYBS,
         FWYJ,
         HLCS_HKD,
         HLCS_USD)
        SELECT VN_TJRQ,
               CON_ORG_LVL || '-' || GX.TD_ID U_ID,
               GX.TD_ID YS_ID,
               GX.TD_YYB AS YYB,
               GX.GXLX AS GXLX,
               NVL(SUM(A.ZSR * GX.SYQZ), 0) ZSR,
               NVL(SUM(A.YJSR * GX.SYQZ), 0) YJSR,
               NVL(SUM(A.YJSR_HAZB * GX.SYQZ), 0) YJSR_HAZB,
               NVL(SUM(A.YJSR_SAZB * GX.SYQZ), 0) YJSR_SAZB,
               NVL(SUM(A.YJSR_ZXB * GX.SYQZ), 0) YJSR_ZXB,
               NVL(SUM(A.YJSR_CYB * GX.SYQZ), 0) YJSR_CYB,
               NVL(SUM(A.YJSR_HB * GX.SYQZ), 0) YJSR_HB,
               NVL(SUM(A.YJSR_SB * GX.SYQZ), 0) YJSR_SB,
               NVL(SUM(A.YJSR_SB_A * GX.SYQZ), 0) YJSR_SB_A,
               NVL(SUM(A.YJSR_SB_B * GX.SYQZ), 0) YJSR_SB_B,
               NVL(SUM(A.YJSR_FBSJJ * GX.SYQZ), 0) YJSR_FBSJJ,
               NVL(SUM(A.YJSR_ETF * GX.SYQZ), 0) YJSR_ETF,
               NVL(SUM(A.YJSR_LOF * GX.SYQZ), 0) YJSR_LOF,
               NVL(SUM(A.YJSR_SZJJT * GX.SYQZ), 0) YJSR_SZJJT,
               NVL(SUM(A.YJSR_DXJJ * GX.SYQZ), 0) YJSR_DXJJ,
               NVL(SUM(A.YJSR_QZ * GX.SYQZ), 0) YJSR_QZ,
               NVL(SUM(A.YJSR_GZ * GX.SYQZ), 0) YJSR_GZ,
               NVL(SUM(A.YJSR_GSQYZ * GX.SYQZ), 0) YJSR_GSQYZ,
               NVL(SUM(A.YJSR_KZZ * GX.SYQZ), 0) YJSR_KZZ,
               NVL(SUM(A.YJSR_HG * GX.SYQZ), 0) YJSR_HG,
               NVL(SUM(A.YJSR_SG * GX.SYQZ), 0) YJSR_SG,
               NVL(SUM(A.YJSR_JRCP * GX.SYQZ), 0) YJSR_JRCP,
               NVL(SUM(A.YJSR_QT * GX.SYQZ), 0) YJSR_QT,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.JYJ_HAZB * GX.SYQZ), 0) JYJ_HAZB,
               NVL(SUM(A.JYJ_SAZB * GX.SYQZ), 0) JYJ_SAZB,
               NVL(SUM(A.JYJ_ZXB * GX.SYQZ), 0) JYJ_ZXB,
               NVL(SUM(A.JYJ_CYB * GX.SYQZ), 0) JYJ_CYB,
               NVL(SUM(A.JYJ_HB * GX.SYQZ), 0) JYJ_HB,
               NVL(SUM(A.JYJ_SB * GX.SYQZ), 0) JYJ_SB,
               NVL(SUM(A.JYJ_SB_A * GX.SYQZ), 0) JYJ_SB_A,
               NVL(SUM(A.JYJ_SB_B * GX.SYQZ), 0) JYJ_SB_B,
               NVL(SUM(A.JYJ_FBSJJ * GX.SYQZ), 0) JYJ_FBSJJ,
               NVL(SUM(A.JYJ_ETF * GX.SYQZ), 0) JYJ_ETF,
               NVL(SUM(A.JYJ_LOF * GX.SYQZ), 0) JYJ_LOF,
               NVL(SUM(A.JYJ_SZJJT * GX.SYQZ), 0) JYJ_SZJJT,
               NVL(SUM(A.JYJ_DXJJ * GX.SYQZ), 0) JYJ_DXJJ,
               NVL(SUM(A.JYJ_QZ * GX.SYQZ), 0) JYJ_QZ,
               NVL(SUM(A.JYJ_GZ * GX.SYQZ), 0) JYJ_GZ,
               NVL(SUM(A.JYJ_GSQYZ * GX.SYQZ), 0) JYJ_GSQYZ,
               NVL(SUM(A.JYJ_KZZ * GX.SYQZ), 0) JYJ_KZZ,
               NVL(SUM(A.JYJ_HG * GX.SYQZ), 0) JYJ_HG,
               NVL(SUM(A.JYJ_SG * GX.SYQZ), 0) JYJ_SG,
               NVL(SUM(A.JYJ_JRCP * GX.SYQZ), 0) JYJ_JRCP,
               NVL(SUM(A.JYJ_QT * GX.SYQZ), 0) JYJ_QT,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_HAZB * GX.SYQZ), 0) JYL_HAZB,
               NVL(SUM(A.JYL_SAZB * GX.SYQZ), 0) JYL_SAZB,
               NVL(SUM(A.JYL_ZXB * GX.SYQZ), 0) JYL_ZXB,
               NVL(SUM(A.JYL_CYB * GX.SYQZ), 0) JYL_CYB,
               NVL(SUM(A.JYL_HB * GX.SYQZ), 0) JYL_HB,
               NVL(SUM(A.JYL_SB * GX.SYQZ), 0) JYL_SB,
               NVL(SUM(A.JYL_SB_A * GX.SYQZ), 0) JYL_SB_A,
               NVL(SUM(A.JYL_SB_B * GX.SYQZ), 0) JYL_SB_B,
               NVL(SUM(A.JYL_FBSJJ * GX.SYQZ), 0) JYL_FBSJJ,
               NVL(SUM(A.JYL_ETF * GX.SYQZ), 0) JYL_ETF,
               NVL(SUM(A.JYL_LOF * GX.SYQZ), 0) JYL_LOF,
               NVL(SUM(A.JYL_SZJJT * GX.SYQZ), 0) JYL_SZJJT,
               NVL(SUM(A.JYL_DXJJ * GX.SYQZ), 0) JYL_DXJJ,
               NVL(SUM(A.JYL_DXJJ_SG * GX.SYQZ), 0) JYL_DXJJ_SG,
               NVL(SUM(A.JYL_DXJJ_RG * GX.SYQZ), 0) JYL_DXJJ_RG,
               NVL(SUM(A.JYL_DXJJ_SH * GX.SYQZ), 0) JYL_DXJJ_SH,
               NVL(SUM(A.JYL_DXJJ_DSDT * GX.SYQZ), 0) JYL_DXJJ_DSDT,
               NVL(SUM(A.JYL_QZ * GX.SYQZ), 0) JYL_QZ,
               NVL(SUM(A.JYL_GZ * GX.SYQZ), 0) JYL_GZ,
               NVL(SUM(A.JYL_GSQYZ * GX.SYQZ), 0) JYL_GSQYZ,
               NVL(SUM(A.JYL_KZZ * GX.SYQZ), 0) JYL_KZZ,
               NVL(SUM(A.JYL_HG * GX.SYQZ), 0) JYL_HG,
               NVL(SUM(A.JYL_SG * GX.SYQZ), 0) JYL_SG,
               NVL(SUM(A.JYL_JRCP * GX.SYQZ), 0) JYL_JRCP,
               NVL(SUM(A.JYL_QT * GX.SYQZ), 0) JYL_QT,
               NVL(SUM(A.JYL_ST * GX.SYQZ), 0) JYL_ST,
               NVL(SUM(A.JYL_XC * GX.SYQZ), 0) JYL_XC,
               NVL(SUM(A.JYL_CK * GX.SYQZ), 0) JYL_CK,
               NVL(SUM(A.JYL_RJ * GX.SYQZ), 0) JYL_RJ,
               NVL(SUM(A.JYL_GT * GX.SYQZ), 0) JYL_GT,
               NVL(SUM(A.JYL_SJ * GX.SYQZ), 0) JYL_SJ,
               NVL(SUM(A.JYL_DH * GX.SYQZ), 0) JYL_DH,
               NVL(SUM(A.JYL_HLW * GX.SYQZ), 0) JYL_HLW,
               NVL(SUM(A.JYL_YC * GX.SYQZ), 0) JYL_YC,
               NVL(SUM(A.JYFY * GX.SYQZ), 0) JYFY,
               NVL(SUM(A.JYBS * GX.SYQZ), 0) JYBS,
               NVL(SUM(A.FWYJ * GX.SYQZ), 0) FWYJ,
               NVL(A.HLCS_HKD, 0) HLCS_HKD,
               NVL(A.HLCS_USD, 0) HLCS_USD
          FROM DSC_STAT.T_STAT_KHJYSR_R A
          JOIN DSC_STAT.TMP_T_TD_KHGX GX ON GX.KHH = A.KHH

         WHERE A.RQ = VN_TJRQ
         GROUP BY GX.TD_YYB, GX.TD_ID, GX.GXLX, A.HLCS_HKD, A.HLCS_USD;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3.0 统计唯一关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_TD_JYSR_R
        (RQ,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         ZSR,
         YJSR,
         YJSR_HAZB,
         YJSR_SAZB,
         YJSR_ZXB,
         YJSR_CYB,
         YJSR_HB,
         YJSR_SB,
         YJSR_SB_A,
         YJSR_SB_B,
         YJSR_FBSJJ,
         YJSR_ETF,
         YJSR_LOF,
         YJSR_SZJJT,
         YJSR_DXJJ,
         YJSR_QZ,
         YJSR_GZ,
         YJSR_GSQYZ,
         YJSR_KZZ,
         YJSR_HG,
         YJSR_SG,
         YJSR_JRCP,
         YJSR_QT,
         JYJ,
         JYJ_HAZB,
         JYJ_SAZB,
         JYJ_ZXB,
         JYJ_CYB,
         JYJ_HB,
         JYJ_SB,
         JYJ_SB_A,
         JYJ_SB_B,
         JYJ_FBSJJ,
         JYJ_ETF,
         JYJ_LOF,
         JYJ_SZJJT,
         JYJ_DXJJ,
         JYJ_QZ,
         JYJ_GZ,
         JYJ_GSQYZ,
         JYJ_KZZ,
         JYJ_HG,
         JYJ_SG,
         JYJ_JRCP,
         JYJ_QT,
         JYL,
         JYL_HAZB,
         JYL_SAZB,
         JYL_ZXB,
         JYL_CYB,
         JYL_HB,
         JYL_SB,
         JYL_SB_A,
         JYL_SB_B,
         JYL_FBSJJ,
         JYL_ETF,
         JYL_LOF,
         JYL_SZJJT,
         JYL_DXJJ,
         JYL_DXJJ_SG,
         JYL_DXJJ_RG,
         JYL_DXJJ_SH,
         JYL_DXJJ_DSDT,
         JYL_QZ,
         JYL_GZ,
         JYL_GSQYZ,
         JYL_KZZ,
         JYL_HG,
         JYL_SG,
         JYL_JRCP,
         JYL_QT,
         JYL_ST,
         JYL_XC,
         JYL_CK,
         JYL_RJ,
         JYL_GT,
         JYL_SJ,
         JYL_DH,
         JYL_HLW,
         JYL_YC,
         JYFY,
         JYBS,
         FWYJ,
         HLCS_HKD,
         HLCS_USD)
        SELECT VN_TJRQ,
               CON_ORG_LVL || '-' || GX.TD_ID U_ID,
               GX.TD_ID YS_ID,
               GX.TD_YYB AS YYB,
               0 AS GXLX,
               NVL(SUM(A.ZSR * GX.SYQZ), 0) ZSR,
               NVL(SUM(A.YJSR * GX.SYQZ), 0) YJSR,
               NVL(SUM(A.YJSR_HAZB * GX.SYQZ), 0) YJSR_HAZB,
               NVL(SUM(A.YJSR_SAZB * GX.SYQZ), 0) YJSR_SAZB,
               NVL(SUM(A.YJSR_ZXB * GX.SYQZ), 0) YJSR_ZXB,
               NVL(SUM(A.YJSR_CYB * GX.SYQZ), 0) YJSR_CYB,
               NVL(SUM(A.YJSR_HB * GX.SYQZ), 0) YJSR_HB,
               NVL(SUM(A.YJSR_SB * GX.SYQZ), 0) YJSR_SB,
               NVL(SUM(A.YJSR_SB_A * GX.SYQZ), 0) YJSR_SB_A,
               NVL(SUM(A.YJSR_SB_B * GX.SYQZ), 0) YJSR_SB_B,
               NVL(SUM(A.YJSR_FBSJJ * GX.SYQZ), 0) YJSR_FBSJJ,
               NVL(SUM(A.YJSR_ETF * GX.SYQZ), 0) YJSR_ETF,
               NVL(SUM(A.YJSR_LOF * GX.SYQZ), 0) YJSR_LOF,
               NVL(SUM(A.YJSR_SZJJT * GX.SYQZ), 0) YJSR_SZJJT,
               NVL(SUM(A.YJSR_DXJJ * GX.SYQZ), 0) YJSR_DXJJ,
               NVL(SUM(A.YJSR_QZ * GX.SYQZ), 0) YJSR_QZ,
               NVL(SUM(A.YJSR_GZ * GX.SYQZ), 0) YJSR_GZ,
               NVL(SUM(A.YJSR_GSQYZ * GX.SYQZ), 0) YJSR_GSQYZ,
               NVL(SUM(A.YJSR_KZZ * GX.SYQZ), 0) YJSR_KZZ,
               NVL(SUM(A.YJSR_HG * GX.SYQZ), 0) YJSR_HG,
               NVL(SUM(A.YJSR_SG * GX.SYQZ), 0) YJSR_SG,
               NVL(SUM(A.YJSR_JRCP * GX.SYQZ), 0) YJSR_JRCP,
               NVL(SUM(A.YJSR_QT * GX.SYQZ), 0) YJSR_QT,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.JYJ_HAZB * GX.SYQZ), 0) JYJ_HAZB,
               NVL(SUM(A.JYJ_SAZB * GX.SYQZ), 0) JYJ_SAZB,
               NVL(SUM(A.JYJ_ZXB * GX.SYQZ), 0) JYJ_ZXB,
               NVL(SUM(A.JYJ_CYB * GX.SYQZ), 0) JYJ_CYB,
               NVL(SUM(A.JYJ_HB * GX.SYQZ), 0) JYJ_HB,
               NVL(SUM(A.JYJ_SB * GX.SYQZ), 0) JYJ_SB,
               NVL(SUM(A.JYJ_SB_A * GX.SYQZ), 0) JYJ_SB_A,
               NVL(SUM(A.JYJ_SB_B * GX.SYQZ), 0) JYJ_SB_B,
               NVL(SUM(A.JYJ_FBSJJ * GX.SYQZ), 0) JYJ_FBSJJ,
               NVL(SUM(A.JYJ_ETF * GX.SYQZ), 0) JYJ_ETF,
               NVL(SUM(A.JYJ_LOF * GX.SYQZ), 0) JYJ_LOF,
               NVL(SUM(A.JYJ_SZJJT * GX.SYQZ), 0) JYJ_SZJJT,
               NVL(SUM(A.JYJ_DXJJ * GX.SYQZ), 0) JYJ_DXJJ,
               NVL(SUM(A.JYJ_QZ * GX.SYQZ), 0) JYJ_QZ,
               NVL(SUM(A.JYJ_GZ * GX.SYQZ), 0) JYJ_GZ,
               NVL(SUM(A.JYJ_GSQYZ * GX.SYQZ), 0) JYJ_GSQYZ,
               NVL(SUM(A.JYJ_KZZ * GX.SYQZ), 0) JYJ_KZZ,
               NVL(SUM(A.JYJ_HG * GX.SYQZ), 0) JYJ_HG,
               NVL(SUM(A.JYJ_SG * GX.SYQZ), 0) JYJ_SG,
               NVL(SUM(A.JYJ_JRCP * GX.SYQZ), 0) JYJ_JRCP,
               NVL(SUM(A.JYJ_QT * GX.SYQZ), 0) JYJ_QT,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_HAZB * GX.SYQZ), 0) JYL_HAZB,
               NVL(SUM(A.JYL_SAZB * GX.SYQZ), 0) JYL_SAZB,
               NVL(SUM(A.JYL_ZXB * GX.SYQZ), 0) JYL_ZXB,
               NVL(SUM(A.JYL_CYB * GX.SYQZ), 0) JYL_CYB,
               NVL(SUM(A.JYL_HB * GX.SYQZ), 0) JYL_HB,
               NVL(SUM(A.JYL_SB * GX.SYQZ), 0) JYL_SB,
               NVL(SUM(A.JYL_SB_A * GX.SYQZ), 0) JYL_SB_A,
               NVL(SUM(A.JYL_SB_B * GX.SYQZ), 0) JYL_SB_B,
               NVL(SUM(A.JYL_FBSJJ * GX.SYQZ), 0) JYL_FBSJJ,
               NVL(SUM(A.JYL_ETF * GX.SYQZ), 0) JYL_ETF,
               NVL(SUM(A.JYL_LOF * GX.SYQZ), 0) JYL_LOF,
               NVL(SUM(A.JYL_SZJJT * GX.SYQZ), 0) JYL_SZJJT,
               NVL(SUM(A.JYL_DXJJ * GX.SYQZ), 0) JYL_DXJJ,
               NVL(SUM(A.JYL_DXJJ_SG * GX.SYQZ), 0) JYL_DXJJ_SG,
               NVL(SUM(A.JYL_DXJJ_RG * GX.SYQZ), 0) JYL_DXJJ_RG,
               NVL(SUM(A.JYL_DXJJ_SH * GX.SYQZ), 0) JYL_DXJJ_SH,
               NVL(SUM(A.JYL_DXJJ_DSDT * GX.SYQZ), 0) JYL_DXJJ_DSDT,
               NVL(SUM(A.JYL_QZ * GX.SYQZ), 0) JYL_QZ,
               NVL(SUM(A.JYL_GZ * GX.SYQZ), 0) JYL_GZ,
               NVL(SUM(A.JYL_GSQYZ * GX.SYQZ), 0) JYL_GSQYZ,
               NVL(SUM(A.JYL_KZZ * GX.SYQZ), 0) JYL_KZZ,
               NVL(SUM(A.JYL_HG * GX.SYQZ), 0) JYL_HG,
               NVL(SUM(A.JYL_SG * GX.SYQZ), 0) JYL_SG,
               NVL(SUM(A.JYL_JRCP * GX.SYQZ), 0) JYL_JRCP,
               NVL(SUM(A.JYL_QT * GX.SYQZ), 0) JYL_QT,
               NVL(SUM(A.JYL_ST * GX.SYQZ), 0) JYL_ST,
               NVL(SUM(A.JYL_XC * GX.SYQZ), 0) JYL_XC,
               NVL(SUM(A.JYL_CK * GX.SYQZ), 0) JYL_CK,
               NVL(SUM(A.JYL_RJ * GX.SYQZ), 0) JYL_RJ,
               NVL(SUM(A.JYL_GT * GX.SYQZ), 0) JYL_GT,
               NVL(SUM(A.JYL_SJ * GX.SYQZ), 0) JYL_SJ,
               NVL(SUM(A.JYL_DH * GX.SYQZ), 0) JYL_DH,
               NVL(SUM(A.JYL_HLW * GX.SYQZ), 0) JYL_HLW,
               NVL(SUM(A.JYL_YC * GX.SYQZ), 0) JYL_YC,
               NVL(SUM(A.JYFY * GX.SYQZ), 0) JYFY,
               NVL(SUM(A.JYBS * GX.SYQZ), 0) JYBS,
               NVL(SUM(A.FWYJ * GX.SYQZ), 0) FWYJ,
               NVL(A.HLCS_HKD, 0) HLCS_HKD,
               NVL(A.HLCS_USD, 0) HLCS_USD
          FROM DSC_STAT.T_STAT_KHJYSR_R A
          JOIN DSC_STAT.TMP_T_TD_KHGX_UNIQUE GX ON GX.KHH = A.KHH
         WHERE A.RQ = VN_TJRQ
         GROUP BY GX.TD_YYB, GX.TD_ID, A.HLCS_HKD, A.HLCS_USD;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_TD_JYSR_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_TD_JYSR_Y(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN NUMBER,
                                                      I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
      --
      -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_TD_JYSR_Y
      功能简述：   在团队这个级别计算交易收入的信息(月份)
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：

           组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY

      数据源：

      修改记录;
      -----------------------------------------------------------------------------------------------------------------------
      操作人            操作时间                      操作
      黄玉钰            2013/05/21                   创建
      林伟              2013/08/29                   修改：增加YYB字段
      黄玉钰            2013/09/11                   修改：修改删除月分区
      黄玉钰            2013/09/22                   修改：有关系的数据乘以GX.SYQZ
      吴邦杰            2015/03/04                   修改：调整关联对象，团队有效客户关系和团队唯一客户关系直接从TMP_T_TD_KHGX、TMP_T_TD_KHGX_UNIQUE表取
      陈德铸            2015/06/07                   修改：YYB字段取自DSC_BAS.T_TDBM中的YYB字段


    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '05';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6);
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_TD_JYSR_Y';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME ||
                                                        ']目标分区：=PY_' || VN_TJYF || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        --分区删除
        EXECUTE IMMEDIATE 'ALTER TABLE ' || VS_TABNAME || ' TRUNCATE PARTITION PY_' ||
                          VN_TJYF || '  UPDATE GLOBAL INDEXES';

        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME ||
                                                        ']目标分区：=PY_' || VN_TJYF || '的数据！',
                                  I_S_CHANGEDESC     => '[' || VS_TABNAME || ']表' ||
                                                        VN_TJYF || '分区已删除！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --2.0 统计分组关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_TD_JYSR_Y
        (YF,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         ZSR,
         YJSR,
         YJSR_HAZB,
         YJSR_SAZB,
         YJSR_ZXB,
         YJSR_CYB,
         YJSR_HB,
         YJSR_SB,
         YJSR_SB_A,
         YJSR_SB_B,
         YJSR_FBSJJ,
         YJSR_ETF,
         YJSR_LOF,
         YJSR_SZJJT,
         YJSR_DXJJ,
         YJSR_QZ,
         YJSR_GZ,
         YJSR_GSQYZ,
         YJSR_KZZ,
         YJSR_HG,
         YJSR_SG,
         YJSR_JRCP,
         YJSR_QT,
         JYJ,
         JYJ_HAZB,
         JYJ_SAZB,
         JYJ_ZXB,
         JYJ_CYB,
         JYJ_HB,
         JYJ_SB,
         JYJ_SB_A,
         JYJ_SB_B,
         JYJ_FBSJJ,
         JYJ_ETF,
         JYJ_LOF,
         JYJ_SZJJT,
         JYJ_DXJJ,
         JYJ_QZ,
         JYJ_GZ,
         JYJ_GSQYZ,
         JYJ_KZZ,
         JYJ_HG,
         JYJ_SG,
         JYJ_JRCP,
         JYJ_QT,
         JYL,
         JYL_HAZB,
         JYL_SAZB,
         JYL_ZXB,
         JYL_CYB,
         JYL_HB,
         JYL_SB,
         JYL_SB_A,
         JYL_SB_B,
         JYL_FBSJJ,
         JYL_ETF,
         JYL_LOF,
         JYL_SZJJT,
         JYL_DXJJ,
         JYL_DXJJ_SG,
         JYL_DXJJ_RG,
         JYL_DXJJ_DSDT,
         JYL_DXJJ_SH,
         JYL_QZ,
         JYL_GZ,
         JYL_GSQYZ,
         JYL_KZZ,
         JYL_HG,
         JYL_SG,
         JYL_JRCP,
         JYL_QT,
         JYL_ST,
         JYL_XC,
         JYL_CK,
         JYL_RJ,
         JYL_GT,
         JYL_SJ,
         JYL_DH,
         JYL_HLW,
         JYL_YC,
         JYFY,
         JYBS,
         FWYJ,
         HLCS_HKD,
         HLCS_USD)
        SELECT VN_TJYF,
               CON_ORG_LVL || '-' || GX.TD_ID U_ID,
               GX.TD_ID YS_ID,
               GX.TD_YYB AS YYB,
               GX.GXLX AS GXLX,
               NVL(SUM(A.ZSR * GX.SYQZ), 0) ZSR,
               NVL(SUM(A.YJSR * GX.SYQZ), 0) YJSR,
               NVL(SUM(A.YJSR_HAZB * GX.SYQZ), 0) YJSR_HAZB,
               NVL(SUM(A.YJSR_SAZB * GX.SYQZ), 0) YJSR_SAZB,
               NVL(SUM(A.YJSR_ZXB * GX.SYQZ), 0) YJSR_ZXB,
               NVL(SUM(A.YJSR_CYB * GX.SYQZ), 0) YJSR_CYB,
               NVL(SUM(A.YJSR_HB * GX.SYQZ), 0) YJSR_HB,
               NVL(SUM(A.YJSR_SB * GX.SYQZ), 0) YJSR_SB,
               NVL(SUM(A.YJSR_SB_A * GX.SYQZ), 0) YJSR_SB_A,
               NVL(SUM(A.YJSR_SB_B * GX.SYQZ), 0) YJSR_SB_B,
               NVL(SUM(A.YJSR_FBSJJ * GX.SYQZ), 0) YJSR_FBSJJ,
               NVL(SUM(A.YJSR_ETF * GX.SYQZ), 0) YJSR_ETF,
               NVL(SUM(A.YJSR_LOF * GX.SYQZ), 0) YJSR_LOF,
               NVL(SUM(A.YJSR_SZJJT * GX.SYQZ), 0) YJSR_SZJJT,
               NVL(SUM(A.YJSR_DXJJ * GX.SYQZ), 0) YJSR_DXJJ,
               NVL(SUM(A.YJSR_QZ * GX.SYQZ), 0) YJSR_QZ,
               NVL(SUM(A.YJSR_GZ * GX.SYQZ), 0) YJSR_GZ,
               NVL(SUM(A.YJSR_GSQYZ * GX.SYQZ), 0) YJSR_GSQYZ,
               NVL(SUM(A.YJSR_KZZ * GX.SYQZ), 0) YJSR_KZZ,
               NVL(SUM(A.YJSR_HG * GX.SYQZ), 0) YJSR_HG,
               NVL(SUM(A.YJSR_SG * GX.SYQZ), 0) YJSR_SG,
               NVL(SUM(A.YJSR_JRCP * GX.SYQZ), 0) YJSR_JRCP,
               NVL(SUM(A.YJSR_QT * GX.SYQZ), 0) YJSR_QT,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.JYJ_HAZB * GX.SYQZ), 0) JYJ_HAZB,
               NVL(SUM(A.JYJ_SAZB * GX.SYQZ), 0) JYJ_SAZB,
               NVL(SUM(A.JYJ_ZXB * GX.SYQZ), 0) JYJ_ZXB,
               NVL(SUM(A.JYJ_CYB * GX.SYQZ), 0) JYJ_CYB,
               NVL(SUM(A.JYJ_HB * GX.SYQZ), 0) JYJ_HB,
               NVL(SUM(A.JYJ_SB * GX.SYQZ), 0) JYJ_SB,
               NVL(SUM(A.JYJ_SB_A * GX.SYQZ), 0) JYJ_SB_A,
               NVL(SUM(A.JYJ_SB_B * GX.SYQZ), 0) JYJ_SB_B,
               NVL(SUM(A.JYJ_FBSJJ * GX.SYQZ), 0) JYJ_FBSJJ,
               NVL(SUM(A.JYJ_ETF * GX.SYQZ), 0) JYJ_ETF,
               NVL(SUM(A.JYJ_LOF * GX.SYQZ), 0) JYJ_LOF,
               NVL(SUM(A.JYJ_SZJJT * GX.SYQZ), 0) JYJ_SZJJT,
               NVL(SUM(A.JYJ_DXJJ * GX.SYQZ), 0) JYJ_DXJJ,
               NVL(SUM(A.JYJ_QZ * GX.SYQZ), 0) JYJ_QZ,
               NVL(SUM(A.JYJ_GZ * GX.SYQZ), 0) JYJ_GZ,
               NVL(SUM(A.JYJ_GSQYZ * GX.SYQZ), 0) JYJ_GSQYZ,
               NVL(SUM(A.JYJ_KZZ * GX.SYQZ), 0) JYJ_KZZ,
               NVL(SUM(A.JYJ_HG * GX.SYQZ), 0) JYJ_HG,
               NVL(SUM(A.JYJ_SG * GX.SYQZ), 0) JYJ_SG,
               NVL(SUM(A.JYJ_JRCP * GX.SYQZ), 0) JYJ_JRCP,
               NVL(SUM(A.JYJ_QT * GX.SYQZ), 0) JYJ_QT,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_HAZB * GX.SYQZ), 0) JYL_HAZB,
               NVL(SUM(A.JYL_SAZB * GX.SYQZ), 0) JYL_SAZB,
               NVL(SUM(A.JYL_ZXB * GX.SYQZ), 0) JYL_ZXB,
               NVL(SUM(A.JYL_CYB * GX.SYQZ), 0) JYL_CYB,
               NVL(SUM(A.JYL_HB * GX.SYQZ), 0) JYL_HB,
               NVL(SUM(A.JYL_SB * GX.SYQZ), 0) JYL_SB,
               NVL(SUM(A.JYL_SB_A * GX.SYQZ), 0) JYL_SB_A,
               NVL(SUM(A.JYL_SB_B * GX.SYQZ), 0) JYL_SB_B,
               NVL(SUM(A.JYL_FBSJJ * GX.SYQZ), 0) JYL_FBSJJ,
               NVL(SUM(A.JYL_ETF * GX.SYQZ), 0) JYL_ETF,
               NVL(SUM(A.JYL_LOF * GX.SYQZ), 0) JYL_LOF,
               NVL(SUM(A.JYL_SZJJT * GX.SYQZ), 0) JYL_SZJJT,
               NVL(SUM(A.JYL_DXJJ * GX.SYQZ), 0) JYL_DXJJ,
               NVL(SUM(A.JYL_DXJJ_SG * GX.SYQZ), 0) JYL_DXJJ_SG,
               NVL(SUM(A.JYL_DXJJ_RG * GX.SYQZ), 0) JYL_DXJJ_RG,
               NVL(SUM(A.JYL_DXJJ_SH * GX.SYQZ), 0) JYL_DXJJ_SH,
               NVL(SUM(A.JYL_DXJJ_DSDT * GX.SYQZ), 0) JYL_DXJJ_DSDT,
               NVL(SUM(A.JYL_QZ * GX.SYQZ), 0) JYL_QZ,
               NVL(SUM(A.JYL_GZ * GX.SYQZ), 0) JYL_GZ,
               NVL(SUM(A.JYL_GSQYZ * GX.SYQZ), 0) JYL_GSQYZ,
               NVL(SUM(A.JYL_KZZ * GX.SYQZ), 0) JYL_KZZ,
               NVL(SUM(A.JYL_HG * GX.SYQZ), 0) JYL_HG,
               NVL(SUM(A.JYL_SG * GX.SYQZ), 0) JYL_SG,
               NVL(SUM(A.JYL_JRCP * GX.SYQZ), 0) JYL_JRCP,
               NVL(SUM(A.JYL_QT * GX.SYQZ), 0) JYL_QT,
               NVL(SUM(A.JYL_ST * GX.SYQZ), 0) JYL_ST,
               NVL(SUM(A.JYL_XC * GX.SYQZ), 0) JYL_XC,
               NVL(SUM(A.JYL_CK * GX.SYQZ), 0) JYL_CK,
               NVL(SUM(A.JYL_RJ * GX.SYQZ), 0) JYL_RJ,
               NVL(SUM(A.JYL_GT * GX.SYQZ), 0) JYL_GT,
               NVL(SUM(A.JYL_SJ * GX.SYQZ), 0) JYL_SJ,
               NVL(SUM(A.JYL_DH * GX.SYQZ), 0) JYL_DH,
               NVL(SUM(A.JYL_HLW * GX.SYQZ), 0) JYL_HLW,
               NVL(SUM(A.JYL_YC * GX.SYQZ), 0) JYL_YC,
               NVL(SUM(A.JYFY * GX.SYQZ), 0) JYFY,
               NVL(SUM(A.JYBS * GX.SYQZ), 0) JYBS,
               NVL(SUM(A.FWYJ * GX.SYQZ), 0) FWYJ,
               NVL(A.HLCS_HKD, 0) HLCS_HKD,
               NVL(A.HLCS_USD, 0) HLCS_USD
          FROM DSC_STAT.T_STAT_KHJYSR_Y A
          JOIN DSC_STAT.TMP_T_TD_KHGX GX ON GX.KHH = A.KHH
         WHERE A.YF = VN_TJYF
         GROUP BY GX.TD_ID, GX.TD_YYB, GX.GXLX, A.HLCS_HKD, A.HLCS_USD;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3.0 统计唯一关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_TD_JYSR_Y
        (YF,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         ZSR,
         YJSR,
         YJSR_HAZB,
         YJSR_SAZB,
         YJSR_ZXB,
         YJSR_CYB,
         YJSR_HB,
         YJSR_SB,
         YJSR_SB_A,
         YJSR_SB_B,
         YJSR_FBSJJ,
         YJSR_ETF,
         YJSR_LOF,
         YJSR_SZJJT,
         YJSR_DXJJ,
         YJSR_QZ,
         YJSR_GZ,
         YJSR_GSQYZ,
         YJSR_KZZ,
         YJSR_HG,
         YJSR_SG,
         YJSR_JRCP,
         YJSR_QT,
         JYJ,
         JYJ_HAZB,
         JYJ_SAZB,
         JYJ_ZXB,
         JYJ_CYB,
         JYJ_HB,
         JYJ_SB,
         JYJ_SB_A,
         JYJ_SB_B,
         JYJ_FBSJJ,
         JYJ_ETF,
         JYJ_LOF,
         JYJ_SZJJT,
         JYJ_DXJJ,
         JYJ_QZ,
         JYJ_GZ,
         JYJ_GSQYZ,
         JYJ_KZZ,
         JYJ_HG,
         JYJ_SG,
         JYJ_JRCP,
         JYJ_QT,
         JYL,
         JYL_HAZB,
         JYL_SAZB,
         JYL_ZXB,
         JYL_CYB,
         JYL_HB,
         JYL_SB,
         JYL_SB_A,
         JYL_SB_B,
         JYL_FBSJJ,
         JYL_ETF,
         JYL_LOF,
         JYL_SZJJT,
         JYL_DXJJ,
         JYL_DXJJ_SG,
         JYL_DXJJ_RG,
         JYL_DXJJ_DSDT,
         JYL_DXJJ_SH,
         JYL_QZ,
         JYL_GZ,
         JYL_GSQYZ,
         JYL_KZZ,
         JYL_HG,
         JYL_SG,
         JYL_JRCP,
         JYL_QT,
         JYL_ST,
         JYL_XC,
         JYL_CK,
         JYL_RJ,
         JYL_GT,
         JYL_SJ,
         JYL_DH,
         JYL_HLW,
         JYL_YC,
         JYFY,
         JYBS,
         FWYJ,
         HLCS_HKD,
         HLCS_USD)
        SELECT VN_TJYF,
               CON_ORG_LVL || '-' || GX.TD_ID U_ID,
               GX.TD_ID YS_ID,
               GX.TD_YYB AS YYB,
               0 AS GXLX,
               NVL(SUM(A.ZSR * GX.SYQZ), 0) ZSR,
               NVL(SUM(A.YJSR * GX.SYQZ), 0) YJSR,
               NVL(SUM(A.YJSR_HAZB * GX.SYQZ), 0) YJSR_HAZB,
               NVL(SUM(A.YJSR_SAZB * GX.SYQZ), 0) YJSR_SAZB,
               NVL(SUM(A.YJSR_ZXB * GX.SYQZ), 0) YJSR_ZXB,
               NVL(SUM(A.YJSR_CYB * GX.SYQZ), 0) YJSR_CYB,
               NVL(SUM(A.YJSR_HB * GX.SYQZ), 0) YJSR_HB,
               NVL(SUM(A.YJSR_SB * GX.SYQZ), 0) YJSR_SB,
               NVL(SUM(A.YJSR_SB_A * GX.SYQZ), 0) YJSR_SB_A,
               NVL(SUM(A.YJSR_SB_B * GX.SYQZ), 0) YJSR_SB_B,
               NVL(SUM(A.YJSR_FBSJJ * GX.SYQZ), 0) YJSR_FBSJJ,
               NVL(SUM(A.YJSR_ETF * GX.SYQZ), 0) YJSR_ETF,
               NVL(SUM(A.YJSR_LOF * GX.SYQZ), 0) YJSR_LOF,
               NVL(SUM(A.YJSR_SZJJT * GX.SYQZ), 0) YJSR_SZJJT,
               NVL(SUM(A.YJSR_DXJJ * GX.SYQZ), 0) YJSR_DXJJ,
               NVL(SUM(A.YJSR_QZ * GX.SYQZ), 0) YJSR_QZ,
               NVL(SUM(A.YJSR_GZ * GX.SYQZ), 0) YJSR_GZ,
               NVL(SUM(A.YJSR_GSQYZ * GX.SYQZ), 0) YJSR_GSQYZ,
               NVL(SUM(A.YJSR_KZZ * GX.SYQZ), 0) YJSR_KZZ,
               NVL(SUM(A.YJSR_HG * GX.SYQZ), 0) YJSR_HG,
               NVL(SUM(A.YJSR_SG * GX.SYQZ), 0) YJSR_SG,
               NVL(SUM(A.YJSR_JRCP * GX.SYQZ), 0) YJSR_JRCP,
               NVL(SUM(A.YJSR_QT * GX.SYQZ), 0) YJSR_QT,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.JYJ_HAZB * GX.SYQZ), 0) JYJ_HAZB,
               NVL(SUM(A.JYJ_SAZB * GX.SYQZ), 0) JYJ_SAZB,
               NVL(SUM(A.JYJ_ZXB * GX.SYQZ), 0) JYJ_ZXB,
               NVL(SUM(A.JYJ_CYB * GX.SYQZ), 0) JYJ_CYB,
               NVL(SUM(A.JYJ_HB * GX.SYQZ), 0) JYJ_HB,
               NVL(SUM(A.JYJ_SB * GX.SYQZ), 0) JYJ_SB,
               NVL(SUM(A.JYJ_SB_A * GX.SYQZ), 0) JYJ_SB_A,
               NVL(SUM(A.JYJ_SB_B * GX.SYQZ), 0) JYJ_SB_B,
               NVL(SUM(A.JYJ_FBSJJ * GX.SYQZ), 0) JYJ_FBSJJ,
               NVL(SUM(A.JYJ_ETF * GX.SYQZ), 0) JYJ_ETF,
               NVL(SUM(A.JYJ_LOF * GX.SYQZ), 0) JYJ_LOF,
               NVL(SUM(A.JYJ_SZJJT * GX.SYQZ), 0) JYJ_SZJJT,
               NVL(SUM(A.JYJ_DXJJ * GX.SYQZ), 0) JYJ_DXJJ,
               NVL(SUM(A.JYJ_QZ * GX.SYQZ), 0) JYJ_QZ,
               NVL(SUM(A.JYJ_GZ * GX.SYQZ), 0) JYJ_GZ,
               NVL(SUM(A.JYJ_GSQYZ * GX.SYQZ), 0) JYJ_GSQYZ,
               NVL(SUM(A.JYJ_KZZ * GX.SYQZ), 0) JYJ_KZZ,
               NVL(SUM(A.JYJ_HG * GX.SYQZ), 0) JYJ_HG,
               NVL(SUM(A.JYJ_SG * GX.SYQZ), 0) JYJ_SG,
               NVL(SUM(A.JYJ_JRCP * GX.SYQZ), 0) JYJ_JRCP,
               NVL(SUM(A.JYJ_QT * GX.SYQZ), 0) JYJ_QT,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_HAZB * GX.SYQZ), 0) JYL_HAZB,
               NVL(SUM(A.JYL_SAZB * GX.SYQZ), 0) JYL_SAZB,
               NVL(SUM(A.JYL_ZXB * GX.SYQZ), 0) JYL_ZXB,
               NVL(SUM(A.JYL_CYB * GX.SYQZ), 0) JYL_CYB,
               NVL(SUM(A.JYL_HB * GX.SYQZ), 0) JYL_HB,
               NVL(SUM(A.JYL_SB * GX.SYQZ), 0) JYL_SB,
               NVL(SUM(A.JYL_SB_A * GX.SYQZ), 0) JYL_SB_A,
               NVL(SUM(A.JYL_SB_B * GX.SYQZ), 0) JYL_SB_B,
               NVL(SUM(A.JYL_FBSJJ * GX.SYQZ), 0) JYL_FBSJJ,
               NVL(SUM(A.JYL_ETF * GX.SYQZ), 0) JYL_ETF,
               NVL(SUM(A.JYL_LOF * GX.SYQZ), 0) JYL_LOF,
               NVL(SUM(A.JYL_SZJJT * GX.SYQZ), 0) JYL_SZJJT,
               NVL(SUM(A.JYL_DXJJ * GX.SYQZ), 0) JYL_DXJJ,
               NVL(SUM(A.JYL_DXJJ_SG * GX.SYQZ), 0) JYL_DXJJ_SG,
               NVL(SUM(A.JYL_DXJJ_RG * GX.SYQZ), 0) JYL_DXJJ_RG,
               NVL(SUM(A.JYL_DXJJ_SH * GX.SYQZ), 0) JYL_DXJJ_SH,
               NVL(SUM(A.JYL_DXJJ_DSDT * GX.SYQZ), 0) JYL_DXJJ_DSDT,
               NVL(SUM(A.JYL_QZ * GX.SYQZ), 0) JYL_QZ,
               NVL(SUM(A.JYL_GZ * GX.SYQZ), 0) JYL_GZ,
               NVL(SUM(A.JYL_GSQYZ * GX.SYQZ), 0) JYL_GSQYZ,
               NVL(SUM(A.JYL_KZZ * GX.SYQZ), 0) JYL_KZZ,
               NVL(SUM(A.JYL_HG * GX.SYQZ), 0) JYL_HG,
               NVL(SUM(A.JYL_SG * GX.SYQZ), 0) JYL_SG,
               NVL(SUM(A.JYL_JRCP * GX.SYQZ), 0) JYL_JRCP,
               NVL(SUM(A.JYL_QT * GX.SYQZ), 0) JYL_QT,
               NVL(SUM(A.JYL_ST * GX.SYQZ), 0) JYL_ST,
               NVL(SUM(A.JYL_XC * GX.SYQZ), 0) JYL_XC,
               NVL(SUM(A.JYL_CK * GX.SYQZ), 0) JYL_CK,
               NVL(SUM(A.JYL_RJ * GX.SYQZ), 0) JYL_RJ,
               NVL(SUM(A.JYL_GT * GX.SYQZ), 0) JYL_GT,
               NVL(SUM(A.JYL_SJ * GX.SYQZ), 0) JYL_SJ,
               NVL(SUM(A.JYL_DH * GX.SYQZ), 0) JYL_DH,
               NVL(SUM(A.JYL_HLW * GX.SYQZ), 0) JYL_HLW,
               NVL(SUM(A.JYL_YC * GX.SYQZ), 0) JYL_YC,
               NVL(SUM(A.JYFY * GX.SYQZ), 0) JYFY,
               NVL(SUM(A.JYBS * GX.SYQZ), 0) JYBS,
               NVL(SUM(A.FWYJ * GX.SYQZ), 0) FWYJ,
               NVL(A.HLCS_HKD, 0) HLCS_HKD,
               NVL(A.HLCS_USD, 0) HLCS_USD
          FROM DSC_STAT.T_STAT_KHJYSR_Y A
          JOIN DSC_STAT.TMP_T_TD_KHGX_UNIQUE GX ON GX.KHH = A.KHH
         WHERE A.YF = VN_TJYF
         GROUP BY GX.TD_ID, GX.TD_YYB, A.HLCS_HKD, A.HLCS_USD;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_TD_JYSR_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_TD_RZRQ_R(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN NUMBER,
                                                      I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
      --
      -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_TD_RZRQ_R
      功能简述：   在团队这个级别计算融资融券（日）
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：

             组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY

      数据源：

      修改记录;
      -----------------------------------------------------------------------------------------------------------------------
      操作人            操作时间                      操作
      黄玉钰            2013/05/21                   创建
      林伟              2013/08/29                   修改：增加YYB字段
      林伟              2013/09/03                   修改：增加融资金额，融券金额
      黄玉钰            2013/09/22                   修改：有关系的数据乘以GX.SYQZ
      吴邦杰            2015/03/04                   修改：调整关联对象，团队有效客户关系和团队唯一客户关系直接从TMP_T_TD_KHGX、TMP_T_TD_KHGX_UNIQUE表取
      陈德铸            2015/06/07                   修改：YYB字段取自DSC_BAS.T_TDBM中的YYB字段

    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '05';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_TD_RZRQ_R';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_TD_RZRQ_R WHERE RQ = VN_TJRQ;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --2.0 统计分组关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_TD_RZRQ_R
        (RQ,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         KHS,
         ZZC,
         ZFZ,
         ZJYE,
         ZQSZ,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         YJ,
         JYJ,
         RZFZ,
         RQFZ,
         GHBJ,
         XZFZ,
         GHLX,
         XZLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         XZRQLX,
         XZRZLX,
         RZFY,
         RQFY,
         PCCS,
         ZBCS,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ_PT,
         JYJ_XY,
         YK,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         XZRZFZ,
         XZRQFZ,
         RZJE,
         RQJE)
        SELECT VN_TJRQ,
               CON_ORG_LVL || '-' || GX.TD_ID U_ID,
               GX.TD_ID YS_ID,
               GX.TD_YYB AS YYB,
               GX.GXLX,
               COUNT(DISTINCT A.KHH) KHS,
               NVL(SUM(A.ZZC * GX.SYQZ), 0),
               NVL(SUM(A.ZFZ * GX.SYQZ), 0),
               NVL(SUM(A.ZJYE * GX.SYQZ), 0),
               NVL(SUM(A.ZQSZ * GX.SYQZ), 0),
               NVL(SUM(A.RZSXED * GX.SYQZ), 0),
               NVL(SUM(A.RQSXED * GX.SYQZ), 0),
               NVL(SUM(A.JYL_RZ * GX.SYQZ), 0),
               NVL(SUM(A.JYL_RQ * GX.SYQZ), 0),
               NVL(SUM(A.YJ * GX.SYQZ), 0),
               NVL(SUM(A.JYJ * GX.SYQZ), 0),
               NVL(SUM(A.RZFZ * GX.SYQZ), 0),
               NVL(SUM(A.RQFZ * GX.SYQZ), 0),
               NVL(SUM(A.GHBJ * GX.SYQZ), 0),
               NVL(SUM(A.XZFZ * GX.SYQZ), 0),
               NVL(SUM(A.GHLX * GX.SYQZ), 0),
               NVL(SUM(A.XZLX * GX.SYQZ), 0),
               NVL(SUM(A.YJLX * GX.SYQZ), 0),
               NVL(SUM(A.RZYJLX * GX.SYQZ), 0),
               NVL(SUM(A.RQYJLX * GX.SYQZ), 0),
               NVL(SUM(A.XZRQLX * GX.SYQZ), 0),
               NVL(SUM(A.XZRZLX * GX.SYQZ), 0),
               NVL(SUM(A.RZFY * GX.SYQZ), 0),
               NVL(SUM(A.RQFY * GX.SYQZ), 0),
               NVL(SUM(A.PCCS * GX.SYQZ), 0),
               NVL(SUM(A.ZBCS * GX.SYQZ), 0),
               NVL(SUM(A.JYL * GX.SYQZ), 0),
               NVL(SUM(A.JYL_PT * GX.SYQZ), 0),
               NVL(SUM(A.JYL_XY * GX.SYQZ), 0),
               NVL(SUM(A.YJ_PT * GX.SYQZ), 0),
               NVL(SUM(A.YJ_XY * GX.SYQZ), 0),
               NVL(SUM(A.JYJ_PT * GX.SYQZ), 0),
               NVL(SUM(A.JYJ_XY * GX.SYQZ), 0),
               NVL(SUM(A.YK * GX.SYQZ), 0),
               NVL(SUM(A.KYBZJ * GX.SYQZ), 0),
               NVL(SUM(A.ZRJE * GX.SYQZ), 0),
               NVL(SUM(A.ZCJE * GX.SYQZ), 0),
               NVL(SUM(A.ZRSZ * GX.SYQZ), 0),
               NVL(SUM(A.ZCSZ * GX.SYQZ), 0),
               NVL(SUM(A.FWYJ * GX.SYQZ), 0),
               NVL(SUM(A.XZRZFZ * GX.SYQZ), 0),
               NVL(SUM(A.XZRQFZ * GX.SYQZ), 0),
               NVL(SUM(A.RZJE * GX.SYQZ), 0),
               NVL(SUM(A.RQJE * GX.SYQZ), 0)
          FROM DSC_STAT.T_STAT_RZRQ_R A
          JOIN DSC_STAT.TMP_T_TD_KHGX GX ON GX.KHH = A.KHH
         WHERE A.RQ = VN_TJRQ
         GROUP BY GX.TD_YYB, GX.TD_ID, GX.GXLX;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3.0 统计唯一关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_TD_RZRQ_R
        (RQ,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         KHS,
         ZZC,
         ZFZ,
         ZJYE,
         ZQSZ,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         YJ,
         JYJ,
         RZFZ,
         RQFZ,
         GHBJ,
         XZFZ,
         GHLX,
         XZLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         XZRQLX,
         XZRZLX,
         RZFY,
         RQFY,
         PCCS,
         ZBCS,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ_PT,
         JYJ_XY,
         YK,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         XZRZFZ,
         XZRQFZ,
         RZJE,
         RQJE)
        SELECT VN_TJRQ,
               CON_ORG_LVL || '-' || GX.TD_ID U_ID,
               GX.TD_ID YS_ID,
               GX.TD_YYB AS YYB,
               0 AS GXLX,
               COUNT(DISTINCT A.KHH) KHS,
               NVL(SUM(A.ZZC * GX.SYQZ), 0),
               NVL(SUM(A.ZFZ * GX.SYQZ), 0),
               NVL(SUM(A.ZJYE * GX.SYQZ), 0),
               NVL(SUM(A.ZQSZ * GX.SYQZ), 0),
               NVL(SUM(A.RZSXED * GX.SYQZ), 0),
               NVL(SUM(A.RQSXED * GX.SYQZ), 0),
               NVL(SUM(A.JYL_RZ * GX.SYQZ), 0),
               NVL(SUM(A.JYL_RQ * GX.SYQZ), 0),
               NVL(SUM(A.YJ * GX.SYQZ), 0),
               NVL(SUM(A.JYJ * GX.SYQZ), 0),
               NVL(SUM(A.RZFZ * GX.SYQZ), 0),
               NVL(SUM(A.RQFZ * GX.SYQZ), 0),
               NVL(SUM(A.GHBJ * GX.SYQZ), 0),
               NVL(SUM(A.XZFZ * GX.SYQZ), 0),
               NVL(SUM(A.GHLX * GX.SYQZ), 0),
               NVL(SUM(A.XZLX * GX.SYQZ), 0),
               NVL(SUM(A.YJLX * GX.SYQZ), 0),
               NVL(SUM(A.RZYJLX * GX.SYQZ), 0),
               NVL(SUM(A.RQYJLX * GX.SYQZ), 0),
               NVL(SUM(A.XZRQLX * GX.SYQZ), 0),
               NVL(SUM(A.XZRZLX * GX.SYQZ), 0),
               NVL(SUM(A.RZFY * GX.SYQZ), 0),
               NVL(SUM(A.RQFY * GX.SYQZ), 0),
               NVL(SUM(A.PCCS * GX.SYQZ), 0),
               NVL(SUM(A.ZBCS * GX.SYQZ), 0),
               NVL(SUM(A.JYL * GX.SYQZ), 0),
               NVL(SUM(A.JYL_PT * GX.SYQZ), 0),
               NVL(SUM(A.JYL_XY * GX.SYQZ), 0),
               NVL(SUM(A.YJ_PT * GX.SYQZ), 0),
               NVL(SUM(A.YJ_XY * GX.SYQZ), 0),
               NVL(SUM(A.JYJ_PT * GX.SYQZ), 0),
               NVL(SUM(A.JYJ_XY * GX.SYQZ), 0),
               NVL(SUM(A.YK * GX.SYQZ), 0),
               NVL(SUM(A.KYBZJ * GX.SYQZ), 0),
               NVL(SUM(A.ZRJE * GX.SYQZ), 0),
               NVL(SUM(A.ZCJE * GX.SYQZ), 0),
               NVL(SUM(A.ZRSZ * GX.SYQZ), 0),
               NVL(SUM(A.ZCSZ * GX.SYQZ), 0),
               NVL(SUM(A.FWYJ * GX.SYQZ), 0),
               NVL(SUM(A.XZRZFZ * GX.SYQZ), 0),
               NVL(SUM(A.XZRQFZ * GX.SYQZ), 0),
               NVL(SUM(A.RZJE * GX.SYQZ), 0),
               NVL(SUM(A.RQJE * GX.SYQZ), 0)
          FROM DSC_STAT.T_STAT_RZRQ_R A
          JOIN DSC_STAT.TMP_T_TD_KHGX_UNIQUE GX ON GX.KHH = A.KHH
         WHERE A.RQ = VN_TJRQ
         GROUP BY GX.TD_YYB, GX.TD_ID;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_TD_RZRQ_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_TD_RZRQ_Y(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN NUMBER,
                                                      I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
      --
      -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_TD_RZRQ_Y
      功能简述：   在团队这个级别计算融资融券（月）
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：

             组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY


      数据源：

      修改记录;
      -----------------------------------------------------------------------------------------------------------------------
      操作人            操作时间                      操作
      黄玉钰            2013/05/21                   创建
      林伟              2013/08/29                   修改：增加YYB字段
      林伟              2013/09/03                   修改：增加月末融资金额，月末融券金额
      黄玉钰            2013/09/10                   修改：SUM(NVL(,0))改为NVL(SUM(),0)
      黄玉钰            2013/09/22                   修改：有关系的数据乘以GX.SYQZ
      吴邦杰            2015/03/04                   修改：调整关联对象，团队有效客户关系和团队唯一客户关系直接从TMP_T_TD_KHGX、TMP_T_TD_KHGX_UNIQUE表取
      陈德铸            2015/06/07                   修改：YYB字段取自DSC_BAS.T_TDBM中的YYB字段

    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '05';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_TD_RZRQ_Y';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_TD_RZRQ_Y WHERE YF = VN_TJYF;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --2.0 统计分组关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_TD_RZRQ_Y
        (YF,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         KHS,
         ZZC,
         ZFZ,
         ZJYE,
         ZQSZ,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         YJ,
         JYJ,
         RZFZ,
         RQFZ,
         GHBJ,
         XZFZ,
         XZRZFZ,
         XZRQFZ,
         GHLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         XZLX,
         XZRQLX,
         XZRZLX,
         RZFY,
         RQFY,
         PCCS,
         ZBCS,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ_PT,
         JYJ_XY,
         YK,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         QCZC,
         RJZC,
         RJRZRQ,
         RJRZFZ,
         RJRQFZ,
         RJZQSZ,
         YMRZJE,
         YMRQJE)
        SELECT VN_TJYF,
               CON_ORG_LVL || '-' || GX.TD_ID U_ID,
               GX.TD_ID YS_ID,
               GX.TD_YYB AS YYB,
               GX.GXLX GXLX,
               COUNT(DISTINCT A.KHH) KHS,
               NVL(SUM(A.ZZC * GX.SYQZ), 0) ZZC,
               NVL(SUM(A.ZFZ * GX.SYQZ), 0) ZFZ,
               NVL(SUM(A.ZJYE * GX.SYQZ), 0) ZJYE,
               NVL(SUM(A.ZQSZ * GX.SYQZ), 0) ZQSZ,
               NVL(SUM(A.RZSXED * GX.SYQZ), 0) RZSXED,
               NVL(SUM(A.RQSXED * GX.SYQZ), 0) RQSXED,
               NVL(SUM(A.JYL_RZ * GX.SYQZ), 0) JYL_RZ,
               NVL(SUM(A.JYL_RQ * GX.SYQZ), 0) JYL_RQ,
               NVL(SUM(A.YJ * GX.SYQZ), 0) YJ,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.RZFZ * GX.SYQZ), 0) RZFZ,
               NVL(SUM(A.RQFZ * GX.SYQZ), 0) RQFZ,
               NVL(SUM(A.GHBJ * GX.SYQZ), 0) GHBJ,
               NVL(SUM(A.XZFZ * GX.SYQZ), 0) XZFZ,
               NVL(SUM(A.XZRZFZ * GX.SYQZ), 0) XZRZFZ,
               NVL(SUM(A.XZRQFZ * GX.SYQZ), 0) XZRQFZ,
               NVL(SUM(A.GHLX * GX.SYQZ), 0) GHLX,
               NVL(SUM(A.YJLX * GX.SYQZ), 0) YJLX,
               NVL(SUM(A.RZYJLX * GX.SYQZ), 0) RZYJLX,
               NVL(SUM(A.RQYJLX * GX.SYQZ), 0) RQYJLX,
               NVL(SUM(A.XZLX * GX.SYQZ), 0) XZLX,
               NVL(SUM(A.XZRQLX * GX.SYQZ), 0) XZRQLX,
               NVL(SUM(A.XZRZLX * GX.SYQZ), 0) XZRZLX,
               NVL(SUM(A.RZFY * GX.SYQZ), 0) RZFY,
               NVL(SUM(A.RQFY * GX.SYQZ), 0) RQFY,
               NVL(SUM(A.PCCS * GX.SYQZ), 0) PCCS,
               NVL(SUM(A.ZBCS * GX.SYQZ), 0) ZBCS,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_PT * GX.SYQZ), 0) JYL_PT,
               NVL(SUM(A.JYL_XY * GX.SYQZ), 0) JYL_XY,
               NVL(SUM(A.YJ_PT * GX.SYQZ), 0) YJ_PT,
               NVL(SUM(A.YJ_XY * GX.SYQZ), 0) YJ_XY,
               NVL(SUM(A.JYJ_PT * GX.SYQZ), 0) JYJ_PT,
               NVL(SUM(A.JYJ_XY * GX.SYQZ), 0) JYJ_XY,
               NVL(SUM(A.YK * GX.SYQZ), 0) YK,
               NVL(SUM(A.KYBZJ * GX.SYQZ), 0) KYBZJ,
               NVL(SUM(A.ZRJE * GX.SYQZ), 0) ZRJE,
               NVL(SUM(A.ZCJE * GX.SYQZ), 0) ZCJE,
               NVL(SUM(A.ZRSZ * GX.SYQZ), 0) ZRSZ,
               NVL(SUM(A.ZCSZ * GX.SYQZ), 0) ZCSZ,
               NVL(SUM(A.FWYJ * GX.SYQZ), 0) FWYJ,
               NVL(SUM(A.QCZC * GX.SYQZ), 0) QCZC,
               NVL(SUM(A.RJZC * GX.SYQZ), 0) RJZC,
               NVL(SUM(A.RJRZRQ * GX.SYQZ), 0) RJRZRQ,
               NVL(SUM(A.RJRZFZ * GX.SYQZ), 0) RJRZFZ,
               NVL(SUM(A.RJRQFZ * GX.SYQZ), 0) RJRQFZ,
               NVL(SUM(A.RJZQSZ * GX.SYQZ), 0) RJZQSZ,
               NVL(SUM(A.YMRZJE * GX.SYQZ), 0) YMRZJE,
               NVL(SUM(A.YMRQJE * GX.SYQZ), 0) YMRQJE
          FROM DSC_STAT.T_STAT_RZRQ_Y A
          JOIN DSC_STAT.TMP_T_TD_KHGX GX ON GX.KHH = A.KHH
         WHERE A.YF = VN_TJYF
         GROUP BY GX.TD_YYB, GX.TD_ID, GX.GXLX;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3.0 统计唯一关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_TD_RZRQ_Y
        (YF,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         KHS,
         ZZC,
         ZFZ,
         ZJYE,
         ZQSZ,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         YJ,
         JYJ,
         RZFZ,
         RQFZ,
         GHBJ,
         XZFZ,
         XZRZFZ,
         XZRQFZ,
         GHLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         XZLX,
         XZRQLX,
         XZRZLX,
         RZFY,
         RQFY,
         PCCS,
         ZBCS,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ_PT,
         JYJ_XY,
         YK,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         QCZC,
         RJZC,
         RJRZRQ,
         RJRZFZ,
         RJRQFZ,
         RJZQSZ,
         YMRZJE,
         YMRQJE)
        SELECT VN_TJYF,
               CON_ORG_LVL || '-' || GX.TD_ID U_ID,
               GX.TD_ID YS_ID,
               GX.TD_YYB AS YYB,
               0 GXLX,
               COUNT(DISTINCT A.KHH) KHS,
               NVL(SUM(A.ZZC * GX.SYQZ), 0) ZZC,
               NVL(SUM(A.ZFZ * GX.SYQZ), 0) ZFZ,
               NVL(SUM(A.ZJYE * GX.SYQZ), 0) ZJYE,
               NVL(SUM(A.ZQSZ * GX.SYQZ), 0) ZQSZ,
               NVL(SUM(A.RZSXED * GX.SYQZ), 0) RZSXED,
               NVL(SUM(A.RQSXED * GX.SYQZ), 0) RQSXED,
               NVL(SUM(A.JYL_RZ * GX.SYQZ), 0) JYL_RZ,
               NVL(SUM(A.JYL_RQ * GX.SYQZ), 0) JYL_RQ,
               NVL(SUM(A.YJ * GX.SYQZ), 0) YJ,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.RZFZ * GX.SYQZ), 0) RZFZ,
               NVL(SUM(A.RQFZ * GX.SYQZ), 0) RQFZ,
               NVL(SUM(A.GHBJ * GX.SYQZ), 0) GHBJ,
               NVL(SUM(A.XZFZ * GX.SYQZ), 0) XZFZ,
               NVL(SUM(A.XZRZFZ * GX.SYQZ), 0) XZRZFZ,
               NVL(SUM(A.XZRQFZ * GX.SYQZ), 0) XZRQFZ,
               NVL(SUM(A.GHLX * GX.SYQZ), 0) GHLX,
               NVL(SUM(A.YJLX * GX.SYQZ), 0) YJLX,
               NVL(SUM(A.RZYJLX * GX.SYQZ), 0) RZYJLX,
               NVL(SUM(A.RQYJLX * GX.SYQZ), 0) RQYJLX,
               NVL(SUM(A.XZLX * GX.SYQZ), 0) XZLX,
               NVL(SUM(A.XZRQLX * GX.SYQZ), 0) XZRQLX,
               NVL(SUM(A.XZRZLX * GX.SYQZ), 0) XZRZLX,
               NVL(SUM(A.RZFY * GX.SYQZ), 0) RZFY,
               NVL(SUM(A.RQFY * GX.SYQZ), 0) RQFY,
               NVL(SUM(A.PCCS * GX.SYQZ), 0) PCCS,
               NVL(SUM(A.ZBCS * GX.SYQZ), 0) ZBCS,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_PT * GX.SYQZ), 0) JYL_PT,
               NVL(SUM(A.JYL_XY * GX.SYQZ), 0) JYL_XY,
               NVL(SUM(A.YJ_PT * GX.SYQZ), 0) YJ_PT,
               NVL(SUM(A.YJ_XY * GX.SYQZ), 0) YJ_XY,
               NVL(SUM(A.JYJ_PT * GX.SYQZ), 0) JYJ_PT,
               NVL(SUM(A.JYJ_XY * GX.SYQZ), 0) JYJ_XY,
               NVL(SUM(A.YK * GX.SYQZ), 0) YK,
               NVL(SUM(A.KYBZJ * GX.SYQZ), 0) KYBZJ,
               NVL(SUM(A.ZRJE * GX.SYQZ), 0) ZRJE,
               NVL(SUM(A.ZCJE * GX.SYQZ), 0) ZCJE,
               NVL(SUM(A.ZRSZ * GX.SYQZ), 0) ZRSZ,
               NVL(SUM(A.ZCSZ * GX.SYQZ), 0) ZCSZ,
               NVL(SUM(A.FWYJ * GX.SYQZ), 0) FWYJ,
               NVL(SUM(A.QCZC * GX.SYQZ), 0) QCZC,
               NVL(SUM(A.RJZC * GX.SYQZ), 0) RJZC,
               NVL(SUM(A.RJRZRQ * GX.SYQZ), 0) RJRZRQ,
               NVL(SUM(A.RJRZFZ * GX.SYQZ), 0) RJRZFZ,
               NVL(SUM(A.RJRQFZ * GX.SYQZ), 0) RJRQFZ,
               NVL(SUM(A.RJZQSZ * GX.SYQZ), 0) RJZQSZ,
               NVL(SUM(A.YMRZJE * GX.SYQZ), 0) YMRZJE,
               NVL(SUM(A.YMRQJE * GX.SYQZ), 0) YMRQJE
          FROM DSC_STAT.T_STAT_RZRQ_Y A
          JOIN DSC_STAT.TMP_T_TD_KHGX_UNIQUE GX ON GX.KHH = A.KHH
         WHERE A.YF = VN_TJYF
         GROUP BY GX.TD_YYB, GX.TD_ID;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_TD_RZRQ_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_TD_XKKH_Y(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN NUMBER,
                                                      I_N_REDO IN NUMBER) IS
  /*-----------------------------------------------------------------------
  --
  -----------------------------------------------------------------------
    项目名称：   NDSC
    过程名称:    P_STAT_TD_XKKH_Y
    功能简述：   在团队这个级别计算新开客户的统计


    参数：
         英文名称            中文名称                可能取值
         O_N_CODE            返回值
         O_S_NOTE            返回信息
         I_N_KSRQ            开始日期            通常是交易日
         I_N_JSRQ            截止日期            通常是交易日

    返回：

    算法：

    注意事项：

            组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY


    数据源：

    修改记录;
    ----------------------------------------------------------------------------
    操作人            操作时间                      操作
    黄玉钰            2013/05/21                    创建
    卢智飞            2013/06/25                    修改-从kh基础统计，并关联VW_KHGX_TJRQ
    林伟              2013/08/29                    修改：增加YYB字段
    黄玉钰            2013/09/11                    修改：修改删除月分区
                                                    调整主表为T_KHXX_JJYW及DSC_STAT.VW_KHGX_TJRQ
    黄玉钰            2013/09/22                    修改：获取资产/交易量等值时关联上T_STAT_RZRQ_Y表
                                                    修改：有关系的数据乘以GX.SYQZ
    陈德铸            2015/06/07                    修改：YYB字段取自DSC_BAS.T_TDBM中的YYB字段
    洪国力            2016/01/18                    修改：新增关系类型字段，修复因关系类型为空取不到团队数据的问题

  */
  CON_ORG_LVL CONSTANT VARCHAR2(2) := '05';
  --    CON_GXLX_FW CONSTANT INTEGER := 1; --关系类型（服务关系，含主和辅助两种)
  VS_PROC_NAME VARCHAR2(100);
  VN_LOGID     INT; --LOG 表记录ID
  VN_ROWCOUNT  INT; --记录数
  VN_STEP      INT; --动作步数
  VN_PROC_NO   NUMBER(10);
  VS_USER      VARCHAR2(30);
  VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
  VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
  VN_TJYF_KSRQ NUMBER(8); --统计日期所在的开始日期
  VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_TD_XKKH_Y';

BEGIN
  --变量初始化
  O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
  O_S_NOTE     := '运行正常';
  VS_USER      := 'DSC_STAT';
  VS_PROC_NAME := $$PLSQL_UNIT;
  VN_TJYF_KSRQ := VN_TJYF * 100 + 1;

  SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
  --获取ETL过程的编号
  VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                      I_S_PROC_NAME => VS_PROC_NAME);
  VN_STEP    := 0;

  --记录日志——开始
  PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                     I_N_LOGID          => VN_LOGID,
                     I_S_USER           => VS_USER,
                     I_S_PROCNAME       => VS_PROC_NAME,
                     I_N_TJRQ           => VN_TJRQ,
                     I_N_RETCODE        => 1,
                     I_S_RETNOTE        => '正在运行！',
                     I_S_FLAG           => I_N_REDO,
                     I_N_INSERTORUPDATE => 0);
  --
  --1.0 删除旧数据
  IF I_N_REDO IN (0, 1) THEN
    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '删除[' || VS_TABNAME ||
                                                    ']目标分区：=PY_' || VN_TJYF ||
                                                    '的数据！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --分区删除
    EXECUTE IMMEDIATE 'ALTER TABLE ' || VS_TABNAME ||
                      ' TRUNCATE PARTITION PY_' || VN_TJYF ||
                      '  UPDATE GLOBAL INDEXES';

    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '删除[' || VS_TABNAME ||
                                                    ']目标分区：=PY_' || VN_TJYF ||
                                                    '的数据！',
                              I_S_CHANGEDESC     => '[' || VS_TABNAME || ']表' ||
                                                    VN_TJYF || '分区已删除！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

  END IF;

  VN_STEP := VN_STEP + 1;
  --记录日志明细——开始
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                            I_S_CHANGEDESC     => '',
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => 1,
                            I_S_RETNOTE        => '正在运行！',
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 0);

  INSERT INTO DSC_STAT.T_STAT_TD_XKKH_Y
    (YF,
     U_ID,
     YS_ID,
     YYB,
     GXLX,
     BYXKKHS,
     BYXKKHZC,
     BYXKKHJYL,
     BYXKKHYJ,
     BYXKKHJYJ,
     BYXKKHZRZJ,
     BYXKKHZCZJ,
     BYXKKHJZRZJ,
     BYXKKHZRSZ,
     BYXKKHZCSZ,
     BYXKKHJZRSZ)
    SELECT VN_TJYF,
           CON_ORG_LVL || '-' || GX.TD_ID U_ID,
           GX.TD_ID YS_ID,
           GX.TD_YYB AS YYB,
           GX.GXLX AS GXLX,
           COUNT(KH.KHH) BYXKKHS,
           NVL(SUM(A.YMZZC * GX.SYQZ), 0) BYXKKHZC,
           NVL(SUM(JY.JYL * GX.SYQZ), 0) BYXKKHJYL,
           NVL(SUM(JY.YJSR * GX.SYQZ), 0) BYXKKHYJ,
           NVL(SUM(JY.JYJ * GX.SYQZ), 0) BYXKKHJYJ,
           NVL(SUM(A.CRJE * GX.SYQZ), 0) ZRZJ,
           NVL(SUM(A.QCJE * GX.SYQZ), 0) ZCZJ,
           NVL(SUM((A.CRJE - A.QCJE) * GX.SYQZ), 0) JZRZJ,
           NVL(SUM(A.ZRZQSZ * GX.SYQZ), 0) ZRSZ,
           NVL(SUM(A.ZCZQSZ * GX.SYQZ), 0) ZCSZ,
           NVL(SUM((A.ZRZQSZ - A.ZCZQSZ) * GX.SYQZ), 0) JZRSZ
      FROM DSC_BAS.T_KHXX_JJYW KH
     INNER JOIN (SELECT B.TD_ID,
                        A.KHH,
                        NVL(A.GXLX, 0) AS GXLX,
                        NVL(TD.YYB, '-1') AS TD_YYB,
                        LEAST(SUM(A.SYQZ), 1) SYQZ
                   FROM DSC_STAT.VW_KHGX_TJRQ A
                   JOIN DSC_BAS.T_TDCY B
                     ON B.RYXX = A.RYXX
                    AND A.JZRQ > VN_TJRQ
                   LEFT JOIN DSC_BAS.T_TDBM TD
                     ON B.TD_ID = TD.ID
                  WHERE B.SXRQ <= VN_TJRQ
                    AND NVL(B.JZRQ, 30000101) > VN_TJRQ
                 --                        AND A.GXLX = CON_GXLX_FW --只要服务关系的
                  GROUP BY B.TD_ID, A.KHH, NVL(A.GXLX, 0), NVL(TD.YYB, '-1')) GX
        ON GX.KHH = KH.KHH
      LEFT JOIN (SELECT KHH,
                        NVL(SUM(YMZZC), 0) YMZZC,
                        NVL(SUM(CRJE), 0) CRJE,
                        NVL(SUM(QCJE), 0) QCJE,
                        NVL(SUM(ZRZQSZ), 0) ZRZQSZ,
                        NVL(SUM(ZCZQSZ), 0) ZCZQSZ
                   FROM (SELECT YF, KHH, YMZZC, CRJE, QCJE, ZRZQSZ, ZCZQSZ
                           FROM DSC_STAT.T_STAT_KHZC_Y
                         UNION ALL
                         SELECT YF, KHH, ZZC, ZRJE, ZCJE, ZRSZ, ZCSZ
                           FROM DSC_STAT.T_STAT_RZRQ_Y)
                  WHERE YF = VN_TJYF
                  GROUP BY KHH) A
        ON KH.KHH = A.KHH
      LEFT JOIN (SELECT KHH,
                        NVL(SUM(JYL), 0) JYL,
                        NVL(SUM(YJSR), 0) YJSR,
                        NVL(SUM(JYJ), 0) JYJ
                   FROM (SELECT YF, KHH, JYL, YJSR, JYJ
                           FROM DSC_STAT.T_STAT_KHJYSR_Y
                         UNION ALL
                         SELECT YF, KHH, JYL, YJ, JYJ
                           FROM DSC_STAT.T_STAT_RZRQ_Y)
                  WHERE YF = VN_TJYF
                  GROUP BY KHH) JY
        ON JY.KHH = A.KHH
     WHERE KH.KHRQ BETWEEN VN_TJYF_KSRQ AND VN_TJRQ
     GROUP BY GX.TD_YYB, GX.TD_ID, GX.GXLX;

  VN_ROWCOUNT := SQL%ROWCOUNT;
  O_S_NOTE    := '运行正常';
  PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                            I_N_LOGDETAILID    => VN_STEP,
                            I_S_USER           => VS_USER,
                            I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                            I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                            I_N_TJRQ           => VN_TJRQ,
                            I_N_RETCODE        => O_N_CODE,
                            I_S_RETNOTE        => O_S_NOTE,
                            I_S_FLAG           => I_N_REDO,
                            I_N_INSERTORUPDATE => 1);

  O_S_NOTE := '运行正常';
  --记录日志——成功结束
  PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                     I_N_LOGID          => VN_LOGID,
                     I_S_USER           => VS_USER,
                     I_S_PROCNAME       => VS_PROC_NAME,
                     I_N_TJRQ           => VN_TJRQ,
                     I_N_RETCODE        => O_N_CODE,
                     I_S_RETNOTE        => O_S_NOTE,
                     I_S_FLAG           => I_N_REDO,
                     I_N_INSERTORUPDATE => 1);
EXCEPTION
  WHEN OTHERS THEN
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
    O_S_NOTE := SQLERRM;
    ROLLBACK;
    --记录日志——失败结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
    --记录日志明细——失败结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '运行失败！',
                              I_S_CHANGEDESC     => '运行失败！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

END P_STAT_TD_XKKH_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_TD_ZC_R(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN NUMBER,
                                                    I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
      --
      -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_TD_ZC_R
      功能简述：   在团队这个级别计算资产的信息（日）
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：

           组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
           算团队的时候，需要两级关联之后取唯一的客户，否则可能重叠，所以无法在人员的基础上直接累加。

      数据源：

      修改记录;
      -----------------------------------------------------------------------------------------------------------------------
      操作人            操作时间                      操作
      黄玉钰            2013/05/21                   创建
      LZF               2013/06/25 10:00:00          修改-取唯一
      林伟              2013/08/29                   修改：增加YYB字段
      黄玉钰            2013/09/11                   修改：SUM(NVL(,0))改为NVL(SUM(),0)
      黄玉钰            2013/09/22                   修改：有关系的数据乘以GX.SYQZ
      刘官勤            2015/02/02                   修改：增加字段ZFZ_RZRQ总负债_融资融券
      吴邦杰            2015/03/04                   修改：调整关联对象，团队有效客户关系和团队唯一客户关系直接从TMP_T_TD_KHGX、TMP_T_TD_KHGX_UNIQUE表取
      陈德铸            2015/06/07                   修改：YYB字段取自DSC_BAS.T_TDBM中的YYB字段


    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '05';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_TD_ZC_R';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM T_STAT_TD_ZC_R WHERE RQ = VN_TJRQ;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --2.0 统计分组关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_TD_ZC_R
        (RQ,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         ZZC,
         FLTZC,
         ZTZC,
         ZQZC,
         DYPSZ,
         ZZC_RMB,
         ZZC_HKD,
         ZZC_USD,
         QTZC_RMB,
         QTZC_HKD,
         QTZC_USD,
         ZJYE_RMB,
         ZJYE_HKD,
         ZJYE_USD,
         ZQSZ,
         ZQSZ_RMB,
         ZQSZ_HKD,
         ZQSZ_USD,
         ZQSZ_ZB,
         ZQSZ_HAZB,
         ZQSZ_SAZB,
         ZQSZ_ZXB,
         ZQSZ_CYB,
         ZQSZ_HB,
         ZQSZ_SB,
         ZQSZ_SB_A,
         ZQSZ_SB_B,
         ZQSZ_FBSJJ,
         ZQSZ_ETF,
         ZQSZ_LOF,
         ZQSZ_SZJJT,
         ZQSZ_DXJJ,
         ZQSZ_JRCP,
         ZQSZ_QZ,
         ZQSZ_GZ,
         ZQSZ_GSQYZ,
         ZQSZ_KZZ,
         ZQSZ_SG,
         ZQSZ_QT,
         SZXZJE,
         ZYSHGRQ,
         CRJE_RMB,
         CRJE_HKD,
         CRJE_USD,
         QCJE_RMB,
         QCJE_HKD,
         QCJE_USD,
         ZRZQSZ,
         ZD_RMB,
         ZD_USD,
         ZTGZR_RMB,
         ZTGZR_HKD,
         ZCZQSZ,
         CZD_RMB,
         CZD_USD,
         ZTGZC_RMB,
         ZTGZC_HKD,
         DRYK,
         ZFZ,
         ZZC_RZRQ,
         DBXJ_RZRQ,
         DBGPSZ_RZRQ,
         HLCS_HKD,
         HLCS_USD,
         ZFZ_RZRQ)
        SELECT VN_TJRQ,
               CON_ORG_LVL || '-' || GX.TD_ID U_ID,
               GX.TD_ID YS_ID,
               GX.TD_YYB AS YYB,
               GX.GXLX GXLX,
               NVL(SUM(A.ZZC * GX.SYQZ), 0) ZZC,
               NVL(SUM(A.FLTZC * GX.SYQZ), 0) FLTZC,
               NVL(SUM(A.ZTZC * GX.SYQZ), 0) ZTZC,
               NVL(SUM(A.ZQZC * GX.SYQZ), 0) ZQZC,
               NVL(SUM(A.DYPSZ * GX.SYQZ), 0) DYPSZ,
               NVL(SUM(A.ZZC_RMB * GX.SYQZ), 0) ZZC_RMB,
               NVL(SUM(A.ZZC_HKD * GX.SYQZ), 0) ZZC_HKD,
               NVL(SUM(A.ZZC_USD * GX.SYQZ), 0) ZZC_USD,
               NVL(SUM(A.QTZC_RMB * GX.SYQZ), 0) QTZC_RMB,
               NVL(SUM(A.QTZC_HKD * GX.SYQZ), 0) QTZC_HKD,
               NVL(SUM(A.QTZC_USD * GX.SYQZ), 0) QTZC_USD,
               NVL(SUM(A.ZJYE_RMB * GX.SYQZ), 0) ZJYE_RMB,
               NVL(SUM(A.ZJYE_HKD * GX.SYQZ), 0) ZJYE_HKD,
               NVL(SUM(A.ZJYE_USD * GX.SYQZ), 0) ZJYE_USD,
               NVL(SUM(A.ZQSZ * GX.SYQZ), 0) ZQSZ,
               NVL(SUM(A.ZQSZ_RMB * GX.SYQZ), 0) ZQSZ_RMB,
               NVL(SUM(A.ZQSZ_HKD * GX.SYQZ), 0) ZQSZ_HKD,
               NVL(SUM(A.ZQSZ_USD * GX.SYQZ), 0) ZQSZ_USD,
               NVL(SUM(A.ZQSZ_ZB * GX.SYQZ), 0) ZQSZ_ZB,
               NVL(SUM(A.ZQSZ_HAZB * GX.SYQZ), 0) ZQSZ_HAZB,
               NVL(SUM(A.ZQSZ_SAZB * GX.SYQZ), 0) ZQSZ_SAZB,
               NVL(SUM(A.ZQSZ_ZXB * GX.SYQZ), 0) ZQSZ_ZXB,
               NVL(SUM(A.ZQSZ_CYB * GX.SYQZ), 0) ZQSZ_CYB,
               NVL(SUM(A.ZQSZ_HB * GX.SYQZ), 0) ZQSZ_HB,
               NVL(SUM(A.ZQSZ_SB * GX.SYQZ), 0) ZQSZ_SB,
               NVL(SUM(A.ZQSZ_SB_A * GX.SYQZ), 0) ZQSZ_SB_A,
               NVL(SUM(A.ZQSZ_SB_B * GX.SYQZ), 0) ZQSZ_SB_B,
               NVL(SUM(A.ZQSZ_FBSJJ * GX.SYQZ), 0) ZQSZ_FBSJJ,
               NVL(SUM(A.ZQSZ_ETF * GX.SYQZ), 0) ZQSZ_ETF,
               NVL(SUM(A.ZQSZ_LOF * GX.SYQZ), 0) ZQSZ_LOF,
               NVL(SUM(A.ZQSZ_SZJJT * GX.SYQZ), 0) ZQSZ_SZJJT,
               NVL(SUM(A.ZQSZ_DXJJ * GX.SYQZ), 0) ZQSZ_DXJJ,
               NVL(SUM(A.ZQSZ_JRCP * GX.SYQZ), 0) ZQSZ_JRCP,
               NVL(SUM(A.ZQSZ_QZ * GX.SYQZ), 0) ZQSZ_QZ,
               NVL(SUM(A.ZQSZ_GZ * GX.SYQZ), 0) ZQSZ_GZ,
               NVL(SUM(A.ZQSZ_GSQYZ * GX.SYQZ), 0) ZQSZ_GSQYZ,
               NVL(SUM(A.ZQSZ_KZZ * GX.SYQZ), 0) ZQSZ_KZZ,
               NVL(SUM(A.ZQSZ_SG * GX.SYQZ), 0) ZQSZ_SG,
               NVL(SUM(A.ZQSZ_QT * GX.SYQZ), 0) ZQSZ_QT,
               NVL(SUM(A.SZXZJE * GX.SYQZ), 0) SZXZJE,
               0 ZYSHGRQ,
               NVL(SUM(A.CRJE_RMB * GX.SYQZ), 0) CRJE_RMB,
               NVL(SUM(A.CRJE_HKD * GX.SYQZ), 0) CRJE_HKD,
               NVL(SUM(A.CRJE_USD * GX.SYQZ), 0) CRJE_USD,
               NVL(SUM(A.QCJE_RMB * GX.SYQZ), 0) QCJE_RMB,
               NVL(SUM(A.QCJE_HKD * GX.SYQZ), 0) QCJE_HKD,
               NVL(SUM(A.QCJE_USD * GX.SYQZ), 0) QCJE_USD,
               NVL(SUM(A.ZRZQSZ * GX.SYQZ), 0) ZRZQSZ,
               NVL(SUM(A.ZD_RMB * GX.SYQZ), 0) ZD_RMB,
               NVL(SUM(A.ZD_USD * GX.SYQZ), 0) ZD_USD,
               NVL(SUM(A.ZTGZR_RMB * GX.SYQZ), 0) ZTGZR_RMB,
               NVL(SUM(A.ZTGZR_HKD * GX.SYQZ), 0) ZTGZR_HKD,
               NVL(SUM(A.ZCZQSZ * GX.SYQZ), 0) ZCZQSZ,
               NVL(SUM(A.CZD_RMB * GX.SYQZ), 0) CZD_RMB,
               NVL(SUM(A.CZD_USD * GX.SYQZ), 0) CZD_USD,
               NVL(SUM(A.ZTGZC_RMB * GX.SYQZ), 0) ZTGZC_RMB,
               NVL(SUM(A.ZTGZC_HKD * GX.SYQZ), 0) ZTGZC_HKD,
               NVL(SUM(A.DRYK * GX.SYQZ), 0) DRYK,
               NVL(SUM(A.ZFZ * GX.SYQZ), 0) ZFZ,
               NVL(SUM(A.ZZC_RZRQ * GX.SYQZ), 0) ZZC_RZRQ,
               NVL(SUM(A.DBXJ_RZRQ * GX.SYQZ), 0) DBXJ_RZRQ,
               NVL(SUM(A.DBGPSZ_RZRQ * GX.SYQZ), 0) DBGPSZ_RZRQ,
               NVL(A.HLCS_HKD, 0) HLCS_HKD,
               NVL(A.HLCS_USD, 0) HLCS_USD,
               NVL(SUM(A.ZFZ_RZRQ * GX.SYQZ), 0) ZFZ_RZRQ
          FROM DSC_STAT.T_STAT_KHZC_R A
          JOIN DSC_STAT.TMP_T_TD_KHGX GX ON GX.KHH = A.KHH
         WHERE A.RQ = VN_TJRQ
         GROUP BY GX.TD_ID, GX.TD_YYB, GX.GXLX, A.HLCS_HKD, A.HLCS_USD;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3.0 统计唯一关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_TD_ZC_R
        (RQ,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         ZZC,
         FLTZC,
         ZTZC,
         ZQZC,
         DYPSZ,
         ZZC_RMB,
         ZZC_HKD,
         ZZC_USD,
         QTZC_RMB,
         QTZC_HKD,
         QTZC_USD,
         ZJYE_RMB,
         ZJYE_HKD,
         ZJYE_USD,
         ZQSZ,
         ZQSZ_RMB,
         ZQSZ_HKD,
         ZQSZ_USD,
         ZQSZ_ZB,
         ZQSZ_HAZB,
         ZQSZ_SAZB,
         ZQSZ_ZXB,
         ZQSZ_CYB,
         ZQSZ_HB,
         ZQSZ_SB,
         ZQSZ_SB_A,
         ZQSZ_SB_B,
         ZQSZ_FBSJJ,
         ZQSZ_ETF,
         ZQSZ_LOF,
         ZQSZ_SZJJT,
         ZQSZ_DXJJ,
         ZQSZ_JRCP,
         ZQSZ_QZ,
         ZQSZ_GZ,
         ZQSZ_GSQYZ,
         ZQSZ_KZZ,
         ZQSZ_SG,
         ZQSZ_QT,
         SZXZJE,
         ZYSHGRQ,
         CRJE_RMB,
         CRJE_HKD,
         CRJE_USD,
         QCJE_RMB,
         QCJE_HKD,
         QCJE_USD,
         ZRZQSZ,
         ZD_RMB,
         ZD_USD,
         ZTGZR_RMB,
         ZTGZR_HKD,
         ZCZQSZ,
         CZD_RMB,
         CZD_USD,
         ZTGZC_RMB,
         ZTGZC_HKD,
         DRYK,
         ZFZ,
         ZZC_RZRQ,
         DBXJ_RZRQ,
         DBGPSZ_RZRQ,
         HLCS_HKD,
         HLCS_USD,
         ZFZ_RZRQ)
        SELECT VN_TJRQ,
               CON_ORG_LVL || '-' || GX.TD_ID U_ID,
               GX.TD_ID YS_ID,
               GX.TD_YYB AS YYB,
               0 GXLX,
               NVL(SUM(A.ZZC * GX.SYQZ), 0) ZZC,
               NVL(SUM(A.FLTZC * GX.SYQZ), 0) FLTZC,
               NVL(SUM(A.ZTZC * GX.SYQZ), 0) ZTZC,
               NVL(SUM(A.ZQZC * GX.SYQZ), 0) ZQZC,
               NVL(SUM(A.DYPSZ * GX.SYQZ), 0) DYPSZ,
               NVL(SUM(A.ZZC_RMB * GX.SYQZ), 0) ZZC_RMB,
               NVL(SUM(A.ZZC_HKD * GX.SYQZ), 0) ZZC_HKD,
               NVL(SUM(A.ZZC_USD * GX.SYQZ), 0) ZZC_USD,
               NVL(SUM(A.QTZC_RMB * GX.SYQZ), 0) QTZC_RMB,
               NVL(SUM(A.QTZC_HKD * GX.SYQZ), 0) QTZC_HKD,
               NVL(SUM(A.QTZC_USD * GX.SYQZ), 0) QTZC_USD,
               NVL(SUM(A.ZJYE_RMB * GX.SYQZ), 0) ZJYE_RMB,
               NVL(SUM(A.ZJYE_HKD * GX.SYQZ), 0) ZJYE_HKD,
               NVL(SUM(A.ZJYE_USD * GX.SYQZ), 0) ZJYE_USD,
               NVL(SUM(A.ZQSZ * GX.SYQZ), 0) ZQSZ,
               NVL(SUM(A.ZQSZ_RMB * GX.SYQZ), 0) ZQSZ_RMB,
               NVL(SUM(A.ZQSZ_HKD * GX.SYQZ), 0) ZQSZ_HKD,
               NVL(SUM(A.ZQSZ_USD * GX.SYQZ), 0) ZQSZ_USD,
               NVL(SUM(A.ZQSZ_ZB * GX.SYQZ), 0) ZQSZ_ZB,
               NVL(SUM(A.ZQSZ_HAZB * GX.SYQZ), 0) ZQSZ_HAZB,
               NVL(SUM(A.ZQSZ_SAZB * GX.SYQZ), 0) ZQSZ_SAZB,
               NVL(SUM(A.ZQSZ_ZXB * GX.SYQZ), 0) ZQSZ_ZXB,
               NVL(SUM(A.ZQSZ_CYB * GX.SYQZ), 0) ZQSZ_CYB,
               NVL(SUM(A.ZQSZ_HB * GX.SYQZ), 0) ZQSZ_HB,
               NVL(SUM(A.ZQSZ_SB * GX.SYQZ), 0) ZQSZ_SB,
               NVL(SUM(A.ZQSZ_SB_A * GX.SYQZ), 0) ZQSZ_SB_A,
               NVL(SUM(A.ZQSZ_SB_B * GX.SYQZ), 0) ZQSZ_SB_B,
               NVL(SUM(A.ZQSZ_FBSJJ * GX.SYQZ), 0) ZQSZ_FBSJJ,
               NVL(SUM(A.ZQSZ_ETF * GX.SYQZ), 0) ZQSZ_ETF,
               NVL(SUM(A.ZQSZ_LOF * GX.SYQZ), 0) ZQSZ_LOF,
               NVL(SUM(A.ZQSZ_SZJJT * GX.SYQZ), 0) ZQSZ_SZJJT,
               NVL(SUM(A.ZQSZ_DXJJ * GX.SYQZ), 0) ZQSZ_DXJJ,
               NVL(SUM(A.ZQSZ_JRCP * GX.SYQZ), 0) ZQSZ_JRCP,
               NVL(SUM(A.ZQSZ_QZ * GX.SYQZ), 0) ZQSZ_QZ,
               NVL(SUM(A.ZQSZ_GZ * GX.SYQZ), 0) ZQSZ_GZ,
               NVL(SUM(A.ZQSZ_GSQYZ * GX.SYQZ), 0) ZQSZ_GSQYZ,
               NVL(SUM(A.ZQSZ_KZZ * GX.SYQZ), 0) ZQSZ_KZZ,
               NVL(SUM(A.ZQSZ_SG * GX.SYQZ), 0) ZQSZ_SG,
               NVL(SUM(A.ZQSZ_QT * GX.SYQZ), 0) ZQSZ_QT,
               NVL(SUM(A.SZXZJE * GX.SYQZ), 0) SZXZJE,
               0 ZYSHGRQ,
               NVL(SUM(A.CRJE_RMB * GX.SYQZ), 0) CRJE_RMB,
               NVL(SUM(A.CRJE_HKD * GX.SYQZ), 0) CRJE_HKD,
               NVL(SUM(A.CRJE_USD * GX.SYQZ), 0) CRJE_USD,
               NVL(SUM(A.QCJE_RMB * GX.SYQZ), 0) QCJE_RMB,
               NVL(SUM(A.QCJE_HKD * GX.SYQZ), 0) QCJE_HKD,
               NVL(SUM(A.QCJE_USD * GX.SYQZ), 0) QCJE_USD,
               NVL(SUM(A.ZRZQSZ * GX.SYQZ), 0) ZRZQSZ,
               NVL(SUM(A.ZD_RMB * GX.SYQZ), 0) ZD_RMB,
               NVL(SUM(A.ZD_USD * GX.SYQZ), 0) ZD_USD,
               NVL(SUM(A.ZTGZR_RMB * GX.SYQZ), 0) ZTGZR_RMB,
               NVL(SUM(A.ZTGZR_HKD * GX.SYQZ), 0) ZTGZR_HKD,
               NVL(SUM(A.ZCZQSZ * GX.SYQZ), 0) ZCZQSZ,
               NVL(SUM(A.CZD_RMB * GX.SYQZ), 0) CZD_RMB,
               NVL(SUM(A.CZD_USD * GX.SYQZ), 0) CZD_USD,
               NVL(SUM(A.ZTGZC_RMB * GX.SYQZ), 0) ZTGZC_RMB,
               NVL(SUM(A.ZTGZC_HKD * GX.SYQZ), 0) ZTGZC_HKD,
               NVL(SUM(A.DRYK * GX.SYQZ), 0) DRYK,
               NVL(SUM(A.ZFZ * GX.SYQZ), 0) ZFZ,
               NVL(SUM(A.ZZC_RZRQ * GX.SYQZ), 0) ZZC_RZRQ,
               NVL(SUM(A.DBXJ_RZRQ * GX.SYQZ), 0) DBXJ_RZRQ,
               NVL(SUM(A.DBGPSZ_RZRQ * GX.SYQZ), 0) DBGPSZ_RZRQ,
               NVL(A.HLCS_HKD, 0) HLCS_HKD,
               NVL(A.HLCS_USD, 0) HLCS_USD,
               NVL(SUM(A.ZFZ_RZRQ * GX.SYQZ), 0) ZFZ_RZRQ
          FROM DSC_STAT.T_STAT_KHZC_R A
          JOIN DSC_STAT.TMP_T_TD_KHGX_UNIQUE GX ON GX.KHH = A.KHH
         WHERE A.RQ = VN_TJRQ
         GROUP BY GX.TD_ID, GX.TD_YYB, A.HLCS_HKD, A.HLCS_USD;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_TD_ZC_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_TD_ZC_Y(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN NUMBER,
                                                    I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
      --
      -----------------------------------------------------------------------
      项目名称：   NDSC
      过程名称:    P_STAT_TD_ZC_Y
      功能简述：   在团队这个级别计算资产的信息（月）
      参数：
           英文名称            中文名称                可能取值
           O_N_CODE            返回值
           O_S_NOTE            返回信息
           I_N_KSRQ            开始日期            通常是交易日
           I_N_JSRQ            截止日期            通常是交易日

      返回：

      算法：

      注意事项：

           组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY


      数据源：

      修改记录;
      -----------------------------------------------------------------------------------------------------------------------
      操作人            操作时间                      操作
      黄玉钰            2013/05/21                   创建
      林伟              2013/08/29                   修改：增加YYB字段
      黄玉钰            2013/09/11                   修改：修改删除月分区
                                                     SUM(NVL(,0))改为NVL(SUM(),0)
      黄玉钰            2013/09/22                   修改：有关系的数据乘以GX.SYQZ
      刘官勤            2015/02/02                   修改：增加字段YMZFZ_RZRQ月末总负债_融资融券
      吴邦杰            2015/03/04                   修改：调整关联对象，团队有效客户关系和团队唯一客户关系直接从TMP_T_TD_KHGX、TMP_T_TD_KHGX_UNIQUE表取
      陈德铸            2015/06/07                   修改：YYB字段取自DSC_BAS.T_TDBM中的YYB字段
      洪国力            2015/12/24                   修改：新增字段YMZZC_RZRQ（月末总资产_融资融券）、
                                                       YMDBXJ_RZRQ（月末担保现金_融资融券）、
                                                       YMDBGPSZ_RZRQ（月末担保股票市值_融资融券）
      洪国力            2016/01/19                   修改：峰值取客户月最高资产错误，应从日表取数

    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '05';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_FIRST_DAY NUMBER(8); --月初
    VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6);
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_TD_ZC_Y';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --月初
    VN_FIRST_DAY := PUB_SYS.F_GET_DATE(VN_TJRQ, 0);

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME ||
                                                        ']目标分区：=PY_' || VN_TJYF || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        --分区删除
        EXECUTE IMMEDIATE 'ALTER TABLE ' || VS_TABNAME || ' TRUNCATE PARTITION PY_' ||
                          VN_TJYF || '  UPDATE GLOBAL INDEXES';

        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME ||
                                                        ']目标分区：=PY_' || VN_TJYF || '的数据！',
                                  I_S_CHANGEDESC     => '[' || VS_TABNAME || ']表' ||
                                                        VN_TJYF || '分区已删除！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --2.0 统计分组关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算团队（分关系)',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_TD_ZC_Y
        (YF,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         YCZZC,
         YCZZC_RMB,
         YCZZC_HKD,
         YCZZC_USD,
         YMZZC,
         YMZZC_RMB,
         YMZZC_HKD,
         YMZZC_USD,
         YMQTZC_RMB,
         YMQTZC_HKD,
         YMQTZC_USD,
         YMZJYE_RMB,
         YMZJYE_HKD,
         YMZJYE_USD,
         YMZQSZ,
         YMZQSZ_RMB,
         YMZQSZ_HKD,
         YMZQSZ_USD,
         YMZQSZ_ZB,
         YMZQSZ_HAZB,
         YMZQSZ_SAZB,
         YMZQSZ_ZXB,
         YMZQSZ_CYB,
         YMZQSZ_HB,
         YMZQSZ_SB,
         YMZQSZ_SB_A,
         YMZQSZ_SB_B,
         YMZQSZ_FBSJJ,
         YMZQSZ_ETF,
         YMZQSZ_LOF,
         YMZQSZ_SZJJT,
         YMZQSZ_DXJJ,
         YMZQSZ_JRCP,
         YMZQSZ_QZ,
         YMZQSZ_GZ,
         YMZQSZ_GSZ,
         YMZQSZ_KZZ,
         YMZQSZ_SG,
         YMZQSZ_QT,
         RJZZC,
         RJZC_RMB,
         RJZC_HKD,
         RJZC_USD,
         RJZQSZ,
         RJZQSZ_RMB,
         RJZQSZ_HKD,
         RJZQSZ_USD,
         RJZQSZ_ZB,
         RJZQSZ_HAZB,
         RJZQSZ_SAZB,
         RJZQSZ_ZXB,
         RJZQSZ_CYB,
         RJZQSZ_HB,
         RJZQSZ_SB,
         RJZQSZ_SB_A,
         RJZQSZ_SB_B,
         RJZQSZ_FBSJJ,
         RJZQSZ_ETF,
         RJZQSZ_LOF,
         RJZQSZ_SZJJT,
         RJZQSZ_DXJJ,
         RJZQSZ_JRCP,
         RJZQSZ_QZ,
         RJZQSZ_GZ,
         RJZQSZ_GSQYZ,
         RJZQSZ_KZZ,
         RJZQSZ_SG,
         RJZQSZ_QT,
         CRJE,
         CRJE_RMB,
         CRJE_USD,
         CRJE_HKD,
         QCJE,
         QCJE_RMB,
         QCJE_USD,
         QCJE_HKD,
         ZRZQSZ,
         ZD_RMB,
         ZD_USD,
         ZTGZR_RMB,
         ZTGZR_HKD,
         ZCZQSZ,
         CZD_RMB,
         CZD_USD,
         ZTGZC_RMB,
         ZTGZC_HKD,
         DYYK,
         FZZZC_30,
         BGZZC_30,
         LXJS,
         LCSR,
         RJZFZ,
         RJZZC_RZRQ,
         RJDBXJ_RZRQ,
         RJDBGPSZ_RZRQ,
         FLTZC,
         ZTZC,
         ZQZC,
         DYPSZ,
         SZXZJE,
         ZFZ,
         HLCS_HKD,
         HLCS_USD,
         YMZFZ_RZRQ,
         YMZZC_RZRQ,
         YMDBXJ_RZRQ,
         YMDBGPSZ_RZRQ)
        SELECT B.YF,
               B.U_ID,
               B.YS_ID,
               B.YYB,
               B.GXLX,
               B.YCZZC,
               B.YCZZC_RMB,
               B.YCZZC_HKD,
               B.YCZZC_USD,
               B.YMZZC,
               B.YMZZC_RMB,
               B.YMZZC_HKD,
               B.YMZZC_USD,
               B.YMQTZC_RMB,
               B.YMQTZC_HKD,
               B.YMQTZC_USD,
               B.YMZJYE_RMB,
               B.YMZJYE_HKD,
               B.YMZJYE_USD,
               B.YMZQSZ,
               B.YMZQSZ_RMB,
               B.YMZQSZ_HKD,
               B.YMZQSZ_USD,
               B.YMZQSZ_ZB,
               B.YMZQSZ_HAZB,
               B.YMZQSZ_SAZB,
               B.YMZQSZ_ZXB,
               B.YMZQSZ_CYB,
               B.YMZQSZ_HB,
               B.YMZQSZ_SB,
               B.YMZQSZ_SB_A,
               B.YMZQSZ_SB_B,
               B.YMZQSZ_FBSJJ,
               B.YMZQSZ_ETF,
               B.YMZQSZ_LOF,
               B.YMZQSZ_SZJJT,
               B.YMZQSZ_DXJJ,
               B.YMZQSZ_JRCP,
               B.YMZQSZ_QZ,
               B.YMZQSZ_GZ,
               B.YMZQSZ_GSZ,
               B.YMZQSZ_KZZ,
               B.YMZQSZ_SG,
               B.YMZQSZ_QT,
               B.RJZZC,
               B.RJZC_RMB,
               B.RJZC_HKD,
               B.RJZC_USD,
               B.RJZQSZ,
               B.RJZQSZ_RMB,
               B.RJZQSZ_HKD,
               B.RJZQSZ_USD,
               B.RJZQSZ_ZB,
               B.RJZQSZ_HAZB,
               B.RJZQSZ_SAZB,
               B.RJZQSZ_ZXB,
               B.RJZQSZ_CYB,
               B.RJZQSZ_HB,
               B.RJZQSZ_SB,
               B.RJZQSZ_SB_A,
               B.RJZQSZ_SB_B,
               B.RJZQSZ_FBSJJ,
               B.RJZQSZ_ETF,
               B.RJZQSZ_LOF,
               B.RJZQSZ_SZJJT,
               B.RJZQSZ_DXJJ,
               B.RJZQSZ_JRCP,
               B.RJZQSZ_QZ,
               B.RJZQSZ_GZ,
               B.RJZQSZ_GSQYZ,
               B.RJZQSZ_KZZ,
               B.RJZQSZ_SG,
               B.RJZQSZ_QT,
               B.CRJE,
               B.CRJE_RMB,
               B.CRJE_USD,
               B.CRJE_HKD,
               B.QCJE,
               B.QCJE_RMB,
               B.QCJE_USD,
               B.QCJE_HKD,
               B.ZRZQSZ,
               B.ZD_RMB,
               B.ZD_USD,
               B.ZTGZR_RMB,
               B.ZTGZR_HKD,
               B.ZCZQSZ,
               B.CZD_RMB,
               B.CZD_USD,
               B.ZTGZC_RMB,
               B.ZTGZC_HKD,
               B.DYYK,
               NVL(C.FZ_ZZC, 0) AS FZZZC,
               NVL(C.BG_ZZC, 0) AS BGZZC,
               B.LXJS,
               B.LCSR,
               B.RJZFZ,
               B.RJZZC_RZRQ,
               B.RJDBXJ_RZRQ,
               B.RJDBGPSZ_RZRQ,
               B.FLTZC,
               B.ZTZC,
               B.ZQZC,
               B.DYPSZ,
               B.SZXZJE,
               B.ZFZ,
               B.HLCS_HKD,
               B.HLCS_USD,
               B.YMZFZ_RZRQ,
               B.YMZZC_RZRQ,
               B.YMDBXJ_RZRQ,
               B.YMDBGPSZ_RZRQ
          FROM (SELECT VN_TJYF AS YF,
                       CON_ORG_LVL || '-' || GX.TD_ID U_ID,
                       GX.TD_ID YS_ID,
                       GX.TD_YYB AS YYB,
                       GX.GXLX AS GXLX,
                       NVL(SUM(A.YCZZC * GX.SYQZ), 0) YCZZC,
                       NVL(SUM(A.YCZZC_RMB * GX.SYQZ), 0) YCZZC_RMB,
                       NVL(SUM(A.YCZZC_HKD * GX.SYQZ), 0) YCZZC_HKD,
                       NVL(SUM(A.YCZZC_USD * GX.SYQZ), 0) YCZZC_USD,
                       NVL(SUM(A.YMZZC * GX.SYQZ), 0) YMZZC,
                       NVL(SUM(A.YMZZC_RMB * GX.SYQZ), 0) YMZZC_RMB,
                       NVL(SUM(A.YMZZC_HKD * GX.SYQZ), 0) YMZZC_HKD,
                       NVL(SUM(A.YMZZC_USD * GX.SYQZ), 0) YMZZC_USD,
                       NVL(SUM(A.YMQTZC_RMB * GX.SYQZ), 0) YMQTZC_RMB,
                       NVL(SUM(A.YMQTZC_HKD * GX.SYQZ), 0) YMQTZC_HKD,
                       NVL(SUM(A.YMQTZC_USD * GX.SYQZ), 0) YMQTZC_USD,
                       NVL(SUM(A.YMZJYE_RMB * GX.SYQZ), 0) YMZJYE_RMB,
                       NVL(SUM(A.YMZJYE_HKD * GX.SYQZ), 0) YMZJYE_HKD,
                       NVL(SUM(A.YMZJYE_USD * GX.SYQZ), 0) YMZJYE_USD,
                       NVL(SUM(A.YMZQSZ * GX.SYQZ), 0) YMZQSZ,
                       NVL(SUM(A.YMZQSZ_RMB * GX.SYQZ), 0) YMZQSZ_RMB,
                       NVL(SUM(A.YMZQSZ_HKD * GX.SYQZ), 0) YMZQSZ_HKD,
                       NVL(SUM(A.YMZQSZ_USD * GX.SYQZ), 0) YMZQSZ_USD,
                       NVL(SUM(A.YMZQSZ_ZB * GX.SYQZ), 0) YMZQSZ_ZB,
                       NVL(SUM(A.YMZQSZ_HAZB * GX.SYQZ), 0) YMZQSZ_HAZB,
                       NVL(SUM(A.YMZQSZ_SAZB * GX.SYQZ), 0) YMZQSZ_SAZB,
                       NVL(SUM(A.YMZQSZ_ZXB * GX.SYQZ), 0) YMZQSZ_ZXB,
                       NVL(SUM(A.YMZQSZ_CYB * GX.SYQZ), 0) YMZQSZ_CYB,
                       NVL(SUM(A.YMZQSZ_HB * GX.SYQZ), 0) YMZQSZ_HB,
                       NVL(SUM(A.YMZQSZ_SB * GX.SYQZ), 0) YMZQSZ_SB,
                       NVL(SUM(A.YMZQSZ_SB_A * GX.SYQZ), 0) YMZQSZ_SB_A,
                       NVL(SUM(A.YMZQSZ_SB_B * GX.SYQZ), 0) YMZQSZ_SB_B,
                       NVL(SUM(A.YMZQSZ_FBSJJ * GX.SYQZ), 0) YMZQSZ_FBSJJ,
                       NVL(SUM(A.YMZQSZ_ETF * GX.SYQZ), 0) YMZQSZ_ETF,
                       NVL(SUM(A.YMZQSZ_LOF * GX.SYQZ), 0) YMZQSZ_LOF,
                       NVL(SUM(A.YMZQSZ_SZJJT * GX.SYQZ), 0) YMZQSZ_SZJJT,
                       NVL(SUM(A.YMZQSZ_DXJJ * GX.SYQZ), 0) YMZQSZ_DXJJ,
                       NVL(SUM(A.YMZQSZ_JRCP * GX.SYQZ), 0) YMZQSZ_JRCP,
                       NVL(SUM(A.YMZQSZ_QZ * GX.SYQZ), 0) YMZQSZ_QZ,
                       NVL(SUM(A.YMZQSZ_GZ * GX.SYQZ), 0) YMZQSZ_GZ,
                       NVL(SUM(A.YMZQSZ_GSZ * GX.SYQZ), 0) YMZQSZ_GSZ,
                       NVL(SUM(A.YMZQSZ_KZZ * GX.SYQZ), 0) YMZQSZ_KZZ,
                       NVL(SUM(A.YMZQSZ_SG * GX.SYQZ), 0) YMZQSZ_SG,
                       NVL(SUM(A.YMZQSZ_QT * GX.SYQZ), 0) YMZQSZ_QT,
                       NVL(SUM(A.RJZZC * GX.SYQZ), 0) RJZZC,
                       NVL(SUM(A.RJZC_RMB * GX.SYQZ), 0) RJZC_RMB,
                       NVL(SUM(A.RJZC_HKD * GX.SYQZ), 0) RJZC_HKD,
                       NVL(SUM(A.RJZC_USD * GX.SYQZ), 0) RJZC_USD,
                       NVL(SUM(A.RJZQSZ * GX.SYQZ), 0) RJZQSZ,
                       NVL(SUM(A.RJZQSZ_RMB * GX.SYQZ), 0) RJZQSZ_RMB,
                       NVL(SUM(A.RJZQSZ_HKD * GX.SYQZ), 0) RJZQSZ_HKD,
                       NVL(SUM(A.RJZQSZ_USD * GX.SYQZ), 0) RJZQSZ_USD,
                       NVL(SUM(A.RJZQSZ_ZB * GX.SYQZ), 0) RJZQSZ_ZB,
                       NVL(SUM(A.RJZQSZ_HAZB * GX.SYQZ), 0) RJZQSZ_HAZB,
                       NVL(SUM(A.RJZQSZ_SAZB * GX.SYQZ), 0) RJZQSZ_SAZB,
                       NVL(SUM(A.RJZQSZ_ZXB * GX.SYQZ), 0) RJZQSZ_ZXB,
                       NVL(SUM(A.RJZQSZ_CYB * GX.SYQZ), 0) RJZQSZ_CYB,
                       NVL(SUM(A.RJZQSZ_HB * GX.SYQZ), 0) RJZQSZ_HB,
                       NVL(SUM(A.RJZQSZ_SB * GX.SYQZ), 0) RJZQSZ_SB,
                       NVL(SUM(A.RJZQSZ_SB_A * GX.SYQZ), 0) RJZQSZ_SB_A,
                       NVL(SUM(A.RJZQSZ_SB_B * GX.SYQZ), 0) RJZQSZ_SB_B,
                       NVL(SUM(A.RJZQSZ_FBSJJ * GX.SYQZ), 0) RJZQSZ_FBSJJ,
                       NVL(SUM(A.RJZQSZ_ETF * GX.SYQZ), 0) RJZQSZ_ETF,
                       NVL(SUM(A.RJZQSZ_LOF * GX.SYQZ), 0) RJZQSZ_LOF,
                       NVL(SUM(A.RJZQSZ_SZJJT * GX.SYQZ), 0) RJZQSZ_SZJJT,
                       NVL(SUM(A.RJZQSZ_DXJJ * GX.SYQZ), 0) RJZQSZ_DXJJ,
                       NVL(SUM(A.RJZQSZ_JRCP * GX.SYQZ), 0) RJZQSZ_JRCP,
                       NVL(SUM(A.RJZQSZ_QZ * GX.SYQZ), 0) RJZQSZ_QZ,
                       NVL(SUM(A.RJZQSZ_GZ * GX.SYQZ), 0) RJZQSZ_GZ,
                       NVL(SUM(A.RJZQSZ_GSQYZ * GX.SYQZ), 0) RJZQSZ_GSQYZ,
                       NVL(SUM(A.RJZQSZ_KZZ * GX.SYQZ), 0) RJZQSZ_KZZ,
                       NVL(SUM(A.RJZQSZ_SG * GX.SYQZ), 0) RJZQSZ_SG,
                       NVL(SUM(A.RJZQSZ_QT * GX.SYQZ), 0) RJZQSZ_QT,
                       NVL(SUM(A.CRJE * GX.SYQZ), 0) CRJE,
                       NVL(SUM(A.CRJE_RMB * GX.SYQZ), 0) CRJE_RMB,
                       NVL(SUM(A.CRJE_USD * GX.SYQZ), 0) CRJE_USD,
                       NVL(SUM(A.CRJE_HKD * GX.SYQZ), 0) CRJE_HKD,
                       NVL(SUM(A.QCJE * GX.SYQZ), 0) QCJE,
                       NVL(SUM(A.QCJE_RMB * GX.SYQZ), 0) QCJE_RMB,
                       NVL(SUM(A.QCJE_USD * GX.SYQZ), 0) QCJE_USD,
                       NVL(SUM(A.QCJE_HKD * GX.SYQZ), 0) QCJE_HKD,
                       NVL(SUM(A.ZRZQSZ * GX.SYQZ), 0) ZRZQSZ,
                       NVL(SUM(A.ZD_RMB * GX.SYQZ), 0) ZD_RMB,
                       NVL(SUM(A.ZD_USD * GX.SYQZ), 0) ZD_USD,
                       NVL(SUM(A.ZTGZR_RMB * GX.SYQZ), 0) ZTGZR_RMB,
                       NVL(SUM(A.ZTGZR_HKD * GX.SYQZ), 0) ZTGZR_HKD,
                       NVL(SUM(A.ZCZQSZ * GX.SYQZ), 0) ZCZQSZ,
                       NVL(SUM(A.CZD_RMB * GX.SYQZ), 0) CZD_RMB,
                       NVL(SUM(A.CZD_USD * GX.SYQZ), 0) CZD_USD,
                       NVL(SUM(A.ZTGZC_RMB * GX.SYQZ), 0) ZTGZC_RMB,
                       NVL(SUM(A.ZTGZC_HKD * GX.SYQZ), 0) ZTGZC_HKD,
                       NVL(SUM(A.DYYK * GX.SYQZ), 0) DYYK,
                       NVL(SUM(A.FZZZC_30 * GX.SYQZ), 0) FZZZC_30,
                       NVL(SUM(A.BGZZC_30 * GX.SYQZ), 0) BGZZC_30,
                       NVL(SUM(A.LXJS * GX.SYQZ), 0) LXJS,
                       NVL(SUM(A.LCSR * GX.SYQZ), 0) LCSR,
                       NVL(SUM(A.RJZFZ * GX.SYQZ), 0) RJZFZ,
                       NVL(SUM(A.RJZZC_RZRQ * GX.SYQZ), 0) RJZZC_RZRQ,
                       NVL(SUM(A.RJDBXJ_RZRQ * GX.SYQZ), 0) RJDBXJ_RZRQ,
                       NVL(SUM(A.RJDBGPSZ_RZRQ * GX.SYQZ), 0) RJDBGPSZ_RZRQ,
                       NVL(SUM(A.FLTZC * GX.SYQZ), 0) FLTZC,
                       NVL(SUM(A.ZTZC * GX.SYQZ), 0) ZTZC,
                       NVL(SUM(A.ZQZC * GX.SYQZ), 0) ZQZC,
                       NVL(SUM(A.DYPSZ * GX.SYQZ), 0) DYPSZ,
                       NVL(SUM(A.SZXZJE * GX.SYQZ), 0) SZXZJE,
                       NVL(SUM(A.ZFZ * GX.SYQZ), 0) ZFZ,
                       NVL(A.HLCS_HKD, 0) HLCS_HKD,
                       NVL(A.HLCS_USD, 0) HLCS_USD,
                       NVL(SUM(A.YMZFZ_RZRQ * GX.SYQZ), 0) YMZFZ_RZRQ,
                       NVL(SUM(A.YMZZC_RZRQ * GX.SYQZ), 0) YMZZC_RZRQ,
                       NVL(SUM(A.YMDBXJ_RZRQ * GX.SYQZ), 0) YMDBXJ_RZRQ,
                       NVL(SUM(A.YMDBGPSZ_RZRQ * GX.SYQZ), 0) YMDBGPSZ_RZRQ
                  FROM DSC_STAT.T_STAT_KHZC_Y A
                  JOIN DSC_STAT.TMP_T_TD_KHGX GX
                    ON GX.KHH = A.KHH
                 WHERE A.YF = VN_TJYF
                 GROUP BY GX.TD_ID, GX.TD_YYB, GX.GXLX, A.HLCS_HKD, A.HLCS_USD) B
         INNER JOIN (SELECT TD_ID, MAX(ZZC) FZ_ZZC, MIN(ZZC) BG_ZZC
                       FROM (SELECT A.RQ, GX.TD_ID, SUM(A.ZZC * GX.SYQZ) AS ZZC
                               FROM DSC_STAT.T_STAT_KHZC_R A
                              INNER JOIN DSC_STAT.TMP_T_TD_KHGX GX
                                 ON GX.KHH = A.KHH
                              WHERE A.RQ < = VN_TJRQ
                                AND A.RQ > = VN_FIRST_DAY
                              GROUP BY A.RQ, GX.TD_ID)
                      GROUP BY TD_ID) C
            ON B.YS_ID = C.TD_ID;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3.0 统计分组关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '算团队（唯一关系）',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_TD_ZC_Y
        (YF,
         U_ID,
         YS_ID,
         YYB,
         GXLX,
         YCZZC,
         YCZZC_RMB,
         YCZZC_HKD,
         YCZZC_USD,
         YMZZC,
         YMZZC_RMB,
         YMZZC_HKD,
         YMZZC_USD,
         YMQTZC_RMB,
         YMQTZC_HKD,
         YMQTZC_USD,
         YMZJYE_RMB,
         YMZJYE_HKD,
         YMZJYE_USD,
         YMZQSZ,
         YMZQSZ_RMB,
         YMZQSZ_HKD,
         YMZQSZ_USD,
         YMZQSZ_ZB,
         YMZQSZ_HAZB,
         YMZQSZ_SAZB,
         YMZQSZ_ZXB,
         YMZQSZ_CYB,
         YMZQSZ_HB,
         YMZQSZ_SB,
         YMZQSZ_SB_A,
         YMZQSZ_SB_B,
         YMZQSZ_FBSJJ,
         YMZQSZ_ETF,
         YMZQSZ_LOF,
         YMZQSZ_SZJJT,
         YMZQSZ_DXJJ,
         YMZQSZ_JRCP,
         YMZQSZ_QZ,
         YMZQSZ_GZ,
         YMZQSZ_GSZ,
         YMZQSZ_KZZ,
         YMZQSZ_SG,
         YMZQSZ_QT,
         RJZZC,
         RJZC_RMB,
         RJZC_HKD,
         RJZC_USD,
         RJZQSZ,
         RJZQSZ_RMB,
         RJZQSZ_HKD,
         RJZQSZ_USD,
         RJZQSZ_ZB,
         RJZQSZ_HAZB,
         RJZQSZ_SAZB,
         RJZQSZ_ZXB,
         RJZQSZ_CYB,
         RJZQSZ_HB,
         RJZQSZ_SB,
         RJZQSZ_SB_A,
         RJZQSZ_SB_B,
         RJZQSZ_FBSJJ,
         RJZQSZ_ETF,
         RJZQSZ_LOF,
         RJZQSZ_SZJJT,
         RJZQSZ_DXJJ,
         RJZQSZ_JRCP,
         RJZQSZ_QZ,
         RJZQSZ_GZ,
         RJZQSZ_GSQYZ,
         RJZQSZ_KZZ,
         RJZQSZ_SG,
         RJZQSZ_QT,
         CRJE,
         CRJE_RMB,
         CRJE_USD,
         CRJE_HKD,
         QCJE,
         QCJE_RMB,
         QCJE_USD,
         QCJE_HKD,
         ZRZQSZ,
         ZD_RMB,
         ZD_USD,
         ZTGZR_RMB,
         ZTGZR_HKD,
         ZCZQSZ,
         CZD_RMB,
         CZD_USD,
         ZTGZC_RMB,
         ZTGZC_HKD,
         DYYK,
         FZZZC_30,
         BGZZC_30,
         LXJS,
         LCSR,
         RJZFZ,
         RJZZC_RZRQ,
         RJDBXJ_RZRQ,
         RJDBGPSZ_RZRQ,
         FLTZC,
         ZTZC,
         ZQZC,
         DYPSZ,
         SZXZJE,
         ZFZ,
         HLCS_HKD,
         HLCS_USD,
         YMZFZ_RZRQ,
         YMZZC_RZRQ,
         YMDBXJ_RZRQ,
         YMDBGPSZ_RZRQ)
        SELECT B.YF,
               B.U_ID,
               B.YS_ID,
               B.YYB,
               B.GXLX,
               B.YCZZC,
               B.YCZZC_RMB,
               B.YCZZC_HKD,
               B.YCZZC_USD,
               B.YMZZC,
               B.YMZZC_RMB,
               B.YMZZC_HKD,
               B.YMZZC_USD,
               B.YMQTZC_RMB,
               B.YMQTZC_HKD,
               B.YMQTZC_USD,
               B.YMZJYE_RMB,
               B.YMZJYE_HKD,
               B.YMZJYE_USD,
               B.YMZQSZ,
               B.YMZQSZ_RMB,
               B.YMZQSZ_HKD,
               B.YMZQSZ_USD,
               B.YMZQSZ_ZB,
               B.YMZQSZ_HAZB,
               B.YMZQSZ_SAZB,
               B.YMZQSZ_ZXB,
               B.YMZQSZ_CYB,
               B.YMZQSZ_HB,
               B.YMZQSZ_SB,
               B.YMZQSZ_SB_A,
               B.YMZQSZ_SB_B,
               B.YMZQSZ_FBSJJ,
               B.YMZQSZ_ETF,
               B.YMZQSZ_LOF,
               B.YMZQSZ_SZJJT,
               B.YMZQSZ_DXJJ,
               B.YMZQSZ_JRCP,
               B.YMZQSZ_QZ,
               B.YMZQSZ_GZ,
               B.YMZQSZ_GSZ,
               B.YMZQSZ_KZZ,
               B.YMZQSZ_SG,
               B.YMZQSZ_QT,
               B.RJZZC,
               B.RJZC_RMB,
               B.RJZC_HKD,
               B.RJZC_USD,
               B.RJZQSZ,
               B.RJZQSZ_RMB,
               B.RJZQSZ_HKD,
               B.RJZQSZ_USD,
               B.RJZQSZ_ZB,
               B.RJZQSZ_HAZB,
               B.RJZQSZ_SAZB,
               B.RJZQSZ_ZXB,
               B.RJZQSZ_CYB,
               B.RJZQSZ_HB,
               B.RJZQSZ_SB,
               B.RJZQSZ_SB_A,
               B.RJZQSZ_SB_B,
               B.RJZQSZ_FBSJJ,
               B.RJZQSZ_ETF,
               B.RJZQSZ_LOF,
               B.RJZQSZ_SZJJT,
               B.RJZQSZ_DXJJ,
               B.RJZQSZ_JRCP,
               B.RJZQSZ_QZ,
               B.RJZQSZ_GZ,
               B.RJZQSZ_GSQYZ,
               B.RJZQSZ_KZZ,
               B.RJZQSZ_SG,
               B.RJZQSZ_QT,
               B.CRJE,
               B.CRJE_RMB,
               B.CRJE_USD,
               B.CRJE_HKD,
               B.QCJE,
               B.QCJE_RMB,
               B.QCJE_USD,
               B.QCJE_HKD,
               B.ZRZQSZ,
               B.ZD_RMB,
               B.ZD_USD,
               B.ZTGZR_RMB,
               B.ZTGZR_HKD,
               B.ZCZQSZ,
               B.CZD_RMB,
               B.CZD_USD,
               B.ZTGZC_RMB,
               B.ZTGZC_HKD,
               B.DYYK,
               NVL(C.FZ_ZZC, 0) AS FZZZC,
               NVL(C.BG_ZZC, 0) AS BGZZC,
               B.LXJS,
               B.LCSR,
               B.RJZFZ,
               B.RJZZC_RZRQ,
               B.RJDBXJ_RZRQ,
               B.RJDBGPSZ_RZRQ,
               B.FLTZC,
               B.ZTZC,
               B.ZQZC,
               B.DYPSZ,
               B.SZXZJE,
               B.ZFZ,
               B.HLCS_HKD,
               B.HLCS_USD,
               B.YMZFZ_RZRQ,
               B.YMZZC_RZRQ,
               B.YMDBXJ_RZRQ,
               B.YMDBGPSZ_RZRQ
          FROM (SELECT VN_TJYF AS YF,
                       CON_ORG_LVL || '-' || GX.TD_ID U_ID,
                       GX.TD_ID YS_ID,
                       GX.TD_YYB AS YYB,
                       0 AS GXLX,
                       NVL(SUM(A.YCZZC * GX.SYQZ), 0) YCZZC,
                       NVL(SUM(A.YCZZC_RMB * GX.SYQZ), 0) YCZZC_RMB,
                       NVL(SUM(A.YCZZC_HKD * GX.SYQZ), 0) YCZZC_HKD,
                       NVL(SUM(A.YCZZC_USD * GX.SYQZ), 0) YCZZC_USD,
                       NVL(SUM(A.YMZZC * GX.SYQZ), 0) YMZZC,
                       NVL(SUM(A.YMZZC_RMB * GX.SYQZ), 0) YMZZC_RMB,
                       NVL(SUM(A.YMZZC_HKD * GX.SYQZ), 0) YMZZC_HKD,
                       NVL(SUM(A.YMZZC_USD * GX.SYQZ), 0) YMZZC_USD,
                       NVL(SUM(A.YMQTZC_RMB * GX.SYQZ), 0) YMQTZC_RMB,
                       NVL(SUM(A.YMQTZC_HKD * GX.SYQZ), 0) YMQTZC_HKD,
                       NVL(SUM(A.YMQTZC_USD * GX.SYQZ), 0) YMQTZC_USD,
                       NVL(SUM(A.YMZJYE_RMB * GX.SYQZ), 0) YMZJYE_RMB,
                       NVL(SUM(A.YMZJYE_HKD * GX.SYQZ), 0) YMZJYE_HKD,
                       NVL(SUM(A.YMZJYE_USD * GX.SYQZ), 0) YMZJYE_USD,
                       NVL(SUM(A.YMZQSZ * GX.SYQZ), 0) YMZQSZ,
                       NVL(SUM(A.YMZQSZ_RMB * GX.SYQZ), 0) YMZQSZ_RMB,
                       NVL(SUM(A.YMZQSZ_HKD * GX.SYQZ), 0) YMZQSZ_HKD,
                       NVL(SUM(A.YMZQSZ_USD * GX.SYQZ), 0) YMZQSZ_USD,
                       NVL(SUM(A.YMZQSZ_ZB * GX.SYQZ), 0) YMZQSZ_ZB,
                       NVL(SUM(A.YMZQSZ_HAZB * GX.SYQZ), 0) YMZQSZ_HAZB,
                       NVL(SUM(A.YMZQSZ_SAZB * GX.SYQZ), 0) YMZQSZ_SAZB,
                       NVL(SUM(A.YMZQSZ_ZXB * GX.SYQZ), 0) YMZQSZ_ZXB,
                       NVL(SUM(A.YMZQSZ_CYB * GX.SYQZ), 0) YMZQSZ_CYB,
                       NVL(SUM(A.YMZQSZ_HB * GX.SYQZ), 0) YMZQSZ_HB,
                       NVL(SUM(A.YMZQSZ_SB * GX.SYQZ), 0) YMZQSZ_SB,
                       NVL(SUM(A.YMZQSZ_SB_A * GX.SYQZ), 0) YMZQSZ_SB_A,
                       NVL(SUM(A.YMZQSZ_SB_B * GX.SYQZ), 0) YMZQSZ_SB_B,
                       NVL(SUM(A.YMZQSZ_FBSJJ * GX.SYQZ), 0) YMZQSZ_FBSJJ,
                       NVL(SUM(A.YMZQSZ_ETF * GX.SYQZ), 0) YMZQSZ_ETF,
                       NVL(SUM(A.YMZQSZ_LOF * GX.SYQZ), 0) YMZQSZ_LOF,
                       NVL(SUM(A.YMZQSZ_SZJJT * GX.SYQZ), 0) YMZQSZ_SZJJT,
                       NVL(SUM(A.YMZQSZ_DXJJ * GX.SYQZ), 0) YMZQSZ_DXJJ,
                       NVL(SUM(A.YMZQSZ_JRCP * GX.SYQZ), 0) YMZQSZ_JRCP,
                       NVL(SUM(A.YMZQSZ_QZ * GX.SYQZ), 0) YMZQSZ_QZ,
                       NVL(SUM(A.YMZQSZ_GZ * GX.SYQZ), 0) YMZQSZ_GZ,
                       NVL(SUM(A.YMZQSZ_GSZ * GX.SYQZ), 0) YMZQSZ_GSZ,
                       NVL(SUM(A.YMZQSZ_KZZ * GX.SYQZ), 0) YMZQSZ_KZZ,
                       NVL(SUM(A.YMZQSZ_SG * GX.SYQZ), 0) YMZQSZ_SG,
                       NVL(SUM(A.YMZQSZ_QT * GX.SYQZ), 0) YMZQSZ_QT,
                       NVL(SUM(A.RJZZC * GX.SYQZ), 0) RJZZC,
                       NVL(SUM(A.RJZC_RMB * GX.SYQZ), 0) RJZC_RMB,
                       NVL(SUM(A.RJZC_HKD * GX.SYQZ), 0) RJZC_HKD,
                       NVL(SUM(A.RJZC_USD * GX.SYQZ), 0) RJZC_USD,
                       NVL(SUM(A.RJZQSZ * GX.SYQZ), 0) RJZQSZ,
                       NVL(SUM(A.RJZQSZ_RMB * GX.SYQZ), 0) RJZQSZ_RMB,
                       NVL(SUM(A.RJZQSZ_HKD * GX.SYQZ), 0) RJZQSZ_HKD,
                       NVL(SUM(A.RJZQSZ_USD * GX.SYQZ), 0) RJZQSZ_USD,
                       NVL(SUM(A.RJZQSZ_ZB * GX.SYQZ), 0) RJZQSZ_ZB,
                       NVL(SUM(A.RJZQSZ_HAZB * GX.SYQZ), 0) RJZQSZ_HAZB,
                       NVL(SUM(A.RJZQSZ_SAZB * GX.SYQZ), 0) RJZQSZ_SAZB,
                       NVL(SUM(A.RJZQSZ_ZXB * GX.SYQZ), 0) RJZQSZ_ZXB,
                       NVL(SUM(A.RJZQSZ_CYB * GX.SYQZ), 0) RJZQSZ_CYB,
                       NVL(SUM(A.RJZQSZ_HB * GX.SYQZ), 0) RJZQSZ_HB,
                       NVL(SUM(A.RJZQSZ_SB * GX.SYQZ), 0) RJZQSZ_SB,
                       NVL(SUM(A.RJZQSZ_SB_A * GX.SYQZ), 0) RJZQSZ_SB_A,
                       NVL(SUM(A.RJZQSZ_SB_B * GX.SYQZ), 0) RJZQSZ_SB_B,
                       NVL(SUM(A.RJZQSZ_FBSJJ * GX.SYQZ), 0) RJZQSZ_FBSJJ,
                       NVL(SUM(A.RJZQSZ_ETF * GX.SYQZ), 0) RJZQSZ_ETF,
                       NVL(SUM(A.RJZQSZ_LOF * GX.SYQZ), 0) RJZQSZ_LOF,
                       NVL(SUM(A.RJZQSZ_SZJJT * GX.SYQZ), 0) RJZQSZ_SZJJT,
                       NVL(SUM(A.RJZQSZ_DXJJ * GX.SYQZ), 0) RJZQSZ_DXJJ,
                       NVL(SUM(A.RJZQSZ_JRCP * GX.SYQZ), 0) RJZQSZ_JRCP,
                       NVL(SUM(A.RJZQSZ_QZ * GX.SYQZ), 0) RJZQSZ_QZ,
                       NVL(SUM(A.RJZQSZ_GZ * GX.SYQZ), 0) RJZQSZ_GZ,
                       NVL(SUM(A.RJZQSZ_GSQYZ * GX.SYQZ), 0) RJZQSZ_GSQYZ,
                       NVL(SUM(A.RJZQSZ_KZZ * GX.SYQZ), 0) RJZQSZ_KZZ,
                       NVL(SUM(A.RJZQSZ_SG * GX.SYQZ), 0) RJZQSZ_SG,
                       NVL(SUM(A.RJZQSZ_QT * GX.SYQZ), 0) RJZQSZ_QT,
                       NVL(SUM(A.CRJE * GX.SYQZ), 0) CRJE,
                       NVL(SUM(A.CRJE_RMB * GX.SYQZ), 0) CRJE_RMB,
                       NVL(SUM(A.CRJE_USD * GX.SYQZ), 0) CRJE_USD,
                       NVL(SUM(A.CRJE_HKD * GX.SYQZ), 0) CRJE_HKD,
                       NVL(SUM(A.QCJE * GX.SYQZ), 0) QCJE,
                       NVL(SUM(A.QCJE_RMB * GX.SYQZ), 0) QCJE_RMB,
                       NVL(SUM(A.QCJE_USD * GX.SYQZ), 0) QCJE_USD,
                       NVL(SUM(A.QCJE_HKD * GX.SYQZ), 0) QCJE_HKD,
                       NVL(SUM(A.ZRZQSZ * GX.SYQZ), 0) ZRZQSZ,
                       NVL(SUM(A.ZD_RMB * GX.SYQZ), 0) ZD_RMB,
                       NVL(SUM(A.ZD_USD * GX.SYQZ), 0) ZD_USD,
                       NVL(SUM(A.ZTGZR_RMB * GX.SYQZ), 0) ZTGZR_RMB,
                       NVL(SUM(A.ZTGZR_HKD * GX.SYQZ), 0) ZTGZR_HKD,
                       NVL(SUM(A.ZCZQSZ * GX.SYQZ), 0) ZCZQSZ,
                       NVL(SUM(A.CZD_RMB * GX.SYQZ), 0) CZD_RMB,
                       NVL(SUM(A.CZD_USD * GX.SYQZ), 0) CZD_USD,
                       NVL(SUM(A.ZTGZC_RMB * GX.SYQZ), 0) ZTGZC_RMB,
                       NVL(SUM(A.ZTGZC_HKD * GX.SYQZ), 0) ZTGZC_HKD,
                       NVL(SUM(A.DYYK * GX.SYQZ), 0) DYYK,
                       NVL(SUM(A.FZZZC_30 * GX.SYQZ), 0) FZZZC_30,
                       NVL(SUM(A.BGZZC_30 * GX.SYQZ), 0) BGZZC_30,
                       NVL(SUM(A.LXJS * GX.SYQZ), 0) LXJS,
                       NVL(SUM(A.LCSR * GX.SYQZ), 0) LCSR,
                       NVL(SUM(A.RJZFZ * GX.SYQZ), 0) RJZFZ,
                       NVL(SUM(A.RJZZC_RZRQ * GX.SYQZ), 0) RJZZC_RZRQ,
                       NVL(SUM(A.RJDBXJ_RZRQ * GX.SYQZ), 0) RJDBXJ_RZRQ,
                       NVL(SUM(A.RJDBGPSZ_RZRQ * GX.SYQZ), 0) RJDBGPSZ_RZRQ,
                       NVL(SUM(A.FLTZC * GX.SYQZ), 0) FLTZC,
                       NVL(SUM(A.ZTZC * GX.SYQZ), 0) ZTZC,
                       NVL(SUM(A.ZQZC * GX.SYQZ), 0) ZQZC,
                       NVL(SUM(A.DYPSZ * GX.SYQZ), 0) DYPSZ,
                       NVL(SUM(A.SZXZJE * GX.SYQZ), 0) SZXZJE,
                       NVL(SUM(A.ZFZ * GX.SYQZ), 0) ZFZ,
                       NVL(A.HLCS_HKD, 0) HLCS_HKD,
                       NVL(A.HLCS_USD, 0) HLCS_USD,
                       NVL(SUM(A.YMZFZ_RZRQ * GX.SYQZ), 0) YMZFZ_RZRQ,
                       NVL(SUM(A.YMZZC_RZRQ * GX.SYQZ), 0) YMZZC_RZRQ,
                       NVL(SUM(A.YMDBXJ_RZRQ * GX.SYQZ), 0) YMDBXJ_RZRQ,
                       NVL(SUM(A.YMDBGPSZ_RZRQ * GX.SYQZ), 0) YMDBGPSZ_RZRQ
                  FROM DSC_STAT.T_STAT_KHZC_Y A
                  JOIN DSC_STAT.TMP_T_TD_KHGX_UNIQUE GX
                    ON GX.KHH = A.KHH
                 WHERE A.YF = VN_TJYF
                 GROUP BY GX.TD_ID, GX.TD_YYB, A.HLCS_HKD, A.HLCS_USD) B
         INNER JOIN (SELECT TD_ID, MAX(ZZC) FZ_ZZC, MIN(ZZC) BG_ZZC
                       FROM (SELECT A.RQ, GX.TD_ID, SUM(A.ZZC * GX.SYQZ) AS ZZC
                               FROM DSC_STAT.T_STAT_KHZC_R A
                              INNER JOIN DSC_STAT.TMP_T_TD_KHGX_UNIQUE GX
                                 ON GX.KHH = A.KHH
                              WHERE A.RQ < = VN_TJRQ
                                AND A.RQ > = VN_FIRST_DAY
                              GROUP BY A.RQ, GX.TD_ID)
                      GROUP BY TD_ID) C
            ON B.YS_ID = C.TD_ID;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_TD_ZC_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_XHKH(O_N_CODE OUT INT,
                                                 O_S_NOTE OUT VARCHAR2,
                                                 I_N_TJRQ IN INT,
                                                 I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   销户客户指标统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：



         算法：




         注意事项：




         数据源：
                 DSC_BAS.T_KHXX_JJYW     客户信息表-经纪业务
                 DSC_STAT.T_STAT_KHZC_R    客户资产日表
                 DSC_STAT.T_STAT_KHJYSR_R  客户交易与收入日表
         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                    操作
         陈建平      2012/03/20                  创建
         陈建平      2012/03/26                  修改最近交易日
         胡阳明      2012/04/10                  最近N个交易日是指：
                                                 统计日销户人的前N个交易日资产交易量，而不是最近N的所有销户人
         胡阳明      2012/05/21                  根据上海证券的报表需求，将指标折分成按币种存放和计算
         陈德铸      2012/08/10                  修改：1)将销户客户指标回溯时点改为走系统参数配置PUB_SYS.T_SYS_PARAMS
                                                 根据上海证券应用需求，配置为往前推一个自然月进行销户客户指标计算
                                                       2)为满足经营分析对于销户客户专项分析，增加日均证券市值、日均资金余额、股基交易量
         林伟        2012/11/13                  修改,增加删除之前客户销户后又做了取消销户动作的数据，这些客户的销户日期安按最新的来统计
         胡阳明      2013/02/28                  修改：排掉重复记录，WHERE T1.KHH NOT IN (SELECT KHH FROM DSC_STAT.T_STAT_XHKH)
         林伟        2013/05/22                  修改：排除重复的销户记录，在插入数据时已经判断处理
         林伟        2013/05/23                  修改：修改DSC_BAS.T_KHXX_JJYW表的扫描方式，通过XHRQ走索引,另外获取销户客户
                                                 前一个月的交易日天数时要考虑开户日期：AND JYR BETWEEN KHRQ AND XHRQ
         林伟        2013/06/20                  修改：增加信用账户资产和交易数据
         林伟        2013/08/27                  修改：增加信用账户资产和交易数据时得进行汇总处理
         吴邦杰      2015/07/14                  修改：优化过程
         陈德铸      2015/07/22                  修改：DSC_STAT.T_STAT_ZJJYR表变更，所以需要调整程序
         吴邦杰      2015/08/27                  修改：优化过程，数据源表从日表出，避免跨分区查询，调整过程分段生成统计数据

    */
    VS_PROC_NAME     VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID         INT; --LOG 表记录ID
    VN_ROWCOUNT      INT; --记录数
    VN_STEP          INT; --动作步数
    VN_PROC_NO       PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER          VARCHAR2(30);
    VN_TJRQ          NUMBER(8) := I_N_TJRQ; --统计日期
    VN_N_DATE        NUMBER(8); --前N个交易日
    VN_N_DATE_PYTYPE VARCHAR2(12);
    VN_N_DATE_PYZ    NUMBER(4);
    VN_DATE_PRE      NUMBER(8); --非交易日销户日期

BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_XHKH';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --获取非交易日销户日期
    VN_DATE_PRE := TO_CHAR(TO_DATE(DSC_CFG.F_GET_JYR_DATE(VN_TJRQ, -1), 'YYYYMMDD') + 1,
                           'YYYYMMDD');

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --获取销户客户指标计算回溯时点
    BEGIN
        SELECT TRIM(SUBSTR(T.PARAM_VAL, 1, INSTR(T.PARAM_VAL, ':') - 1)) PYTYP,
               TRIM(SUBSTR(T.PARAM_VAL, INSTR(T.PARAM_VAL, ':') + 1)) PYZ
          INTO VN_N_DATE_PYTYPE, VN_N_DATE_PYZ
          FROM PUB_SYS.T_SYS_PARAM T
         WHERE T.PARAM_CODE = 'XHKH_HSRQ';

        IF REGEXP_LIKE(':' || UPPER(VN_N_DATE_PYTYPE) || ':',
                       ':' || '(JYR|ZRR|Y|N)' || ':') AND
           REGEXP_LIKE(VN_N_DATE_PYZ, '-{0,1}[[:digit:]]{1,}') THEN
            NULL;
        ELSE
            O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
            O_S_NOTE := '获取销户客户回溯日期失败，请检查系统参数设置表PUB_SYS.T_SYS_PARAM！';
            --记录日志——成功结束
            PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                               I_N_LOGID          => VN_LOGID,
                               I_S_USER           => VS_USER,
                               I_S_PROCNAME       => VS_PROC_NAME,
                               I_N_TJRQ           => VN_TJRQ,
                               I_N_RETCODE        => O_N_CODE,
                               I_S_RETNOTE        => O_S_NOTE,
                               I_S_FLAG           => I_N_REDO,
                               I_N_INSERTORUPDATE => 1);
            RETURN;
        END IF;

        IF UPPER(VN_N_DATE_PYTYPE) = 'JYR' THEN
            VN_N_DATE := DSC_CFG.F_GET_JYR_DATE(I_N_TJRQ, -VN_N_DATE_PYZ);
        ELSIF UPPER(VN_N_DATE_PYTYPE) = 'ZRR' THEN
            VN_N_DATE := TO_CHAR(TO_DATE(I_N_TJRQ, 'YYYYMMDD') - VN_N_DATE_PYZ,
                                 'YYYYMMDD');
        ELSIF UPPER(VN_N_DATE_PYTYPE) = 'Y' THEN
            VN_N_DATE := TO_CHAR(ADD_MONTHS(TO_DATE(I_N_TJRQ, 'YYYYMMDD'), -VN_N_DATE_PYZ),
                                 'YYYYMMDD');
        ELSIF UPPER(VN_N_DATE_PYTYPE) = 'N' THEN
            VN_N_DATE := (SUBSTR(I_N_TJRQ, 1, 4) - VN_N_DATE_PYZ) ||
                         SUBSTR(I_N_TJRQ, 5, 4);
        END IF;
    END;

    --删除之前客户销户后又做了取消销户动作的数据，这些客户的销户日期安按最新的来统计
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_XHKH]目标表的重复销户数据！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    DELETE FROM DSC_STAT.T_STAT_XHKH T
     WHERE EXISTS (SELECT 1
              FROM DSC_BAS.T_KHXX_JJYW T1
             WHERE T.KHH = T1.KHH
               AND T1.KHZT = '3'
               AND T1.XHRQ BETWEEN VN_DATE_PRE AND I_N_TJRQ);
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;

    --记录日志明细——结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_XHKH]目标表的重复销户数据！',
                              I_S_CHANGEDESC     => '[DSC_STAT.P_STAT_XHKH]表删除' ||
                                                    VN_ROWCOUNT || '条重复销户记录！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    --重做删除原数据
    IF I_N_REDO = 1 THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_XHKH]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        -------增量删除
        DELETE FROM DSC_STAT.T_STAT_XHKH T WHERE XHRQ BETWEEN VN_DATE_PRE AND VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;

        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.P_STAT_XHKH]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.P_STAT_XHKH]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --1：插入销户客户统计数据
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将销户客户生成到临时表[DSC_STAT.TMP_COMMON]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_COMMON';
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_COMMON
        (KHH,
         YYB,
         N1, --GRJG,
         N2, --KHRQ,
         N3, --XHRQ,
         N4, --ts
         N5, --ZJJYR
         N6 --SSCJYRQ
         )
        SELECT T.KHH,
               T.YYB,
               T.GRJG,
               T.KHRQ,
               T.XHRQ,
               (SELECT COUNT(DISTINCT JYR)
                  FROM DSC_CFG.T_XTJYR
                 WHERE JYR BETWEEN VN_N_DATE AND T.XHRQ
                   AND JYR BETWEEN T.KHRQ AND T.XHRQ) AS TS, --销户前一个月交易日的交易天数
               D.ZJJYR,
               D.SSCJYRQ
          FROM DSC_BAS.T_KHXX_JJYW T,
               (SELECT KHH, YYB, ZJJYR, SSCJYRQ
                  FROM DSC_STAT.T_STAT_ZJJYR
                 WHERE ZHLB = '1' --取普通账户的
                ) D
         WHERE T.KHH = D.KHH(+)
           AND T.KHZT = '3'
           AND T.XHRQ BETWEEN VN_DATE_PRE AND VN_TJRQ;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将销户客户生成到临时表[DSC_STAT.TMP_COMMON]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --2：清空临时表数据
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表数据[DSC_STAT.TMP_T_STAT_XHKH]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_XHKH';
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表数据[DSC_STAT.TMP_T_STAT_XHKH]',
                              I_S_CHANGEDESC     => '清空完毕！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3：将客户资产数据(普通账户)插入到临时表中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将客户资产数据(普通账户)插入到临时表[DSC_STAT.TMP_T_STAT_XHKH]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    IF SUBSTR(VN_N_DATE, 1, 6) = SUBSTR(VN_TJRQ, 1, 6) THEN

        --如果开始日期和结束日期在同一个月份，则直接从日表一个分区取数据
        INSERT /*+ APPEND*/
        INTO DSC_STAT.TMP_T_STAT_XHKH
            (KHH,
             YYB,
             GRJG,
             XHRQ,
             CRJE_RMB,
             CRJE_HKD,
             CRJE_USD,
             QCJE_RMB,
             QCJE_HKD,
             QCJE_USD,
             JLCZJ,
             ZRZQSZ,
             ZD_RMB,
             ZD_USD,
             ZTGZR_RMB,
             ZTGZR_HKD,
             ZCZQSZ,
             CZD_RMB,
             CZD_USD,
             ZTGZC_RMB,
             ZTGZC_HKD,
             JLCZQSZ,
             RJZC, --临时表保存是累计值，后面做除法处理
             RJZJYE, --临时表保存是累计值，后面做除法处理
             RJZQSZ --临时表保存是累计值，后面做除法处理
             )
            SELECT KHH,
                   1 AS YYB, --临时表不允许为空，就给个1，反正后面不会用到
                   1 AS GRJG, --临时表不允许为空，就给个1，反正后面不会用到
                   0 AS XHRQ, --临时表不允许为空，就给个0，反正后面不会用到
                   SUM(CRJE_RMB) AS CRJE_RMB,
                   SUM(CRJE_HKD) AS CRJE_HKD,
                   SUM(CRJE_USD) AS CRJE_USD,
                   SUM(QCJE_RMB) AS QCJE_RMB,
                   SUM(QCJE_HKD) AS QCJE_HKD,
                   SUM(QCJE_USD) AS QCJE_USD,
                   SUM(CRJE_RMB + CRJE_HKD * HLCS_HKD + CRJE_USD * HLCS_USD) -
                   SUM(QCJE_RMB + QCJE_HKD * HLCS_HKD + QCJE_USD * HLCS_USD) AS JLCZJ,
                   SUM(ZRZQSZ) AS ZRZQSZ,
                   SUM(ZD_RMB) AS ZD_RMB,
                   SUM(ZD_USD) AS ZD_USD,
                   SUM(ZTGZR_RMB) AS ZTGZR_RMB,
                   SUM(ZTGZR_HKD) AS ZTGZR_HKD,
                   SUM(ZCZQSZ) AS ZCZQSZ,
                   SUM(CZD_RMB) AS CZD_RMB,
                   SUM(CZD_USD) AS CZD_USD,
                   SUM(ZTGZC_RMB) AS ZTGZC_RMB,
                   SUM(ZTGZC_HKD) AS ZTGZC_HKD,
                   SUM(ZRZQSZ - ZCZQSZ) AS JLCZQSZ,
                   CASE
                       WHEN COUNT(KHH) = 0 THEN
                        0
                       ELSE
                        SUM(ZZC) / COUNT(KHH)
                   END RJZZC,
                   CASE
                       WHEN COUNT(KHH) = 0 THEN
                        0
                       ELSE
                        SUM(ZJYE_RMB + ZJYE_HKD * HLCS_HKD + ZJYE_USD * HLCS_USD) / COUNT(KHH)
                   END RJZJYE,
                   CASE
                       WHEN COUNT(KHH) = 0 THEN
                        0
                       ELSE
                        SUM(ZQSZ_RMB + ZQSZ_HKD * HLCS_HKD + ZQSZ_USD * HLCS_USD) / COUNT(KHH)
                   END RJZQSZ
              FROM DSC_STAT.T_STAT_KHZC_R T
             WHERE T.RQ BETWEEN VN_N_DATE AND VN_TJRQ
               AND EXISTS (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
             GROUP BY KHH;

    ELSE
        --如果开始日期和结束日期不在同一个月份，则从日表的两个分区取数据
        INSERT /*+ APPEND*/
        INTO DSC_STAT.TMP_T_STAT_XHKH
            (KHH,
             YYB,
             GRJG,
             XHRQ,
             CRJE_RMB,
             CRJE_HKD,
             CRJE_USD,
             QCJE_RMB,
             QCJE_HKD,
             QCJE_USD,
             JLCZJ,
             ZRZQSZ,
             ZD_RMB,
             ZD_USD,
             ZTGZR_RMB,
             ZTGZR_HKD,
             ZCZQSZ,
             CZD_RMB,
             CZD_USD,
             ZTGZC_RMB,
             ZTGZC_HKD,
             JLCZQSZ,
             RJZC, --临时表保存是累计值，后面做除法处理
             RJZJYE, --临时表保存是累计值，后面做除法处理
             RJZQSZ --临时表保存是累计值，后面做除法处理
             )
            SELECT KHH,
                   1 AS YYB, --临时表不允许为空，就给个1，反正后面不会用到
                   1 AS GRJG, --临时表不允许为空，就给个1，反正后面不会用到
                   0 AS XHRQ, --临时表不允许为空，就给个0，反正后面不会用到
                   SUM(CRJE_RMB) AS CRJE_RMB,
                   SUM(CRJE_HKD) AS CRJE_HKD,
                   SUM(CRJE_USD) AS CRJE_USD,
                   SUM(QCJE_RMB) AS QCJE_RMB,
                   SUM(QCJE_HKD) AS QCJE_HKD,
                   SUM(QCJE_USD) AS QCJE_USD,
                   SUM(JLCZJ) AS JLCZJ,
                   SUM(ZRZQSZ) AS ZRZQSZ,
                   SUM(ZD_RMB) AS ZD_RMB,
                   SUM(ZD_USD) AS ZD_USD,
                   SUM(ZTGZR_RMB) AS ZTGZR_RMB,
                   SUM(ZTGZR_HKD) AS ZTGZR_HKD,
                   SUM(ZCZQSZ) AS ZCZQSZ,
                   SUM(CZD_RMB) AS CZD_RMB,
                   SUM(CZD_USD) AS CZD_USD,
                   SUM(ZTGZC_RMB) AS ZTGZC_RMB,
                   SUM(ZTGZC_HKD) AS ZTGZC_HKD,
                   SUM(JLCZQSZ) AS JLCZQSZ,
                   CASE
                       WHEN SUM(JYRTS) = 0 THEN
                        0
                       ELSE
                        SUM(ZZC) / SUM(JYRTS)
                   END AS RJZC,
                   CASE
                       WHEN SUM(JYRTS) = 0 THEN
                        0
                       ELSE
                        SUM(ZJYE) / SUM(JYRTS)
                   END AS RJZJYE,
                   CASE
                       WHEN SUM(JYRTS) = 0 THEN
                        0
                       ELSE
                        SUM(ZQSZ) / SUM(JYRTS)
                   END AS RJZQSZ
              FROM (SELECT KHH,
                           SUM(CRJE_RMB) AS CRJE_RMB,
                           SUM(CRJE_HKD) AS CRJE_HKD,
                           SUM(CRJE_USD) AS CRJE_USD,
                           SUM(QCJE_RMB) AS QCJE_RMB,
                           SUM(QCJE_HKD) AS QCJE_HKD,
                           SUM(QCJE_USD) AS QCJE_USD,
                           SUM(CRJE_RMB + CRJE_HKD * HLCS_HKD + CRJE_USD * HLCS_USD) -
                           SUM(QCJE_RMB + QCJE_HKD * HLCS_HKD + QCJE_USD * HLCS_USD) AS JLCZJ,
                           SUM(ZRZQSZ) AS ZRZQSZ,
                           SUM(ZD_RMB) AS ZD_RMB,
                           SUM(ZD_USD) AS ZD_USD,
                           SUM(ZTGZR_RMB) AS ZTGZR_RMB,
                           SUM(ZTGZR_HKD) AS ZTGZR_HKD,
                           SUM(ZCZQSZ) AS ZCZQSZ,
                           SUM(CZD_RMB) AS CZD_RMB,
                           SUM(CZD_USD) AS CZD_USD,
                           SUM(ZTGZC_RMB) AS ZTGZC_RMB,
                           SUM(ZTGZC_HKD) AS ZTGZC_HKD,
                           SUM(ZRZQSZ - ZCZQSZ) AS JLCZQSZ,
                           SUM(ZZC) ZZC,
                           SUM(ZJYE_RMB + ZJYE_HKD * HLCS_HKD + ZJYE_USD * HLCS_USD) ZJYE,
                           SUM(ZQSZ_RMB + ZQSZ_HKD * HLCS_HKD + ZQSZ_USD * HLCS_USD) ZQSZ,
                           COUNT(KHH) JYRTS
                      FROM DSC_STAT.T_STAT_KHZC_R T
                     WHERE T.RQ BETWEEN SUBSTR(VN_TJRQ, 1, 6) || '01' AND VN_TJRQ
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH
                    UNION ALL
                    SELECT KHH,
                           SUM(CRJE_RMB) AS CRJE_RMB,
                           SUM(CRJE_HKD) AS CRJE_HKD,
                           SUM(CRJE_USD) AS CRJE_USD,
                           SUM(QCJE_RMB) AS QCJE_RMB,
                           SUM(QCJE_HKD) AS QCJE_HKD,
                           SUM(QCJE_USD) AS QCJE_USD,
                           SUM(CRJE_RMB + CRJE_HKD * HLCS_HKD + CRJE_USD * HLCS_USD) -
                           SUM(QCJE_RMB + QCJE_HKD * HLCS_HKD + QCJE_USD * HLCS_USD) AS JLCZJ,
                           SUM(ZRZQSZ) AS ZRZQSZ,
                           SUM(ZD_RMB) AS ZD_RMB,
                           SUM(ZD_USD) AS ZD_USD,
                           SUM(ZTGZR_RMB) AS ZTGZR_RMB,
                           SUM(ZTGZR_HKD) AS ZTGZR_HKD,
                           SUM(ZCZQSZ) AS ZCZQSZ,
                           SUM(CZD_RMB) AS CZD_RMB,
                           SUM(CZD_USD) AS CZD_USD,
                           SUM(ZTGZC_RMB) AS ZTGZC_RMB,
                           SUM(ZTGZC_HKD) AS ZTGZC_HKD,
                           SUM(ZRZQSZ - ZCZQSZ) AS JLCZQSZ,
                           SUM(ZZC) ZZC,
                           SUM(ZJYE_RMB + ZJYE_HKD * HLCS_HKD + ZJYE_USD * HLCS_USD) ZJYE,
                           SUM(ZQSZ_RMB + ZQSZ_HKD * HLCS_HKD + ZQSZ_USD * HLCS_USD) ZQSZ,
                           COUNT(KHH) JYRTS
                      FROM DSC_STAT.T_STAT_KHZC_R T
                     WHERE T.RQ BETWEEN VN_N_DATE AND SUBSTR(VN_N_DATE, 1, 6) || '31'
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH)
             GROUP BY KHH;
    END IF;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将客户资产数据(普通账户)插入到临时表[DSC_STAT.TMP_T_STAT_XHKH]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --4：将客户资产数据(信用账户)插入到临时表中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将客户资产数据(信用账户)插入到临时表[DSC_STAT.TMP_T_STAT_XHKH]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    IF SUBSTR(VN_N_DATE, 1, 6) = SUBSTR(VN_TJRQ, 1, 6) THEN

        --如果开始日期和结束日期在同一个月份，则直接从日表一个分区取数据
        INSERT /*+ APPEND*/
        INTO DSC_STAT.TMP_T_STAT_XHKH
            (KHH,
             YYB,
             GRJG,
             XHRQ,
             CRJE_RMB,
             QCJE_RMB,
             JLCZJ,
             ZRZQSZ,
             ZCZQSZ,
             JLCZQSZ,
             RJZC, --临时表保存是累计值，后面做除法处理
             RJZJYE, --临时表保存是累计值，后面做除法处理
             RJZQSZ --临时表保存是累计值，后面做除法处理
             )
            SELECT KHH,
                   1 AS YYB, --临时表不允许为空，就给个1，反正后面不会用到
                   1 AS GRJG, --临时表不允许为空，就给个1，反正后面不会用到
                   0 AS XHRQ, --临时表不允许为空，就给个0，反正后面不会用到
                   SUM(ZRJE) AS CRJE_RMB,
                   SUM(ZCJE) AS QCJE_RMB,
                   SUM(ZRJE) - SUM(ZCJE) AS JLCZJ,
                   -SUM(T.ZCSZ) AS ZRZQSZ, --对于总体账户而言，普通账户的转入包含了从信用账户转过来的部分，所以这里要扣除掉账户间的转移，只考虑外部转入
                   -SUM(T.ZRSZ) AS ZCZQSZ, --对于总体账户而言，普通账户的转出包含了转给信用账户的部分，所以这里要扣除掉账户间的转移，只考虑外部转入
                   SUM(T.ZRSZ - T.ZCSZ) AS JLCZQSZ,
                   CASE
                       WHEN COUNT(KHH) = 0 THEN
                        0
                       ELSE
                        SUM(ZZC) / COUNT(KHH)
                   END RJZZC,
                   CASE
                       WHEN COUNT(KHH) = 0 THEN
                        0
                       ELSE
                        SUM(ZJYE) / COUNT(KHH)
                   END RJZJYE,
                   CASE
                       WHEN COUNT(KHH) = 0 THEN
                        0
                       ELSE
                        SUM(ZQSZ) / COUNT(KHH)
                   END RJZQSZ
              FROM DSC_STAT.T_STAT_RZRQ_R T
             WHERE RQ BETWEEN VN_N_DATE AND VN_TJRQ
               AND EXISTS (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
             GROUP BY KHH;
    ELSE
        --如果开始日期和结束日期不在同一个月份，则从日表的两个分区取数据

        INSERT /*+ APPEND*/
        INTO DSC_STAT.TMP_T_STAT_XHKH
            (KHH,
             YYB,
             GRJG,
             XHRQ,
             CRJE_RMB,
             QCJE_RMB,
             JLCZJ,
             ZRZQSZ,
             ZCZQSZ,
             JLCZQSZ,
             RJZC, --临时表保存是累计值，后面做除法处理
             RJZJYE, --临时表保存是累计值，后面做除法处理
             RJZQSZ --临时表保存是累计值，后面做除法处理
             )
            SELECT KHH,
                   1 AS YYB, --临时表不允许为空，就给个1，反正后面不会用到
                   1 AS GRJG, --临时表不允许为空，就给个1，反正后面不会用到
                   0 AS XHRQ, --临时表不允许为空，就给个0，反正后面不会用到
                   SUM(CRJE_RMB) AS CRJE_RMB,
                   SUM(QCJE_RMB) AS QCJE_RMB,
                   SUM(JLCZJ) AS JLCZJ,
                   SUM(ZRZQSZ) AS ZRZQSZ, --对于总体账户而言，普通账户的转入包含了从信用账户转过来的部分，所以这里要扣除掉账户间的转移，只考虑外部转入
                   SUM(ZCZQSZ) AS ZCZQSZ, --对于总体账户而言，普通账户的转出包含了转给信用账户的部分，所以这里要扣除掉账户间的转移，只考虑外部转入
                   SUM(JLCZQSZ) AS JLCZQSZ,
                   CASE
                       WHEN SUM(JYRTS) = 0 THEN
                        0
                       ELSE
                        SUM(ZZC) / SUM(JYRTS)
                   END AS RJZC,
                   CASE
                       WHEN SUM(JYRTS) = 0 THEN
                        0
                       ELSE
                        SUM(ZJYE) / SUM(JYRTS)
                   END AS RJZJYE,
                   CASE
                       WHEN SUM(JYRTS) = 0 THEN
                        0
                       ELSE
                        SUM(ZQSZ) / SUM(JYRTS)
                   END AS RJZQSZ
              FROM (SELECT KHH,
                           SUM(ZRJE) AS CRJE_RMB,
                           SUM(ZCJE) AS QCJE_RMB,
                           SUM(ZRJE) - SUM(ZCJE) AS JLCZJ,
                           -SUM(T.ZCSZ) AS ZRZQSZ, --对于总体账户而言，普通账户的转入包含了从信用账户转过来的部分，所以这里要扣除掉账户间的转移，只考虑外部转入
                           -SUM(T.ZRSZ) AS ZCZQSZ, --对于总体账户而言，普通账户的转出包含了转给信用账户的部分，所以这里要扣除掉账户间的转移，只考虑外部转入
                           SUM(T.ZRSZ - T.ZCSZ) AS JLCZQSZ,
                           SUM(ZZC) AS ZZC,
                           SUM(ZJYE) AS ZJYE,
                           SUM(ZQSZ) AS ZQSZ,
                           COUNT(KHH) AS JYRTS
                      FROM DSC_STAT.T_STAT_RZRQ_R T
                     WHERE RQ BETWEEN SUBSTR(VN_TJRQ, 1, 6) || '01' AND VN_TJRQ
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH
                    UNION ALL
                    SELECT KHH,
                           SUM(ZRJE) AS CRJE_RMB,
                           SUM(ZCJE) AS QCJE_RMB,
                           SUM(ZRJE) - SUM(ZCJE) AS JLCZJ,
                           -SUM(T.ZCSZ) AS ZRZQSZ, --对于总体账户而言，普通账户的转入包含了从信用账户转过来的部分，所以这里要扣除掉账户间的转移，只考虑外部转入
                           -SUM(T.ZRSZ) AS ZCZQSZ, --对于总体账户而言，普通账户的转出包含了转给信用账户的部分，所以这里要扣除掉账户间的转移，只考虑外部转入
                           SUM(T.ZRSZ - T.ZCSZ) AS JLCZQSZ,
                           SUM(ZZC) AS ZZC,
                           SUM(ZJYE) AS ZJYE,
                           SUM(ZQSZ) AS ZQSZ,
                           COUNT(KHH) AS JYRTS
                      FROM DSC_STAT.T_STAT_RZRQ_R T
                     WHERE RQ BETWEEN VN_N_DATE AND SUBSTR(VN_N_DATE, 1, 6) || '31'
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH)
             GROUP BY KHH;
    END IF;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将客户资产数据(信用账户)插入到临时表[DSC_STAT.TMP_T_STAT_XHKH]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --5：将客户交易收入（普通账户+信用账户）数据插入到临时表中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将客户交易收入（普通账户+信用账户）数据插入到临时表[DSC_STAT.TMP_T_STAT_XHKH]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    IF SUBSTR(VN_N_DATE, 1, 6) = SUBSTR(VN_TJRQ, 1, 6) THEN
        --如果开始日期和结束日期在同一个月份，则直接从日表一个分区取数据
        INSERT /*+ APPEND*/
        INTO DSC_STAT.TMP_T_STAT_XHKH
            (KHH,
             YYB,
             GRJG,
             XHRQ,
             JLCZQSZ,
             JYL_RMB,
             JYL_HKD,
             JYL_USD,
             YJSR_RMB,
             YJSR_HKD,
             YJSR_USD,
             JYJ_RMB,
             JYJ_HKD,
             JYJ_USD,
             YJL,
             JYL_GJ)
            SELECT KHH,
                   1 AS YYB, --临时表不允许为空，就给个1，反正后面不会用到
                   1 AS GRJG, --临时表不允许为空，就给个1，反正后面不会用到
                   0 AS XHRQ, --临时表不允许为空，就给个0，反正后面不会用到
                   0 AS JLCZQSZ, --临时表不允许为空，就给个0
                   SUM(JYL_RMB) AS JYL_RMB,
                   SUM(JYL_HKD) AS JYL_HKD,
                   SUM(JYL_USD) AS JYL_USD,
                   SUM(YJSR_RMB) AS YJSR_RMB,
                   SUM(YJSR_HKD) AS YJSR_HKD,
                   SUM(YJSR_USD) AS YJSR_USD,
                   SUM(JYJ_RMB) AS JYJ_RMB,
                   SUM(JYJ_HKD) AS JYJ_HKD,
                   SUM(JYJ_USD) AS JYJ_USD,
                   CASE
                       WHEN SUM(ZJYL) = 0 THEN
                        0
                       ELSE
                        SUM(ZJYJ) / SUM(ZJYL) * 1000
                   END AS YJL,
                   SUM(JYL_GP) + SUM(JYL_JJ) AS JYL_GJ
              FROM (SELECT KHH,
                           SUM(JYL_HAZB + JYL_SAZB + JYL_ZXB + JYL_CYB + JYL_FBSJJ +
                               JYL_ETF + JYL_LOF + JYL_SB * HLCS_HKD + JYL_HB * HLCS_USD) AS ZJYL,
                           SUM(JYL_HAZB + JYL_SAZB + JYL_ZXB + JYL_CYB + JYL_FBSJJ +
                               JYL_ETF + JYL_LOF) AS JYL_RMB,
                           SUM(JYL_SB) AS JYL_HKD,
                           SUM(JYL_HB) AS JYL_USD,

                           SUM(JYL_HAZB + JYL_SAZB + JYL_ZXB + JYL_CYB + JYL_HB * HLCS_USD +
                               JYL_SB * HLCS_HKD + JYL_SB_A + JYL_SB_B) JYL_GP,
                           SUM(JYL_FBSJJ + JYL_ETF + JYL_LOF + JYL_SZJJT + JYL_DXJJ) JYL_JJ,
                           SUM(JYL_QZ) JYL_QZ,
                           SUM(JYL_GZ + JYL_GSQYZ + JYL_KZZ) JYL_ZQ,
                           SUM(JYL_QT) JYL_QT,

                           SUM(YJSR_HAZB + YJSR_SAZB + YJSR_ZXB + YJSR_CYB + YJSR_FBSJJ +
                               YJSR_ETF + YJSR_LOF) AS YJSR_RMB,
                           SUM(YJSR_SB) AS YJSR_HKD,
                           SUM(YJSR_HB) AS YJSR_USD,

                           SUM(JYJ_HAZB + JYJ_SAZB + JYJ_ZXB + JYJ_CYB + JYJ_FBSJJ +
                               JYJ_ETF + JYJ_LOF + JYJ_SB * HLCS_HKD + JYJ_HB * HLCS_USD) AS ZJYJ,
                           SUM(JYJ_HAZB + JYJ_SAZB + JYJ_ZXB + JYJ_CYB + JYJ_FBSJJ +
                               JYJ_ETF + JYJ_LOF) AS JYJ_RMB,
                           SUM(JYJ_SB) AS JYJ_HKD,
                           SUM(JYJ_HB) AS JYJ_USD
                      FROM DSC_STAT.T_STAT_KHJYSR_R T
                     WHERE RQ BETWEEN VN_N_DATE AND VN_TJRQ
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH
                    UNION ALL
                    SELECT KHH,
                           SUM(JYL) AS ZJYL,
                           SUM(JYL) AS JYL_RMB,
                           0 AS JYL_HKD,
                           0 AS JYL_USD,
                           0 AS JYL_GP,
                           0 AS JYL_JJ,
                           0 AS JYL_QZ,
                           0 AS JYL_ZQ,
                           0 AS JYL_QT,
                           SUM(YJ) AS YJSR_RMB,
                           0 AS YJSR_HKD,
                           0 AS YJSR_USD,
                           SUM(JYJ) AS ZJYJ,
                           SUM(JYJ) AS JYJ_RMB,
                           0 AS JYJ_HKD,
                           0 AS JYJ_USD
                      FROM DSC_STAT.T_STAT_RZRQ_R T
                     WHERE RQ BETWEEN VN_N_DATE AND VN_TJRQ
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH)
             GROUP BY KHH;

    ELSE
        --如果开始日期和结束日期不在同一个月份，则从日表的两个分区取数据
        INSERT /*+ APPEND*/
        INTO DSC_STAT.TMP_T_STAT_XHKH
            (KHH,
             YYB,
             GRJG,
             XHRQ,
             JLCZQSZ,
             JYL_RMB,
             JYL_HKD,
             JYL_USD,
             YJSR_RMB,
             YJSR_HKD,
             YJSR_USD,
             JYJ_RMB,
             JYJ_HKD,
             JYJ_USD,
             YJL,
             JYL_GJ)
            SELECT KHH,
                   1 AS YYB, --临时表不允许为空，就给个1，反正后面不会用到
                   1 AS GRJG, --临时表不允许为空，就给个1，反正后面不会用到
                   0 AS XHRQ, --临时表不允许为空，就给个0，反正后面不会用到
                   0 AS JLCZQSZ, --临时表不允许为空，就给个0
                   SUM(JYL_RMB) AS JYL_RMB,
                   SUM(JYL_HKD) AS JYL_HKD,
                   SUM(JYL_USD) AS JYL_USD,
                   SUM(YJSR_RMB) AS YJSR_RMB,
                   SUM(YJSR_HKD) AS YJSR_HKD,
                   SUM(YJSR_USD) AS YJSR_USD,
                   SUM(JYJ_RMB) AS JYJ_RMB,
                   SUM(JYJ_HKD) AS JYJ_HKD,
                   SUM(JYJ_USD) AS JYJ_USD,
                   CASE
                       WHEN SUM(ZJYL) = 0 THEN
                        0
                       ELSE
                        SUM(ZJYJ) / SUM(ZJYL) * 1000
                   END AS YJL,
                   SUM(JYL_GP) + SUM(JYL_JJ) AS JYL_GJ
              FROM (SELECT KHH,
                           SUM(JYL_HAZB + JYL_SAZB + JYL_ZXB + JYL_CYB + JYL_FBSJJ +
                               JYL_ETF + JYL_LOF + JYL_SB * HLCS_HKD + JYL_HB * HLCS_USD) AS ZJYL,
                           SUM(JYL_HAZB + JYL_SAZB + JYL_ZXB + JYL_CYB + JYL_FBSJJ +
                               JYL_ETF + JYL_LOF) AS JYL_RMB,
                           SUM(JYL_SB) AS JYL_HKD,
                           SUM(JYL_HB) AS JYL_USD,

                           SUM(JYL_HAZB + JYL_SAZB + JYL_ZXB + JYL_CYB + JYL_HB * HLCS_USD +
                               JYL_SB * HLCS_HKD + JYL_SB_A + JYL_SB_B) JYL_GP,
                           SUM(JYL_FBSJJ + JYL_ETF + JYL_LOF + JYL_SZJJT + JYL_DXJJ) JYL_JJ,
                           SUM(JYL_QZ) JYL_QZ,
                           SUM(JYL_GZ + JYL_GSQYZ + JYL_KZZ) JYL_ZQ,
                           SUM(JYL_QT) JYL_QT,

                           SUM(YJSR_HAZB + YJSR_SAZB + YJSR_ZXB + YJSR_CYB + YJSR_FBSJJ +
                               YJSR_ETF + YJSR_LOF) AS YJSR_RMB,
                           SUM(YJSR_SB) AS YJSR_HKD,
                           SUM(YJSR_HB) AS YJSR_USD,

                           SUM(JYJ_HAZB + JYJ_SAZB + JYJ_ZXB + JYJ_CYB + JYJ_FBSJJ +
                               JYJ_ETF + JYJ_LOF + JYJ_SB * HLCS_HKD + JYJ_HB * HLCS_USD) AS ZJYJ,
                           SUM(JYJ_HAZB + JYJ_SAZB + JYJ_ZXB + JYJ_CYB + JYJ_FBSJJ +
                               JYJ_ETF + JYJ_LOF) AS JYJ_RMB,
                           SUM(JYJ_SB) AS JYJ_HKD,
                           SUM(JYJ_HB) AS JYJ_USD
                      FROM DSC_STAT.T_STAT_KHJYSR_R T
                     WHERE RQ BETWEEN SUBSTR(VN_TJRQ, 1, 6) || '01' AND VN_TJRQ
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH
                    UNION ALL
                    SELECT KHH,
                           SUM(JYL_HAZB + JYL_SAZB + JYL_ZXB + JYL_CYB + JYL_FBSJJ +
                               JYL_ETF + JYL_LOF + JYL_SB * HLCS_HKD + JYL_HB * HLCS_USD) AS ZJYL,
                           SUM(JYL_HAZB + JYL_SAZB + JYL_ZXB + JYL_CYB + JYL_FBSJJ +
                               JYL_ETF + JYL_LOF) AS JYL_RMB,
                           SUM(JYL_SB) AS JYL_HKD,
                           SUM(JYL_HB) AS JYL_USD,

                           SUM(JYL_HAZB + JYL_SAZB + JYL_ZXB + JYL_CYB + JYL_HB * HLCS_USD +
                               JYL_SB * HLCS_HKD + JYL_SB_A + JYL_SB_B) JYL_GP,
                           SUM(JYL_FBSJJ + JYL_ETF + JYL_LOF + JYL_SZJJT + JYL_DXJJ) JYL_JJ,
                           SUM(JYL_QZ) JYL_QZ,
                           SUM(JYL_GZ + JYL_GSQYZ + JYL_KZZ) JYL_ZQ,
                           SUM(JYL_QT) JYL_QT,

                           SUM(YJSR_HAZB + YJSR_SAZB + YJSR_ZXB + YJSR_CYB + YJSR_FBSJJ +
                               YJSR_ETF + YJSR_LOF) AS YJSR_RMB,
                           SUM(YJSR_SB) AS YJSR_HKD,
                           SUM(YJSR_HB) AS YJSR_USD,

                           SUM(JYJ_HAZB + JYJ_SAZB + JYJ_ZXB + JYJ_CYB + JYJ_FBSJJ +
                               JYJ_ETF + JYJ_LOF + JYJ_SB * HLCS_HKD + JYJ_HB * HLCS_USD) AS ZJYJ,
                           SUM(JYJ_HAZB + JYJ_SAZB + JYJ_ZXB + JYJ_CYB + JYJ_FBSJJ +
                               JYJ_ETF + JYJ_LOF) AS JYJ_RMB,
                           SUM(JYJ_SB) AS JYJ_HKD,
                           SUM(JYJ_HB) AS JYJ_USD
                      FROM DSC_STAT.T_STAT_KHJYSR_R T
                     WHERE RQ BETWEEN VN_N_DATE AND SUBSTR(VN_N_DATE, 1, 6) || '31'
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH
                    UNION ALL
                    SELECT KHH,
                           SUM(JYL) AS ZJYL,
                           SUM(JYL) AS JYL_RMB,
                           0 AS JYL_HKD,
                           0 AS JYL_USD,
                           0 AS JYL_GP,
                           0 AS JYL_JJ,
                           0 AS JYL_QZ,
                           0 AS JYL_ZQ,
                           0 AS JYL_QT,
                           SUM(YJ) AS YJSR_RMB,
                           0 AS YJSR_HKD,
                           0 AS YJSR_USD,
                           SUM(JYJ) AS ZJYJ,
                           SUM(JYJ) AS JYJ_RMB,
                           0 AS JYJ_HKD,
                           0 AS JYJ_USD
                      FROM DSC_STAT.T_STAT_RZRQ_R T
                     WHERE RQ BETWEEN SUBSTR(VN_TJRQ, 1, 6) || '01' AND VN_TJRQ
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH
                    UNION ALL
                    SELECT KHH,
                           SUM(JYL) AS ZJYL,
                           SUM(JYL) AS JYL_RMB,
                           0 AS JYL_HKD,
                           0 AS JYL_USD,
                           0 AS JYL_GP,
                           0 AS JYL_JJ,
                           0 AS JYL_QZ,
                           0 AS JYL_ZQ,
                           0 AS JYL_QT,
                           SUM(YJ) AS YJSR_RMB,
                           0 AS YJSR_HKD,
                           0 AS YJSR_USD,
                           SUM(JYJ) AS ZJYJ,
                           SUM(JYJ) AS JYJ_RMB,
                           0 AS JYJ_HKD,
                           0 AS JYJ_USD
                      FROM DSC_STAT.T_STAT_RZRQ_R T
                     WHERE RQ BETWEEN VN_N_DATE AND SUBSTR(VN_N_DATE, 1, 6) || '31'
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH)
             GROUP BY KHH;

    END IF;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将客户交易收入（普通账户+信用账户）数据插入到临时表[DSC_STAT.TMP_T_STAT_XHKH]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --6：插入统计数据
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[DSC_STAT.P_STAT_XHKH]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT /*+ APPEND*/
    INTO DSC_STAT.T_STAT_XHKH
        (KHH,
         YYB,
         GRJG,
         JYL_RMB,
         JYL_HKD,
         JYL_USD,
         YJSR_RMB,
         YJSR_HKD,
         YJSR_USD,
         JYJ_RMB,
         JYJ_HKD,
         JYJ_USD,
         YJL,
         RJZC,
         CRJE_RMB,
         CRJE_HKD,
         CRJE_USD,
         QCJE_RMB,
         QCJE_HKD,
         QCJE_USD,
         JLCZJ,
         ZRZQSZ,
         ZD_RMB,
         ZD_USD,
         ZTGZR_RMB,
         ZTGZR_HKD,
         ZCZQSZ,
         CZD_RMB,
         CZD_USD,
         ZTGZC_RMB,
         ZTGZC_HKD,
         JLCZQSZ,
         XHRQ,
         ZJJYR,
         RJZQSZ,
         RJZJYE,
         JYL_GJ)
        SELECT T1.KHH,
               T1.YYB,
               T1.GRJG,
               NVL(JYL_RMB, 0),
               NVL(JYL_HKD, 0),
               NVL(JYL_USD, 0),
               NVL(YJSR_RMB, 0),
               NVL(YJSR_HKD, 0),
               NVL(YJSR_USD, 0),
               NVL(JYJ_RMB, 0),
               NVL(JYJ_HKD, 0),
               NVL(JYJ_USD, 0),
               NVL(YJL, 0) AS YJL,
               NVL(RJZC, 0) AS RJZC,
               NVL(T2.CRJE_RMB, 0),
               NVL(T2.CRJE_HKD, 0),
               NVL(T2.CRJE_USD, 0),
               NVL(T2.QCJE_RMB, 0),
               NVL(T2.QCJE_HKD, 0),
               NVL(T2.QCJE_USD, 0),
               NVL(T2.JLCZJ, 0) AS JLCZJ,
               NVL(T2.ZRZQSZ, 0),
               NVL(T2.ZD_RMB, 0),
               NVL(T2.ZD_USD, 0),
               NVL(T2.ZTGZR_RMB, 0),
               NVL(T2.ZTGZR_HKD, 0),
               NVL(T2.ZCZQSZ, 0),
               NVL(T2.CZD_RMB, 0),
               NVL(T2.CZD_USD, 0),
               NVL(T2.ZTGZC_RMB, 0),
               NVL(T2.ZTGZC_HKD, 0),
               NVL(T2.JLCZQSZ, 0),
               T1.XHRQ,
               T1.ZJJYR,
               NVL(T2.RJZQSZ, 0),
               NVL(T2.RJZQSZ, 0),
               NVL(T2.JYL_GJ, 0) AS JYL_GJ
          FROM (SELECT KHH, YYB, N1 AS GRJG, N2 AS KHRQ, N3 AS XHRQ, N4 AS TS, N5 AS ZJJYR
                  FROM DSC_STAT.TMP_COMMON) T1
          LEFT JOIN (SELECT KHH,
                            SUM(JYL_RMB) AS JYL_RMB,
                            SUM(JYL_HKD) AS JYL_HKD,
                            SUM(JYL_USD) AS JYL_USD,
                            SUM(YJSR_RMB) AS YJSR_RMB,
                            SUM(YJSR_HKD) AS YJSR_HKD,
                            SUM(YJSR_USD) AS YJSR_USD,
                            SUM(JYJ_RMB) AS JYJ_RMB,
                            SUM(JYJ_HKD) AS JYJ_HKD,
                            SUM(JYJ_USD) AS JYJ_USD,
                            SUM(YJL) AS YJL,
                            SUM(RJZC) AS RJZC,
                            SUM(CRJE_RMB) AS CRJE_RMB,
                            SUM(CRJE_HKD) AS CRJE_HKD,
                            SUM(CRJE_USD) AS CRJE_USD,
                            SUM(QCJE_RMB) AS QCJE_RMB,
                            SUM(QCJE_HKD) AS QCJE_HKD,
                            SUM(QCJE_USD) AS QCJE_USD,
                            SUM(JLCZJ) AS JLCZJ,
                            SUM(ZRZQSZ) AS ZRZQSZ,
                            SUM(ZD_RMB) AS ZD_RMB,
                            SUM(ZD_USD) AS ZD_USD,
                            SUM(ZTGZR_RMB) AS ZTGZR_RMB,
                            SUM(ZTGZR_HKD) AS ZTGZR_HKD,
                            SUM(ZCZQSZ) AS ZCZQSZ,
                            SUM(CZD_RMB) AS CZD_RMB,
                            SUM(CZD_USD) AS CZD_USD,
                            SUM(ZTGZC_RMB) AS ZTGZC_RMB,
                            SUM(ZTGZC_HKD) AS ZTGZC_HKD,
                            SUM(JLCZQSZ) AS JLCZQSZ,
                            SUM(XHRQ) AS XHRQ,
                            SUM(ZJJYR) AS ZJJYR,
                            SUM(RJZQSZ) AS RJZQSZ,
                            SUM(RJZJYE) AS RJZJYE,
                            SUM(JYL_GJ) AS JYL_GJ
                       FROM DSC_STAT.TMP_T_STAT_XHKH
                      GROUP BY KHH) T2
            ON T1.KHH = T2.KHH;
    ----------------------------------------------------------
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[DSC_STAT.P_STAT_XHKH]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_XHKH;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_XKKH(O_N_CODE OUT INT,
                                                 O_S_NOTE OUT VARCHAR2,
                                                 I_N_TJRQ IN INT,
                                                 I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   新开客户指标统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：



         算法：
                1、新开户后20交易日内情况
                2、一般只存新开户后20交易日的客户，其他客户不存

         注意事项：




         数据源：
                 DSC_BAS.T_KHXX_JJYW     客户信息表-经纪业务
                 DSC_STAT.T_STAT_KHZC_R    客户资产日表
                 DSC_STAT.T_STAT_KHJYSR_R  客户交易与收入日表
         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                    操作
         陈建平      2012/03/20                  创建
         胡阳明      2012/04/10                  修改：增量删除及取值
         胡阳明      2012/05/22                  根据上海证券的报表需求，将指标折分成按币种存放和计算
         陈德铸      2012/08/10                  修改：将新开客户指标回溯时点改为走系统参数配置PUB_SYS.T_SYS_PARAMS
         林伟        2013/06/20                  修改：增加信用账户资产和交易数据
         林伟        2013/09/06                  修改：对增加的信用账户资产和交易数据跟普通账户进行汇总
         吴邦杰      2015/07/14                  修改：优化过程
         吴邦杰      2015/08/27                  修改：优化过程，数据源表从日表出，避免跨分区查询，调整过程分段生成统计数据
    */
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    --VN_T_DATE    NUMBER(8) := PUB_SYS.F_GET_JYR_DATE(I_N_TJRQ, -1); --上个交易日
    VN_N_DATE        NUMBER(8); --前N个交易日
    VN_N_DATE_PYTYPE VARCHAR2(12);
    VN_N_DATE_PYZ    NUMBER(4);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --获取新开客户指标计算回溯时点
    BEGIN
        SELECT TRIM(SUBSTR(T.PARAM_VAL, 1, INSTR(T.PARAM_VAL, ':') - 1)) PYTYP,
               TRIM(SUBSTR(T.PARAM_VAL, INSTR(T.PARAM_VAL, ':') + 1)) PYZ
          INTO VN_N_DATE_PYTYPE, VN_N_DATE_PYZ
          FROM PUB_SYS.T_SYS_PARAM T
         WHERE T.PARAM_CODE = 'XKKH_HSRQ';

        IF REGEXP_LIKE(':' || UPPER(VN_N_DATE_PYTYPE) || ':',
                       ':' || '(JYR|ZRR|Y|N)' || ':') AND
           REGEXP_LIKE(VN_N_DATE_PYZ, '-{0,1}[[:digit:]]{1,}') THEN
            NULL;
        ELSE
            O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
            O_S_NOTE := '获取新开客户回溯日期失败，请检查系统参数设置表PUB_SYS.T_SYS_PARAM！';
            --记录日志——成功结束
            PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                               I_N_LOGID          => VN_LOGID,
                               I_S_USER           => VS_USER,
                               I_S_PROCNAME       => VS_PROC_NAME,
                               I_N_TJRQ           => VN_TJRQ,
                               I_N_RETCODE        => O_N_CODE,
                               I_S_RETNOTE        => O_S_NOTE,
                               I_S_FLAG           => I_N_REDO,
                               I_N_INSERTORUPDATE => 1);
            RETURN;
        END IF;

        IF UPPER(VN_N_DATE_PYTYPE) = 'JYR' THEN
            VN_N_DATE := DSC_CFG.F_GET_JYR_DATE(I_N_TJRQ, -VN_N_DATE_PYZ);
        ELSIF UPPER(VN_N_DATE_PYTYPE) = 'ZRR' THEN
            VN_N_DATE := TO_CHAR(TO_DATE(I_N_TJRQ, 'YYYYMMDD') - VN_N_DATE_PYZ,
                                 'YYYYMMDD');
        ELSIF UPPER(VN_N_DATE_PYTYPE) = 'Y' THEN
            VN_N_DATE := TO_CHAR(ADD_MONTHS(TO_DATE(I_N_TJRQ, 'YYYYMMDD'), -VN_N_DATE_PYZ),
                                 'YYYYMMDD');
        ELSIF UPPER(VN_N_DATE_PYTYPE) = 'N' THEN
            VN_N_DATE := (SUBSTR(I_N_TJRQ, 1, 4) - VN_N_DATE_PYZ) ||
                         SUBSTR(I_N_TJRQ, 5, 4);
        END IF;

    END;

    --重做删除原数据
    IF I_N_REDO = 1 THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_XKKH]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        -------增量删除
        DELETE FROM DSC_STAT.T_STAT_XKKH T WHERE KHRQ BETWEEN VN_N_DATE AND VN_TJRQ; --取开户日期为：前-20个交易日至统计日
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;

        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.P_STAT_XKKH]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.P_STAT_XKKH]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --插入销户客户统计数据
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将新开客户生成到临时表[DSC_STAT.TMP_COMMON]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_COMMON';
    INSERT INTO DSC_STAT.TMP_COMMON
        (KHH,
         YYB,
         N1, --GRJG,
         N2, --KHRQ,
         N3, --XHRQ,
         N4 --ts
         )
        SELECT KHH,
               YYB,
               GRJG,
               KHRQ,
               XHRQ,
               (SELECT COUNT(DISTINCT JYR)
                  FROM DSC_CFG.T_XTJYR
                 WHERE JYR BETWEEN KHRQ AND VN_TJRQ) AS TS --开户以来的在线交易日天数，<=20天
          FROM DSC_BAS.T_KHXX_JJYW
         WHERE KHRQ BETWEEN VN_N_DATE AND VN_TJRQ;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将新开客户生成到临时表[DSC_STAT.TMP_COMMON]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --2：清空临时表数据
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表数据[DSC_STAT.TMP_T_STAT_XKKH]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_XKKH';
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空临时表数据[DSC_STAT.TMP_T_STAT_XKKH]',
                              I_S_CHANGEDESC     => '清空完毕！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3：将客户资产数据(普通账户)插入到临时表中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将客户资产数据(普通账户)插入到临时表[DSC_STAT.TMP_T_STAT_XKKH]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    IF SUBSTR(VN_N_DATE, 1, 6) = SUBSTR(VN_TJRQ, 1, 6) THEN

        --如果开始日期和结束日期在同一个月份，则直接从日表一个分区取数据

        INSERT /*+ APPEND*/
        INTO DSC_STAT.TMP_T_STAT_XKKH
            (KHH,
             CRJE_RMB,
             CRJE_HKD,
             CRJE_USD,
             QCJE_RMB,
             QCJE_HKD,
             QCJE_USD,
             JZRZJ,
             ZRZQSZ,
             ZD_RMB,
             ZD_USD,
             ZTGZR_RMB,
             ZTGZR_HKD,
             ZCZQSZ,
             CZD_RMB,
             CZD_USD,
             ZTGZC_RMB,
             ZTGZC_HKD,
             JZRZQSZ,
             RJZC --临时表保存是累计值，后面做除法处理

             )
            SELECT KHH,
                   SUM(CRJE_RMB) AS CRJE_RMB,
                   SUM(CRJE_HKD) AS CRJE_HKD,
                   SUM(CRJE_USD) AS CRJE_USD,
                   SUM(QCJE_RMB) AS QCJE_RMB,
                   SUM(QCJE_HKD) AS QCJE_HKD,
                   SUM(QCJE_USD) AS QCJE_USD,
                   SUM(CRJE_RMB + CRJE_HKD * HLCS_HKD + CRJE_USD * HLCS_USD) -
                   SUM(QCJE_RMB + QCJE_HKD * HLCS_HKD + QCJE_USD * HLCS_USD) AS JZRZJ,
                   SUM(ZRZQSZ) AS ZRZQSZ,
                   SUM(ZD_RMB) AS ZD_RMB,
                   SUM(ZD_USD) AS ZD_USD,
                   SUM(ZTGZR_RMB) AS ZTGZR_RMB,
                   SUM(ZTGZR_HKD) AS ZTGZR_HKD,
                   SUM(ZCZQSZ) AS ZCZQSZ,
                   SUM(CZD_RMB) AS CZD_RMB,
                   SUM(CZD_USD) AS CZD_USD,
                   SUM(ZTGZC_RMB) AS ZTGZC_RMB,
                   SUM(ZTGZC_HKD) AS ZTGZC_HKD,
                   SUM(ZRZQSZ - ZCZQSZ) AS JLCZQSZ,
                   CASE
                       WHEN COUNT(KHH) = 0 THEN
                        0
                       ELSE
                        SUM(ZZC) / COUNT(KHH)
                   END RJZZC
              FROM DSC_STAT.T_STAT_KHZC_R T
             WHERE T.RQ BETWEEN VN_N_DATE AND VN_TJRQ
               AND EXISTS (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
             GROUP BY KHH;

    ELSE
        --如果开始日期和结束日期不在同一个月份，则从日表的两个分区取数据

        INSERT /*+ APPEND*/
        INTO DSC_STAT.TMP_T_STAT_XKKH
            (KHH,
             CRJE_RMB,
             CRJE_HKD,
             CRJE_USD,
             QCJE_RMB,
             QCJE_HKD,
             QCJE_USD,
             JZRZJ,
             ZRZQSZ,
             ZD_RMB,
             ZD_USD,
             ZTGZR_RMB,
             ZTGZR_HKD,
             ZCZQSZ,
             CZD_RMB,
             CZD_USD,
             ZTGZC_RMB,
             ZTGZC_HKD,
             JZRZQSZ,
             RJZC --临时表保存是累计值，后面做除法处理

             )
            SELECT KHH,
                   SUM(CRJE_RMB) AS CRJE_RMB,
                   SUM(CRJE_HKD) AS CRJE_HKD,
                   SUM(CRJE_USD) AS CRJE_USD,
                   SUM(QCJE_RMB) AS QCJE_RMB,
                   SUM(QCJE_HKD) AS QCJE_HKD,
                   SUM(QCJE_USD) AS QCJE_USD,
                   SUM(JZRZJ) AS JZRZJ,
                   SUM(ZRZQSZ) AS ZRZQSZ,
                   SUM(ZD_RMB) AS ZD_RMB,
                   SUM(ZD_USD) AS ZD_USD,
                   SUM(ZTGZR_RMB) AS ZTGZR_RMB,
                   SUM(ZTGZR_HKD) AS ZTGZR_HKD,
                   SUM(ZCZQSZ) AS ZCZQSZ,
                   SUM(CZD_RMB) AS CZD_RMB,
                   SUM(CZD_USD) AS CZD_USD,
                   SUM(ZTGZC_RMB) AS ZTGZC_RMB,
                   SUM(ZTGZC_HKD) AS ZTGZC_HKD,
                   SUM(JZRZQSZ) AS JZRZQSZ,
                   CASE
                       WHEN SUM(JYRTS) = 0 THEN
                        0
                       ELSE
                        SUM(ZZC) / SUM(JYRTS)
                   END AS RJZC
              FROM (SELECT KHH,
                           SUM(CRJE_RMB) AS CRJE_RMB,
                           SUM(CRJE_HKD) AS CRJE_HKD,
                           SUM(CRJE_USD) AS CRJE_USD,
                           SUM(QCJE_RMB) AS QCJE_RMB,
                           SUM(QCJE_HKD) AS QCJE_HKD,
                           SUM(QCJE_USD) AS QCJE_USD,
                           SUM(CRJE_RMB + CRJE_HKD * HLCS_HKD + CRJE_USD * HLCS_USD) -
                           SUM(QCJE_RMB + QCJE_HKD * HLCS_HKD + QCJE_USD * HLCS_USD) AS JZRZJ,
                           SUM(ZRZQSZ) AS ZRZQSZ,
                           SUM(ZD_RMB) AS ZD_RMB,
                           SUM(ZD_USD) AS ZD_USD,
                           SUM(ZTGZR_RMB) AS ZTGZR_RMB,
                           SUM(ZTGZR_HKD) AS ZTGZR_HKD,
                           SUM(ZCZQSZ) AS ZCZQSZ,
                           SUM(CZD_RMB) AS CZD_RMB,
                           SUM(CZD_USD) AS CZD_USD,
                           SUM(ZTGZC_RMB) AS ZTGZC_RMB,
                           SUM(ZTGZC_HKD) AS ZTGZC_HKD,
                           SUM(ZRZQSZ - ZCZQSZ) AS JZRZQSZ,
                           SUM(ZZC) ZZC,
                           COUNT(KHH) JYRTS
                      FROM DSC_STAT.T_STAT_KHZC_R T
                     WHERE T.RQ BETWEEN SUBSTR(VN_TJRQ, 1, 6) || '01' AND VN_TJRQ
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)

                     GROUP BY KHH
                    UNION ALL
                    SELECT KHH,
                           SUM(CRJE_RMB) AS CRJE_RMB,
                           SUM(CRJE_HKD) AS CRJE_HKD,
                           SUM(CRJE_USD) AS CRJE_USD,
                           SUM(QCJE_RMB) AS QCJE_RMB,
                           SUM(QCJE_HKD) AS QCJE_HKD,
                           SUM(QCJE_USD) AS QCJE_USD,
                           SUM(CRJE_RMB + CRJE_HKD * HLCS_HKD + CRJE_USD * HLCS_USD) -
                           SUM(QCJE_RMB + QCJE_HKD * HLCS_HKD + QCJE_USD * HLCS_USD) AS JZRZJ,
                           SUM(ZRZQSZ) AS ZRZQSZ,
                           SUM(ZD_RMB) AS ZD_RMB,
                           SUM(ZD_USD) AS ZD_USD,
                           SUM(ZTGZR_RMB) AS ZTGZR_RMB,
                           SUM(ZTGZR_HKD) AS ZTGZR_HKD,
                           SUM(ZCZQSZ) AS ZCZQSZ,
                           SUM(CZD_RMB) AS CZD_RMB,
                           SUM(CZD_USD) AS CZD_USD,
                           SUM(ZTGZC_RMB) AS ZTGZC_RMB,
                           SUM(ZTGZC_HKD) AS ZTGZC_HKD,
                           SUM(ZRZQSZ - ZCZQSZ) AS JZRZQSZ,
                           SUM(ZZC) ZZC,
                           COUNT(KHH) JYRTS
                      FROM DSC_STAT.T_STAT_KHZC_R T
                     WHERE T.RQ BETWEEN VN_N_DATE AND SUBSTR(VN_N_DATE, 1, 6) || '31'
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH)
             GROUP BY KHH;
    END IF;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将客户资产数据(普通账户)插入到临时表[DSC_STAT.TMP_T_STAT_XKKH]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --4：将客户资产数据(信用账户)插入到临时表中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将客户资产数据(信用账户)插入到临时表[DSC_STAT.TMP_T_STAT_XKKH]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    IF SUBSTR(VN_N_DATE, 1, 6) = SUBSTR(VN_TJRQ, 1, 6) THEN

        --如果开始日期和结束日期在同一个月份，则直接从日表一个分区取数据
        INSERT /*+ APPEND*/
        INTO DSC_STAT.TMP_T_STAT_XKKH
            (KHH,
             CRJE_RMB,
             QCJE_RMB,
             JZRZJ,
             ZRZQSZ,
             ZCZQSZ,
             JZRZQSZ,
             RJZC --临时表保存是累计值，后面做除法处理
             )
            SELECT KHH,
                   SUM(ZRJE) AS CRJE_RMB,
                   SUM(ZCJE) AS QCJE_RMB,
                   SUM(ZRJE) - SUM(ZCJE) AS JZRZJ,
                   -SUM(T.ZCSZ) AS ZRZQSZ, --对于总体账户而言，普通账户的转入包含了从信用账户转过来的部分，所以这里要扣除掉账户间的转移，只考虑外部转入
                   -SUM(T.ZRSZ) AS ZCZQSZ, --对于总体账户而言，普通账户的转出包含了转给信用账户的部分，所以这里要扣除掉账户间的转移，只考虑外部转入
                   SUM(T.ZRSZ - T.ZCSZ) AS JZRZQSZ,
                   CASE
                       WHEN COUNT(KHH) = 0 THEN
                        0
                       ELSE
                        SUM(ZZC) / COUNT(KHH)
                   END RJZZC
              FROM DSC_STAT.T_STAT_RZRQ_R T
             WHERE RQ BETWEEN VN_N_DATE AND VN_TJRQ
               AND EXISTS (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
             GROUP BY KHH;
    ELSE
        --如果开始日期和结束日期不在同一个月份，则从日表的两个分区取数据

        INSERT /*+ APPEND*/
        INTO DSC_STAT.TMP_T_STAT_XKKH
            (KHH,
             CRJE_RMB,
             QCJE_RMB,
             JZRZJ,
             ZRZQSZ,
             ZCZQSZ,
             JZRZQSZ,
             RJZC --临时表保存是累计值，后面做除法处理
             )
            SELECT KHH,
                   SUM(CRJE_RMB) AS CRJE_RMB,
                   SUM(QCJE_RMB) AS QCJE_RMB,
                   SUM(JZRZJ) AS JZRZJ,
                   SUM(ZRZQSZ) AS ZRZQSZ, --对于总体账户而言，普通账户的转入包含了从信用账户转过来的部分，所以这里要扣除掉账户间的转移，只考虑外部转入
                   SUM(ZCZQSZ) AS ZCZQSZ, --对于总体账户而言，普通账户的转出包含了转给信用账户的部分，所以这里要扣除掉账户间的转移，只考虑外部转入
                   SUM(JZRZQSZ) AS JZRZQSZ,
                   CASE
                       WHEN SUM(JYRTS) = 0 THEN
                        0
                       ELSE
                        SUM(ZZC) / SUM(JYRTS)
                   END AS RJZC
              FROM (SELECT KHH,
                           SUM(ZRJE) AS CRJE_RMB,
                           SUM(ZCJE) AS QCJE_RMB,
                           SUM(ZRJE) - SUM(ZCJE) AS JZRZJ,
                           -SUM(T.ZCSZ) AS ZRZQSZ, --对于总体账户而言，普通账户的转入包含了从信用账户转过来的部分，所以这里要扣除掉账户间的转移，只考虑外部转入
                           -SUM(T.ZRSZ) AS ZCZQSZ, --对于总体账户而言，普通账户的转出包含了转给信用账户的部分，所以这里要扣除掉账户间的转移，只考虑外部转入
                           SUM(T.ZRSZ - T.ZCSZ) AS JZRZQSZ,
                           SUM(ZZC) AS ZZC,
                           COUNT(KHH) AS JYRTS
                      FROM DSC_STAT.T_STAT_RZRQ_R T
                     WHERE RQ BETWEEN SUBSTR(VN_TJRQ, 1, 6) || '01' AND VN_TJRQ
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH
                    UNION ALL
                    SELECT KHH,
                           SUM(ZRJE) AS CRJE_RMB,
                           SUM(ZCJE) AS QCJE_RMB,
                           SUM(ZRJE) - SUM(ZCJE) AS JZRZJ,
                           -SUM(T.ZCSZ) AS ZRZQSZ, --对于总体账户而言，普通账户的转入包含了从信用账户转过来的部分，所以这里要扣除掉账户间的转移，只考虑外部转入
                           -SUM(T.ZRSZ) AS ZCZQSZ, --对于总体账户而言，普通账户的转出包含了转给信用账户的部分，所以这里要扣除掉账户间的转移，只考虑外部转入
                           SUM(T.ZRSZ - T.ZCSZ) AS JZRZQSZ,
                           SUM(ZZC) AS ZZC,
                           COUNT(KHH) AS JYRTS
                      FROM DSC_STAT.T_STAT_RZRQ_R T
                     WHERE RQ BETWEEN VN_N_DATE AND SUBSTR(VN_N_DATE, 1, 6) || '31'
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH)
             GROUP BY KHH;
    END IF;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将客户资产数据(信用账户)插入到临时表[DSC_STAT.TMP_T_STAT_XKKH]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --5：将客户交易收入（普通账户+信用账户）数据插入到临时表中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将客户交易收入（普通账户+信用账户）数据插入到临时表[DSC_STAT.TMP_T_STAT_XKKH]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    IF SUBSTR(VN_N_DATE, 1, 6) = SUBSTR(VN_TJRQ, 1, 6) THEN

        --如果开始日期和结束日期在同一个月份，则直接从日表一个分区取数据
        INSERT /*+ APPEND*/
        INTO DSC_STAT.TMP_T_STAT_XKKH
            (KHH,
             JYL_RMB,
             JYL_HKD,
             JYL_USD,
             YJSR_RMB,
             YJSR_HKD,
             YJSR_USD,
             JYJ_RMB,
             JYJ_HKD,
             JYJ_USD,
             YJL)
            SELECT KHH,
                   SUM(JYL_RMB) AS JYL_RMB,
                   SUM(JYL_HKD) AS JYL_HKD,
                   SUM(JYL_USD) AS JYL_USD,
                   SUM(YJSR_RMB) AS YJSR_RMB,
                   SUM(YJSR_HKD) AS YJSR_HKD,
                   SUM(YJSR_USD) AS YJSR_USD,
                   SUM(JYJ_RMB) AS JYJ_RMB,
                   SUM(JYJ_HKD) AS JYJ_HKD,
                   SUM(JYJ_USD) AS JYJ_USD,
                   CASE
                       WHEN SUM(ZJYL) = 0 THEN
                        0
                       ELSE
                        SUM(ZJYJ) / SUM(ZJYL) * 1000
                   END AS YJL
              FROM (SELECT KHH,
                           SUM(JYL_HAZB + JYL_SAZB + JYL_ZXB + JYL_CYB + JYL_FBSJJ +
                               JYL_ETF + JYL_LOF + JYL_SB * HLCS_HKD + JYL_HB * HLCS_USD) AS ZJYL,
                           SUM(JYL_HAZB + JYL_SAZB + JYL_ZXB + JYL_CYB + JYL_FBSJJ +
                               JYL_ETF + JYL_LOF) AS JYL_RMB,
                           SUM(JYL_SB) AS JYL_HKD,
                           SUM(JYL_HB) AS JYL_USD,

                           SUM(YJSR_HAZB + YJSR_SAZB + YJSR_ZXB + YJSR_CYB + YJSR_FBSJJ +
                               YJSR_ETF + YJSR_LOF) AS YJSR_RMB,
                           SUM(YJSR_SB) AS YJSR_HKD,
                           SUM(YJSR_HB) AS YJSR_USD,

                           SUM(JYJ_HAZB + JYJ_SAZB + JYJ_ZXB + JYJ_CYB + JYJ_FBSJJ +
                               JYJ_ETF + JYJ_LOF + JYJ_SB * HLCS_HKD + JYJ_HB * HLCS_USD) AS ZJYJ,
                           SUM(JYJ_HAZB + JYJ_SAZB + JYJ_ZXB + JYJ_CYB + JYJ_FBSJJ +
                               JYJ_ETF + JYJ_LOF) AS JYJ_RMB,
                           SUM(JYJ_SB) AS JYJ_HKD,
                           SUM(JYJ_HB) AS JYJ_USD
                      FROM DSC_STAT.T_STAT_KHJYSR_R T
                     WHERE RQ BETWEEN VN_N_DATE AND VN_TJRQ
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH
                    UNION ALL
                    SELECT KHH,
                           SUM(JYL) AS ZJYL,
                           SUM(JYL) AS JYL_RMB,
                           0 AS JYL_HKD,
                           0 AS JYL_USD,
                           SUM(YJ) AS YJSR_RMB,
                           0 AS YJSR_HKD,
                           0 AS YJSR_USD,
                           SUM(JYJ) AS ZJYJ,
                           0 AS JYJ_RMB,
                           0 AS JYJ_HKD,
                           0 AS JYJ_USD
                      FROM DSC_STAT.T_STAT_RZRQ_R T
                     WHERE RQ BETWEEN VN_N_DATE AND VN_TJRQ
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH)
             GROUP BY KHH;
    ELSE
        --如果开始日期和结束日期不在同一个月份，则从日表的两个分区取数据
        INSERT /*+ APPEND*/
        INTO DSC_STAT.TMP_T_STAT_XKKH
            (KHH,
             JYL_RMB,
             JYL_HKD,
             JYL_USD,
             YJSR_RMB,
             YJSR_HKD,
             YJSR_USD,
             JYJ_RMB,
             JYJ_HKD,
             JYJ_USD,
             YJL)

            SELECT KHH,
                   SUM(JYL_RMB) AS JYL_RMB,
                   SUM(JYL_HKD) AS JYL_HKD,
                   SUM(JYL_USD) AS JYL_USD,
                   SUM(YJSR_RMB) AS YJSR_RMB,
                   SUM(YJSR_HKD) AS YJSR_HKD,
                   SUM(YJSR_USD) AS YJSR_USD,
                   SUM(JYJ_RMB) AS JYJ_RMB,
                   SUM(JYJ_HKD) AS JYJ_HKD,
                   SUM(JYJ_USD) AS JYJ_USD,
                   CASE
                       WHEN SUM(ZJYL) = 0 THEN
                        0
                       ELSE
                        SUM(ZJYJ) / SUM(ZJYL) * 1000
                   END AS YJL
              FROM (SELECT KHH,
                           SUM(JYL_HAZB + JYL_SAZB + JYL_ZXB + JYL_CYB + JYL_FBSJJ +
                               JYL_ETF + JYL_LOF + JYL_SB * HLCS_HKD + JYL_HB * HLCS_USD) AS ZJYL,
                           SUM(JYL_HAZB + JYL_SAZB + JYL_ZXB + JYL_CYB + JYL_FBSJJ +
                               JYL_ETF + JYL_LOF) AS JYL_RMB,
                           SUM(JYL_SB) AS JYL_HKD,
                           SUM(JYL_HB) AS JYL_USD,

                           SUM(YJSR_HAZB + YJSR_SAZB + YJSR_ZXB + YJSR_CYB + YJSR_FBSJJ +
                               YJSR_ETF + YJSR_LOF) AS YJSR_RMB,
                           SUM(YJSR_SB) AS YJSR_HKD,
                           SUM(YJSR_HB) AS YJSR_USD,

                           SUM(JYJ_HAZB + JYJ_SAZB + JYJ_ZXB + JYJ_CYB + JYJ_FBSJJ +
                               JYJ_ETF + JYJ_LOF + JYJ_SB * HLCS_HKD + JYJ_HB * HLCS_USD) AS ZJYJ,
                           SUM(JYJ_HAZB + JYJ_SAZB + JYJ_ZXB + JYJ_CYB + JYJ_FBSJJ +
                               JYJ_ETF + JYJ_LOF) AS JYJ_RMB,
                           SUM(JYJ_SB) AS JYJ_HKD,
                           SUM(JYJ_HB) AS JYJ_USD
                      FROM DSC_STAT.T_STAT_KHJYSR_R T
                     WHERE RQ BETWEEN SUBSTR(VN_TJRQ, 1, 6) || '01' AND VN_TJRQ
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH
                    UNION ALL
                    SELECT KHH,
                           SUM(JYL_HAZB + JYL_SAZB + JYL_ZXB + JYL_CYB + JYL_FBSJJ +
                               JYL_ETF + JYL_LOF + JYL_SB * HLCS_HKD + JYL_HB * HLCS_USD) AS ZJYL,
                           SUM(JYL_HAZB + JYL_SAZB + JYL_ZXB + JYL_CYB + JYL_FBSJJ +
                               JYL_ETF + JYL_LOF) AS JYL_RMB,
                           SUM(JYL_SB) AS JYL_HKD,
                           SUM(JYL_HB) AS JYL_USD,

                           SUM(YJSR_HAZB + YJSR_SAZB + YJSR_ZXB + YJSR_CYB + YJSR_FBSJJ +
                               YJSR_ETF + YJSR_LOF) AS YJSR_RMB,
                           SUM(YJSR_SB) AS YJSR_HKD,
                           SUM(YJSR_HB) AS YJSR_USD,

                           SUM(JYJ_HAZB + JYJ_SAZB + JYJ_ZXB + JYJ_CYB + JYJ_FBSJJ +
                               JYJ_ETF + JYJ_LOF + JYJ_SB * HLCS_HKD + JYJ_HB * HLCS_USD) AS ZJYJ,
                           SUM(JYJ_HAZB + JYJ_SAZB + JYJ_ZXB + JYJ_CYB + JYJ_FBSJJ +
                               JYJ_ETF + JYJ_LOF) AS JYJ_RMB,
                           SUM(JYJ_SB) AS JYJ_HKD,
                           SUM(JYJ_HB) AS JYJ_USD
                      FROM DSC_STAT.T_STAT_KHJYSR_R T
                     WHERE RQ BETWEEN VN_N_DATE AND SUBSTR(VN_N_DATE, 1, 6) || '31'
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH
                    UNION ALL
                    SELECT KHH,
                           SUM(JYL) AS ZJYL,
                           SUM(JYL) AS JYL_RMB,
                           0 AS JYL_HKD,
                           0 AS JYL_USD,
                           SUM(YJ) AS YJSR_RMB,
                           0 AS YJSR_HKD,
                           0 AS YJSR_USD,
                           SUM(JYJ) AS ZJYJ,
                           0 AS JYJ_RMB,
                           0 AS JYJ_HKD,
                           0 AS JYJ_USD
                      FROM DSC_STAT.T_STAT_RZRQ_R T
                     WHERE RQ BETWEEN SUBSTR(VN_TJRQ, 1, 6) || '01' AND VN_TJRQ
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH
                    UNION ALL
                    SELECT KHH,
                           SUM(JYL) AS ZJYL,
                           SUM(JYL) AS JYL_RMB,
                           0 AS JYL_HKD,
                           0 AS JYL_USD,
                           SUM(YJ) AS YJSR_RMB,
                           0 AS YJSR_HKD,
                           0 AS YJSR_USD,
                           SUM(JYJ) AS ZJYJ,
                           0 AS JYJ_RMB,
                           0 AS JYJ_HKD,
                           0 AS JYJ_USD
                      FROM DSC_STAT.T_STAT_RZRQ_R T
                     WHERE RQ BETWEEN VN_N_DATE AND SUBSTR(VN_N_DATE, 1, 6) || '31'
                       AND EXISTS
                     (SELECT 1 FROM DSC_STAT.TMP_COMMON D WHERE T.KHH = D.KHH)
                     GROUP BY KHH)
             GROUP BY KHH;

    END IF;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将客户交易收入（普通账户+信用账户）数据插入到临时表[DSC_STAT.TMP_T_STAT_XKKH]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --------------------------------------插入数据
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[DSC_STAT.P_STAT_XKKH]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT /*+ APPEND*/
    INTO DSC_STAT.T_STAT_XKKH
        (KHH,
         YYB,
         GRJG,
         JYL_RMB,
         JYL_HKD,
         JYL_USD,
         YJSR_RMB,
         YJSR_HKD,
         YJSR_USD,
         JYJ_RMB,
         JYJ_HKD,
         JYJ_USD,
         YJL,
         RJZC,
         CRJE_RMB,
         CRJE_HKD,
         CRJE_USD,
         QCJE_RMB,
         QCJE_HKD,
         QCJE_USD,
         JZRZJ,
         ZRZQSZ,
         ZD_RMB,
         ZD_USD,
         ZTGZR_RMB,
         ZTGZR_HKD,
         ZCZQSZ,
         CZD_RMB,
         CZD_USD,
         ZTGZC_RMB,
         ZTGZC_HKD,
         JZRZQSZ,
         KHRQ,
         XHRQ,
         JSJZRQ)
        SELECT T1.KHH,
               T1.YYB,
               T1.GRJG,
               NVL(JYL_RMB, 0),
               NVL(JYL_HKD, 0),
               NVL(JYL_USD, 0),
               NVL(YJSR_RMB, 0),
               NVL(YJSR_HKD, 0),
               NVL(YJSR_USD, 0),
               NVL(JYJ_RMB, 0),
               NVL(JYJ_HKD, 0),
               NVL(JYJ_USD, 0),
               NVL(YJL, 0),
               NVL(T2.RJZC, 0),
               NVL(T2.CRJE_RMB, 0),
               NVL(T2.CRJE_HKD, 0),
               NVL(T2.CRJE_USD, 0),
               NVL(T2.QCJE_RMB, 0),
               NVL(T2.QCJE_HKD, 0),
               NVL(T2.QCJE_USD, 0),
               NVL(JZRZJ, 0),
               NVL(T2.ZRZQSZ, 0),
               NVL(T2.ZD_RMB, 0),
               NVL(T2.ZD_USD, 0),
               NVL(T2.ZTGZR_RMB, 0),
               NVL(T2.ZTGZR_HKD, 0),
               NVL(T2.ZCZQSZ, 0),
               NVL(T2.CZD_RMB, 0),
               NVL(T2.CZD_USD, 0),
               NVL(T2.ZTGZC_RMB, 0),
               NVL(T2.ZTGZC_HKD, 0),
               NVL(T2.JZRZQSZ, 0),
               T1.KHRQ,
               T1.XHRQ,
               VN_TJRQ
          FROM (SELECT KHH, YYB, N1 AS GRJG, N2 AS KHRQ, N3 AS XHRQ, N4 AS TS
                  FROM DSC_STAT.TMP_COMMON) T1
          LEFT JOIN (SELECT KHH,
                            SUM(JYL_RMB) AS JYL_RMB,
                            SUM(JYL_HKD) AS JYL_HKD,
                            SUM(JYL_USD) AS JYL_USD,
                            SUM(YJSR_RMB) AS YJSR_RMB,
                            SUM(YJSR_HKD) AS YJSR_HKD,
                            SUM(YJSR_USD) AS YJSR_USD,
                            SUM(JYJ_RMB) AS JYJ_RMB,
                            SUM(JYJ_HKD) AS JYJ_HKD,
                            SUM(JYJ_USD) AS JYJ_USD,
                            SUM(YJL) AS YJL,
                            SUM(RJZC) AS RJZC,
                            SUM(CRJE_RMB) AS CRJE_RMB,
                            SUM(CRJE_HKD) AS CRJE_HKD,
                            SUM(CRJE_USD) AS CRJE_USD,
                            SUM(QCJE_RMB) AS QCJE_RMB,
                            SUM(QCJE_HKD) AS QCJE_HKD,
                            SUM(QCJE_USD) AS QCJE_USD,
                            SUM(JZRZJ) AS JZRZJ,
                            SUM(ZRZQSZ) AS ZRZQSZ,
                            SUM(ZD_RMB) AS ZD_RMB,
                            SUM(ZD_USD) AS ZD_USD,
                            SUM(ZTGZR_RMB) AS ZTGZR_RMB,
                            SUM(ZTGZR_HKD) AS ZTGZR_HKD,
                            SUM(ZCZQSZ) AS ZCZQSZ,
                            SUM(CZD_RMB) AS CZD_RMB,
                            SUM(CZD_USD) AS CZD_USD,
                            SUM(ZTGZC_RMB) AS ZTGZC_RMB,
                            SUM(ZTGZC_HKD) AS ZTGZC_HKD,
                            SUM(JZRZQSZ) AS JZRZQSZ
                       FROM DSC_STAT.TMP_T_STAT_XKKH
                      GROUP BY KHH) T2
            ON T1.KHH = T2.KHH;
    ----------------------------------------------------------
    VN_ROWCOUNT := SQL%ROWCOUNT;

    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[DSC_STAT.P_STAT_XKKH]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_XKKH;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YDGH_R(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN INT,
                                                   I_N_REDO IN NUMBER DEFAULT 0) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YDGH_R
         功能简述：   约定购回客户统计日表算法
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
        返回：

         算法：


         注意事项：1、涉及到外币已经换算成人民币

         数据源：
                 DSC_BAS.T_JGMXLS           ：交割明细流失当前表
                 DSC_HIS.T_JGMXLS_HIS       ：交割明细流失历史表
                 DSC_BAS.T_YDGH_DGHHY       ：约定购回待购回合约表
                 DSC_BAS.T_YDGH_JYED        ：约定购回交易额度

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         林伟        2013/04/09                 创建
         林伟        2013/08/06                 修改；完善指标统计口径
         黄玉钰      2014/06/05                 修改；对于净佣金的获取，直接使用交割表中的JYJ
         黄玉钰      2014/06/30                 修改：交易类别为字符串型，需加上引号。否则在某些情况下会报错
         吴邦杰      2015/06/09                 修改：交收标志为字符串型，需加上引号。否则在某些情况下会报错
    */

    VN_HL_HKD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_USER      VARCHAR2(30);

BEGIN

    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';

    --获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);

    --重做删除原数据
    IF I_N_REDO = 1 THEN
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YDGH_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE DSC_STAT.T_STAT_YDGH_R WHERE RQ = I_N_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YDGH_R]目标表，日期：=' ||
                                                        I_N_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_YDGH_R]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_YDGH_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_YDGH_R';
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_YDGH_R]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_T_STAT_YDGH_R]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计交易量，佣金指标到[DSC_STAT.TMP_T_STAT_YDGH_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --交易量，佣金指标值
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_YDGH_R
        (RQ, KHH, YYB, JYL_CS, JYL_GH, YJSR, YJSR_CS, YJSR_GH, JYJSR, JYJSR_CS, JYJSR_GH)
        SELECT T.CJRQ RQ,
               T.KHH,
               T.YYB,
               SUM(CASE
                       WHEN T.JYLB = '39' AND T.BZ = '1' THEN
                        T.CJJE
                       WHEN T.JYLB = '39' AND T.BZ = '2' THEN
                        T.CJJE * VN_HL_HKD
                       WHEN T.JYLB = '39' AND T.BZ = '3' THEN
                        T.CJJE * VN_HL_USD
                       ELSE
                        0
                   END) JYL_CS,
               SUM(CASE
                       WHEN T.JYLB = '40' AND T.BZ = '1' THEN
                        T.CJJE
                       WHEN T.JYLB = '40' AND T.BZ = '2' THEN
                        T.CJJE * VN_HL_HKD
                       WHEN T.JYLB = '40' AND T.BZ = '3' THEN
                        T.CJJE * VN_HL_USD
                       ELSE
                        0
                   END) JYL_GH,
               SUM(CASE
                       WHEN T.BZ = '1' THEN
                        T.S1
                       WHEN T.BZ = '2' THEN
                        T.S1 * VN_HL_HKD
                       WHEN T.BZ = '3' THEN
                        T.S1 * VN_HL_USD
                       ELSE
                        0
                   END) JYSR,
               SUM(CASE
                       WHEN T.JYLB = '39' AND T.BZ = '1' THEN
                        T.S1
                       WHEN T.JYLB = '39' AND T.BZ = '2' THEN
                        T.S1 * VN_HL_HKD
                       WHEN T.JYLB = '39' AND T.BZ = '3' THEN
                        T.S1 * VN_HL_USD
                       ELSE
                        0
                   END) YJSR_CS,
               SUM(CASE
                       WHEN T.JYLB = '40' AND T.BZ = '1' THEN
                        T.S1
                       WHEN T.JYLB = '40' AND T.BZ = '2' THEN
                        T.S1 * VN_HL_HKD
                       WHEN T.JYLB = '40' AND T.BZ = '3' THEN
                        T.S1 * VN_HL_USD
                       ELSE
                        0
                   END) YJSR_GH,
               SUM(CASE
                       WHEN T.BZ = '1' THEN
                        JYJ
                       WHEN T.BZ = '2' THEN
                        JYJ * VN_HL_HKD
                       WHEN T.BZ = '3' THEN
                        JYJ * VN_HL_USD
                       ELSE
                        0
                   END) JYJSR,
               SUM(CASE
                       WHEN T.JYLB = '39' AND T.BZ = '1' THEN
                        JYJ
                       WHEN T.JYLB = '39' AND T.BZ = '2' THEN
                        JYJ * VN_HL_HKD
                       WHEN T.JYLB = '39' AND T.BZ = '3' THEN
                        JYJ * VN_HL_USD
                       ELSE
                        0
                   END) JYJSR_CS,
               SUM(CASE
                       WHEN T.JYLB = '40' AND T.BZ = '1' THEN
                        JYJ
                       WHEN T.JYLB = '40' AND T.BZ = '2' THEN
                        JYJ * VN_HL_HKD
                       WHEN T.JYLB = '40' AND T.BZ = '3' THEN
                        JYJ * VN_HL_USD
                       ELSE
                        0
                   END) JYJSR_GH
          FROM (SELECT *
                  FROM DSC_BAS.T_JGMXLS
                UNION ALL
                SELECT * FROM DSC_HIS.T_JGMXLS_HIS) T
         WHERE T.CJRQ = I_N_TJRQ
           AND T.JYLB IN ('39', '40')
         GROUP BY T.CJRQ, T.KHH, T.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计交易量，佣金指标到[DSC_STAT.TMP_T_STAT_YDGH_R]临时表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计约定购回金额，抵押市值指标到[DSC_STAT.TMP_T_STAT_YDGH_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --约定购回金额，抵押市值指标值
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_YDGH_R
        (RQ, KHH, YYB, DYSZ, LXSR, DGHZQSZ, DGHJE, DGHYJLXSR, XZDGHLX)
        SELECT I_N_TJRQ RQ,
               A.KHH,
               A.YYB,
               SUM(A.DYSZ) DYSZ,
               SUM(CASE
                       WHEN A.JSBZ = '1' AND I_N_TJRQ = A.JSRQ THEN
                        A.JSJE - A.CJJE
                       ELSE
                        0
                   END) LXSR,
               SUM(CASE
                       WHEN A.JSBZ = '0' OR (I_N_TJRQ >= A.CJRQ AND I_N_TJRQ < A.JSRQ) THEN
                        A.DYSZ
                       ELSE
                        0
                   END) DGHZQSZ,
               SUM(CASE
                       WHEN A.JSBZ = '0' OR (I_N_TJRQ >= A.CJRQ AND I_N_TJRQ < A.JSRQ) THEN
                        A.GHJE
                       ELSE
                        0
                   END) DGHJE,
               SUM(CASE
                       WHEN A.JSBZ = '0' OR (I_N_TJRQ >= A.CJRQ AND I_N_TJRQ < A.JSRQ) THEN
                        A.GHJE - A.CJJE
                       ELSE
                        0
                   END) DGHYJLXSR,
               SUM(CASE
                       WHEN A.CJRQ = I_N_TJRQ THEN
                        A.GHJE - A.CJJE
                       ELSE
                        0
                   END) XZDGHLX
          FROM DSC_BAS.T_YDGH_DGHHY A
         WHERE A.CJRQ <= I_N_TJRQ
         GROUP BY A.CJRQ, A.KHH, A.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计约定购回金额，抵押市值指标到[DSC_STAT.TMP_T_STAT_YDGH_R]临时表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计授权额度，使用额度指标到[DSC_STAT.TMP_T_STAT_YDGH_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --授权额度，使用额度
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_YDGH_R
        (RQ, KHH, YYB, SQED, SYED)
        SELECT I_N_TJRQ AS RQ, A.KHH, A.YYB, SUM(A.SQED) SQED, SUM(A.SYED) SYED
          FROM DSC_BAS.T_YDGH_JYED A
         GROUP BY A.DJRQ, A.KHH, A.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计授权额度，使用额度指标到[DSC_STAT.TMP_T_STAT_YDGH_R]临时表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表[DSC_STAT.TMP_T_STAT_YDGH_R]结果汇总统计到[DSC_STAT.T_STAT_YDGH_R]约定购回日统计表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --将临时表汇总到目标表
    INSERT INTO DSC_STAT.T_STAT_YDGH_R
        (RQ,
         KHH,
         YYB,
         DYSZ,
         JYL_CS,
         JYL_GH,
         YJSR,
         YJSR_CS,
         YJSR_GH,
         JYJSR,
         JYJSR_CS,
         JYJSR_GH,
         LXSR,
         DGHZQSZ,
         DGHJE,
         DGHYJLXSR,
         SQED,
         SYED,
         XZDGHLX)
        SELECT RQ AS RQ,
               KHH,
               YYB,
               SUM(NVL(DYSZ, 0)) DYSZ,
               SUM(NVL(JYL_CS, 0)) JYL_CS,
               SUM(NVL(JYL_GH, 0)) JYL_GH,
               SUM(NVL(YJSR, 0)) YJSR,
               SUM(NVL(YJSR_CS, 0)) YJSR_CS,
               SUM(NVL(YJSR_GH, 0)) YJSR_GH,
               SUM(NVL(JYJSR, 0)) JYJSR,
               SUM(NVL(JYJSR_CS, 0)) JYJSR_CS,
               SUM(NVL(JYJSR_GH, 0)) JYJSR_GH,
               SUM(NVL(LXSR, 0)) LXSR,
               SUM(NVL(DGHZQSZ, 0)) DGHZQSZ,
               SUM(NVL(DGHJE, 0)) DGHJE,
               SUM(NVL(DGHYJLXSR, 0)) DGHYJLXSR,
               SUM(NVL(SQED, 0)) SQED,
               SUM(NVL(SYED, 0)) SYED,
               SUM(NVL(XZDGHLX, 0)) XZDGHLX
          FROM DSC_STAT.TMP_T_STAT_YDGH_R A
         GROUP BY RQ, KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表[DSC_STAT.TMP_T_STAT_YDGH_R]结果汇总统计到[DSC_STAT.T_STAT_YDGH_R]约定购回日统计表！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_YDGH_R';

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YDGH_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YDGH_Y(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN INT,
                                                   I_N_REDO IN NUMBER DEFAULT 0) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   约定购回客户统计月表算法
         功能简述：   约定购回客户统计月表算法
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
        返回：

         算法：
                  1、日均抵押市值=在线自然日市值总和/在线自然日综合

         注意事项：

         数据源：
                 DSC_STAT.T_STAT_YDGH_R     ：约定购回客户日统计表
                 DSC_CFG.T_HLCS             ：汇率参数

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         林伟        2013/04/09                  创建
         黄玉钰      2014/06/11                  修改：按客户号汇总之后，关联客户信息表获取营业部，确保一个月一个客户仅有一条记录
         黄宏峰      2017/03/07                  修改：修改ZRRTS算法
    */
    VS_PROC_NAME     VARCHAR2(100) := $$PLSQL_UNIT;
    VN_TJRQ          NUMBER(8) := I_N_TJRQ;
    VN_YF            NUMBER(6) := PUB_SYS.F_GET_DATE(I_N_TJRQ, 2); --月份
    VN_FIRST_DAY     NUMBER(8); --期初交易日
    VN_LAST_DAY      NUMBER(8); --期末交易日
    VN_LAST_MONTHDAY NUMBER(8); --月末日期
    --VN_LAST_MONTHJYR NUMBER(8); --月末交易日
    VN_HL_HKD   DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD   DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_LOGID    INT; --LOG 表记录ID
    VN_ROWCOUNT INT; --记录数
    VN_STEP     INT; --动作步数
    VN_PROC_NO  PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER     VARCHAR2(30);
    VN_QC_RQ    NUMBER(8); --上月月末交易日（期初）
    VN_QC_YF    NUMBER(6) := PUB_SYS.F_GET_DATE(VN_TJRQ, 3); --上月月份（期初）

BEGIN

    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --期初日期（上月月末交易日）
    BEGIN
        SELECT MAX(JYR) INTO VN_QC_RQ FROM DSC_CFG.T_XTJYR WHERE NY = VN_QC_YF;
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '查找不到：' || VN_QC_YF || '对应的交易日！';
    END;
    --月初
    VN_FIRST_DAY := PUB_SYS.F_GET_DATE(VN_TJRQ, 0);
    --期末日期
    VN_LAST_DAY := I_N_TJRQ;
    --月末日期
    SELECT MAX(ZRR)
      INTO VN_LAST_MONTHDAY
      FROM DSC_CFG.T_XTJYR T
     WHERE T.NY = VN_YF
       AND T.JYR = VN_LAST_DAY;
    /*    --月末交易日
        SELECT MAX(JYR) INTO VN_LAST_MONTHJYR FROM DSC_CFG.T_XTJYR T WHERE T.NY = VN_YF;
    */
    --获取期初汇率
    --港币
    BEGIN
        SELECT A.GSBL
          INTO VN_HL_HKD
          FROM DSC_CFG.T_HLCS A
         WHERE A.BZ = '2'
           AND VN_FIRST_DAY BETWEEN A.KSRQ AND A.JSRQ;
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '没有维护“港币”汇率！';
    END;
    BEGIN
        --美元
        SELECT A.GSBL
          INTO VN_HL_USD
          FROM DSC_CFG.T_HLCS A
         WHERE A.BZ = '3'
           AND VN_FIRST_DAY BETWEEN A.KSRQ AND A.JSRQ;
    EXCEPTION
        WHEN OTHERS THEN
            O_N_CODE := -1;
            O_S_NOTE := '没有维护“美元”汇率！';
    END;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);

    O_S_NOTE := '【ERROR-10000】';
    --重做删除原数据
    IF I_N_REDO IN (0, 1, 2) THEN
        --分区删除
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YDGH_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        EXECUTE IMMEDIATE 'ALTER TABLE DSC_STAT.T_STAT_YDGH_Y TRUNCATE PARTITION PY_' ||
                          VN_YF || '  UPDATE GLOBAL INDEXES';
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YDGH_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_YDGH_Y]分区数据删除成功！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;
    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_YDGH_Y]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE  DSC_STAT.TMP_T_STAT_YDGH_Y';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE  DSC_STAT.TMP_T_STAT_YDGH_Y_RJ';
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_T_STAT_YDGH_Y]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_T_STAT_YDGH_Y]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10001】';
    --月初到统计日总和
    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计月初到统计日总和数据到临时表[DSC_STAT.TMP_T_STAT_YDGH_Y_RJ]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT /*+ APPEND*/
    INTO DSC_STAT.TMP_T_STAT_YDGH_Y_RJ
        (KHH,
         YYB,
         RJDYSZ,
         JYL_CS,
         JYL_GH,
         YJSR,
         YJSR_CS,
         YJSR_GH,
         JYJSR,
         JYJSR_CS,
         JYJSR_GH,
         LXSR,
         XZDGHLX)
        SELECT KHH,
               YYB,
               SUM(RJDYSZ) RJDYSZ,
               SUM(JYL_CS) JYL_CS,
               SUM(JYL_GH) JYL_GH,
               SUM(YJSR) YJSR,
               SUM(YJSR_CS) YJSR_CS,
               SUM(YJSR_GH) YJSR_GH,
               SUM(JYJSR) JYJSR,
               SUM(JYJSR_CS) JYJSR_CS,
               SUM(JYJSR_GH) JYJSR_GH,
               SUM(LXSR) LXSR,
               SUM(XZDGHLX) XZDGHLX
          FROM (SELECT A.KHH,
                       A.YYB,
                       SUM(DYSZ) RJDYSZ,
                       SUM(JYL_CS) JYL_CS,
                       SUM(JYL_GH) JYL_GH,
                       SUM(YJSR) YJSR,
                       SUM(YJSR_CS) YJSR_CS,
                       SUM(YJSR_GH) YJSR_GH,
                       SUM(JYJSR) JYJSR,
                       SUM(JYJSR_CS) JYJSR_CS,
                       SUM(JYJSR_GH) JYJSR_GH,
                       SUM(LXSR) LXSR,
                       SUM(XZDGHLX) XZDGHLX
                  FROM DSC_STAT.T_STAT_YDGH_R A
                 WHERE RQ BETWEEN VN_FIRST_DAY AND VN_LAST_DAY
                 GROUP BY A.KHH, A.YYB
                UNION ALL
                --取非交易日的资产，即非交易日的上个交易日数据
                SELECT A.KHH,
                       A.YYB,
                       SUM(DYSZ) RJDYSZ,
                       0 JYL_CS,
                       0 JYL_GH,
                       0 YJSR,
                       0 YJSR_CS,
                       0 YJSR_GH,
                       0 JYJSR,
                       0 JYJSR_CS,
                       0 JYJSR_GH,
                       0 LXSR,
                       0 XZDGHLX
                  FROM DSC_STAT.T_STAT_YDGH_R A
                  JOIN (SELECT *
                         FROM DSC_CFG.T_XTJYR T
                        WHERE T.ZRR BETWEEN VN_FIRST_DAY AND VN_LAST_MONTHDAY
                          AND T.ZRR > T.JYR) T1
                    ON A.RQ = T1.JYR
                 WHERE RQ BETWEEN VN_QC_RQ AND VN_LAST_DAY
                 GROUP BY A.KHH, A.YYB)
         GROUP BY KHH, YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计月初到统计日总和数据到临时表[DSC_STAT.TMP_T_STAT_YDGH_Y_RJ]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '【ERROR-10002】';
    --记录日志明细——开始
    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计日均购回的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_YDGH_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --日均
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_YDGH_Y
        (YF,
         KHH,
         YYB,
         RJDYSZ,
         JYL_CS,
         JYL_GH,
         YJSR,
         YJSR_CS,
         YJSR_GH,
         JYJSR,
         JYJSR_CS,
         JYJSR_GH,
         LXSR,
         XZDGHLX)
        SELECT VN_YF AS YF,
               A.KHH,
               A.YYB,
               CASE
                   WHEN B.ZRRTS = 0 THEN
                    0
                   ELSE
                    RJDYSZ / B.ZRRTS
               END AS RJDYSZ, --日均总资产
               JYL_CS,
               JYL_GH,
               YJSR,
               YJSR_CS,
               YJSR_GH,
               JYJSR,
               JYJSR_CS,
               JYJSR_GH,
               LXSR,
               XZDGHLX
          FROM DSC_STAT.TMP_T_STAT_YDGH_Y_RJ A,
               (SELECT KHH,
                       (SELECT COUNT(DISTINCT ZRR)
                          FROM DSC_CFG.T_XTJYR
                         WHERE ZRR BETWEEN VN_FIRST_DAY AND VN_LAST_MONTHDAY
                           AND ZRR BETWEEN C.KHRQ AND C.XHRQ) AS ZRRTS,
                       (SELECT COUNT(DISTINCT JYR)
                          FROM DSC_CFG.T_XTJYR
                         WHERE JYR BETWEEN VN_FIRST_DAY AND VN_TJRQ
                           AND JYR BETWEEN C.KHRQ AND C.XHRQ) AS TS --本月在线交易日天数
                  FROM DSC_BAS.T_KHXX_JJYW C) B
         WHERE A.KHH = B.KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计日均购回的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_YDGH_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10003】';
    VN_STEP  := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计期末购回的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_YDGH_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --期未
    INSERT /*+ APPEND*/
    INTO TMP_T_STAT_YDGH_Y
        (YF, KHH, YYB, DGHZQSZ, DGHJE, DGHYJLXSR, SQED, SYED)
        SELECT VN_YF AS YF, KHH, YYB, DGHZQSZ, DGHJE, DGHYJLXSR, SQED, SYED
          FROM DSC_STAT.T_STAT_YDGH_R
         WHERE RQ = VN_LAST_DAY;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计期末购回的相关指标数据，插入临时表[DSC_STAT.TMP_T_STAT_YDGH_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10004】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_YDGH_Y]进行汇总统计，插入目标表[DSC_STAT.T_STAT_YDGH_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --写入结果表
    INSERT /*+ APPEND*/
    INTO DSC_STAT.T_STAT_YDGH_Y
        (YF,
         KHH,
         YYB,
         RJDYSZ,
         JYL_CS,
         JYL_GH,
         YJSR,
         YJSR_CS,
         YJSR_GH,
         JYJSR,
         JYJSR_CS,
         JYJSR_GH,
         LXSR,
         DGHZQSZ,
         DGHJE,
         DGHYJLXSR,
         SQED,
         SYED,
         XZDGHLX)
        SELECT YF,
               B.KHH,
               B.YYB,
               RJDYSZ,
               JYL_CS,
               JYL_GH,
               YJSR,
               YJSR_CS,
               YJSR_GH,
               JYJSR,
               JYJSR_CS,
               JYJSR_GH,
               LXSR,
               DGHZQSZ,
               DGHJE,
               DGHYJLXSR,
               SQED,
               SYED,
               XZDGHLX
          FROM (SELECT VN_YF AS YF,
                       KHH,
                       /*YYB,*/
                       SUM(NVL(RJDYSZ, 0)) RJDYSZ,
                       SUM(NVL(JYL_CS, 0)) JYL_CS,
                       SUM(NVL(JYL_GH, 0)) JYL_GH,
                       SUM(NVL(YJSR, 0)) YJSR,
                       SUM(NVL(YJSR_CS, 0)) YJSR_CS,
                       SUM(NVL(YJSR_GH, 0)) YJSR_GH,
                       SUM(NVL(JYJSR, 0)) JYJSR,
                       SUM(NVL(JYJSR_CS, 0)) JYJSR_CS,
                       SUM(NVL(JYJSR_GH, 0)) JYJSR_GH,
                       SUM(NVL(LXSR, 0)) LXSR,
                       SUM(NVL(DGHZQSZ, 0)) DGHZQSZ,
                       SUM(NVL(DGHJE, 0)) DGHJE,
                       SUM(NVL(DGHYJLXSR, 0)) DGHYJLXSR,
                       SUM(NVL(SQED, 0)) SQED,
                       SUM(NVL(SYED, 0)) SYED,
                       SUM(NVL(XZDGHLX, 0)) XZDGHLX
                  FROM TMP_T_STAT_YDGH_Y
                 GROUP BY KHH /*, YYB */
                ) A
         INNER JOIN DSC_BAS.T_KHXX_JJYW B
            ON A.KHH = B.KHH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --COMMIT;
    --记录日志明细——成功结束
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '临时表[DSC_STAT.TMP_T_STAT_YDGH_Y]进行汇总统计，插入目标表[DSC_STAT.T_STAT_YDGH_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_YDGH_Y';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_T_STAT_YDGH_Y_RJ';

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YDGH_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YWZHLS_KFSJJ_R(O_N_CODE OUT INT,
                                                           O_S_NOTE OUT VARCHAR2,
                                                           I_N_TJRQ IN NUMBER,
                                                           I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YWZHLS_KFSJJ_R
         功能简述：   客户业务综合流水—开放式基金相关日表（维度可扩缩表）
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
        返回：

         算法：


         注意事项：


         数据源：
                 DSC_BAS.T_FP_JGMXLS      ：开放式基金交易明细流水
                 DSC_BAS.T_FP_JGMXLS_HIS  ：开放式基金交易明细流水历史
                 DSC_CFG.T_ZQPZ_DY        ：证券品种对应
                 DSC_BAS.T_KHXX_JJYW      ：客户信息-经纪业务
                 DSC_STAT.T_YWZHLS_SET    ：综合业务流水粒度设置表
                 DSC_CFG.T_BUSI_CODE      ：业务综合代码表
                 DSC_CFG.T_JYLB           ：交易类别表（设置交易量参数）

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/12/24                  创建
    */

    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --最后统计日
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VS_SQL       VARCHAR2(20000);
    VS_SQL_COL   VARCHAR2(4000); --设置的SQL粒度字段

BEGIN

    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);

    --重做删除原数据
    IF I_N_REDO = 1 THEN
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YWZHLS_R]的场外开放式基金交易数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE DSC_STAT.T_STAT_YWZHLS_R
         WHERE RQ = VN_TJRQ
           AND DATA_SOURCE = '02';
        /*        AND BUSI_CODE IN
        (SELECT BUSI_CODE FROM DSC_CFG.T_BUSI_CODE B WHERE B.BUSI_TYPE = '03');*/
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YWZHLS_R]的场外开放式基金交易数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_YWZHLS_R]已删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    ------------------------------
    /*--获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;*/

    --获取证券交易类SQL粒度的SQL
    SELECT WMSYS.WM_CONCAT(A.COLUMNNAME)
      INTO VS_SQL_COL
      FROM DSC_STAT.T_YWZHLS_SET A
     WHERE A.BUSI_TYPE = '03'
       AND A.COL_SET = 1
       AND A.IS_VALID = 1;
    IF VS_SQL_COL IS NOT NULL THEN
        VS_SQL_COL := ',' || VS_SQL_COL;
    END IF;

    O_S_NOTE := '【ERROR-10001】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成统计数据基金交割明细流水到表[DSC_STAT.T_STAT_YWZHLS_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --非交易，即资金明细流水的数据
    --构造生成数据的SQL
    VS_SQL := '
    INSERT INTO DSC_STAT.T_STAT_YWZHLS_R
        (RQ, SCDM, YYB, BZ, FSJE,FSJE_B,FSJE_S,JYFY,JYJ, DATA_SOURCE, NOTE' ||
              VS_SQL_COL || ')
        SELECT RQ, SCDM, YYB, BZ, SUM(FSJE) AS FSJE,SUM(FSJE_B) AS FSJE_B,SUM(FSJE_S) AS FSJE_S,
        SUM(JYFY) AS JYFY,SUM(JYJ) AS JYJ, DATA_SOURCE, NOTE' || VS_SQL_COL || '
          FROM (SELECT B.QRRQ AS RQ,
                       ''7'' AS SCDM,
                       B.YYB,
                       B.BZ,
                       B.QRJE AS FSJE,
                       NULL AS FSJE_B,
                       NULL AS FSJE_S,
                       B.SXF AS JYFY,
                       B.SXF AS JYJ,
                       ''02'' AS DATA_SOURCE,
                       '''' AS NOTE,
                       B.CPDM AS ZQDM,
                       NULL AS ZQLB,
                       ''233'' AS ZQPZ,
                       NULL AS YHDM,
                       ''0'' AS XYBZ,
                       B.WTFS AS WTFS,
                       NULL AS CJBS,
                       C.BUSI_CODE,
                       A.GRJG,
                       A.KHH
                  FROM DSC_BAS.T_KHXX_JJYW A,
                       (SELECT *
                          FROM DSC_BAS.T_FP_JGMXLS
                        UNION ALL
                        SELECT * FROM DSC_HIS.T_FP_JGMXLS_HIS) B,
                       (SELECT *
                          FROM DSC_CFG.T_BUSI_CODE
                         WHERE BUSI_TYPE = ''03''
                           AND IS_CALC = ''1'') C
                 WHERE A.KHH = B.KHH
                   AND B.YWDM = C.TRAN_CODE
                   AND B.QRRQ = ' || VN_TJRQ ||
              ') AA
                 GROUP BY  RQ, SCDM, YYB, BZ, DATA_SOURCE, NOTE' ||
              VS_SQL_COL;
    --记录SQL运行脚本
    PUB_SYS.P_SQL_TRACE(O_N_CODE       => O_N_CODE,
                        O_S_NOTE       => O_S_NOTE,
                        I_S_PROC_OWNER => VS_USER,
                        I_S_PROC_NAME  => VS_PROC_NAME,
                        I_S_EXEC_SQL   => VS_SQL,
                        I_S_NOTE       => '客户业务综合流水—开放式基金相关日表 非交易');
    EXECUTE IMMEDIATE VS_SQL;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    --记录日志明细——结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成统计数据基金交割明细流水到表[DSC_STAT.T_STAT_YWZHLS_R]！',
                              I_S_CHANGEDESC     => '插入数据：' || VN_ROWCOUNT || '条记录！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YWZHLS_KFSJJ_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YWZHLS_Y(O_N_CODE OUT INT,
                                                     O_S_NOTE OUT VARCHAR2,
                                                     I_N_TJRQ IN NUMBER,
                                                     I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YWZHLS_Y
         功能简述：   业务综合流水月统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：


         注意事项：


         数据源：
                 DSC_STAT.T_STAT_YWZHLS_R         ：业务综合流水日表


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/12/26                  创建
    */
    VN_FIRST_DAY NUMBER(8) := PUB_SYS.F_GET_DATE(I_N_TJRQ, 0); --每月第一天
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --最后统计日
    VN_YF        NUMBER(6) := PUB_SYS.F_GET_DATE(I_N_TJRQ, 2); --月份
    --VN_HL_HKD    DSC_CFG.T_HLCS.GSBL%TYPE;
    --VN_HL_USD    DSC_CFG.T_HLCS.GSBL%TYPE;
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);

BEGIN

    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);

    --重做删除原数据
    IF I_N_REDO IN (0, 1, 2) THEN
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YWZHLS_Y]目标分区：=PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        EXECUTE IMMEDIATE 'ALTER TABLE DSC_STAT.T_STAT_YWZHLS_Y TRUNCATE PARTITION PY_' ||
                          VN_YF || '  UPDATE GLOBAL INDEXES';
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YWZHLS_Y]目标分区：=PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_YWZHLS_Y]表' ||
                                                        VN_YF || '分区已删除！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    ------------------------------
    --获取汇率
    --港币
    /*    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;*/

    O_S_NOTE := '【ERROR-10001】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计业务综合流水日表数据，插入表[DSC_STAT.T_STAT_YWZHLS_Y]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_STAT_YWZHLS_Y
        (YF,
         SCDM,
         YYB,
         KHH,
         GRJG,
         ZQDM,
         ZQLB,
         ZQPZ,
         BZ,
         YHDM,
         XYBZ,
         FSJE,
         FSJE_B,
         FSJE_S,
         JYFY,
         JYJ,
         WTFS,
         CJBS,
         BUSI_CODE,
         DATA_SOURCE,
         NOTE)
        SELECT VN_YF AS YF,
               SCDM,
               YYB,
               KHH,
               GRJG,
               ZQDM,
               ZQLB,
               ZQPZ,
               BZ,
               YHDM,
               XYBZ,
               SUM(FSJE) AS FSJE,
               SUM(FSJE_B) AS FSJE_B,
               SUM(FSJE_S) AS FSJE_S,
               SUM(JYFY) AS JYFY,
               SUM(JYJ) AS JYJ,
               WTFS,
               SUM(CJBS) AS CJBS,
               BUSI_CODE,
               DATA_SOURCE,
               NOTE
          FROM DSC_STAT.T_STAT_YWZHLS_R
         WHERE RQ BETWEEN VN_FIRST_DAY AND VN_TJRQ
         GROUP BY SCDM,
                  YYB,
                  KHH,
                  GRJG,
                  ZQDM,
                  ZQLB,
                  ZQPZ,
                  BZ,
                  YHDM,
                  XYBZ,
                  WTFS,
                  BUSI_CODE,
                  DATA_SOURCE,
                  NOTE;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计业务综合流水日表数据，插入表[DSC_STAT.T_STAT_YWZHLS_Y]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YWZHLS_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YWZHLS_ZQFJY_R(O_N_CODE OUT INT,
                                                           O_S_NOTE OUT VARCHAR2,
                                                           I_N_TJRQ IN NUMBER,
                                                           I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YWZHLS_ZQFJY_R
         功能简述：   客户业务综合流水—证券非交易相关日表（维度可扩缩表）
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
        返回：

         算法：
              1、净佣金=实收佣金-(一级费用_经手费 +一级费用_证管费+一级费用_过户费+一级费用_结算费+一级费用_风险基金)
              2、通过 应收金额（YSJE）的正负来判断买卖的方向。


         注意事项：


         数据源：
                 DSC_BAS.T_ZJMXLS         ：资金明细流水
                 DSC_BAS.T_ZJMXLS_HIS     ：历史资金明细流水
                 DSC_BAS.T_XY_ZJMXLS      ：信用资金明细流水
                 DSC_BAS.T_XY_ZJMXLS_HIS  ：信用历史资金明细流水
                 DSC_CFG.T_ZQPZ_DY        ：证券品种对应
                 DSC_BAS.T_KHXX_JJYW      ：客户信息-经纪业务
                 DSC_STAT.T_YWZHLS_SET    ：综合业务流水粒度设置表
                 DSC_CFG.T_BUSI_CODE      ：业务综合代码表
                 DSC_CFG.T_JYLB           ：交易类别表（设置交易量参数）

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/12/24                  创建
    */

    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --最后统计日
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VS_SQL       VARCHAR2(20000);
    VS_SQL_COL   VARCHAR2(4000); --设置的SQL粒度字段

BEGIN

    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);

    --重做删除原数据
    IF I_N_REDO = 1 THEN
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YWZHLS]的柜台非交易数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE DSC_STAT.T_STAT_YWZHLS_R
         WHERE RQ = VN_TJRQ
              --AND DATA_SOURCE = '01'
           AND BUSI_CODE IN
               (SELECT BUSI_CODE FROM DSC_CFG.T_BUSI_CODE B WHERE B.BUSI_TYPE = '02');
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YWZHLS_R]的柜台非交易数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_YWZHLS_R]已删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    ------------------------------
    /*--获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;*/

    --获取证券交易类SQL粒度的SQL
    SELECT WMSYS.WM_CONCAT(A.COLUMNNAME)
      INTO VS_SQL_COL
      FROM DSC_STAT.T_YWZHLS_SET A
     WHERE A.BUSI_TYPE = '02'
       AND A.COL_SET = 1
       AND A.IS_VALID = 1;
    IF VS_SQL_COL IS NOT NULL THEN
        VS_SQL_COL := ',' || VS_SQL_COL;
    END IF;

    O_S_NOTE := '【ERROR-10001】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成统计数据资金明细流水到表[DSC_STAT.T_STAT_YWZHLS_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --非交易，即资金明细流水的数据
    --构造生成数据的SQL
    VS_SQL := '
    INSERT INTO DSC_STAT.T_STAT_YWZHLS_R
        (RQ, SCDM, YYB, BZ, FSJE, DATA_SOURCE, NOTE' || VS_SQL_COL || ')
        SELECT RQ, SCDM, YYB, BZ, SUM(FSJE) AS FSJE, DATA_SOURCE, NOTE' ||
              VS_SQL_COL || '
          FROM (SELECT RQ,
                       ''8'' AS SCDM, --非交易dsc_cfg.t_scdm
                       A.YYB,
                       A.BZ,
                       (SRJE + FCJE) AS FSJE,
                       NULL AS FSJE_B,
                       NULL AS FSJE_S,
                       NULL AS JYFY,
                       NULL AS JYJ,
                       ''01'' AS DATA_SOURCE,
                       NULL AS NOTE,
                       YWKM,
                       A.KHH,
                       C.GRJG,
                       NULL AS ZQDM,
                       NULL AS ZQLB,
                       NULL AS ZQPZ,
                       ZJLY AS YHDM,
                       ''0'' AS XYBZ,
                       NULL AS WTFS,
                       NULL AS CJBS,
                       B.BUSI_CODE
                  FROM (SELECT *
                          FROM DSC_BAS.T_ZJMXLS
                        UNION ALL
                        SELECT * FROM DSC_HIS.T_ZJMXLS_HIS) A,
                       DSC_BAS.T_KHXX_JJYW C,
                       (SELECT *
                          FROM DSC_CFG.T_BUSI_CODE
                         WHERE BUSI_TYPE = ''02''
                           AND IS_CALC = ''1'') B
                 WHERE RQ = ' || VN_TJRQ || '
                   AND A.KHH = C.KHH
                   AND A.YWKM = B.TRAN_CODE
         UNION ALL
                  SELECT RQ,
                       ''8'' AS SCDM, --非交易dsc_cfg.t_scdm
                       A.YYB,
                       A.BZ,
                       (SRJE + FCJE) AS FSJE,
                       NULL AS FSJE_B,
                       NULL AS FSJE_S,
                       NULL AS JYFY,
                       NULL AS JYJ,
                       ''01'' AS DATA_SOURCE,
                       NULL AS NOTE,
                       YWKM,
                       A.KHH,
                       C.GRJG,
                       NULL AS ZQDM,
                       NULL AS ZQLB,
                       NULL AS ZQPZ,
                       ZJLY AS YHDM,
                       ''1'' AS XYBZ,
                       NULL AS WTFS,
                       NULL AS CJBS,
                       B.BUSI_CODE
                  FROM (SELECT *
                          FROM DSC_BAS.T_XY_ZJMXLS
                        UNION ALL
                        SELECT * FROM DSC_HIS.T_XY_ZJMXLS_HIS) A,
                       DSC_BAS.T_KHXX_JJYW C,
                       (SELECT *
                          FROM DSC_CFG.T_BUSI_CODE
                         WHERE BUSI_TYPE = ''02''
                           AND IS_CALC = ''1'') B
                 WHERE RQ = ' || VN_TJRQ || '
                   AND A.KHH = C.KHH
                   AND A.YWKM = B.TRAN_CODE) AA
                 GROUP BY  RQ, SCDM, YYB, BZ, DATA_SOURCE, NOTE' ||
              VS_SQL_COL;
    --记录SQL运行脚本
    PUB_SYS.P_SQL_TRACE(O_N_CODE       => O_N_CODE,
                        O_S_NOTE       => O_S_NOTE,
                        I_S_PROC_OWNER => VS_USER,
                        I_S_PROC_NAME  => VS_PROC_NAME,
                        I_S_EXEC_SQL   => VS_SQL,
                        I_S_NOTE       => '客户业务综合流水—证券非交易相关日表 非交易');
    EXECUTE IMMEDIATE VS_SQL;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    --记录日志明细——结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成统计数据资金明细流水到表[DSC_STAT.T_STAT_YWZHLS_R]！',
                              I_S_CHANGEDESC     => '插入数据：' || VN_ROWCOUNT || '条记录！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YWZHLS_ZQFJY_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YWZHLS_ZQJY_R(O_N_CODE OUT INT,
                                                          O_S_NOTE OUT VARCHAR2,
                                                          I_N_TJRQ IN NUMBER,
                                                          I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YWZHLS_ZQJY_R
         功能简述：   客户业务综合流水—证券交易相关日表（维度可扩缩表）
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
              1、净佣金=实收佣金-(一级费用_经手费 +一级费用_证管费+一级费用_过户费+一级费用_结算费+一级费用_风险基金)
              2、通过 应收金额（YSJE）的正负来判断买卖的方向。
              3、中小板须通过ZQDM进行单独计算数据


         注意事项：


         数据源：
                 DSC_BAS.T_JGMXLS         ：机构明细流水
                 DSC_HIS.T_JGMXLS_HIS     ：交割明细流水历史
                 DSC_BAS.T_XY_JGMXLS      ：信用机构明细流水
                 DSC_HIS.T_XY_JGMXLS_HIS  ：信用交割明细流水历史
                 DSC_CFG.T_ZQPZ_DY        ：证券品种对应
                 DSC_BAS.T_KHXX_JJYW      ：客户信息-经纪业务
                 DSC_STAT.T_YWZHLS_SET    ：综合业务流水粒度设置表
                 DSC_CFG.T_BUSI_CODE      ：业务综合代码表
                 DSC_CFG.T_JYLB           ：交易类别表（设置交易量参数）

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/12/21                  创建
         黄玉钰      2014/06/05                 修改；对于净佣金的获取，直接使用交割表中的JYJ
    */

    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --最后统计日
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VS_SQL       VARCHAR2(20000);
    VS_SQL_COL   VARCHAR2(4000); --设置的SQL粒度字段

BEGIN

    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);

    --重做删除原数据
    IF I_N_REDO = 1 THEN
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YWZHLS]的柜台交易类数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE DSC_STAT.T_STAT_YWZHLS_R
         WHERE RQ = VN_TJRQ
              --AND DATA_SOURCE = '01'
           AND BUSI_CODE IN
               (SELECT BUSI_CODE FROM DSC_CFG.T_BUSI_CODE B WHERE B.BUSI_TYPE = '01');
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YWZHLS_R]的柜台交易类数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_YWZHLS_R]已删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    ------------------------------
    /*--获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;*/

    --获取证券交易类SQL粒度的SQL
    SELECT WMSYS.WM_CONCAT(A.COLUMNNAME)
      INTO VS_SQL_COL
      FROM DSC_STAT.T_YWZHLS_SET A
     WHERE A.BUSI_TYPE = '01'
       AND A.COL_SET = 1
       AND A.IS_VALID = 1;
    IF VS_SQL_COL IS NOT NULL THEN
        VS_SQL_COL := ',' || VS_SQL_COL;
    END IF;

    O_S_NOTE := '【ERROR-10001】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成统计数据交易量排除中小板到表[DSC_STAT.T_STAT_YWZHLS_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --交易量排除中小板
    --构造生成数据的SQL
    VS_SQL := '
    INSERT INTO DSC_STAT.T_STAT_YWZHLS_R
        (RQ, SCDM, YYB, BZ, FSJE, FSJE_B, FSJE_S, JYFY, JYJ, DATA_SOURCE, NOTE' ||
              VS_SQL_COL || ')
        SELECT RQ, SCDM, YYB, BZ, SUM(FSJE) AS FSJE, SUM(FSJE_B) AS FSJE_B, SUM(FSJE_S) AS FSJE_S,
         SUM(JYFY) AS JYFY, SUM(JYJ) AS JYJ, DATA_SOURCE, NOTE' ||
              VS_SQL_COL || '
          FROM (SELECT T.CJRQ AS RQ,
                       T.JYS AS SCDM,
                       T.YYB AS YYB,
                       T.BZ AS BZ,
                       T.CJJE AS FSJE,
                       CASE
                           WHEN YSJE < 0 THEN
                            T.CJJE
                           ELSE
                            0
                       END AS FSJE_B,
                       CASE
                           WHEN YSJE > 0 THEN
                            T.CJJE
                           ELSE
                            0
                       END AS FSJE_S,
                       S1 + S2 + S3 + S4 + S5 + S6 AS JYFY,
                       JYJ AS JYJ,
                       ''01'' AS DATA_SOURCE,
                       NULL AS NOTE,
                       T.KHH,
                       T2.GRJG AS GRJG,
                       T.ZQDM,
                       T.ZQLB,
                       T1.JB3_ZQPZ AS ZQPZ,
                       NULL AS YHDM,
                       ''0'' AS XYBZ,
                       T.WTFS,
                       T.CJBS,
                       T3.BUSI_CODE
                  FROM (SELECT *
                          FROM DSC_BAS.T_JGMXLS
                        UNION ALL
                        SELECT * FROM DSC_HIS.T_JGMXLS_HIS) T,
                       DSC_BAS.T_KHXX_JJYW T2,
                       (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ
                          FROM DSC_CFG.T_ZQPZ_DY D
                         WHERE JB3_ZQPZ <> ''112''
                           AND D.IS_VALID = 1) T1,
                       (SELECT * FROM DSC_CFG.T_BUSI_CODE WHERE BUSI_TYPE = ''01'' AND IS_CALC=''1'') T3
                 WHERE T.CJRQ BETWEEN ' || VN_TJRQ || ' AND ' || VN_TJRQ || '
                   AND T.JYLB IN (SELECT JYLB FROM DSC_CFG.T_JYLB WHERE IS_JSJYL = ''1'')
                   AND T.JYS = T1.JYS
                   AND T.ZQLB = T1.ZQLB
                   AND T.KHH = T2.KHH
                   AND T.JYLB = T3.TRAN_CODE
                   AND NOT (T.ZQDM LIKE ''002%'' AND T.ZQLB = ''A0'' AND T.JYS = ''1'')
             UNION ALL
             SELECT T.CJRQ AS RQ,
                       T.JYS AS SCDM,
                       T.YYB AS YYB,
                       T.BZ AS BZ,
                       T.CJJE AS FSJE,
                       CASE
                           WHEN YSJE < 0 THEN
                            T.CJJE
                           ELSE
                            0
                       END AS FSJE_B,
                       CASE
                           WHEN YSJE > 0 THEN
                            T.CJJE
                           ELSE
                            0
                       END AS FSJE_S,
                       S1 + S2 + S3 + S4 + S5 + S6 AS JYFY,
                       JYJ AS JYJ,
                       ''01'' AS DATA_SOURCE,
                       NULL AS NOTE,
                       T.KHH,
                       T2.GRJG AS GRJG,
                       T.ZQDM,
                       T.ZQLB,
                       T1.JB3_ZQPZ AS ZQPZ,
                       NULL AS YHDM,
                       ''1'' AS XYBZ,
                       T.WTFS,
                       T.CJBS,
                       T3.BUSI_CODE
                  FROM (SELECT *
                          FROM DSC_BAS.T_XY_JGMXLS
                        UNION ALL
                        SELECT * FROM DSC_HIS.T_XY_JGMXLS_HIS) T,
                       DSC_BAS.T_KHXX_JJYW T2,
                       (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ
                          FROM DSC_CFG.T_ZQPZ_DY D
                         WHERE JB3_ZQPZ <> ''112''
                           AND D.IS_VALID = 1) T1,
                       (SELECT * FROM DSC_CFG.T_BUSI_CODE WHERE BUSI_TYPE = ''01'' AND IS_CALC=''1'') T3
                 WHERE T.CJRQ BETWEEN ' || VN_TJRQ || ' AND ' || VN_TJRQ || '
                   AND T.JYLB IN (SELECT JYLB FROM DSC_CFG.T_JYLB WHERE IS_JSJYL = ''1'')
                   AND T.JYS = T1.JYS
                   AND T.ZQLB = T1.ZQLB
                   AND T.KHH = T2.KHH
                   AND T.JYLB = T3.TRAN_CODE
                   AND NOT (T.ZQDM LIKE ''002%'' AND T.ZQLB = ''A0'' AND T.JYS = ''1'')
                   ) AA
                GROUP BY RQ, SCDM, YYB, BZ, DATA_SOURCE, NOTE' || VS_SQL_COL || '
    '; --排除中小板数据（002开头的有申购 ZQLB=A3 的数据）
    --记录SQL运行脚本
    PUB_SYS.P_SQL_TRACE(O_N_CODE       => O_N_CODE,
                        O_S_NOTE       => O_S_NOTE,
                        I_S_PROC_OWNER => VS_USER,
                        I_S_PROC_NAME  => VS_PROC_NAME,
                        I_S_EXEC_SQL   => VS_SQL,
                        I_S_NOTE       => '客户业务综合流水—证券交易相关日表 交易量排除中小板');
    EXECUTE IMMEDIATE VS_SQL;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    --记录日志明细——结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成统计数据交易量排除中小板到表[DSC_STAT.T_STAT_YWZHLS_R]！',
                              I_S_CHANGEDESC     => '插入数据：' || VN_ROWCOUNT || '条记录！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '【ERROR-10002】';
    VN_STEP  := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成统计数据交易量中小板到表[DSC_STAT.T_STAT_YWZHLS_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --交易量中小板
    --构造生成数据的SQL
    --存储过程运行成功
    VS_SQL := '
    INSERT INTO DSC_STAT.T_STAT_YWZHLS_R
        (RQ, SCDM, YYB, BZ, FSJE, FSJE_B, FSJE_S, JYFY, JYJ, DATA_SOURCE, NOTE' ||
              VS_SQL_COL || ')
        SELECT RQ, SCDM, YYB, BZ, SUM(FSJE) AS FSJE, SUM(FSJE_B) AS FSJE_B, SUM(FSJE_S) AS FSJE_S,
         SUM(JYFY) AS JYFY, SUM(JYJ) AS JYJ, DATA_SOURCE, NOTE' ||
              VS_SQL_COL || '
          FROM (SELECT T.CJRQ AS RQ,
                       T.JYS AS SCDM,
                       T.YYB AS YYB,
                       T.BZ AS BZ,
                       T.CJJE AS FSJE,
                       CASE
                           WHEN YSJE < 0 THEN
                            T.CJJE
                           ELSE
                            0
                       END AS FSJE_B,
                       CASE
                           WHEN YSJE > 0 THEN
                            T.CJJE
                           ELSE
                            0
                       END AS FSJE_S,
                       S1 + S2 + S3 + S4 + S5 + S6 AS JYFY,
                       JYJ AS JYJ,
                       ''01'' AS DATA_SOURCE,
                       NULL AS NOTE,
                       T.KHH,
                       T2.GRJG AS GRJG,
                       T.ZQDM,
                       T.ZQLB,
                       T1.JB3_ZQPZ AS ZQPZ,
                       NULL AS YHDM,
                       ''0'' AS XYBZ,
                       T.WTFS,
                       T.CJBS,
                       T3.BUSI_CODE
                  FROM (SELECT *
                          FROM DSC_BAS.T_JGMXLS
                        UNION ALL
                        SELECT * FROM DSC_HIS.T_JGMXLS_HIS) T,
                       DSC_BAS.T_KHXX_JJYW T2,
                       (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ
                          FROM DSC_CFG.T_ZQPZ_DY D
                         WHERE JB3_ZQPZ = ''112''
                           AND D.IS_VALID = 1) T1,
                       (SELECT * FROM DSC_CFG.T_BUSI_CODE WHERE BUSI_TYPE = ''01'' AND IS_CALC=''1'') T3
                 WHERE T.CJRQ BETWEEN ' || VN_TJRQ || ' AND ' || VN_TJRQ || '
                   AND T.JYLB IN (SELECT JYLB FROM DSC_CFG.T_JYLB WHERE IS_JSJYL = ''1'')
                   AND T.JYS = T1.JYS
                   AND T.ZQLB = T1.ZQLB
                   AND T.KHH = T2.KHH
                   AND T.JYLB = T3.TRAN_CODE
                   AND  (T.ZQDM LIKE ''002%'' AND T.ZQLB = ''A0'' AND T.JYS = ''1'')
            UNION ALL
            SELECT T.CJRQ AS RQ,
                       T.JYS AS SCDM,
                       T.YYB AS YYB,
                       T.BZ AS BZ,
                       T.CJJE AS FSJE,
                       CASE
                           WHEN YSJE < 0 THEN
                            T.CJJE
                           ELSE
                            0
                       END AS FSJE_B,
                       CASE
                           WHEN YSJE > 0 THEN
                            T.CJJE
                           ELSE
                            0
                       END AS FSJE_S,
                       S1 + S2 + S3 + S4 + S5 + S6 AS JYFY,
                       JYJ AS JYJ,
                       ''01'' AS DATA_SOURCE,
                       NULL AS NOTE,
                       T.KHH,
                       T2.GRJG AS GRJG,
                       T.ZQDM,
                       T.ZQLB,
                       T1.JB3_ZQPZ AS ZQPZ,
                       NULL AS YHDM,
                       ''1'' AS XYBZ,
                       T.WTFS,
                       T.CJBS,
                       T3.BUSI_CODE
                  FROM (SELECT *
                          FROM DSC_BAS.T_XY_JGMXLS
                        UNION ALL
                        SELECT * FROM DSC_HIS.T_XY_JGMXLS_HIS) T,
                       DSC_BAS.T_KHXX_JJYW T2,
                       (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ
                          FROM DSC_CFG.T_ZQPZ_DY D
                         WHERE JB3_ZQPZ = ''112''
                           AND D.IS_VALID = 1) T1,
                       (SELECT * FROM DSC_CFG.T_BUSI_CODE WHERE BUSI_TYPE = ''01'' AND IS_CALC=''1'') T3
                 WHERE T.CJRQ BETWEEN ' || VN_TJRQ || ' AND ' || VN_TJRQ || '
                   AND T.JYLB IN (SELECT JYLB FROM DSC_CFG.T_JYLB WHERE IS_JSJYL = ''1'')
                   AND T.JYS = T1.JYS
                   AND T.ZQLB = T1.ZQLB
                   AND T.KHH = T2.KHH
                   AND T.JYLB = T3.TRAN_CODE
                   AND  (T.ZQDM LIKE ''002%'' AND T.ZQLB = ''A0'' AND T.JYS = ''1'')
                   ) AA
                GROUP BY RQ, SCDM, YYB, BZ, DATA_SOURCE, NOTE' || VS_SQL_COL || '
    '; --生成中小板数据
    EXECUTE IMMEDIATE VS_SQL;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    --记录日志明细——结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成统计数据交易量中小板到表[DSC_STAT.T_STAT_YWZHLS_R]！',
                              I_S_CHANGEDESC     => '插入数据：' || VN_ROWCOUNT || '条记录！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YWZHLS_ZQJY_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_CLXZ_N(O_N_CODE OUT INT,
                                                       O_S_NOTE OUT VARCHAR2,
                                                       I_N_TJRQ IN NUMBER,
                                                       I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_CLXZ_N
         功能简述：   营业部存量、增量客户统计,特指在本年的活动
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：


         注意事项：
                  组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
                  计算不限制关系的数据

         数据源：
                  主要有
                  1.T_STAT_YYB_CLXZ_Y 营业部存量、增量客户统计,特指在本月的活动
                  2.T_STAT_KHJYSR_Y  客户_客户交易与收入月表


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         黄玉钰      2013/05/22                 创建
         黄玉钰      2013/09/10                 修改：SUM(NVL(,0))改为NVL(SUM(),0)
    */
    --CON_ORG_LVL CONSTANT VARCHAR2(2) := '03';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_KSYF      NUMBER(6);
    VN_JSYF      NUMBER(6);
    --VN_FIRSTDAY_OF_YEAR NUMBER(8); --本年第一天
    VN_YEAR    NUMBER(4); --年份
    VS_TABNAME VARCHAR2(100) := 'DSC_STAT.T_STAT_YYB_CLXZ_N';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    VN_YEAR := SUBSTR(VN_TJRQ, 1, 4);
    --VN_FIRSTDAY_OF_YEAR := VN_YEAR * 10000 + 101;
    VN_KSYF := VN_YEAR * 100 + 1;
    VN_JSYF := SUBSTR(VN_TJRQ, 1, 6);

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN

        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_YYB_CLXZ_N WHERE NF = VN_YEAR;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    /*
     不能简单地在月份的基础上进行统计，
     因为关系必须以当前的为准。
    */
    --先插入资产
    INSERT INTO DSC_STAT.T_STAT_YYB_CLXZ_N
        (NF,
         U_ID,
         YYB,
         KHS_CL,
         JYL_CL,
         YJ_CL,
         JYJ_CL,
         KHZC_CL,
         ZRZC_CL,
         ZCZC_CL,
         ZRSZ_CL,
         ZCSZ_CL,
         KHS_ZL,
         JYL_ZL,
         YJ_ZL,
         JYJ_ZL,
         KHZC_ZL,
         ZRZC_ZL,
         ZCZC_ZL,
         ZRSZ_ZL,
         ZCSZ_ZL)
        SELECT VN_YEAR,
               Y.U_ID,
               YYB,
               KHS_CL,
               0 JYL_CL,
               0 YJ_CL,
               0 JYJ_CL,
               KHZC_CL,
               0 ZRZC_CL,
               0 ZCZC_CL,
               0 ZRSZ_CL,
               0 ZCSZ_CL,
               KHS_ZL,
               0 JYL_ZL,
               0 YJ_ZL,
               0 JYJ_ZL,
               KHZC_ZL,
               0 ZRZC_ZL,
               0 ZCZC_ZL,
               0 ZRSZ_ZL,
               0 ZCSZ_ZL
          FROM DSC_STAT.T_STAT_YYB_CLXZ_Y Y
         WHERE Y.YF = VN_JSYF;
    -- WHERE Y.YF = VN_JSYF;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --更新转入转出相关字段
    MERGE INTO DSC_STAT.T_STAT_YYB_CLXZ_N N
    USING (SELECT A.U_ID,
                  A.YYB,
                  NVL(SUM(A.ZRZC_CL), 0) ZRZC_CL,
                  NVL(SUM(A.ZCZC_CL), 0) ZCZC_CL,
                  NVL(SUM(A.ZRSZ_CL), 0) ZRSZ_CL,
                  NVL(SUM(A.ZCSZ_CL), 0) ZCSZ_CL,
                  NVL(SUM(A.ZRZC_ZL), 0) ZRZC_ZL,
                  NVL(SUM(A.ZCZC_ZL), 0) ZCZC_ZL,
                  NVL(SUM(A.ZRSZ_ZL), 0) ZRSZ_ZL,
                  NVL(SUM(A.ZCSZ_ZL), 0) ZCSZ_ZL,
                  SUM(A.JYL_CL) JYL_CL,
                  SUM(A.YJ_CL) YJ_CL,
                  SUM(A.JYJ_CL) JYJ_CL,
                  SUM(A.JYL_ZL) JYL_ZL,
                  SUM(A.YJ_ZL) YJ_ZL,
                  SUM(A.JYJ_ZL) JYJ_ZL
             FROM DSC_STAT.T_STAT_YYB_CLXZ_Y A
            WHERE A.YF BETWEEN VN_KSYF AND VN_JSYF
            GROUP BY A.U_ID, A.YYB) Y
    ON (N.U_ID = Y.U_ID AND N.YYB = Y.YYB AND N.NF = VN_YEAR)
    WHEN MATCHED THEN
        UPDATE
           SET N.ZRZC_CL = Y.ZRZC_CL,
               N.ZCZC_CL = Y.ZCZC_CL,
               N.ZRSZ_CL = Y.ZRSZ_CL,
               N.ZCSZ_CL = Y.ZCSZ_CL,
               N.ZRZC_ZL = Y.ZRZC_ZL,
               N.ZCZC_ZL = Y.ZCZC_ZL,
               N.ZRSZ_ZL = Y.ZRSZ_ZL,
               N.ZCSZ_ZL = Y.ZCSZ_ZL,
               N.JYL_CL  = Y.JYL_CL,
               N.YJ_CL   = Y.YJ_CL,
               N.JYJ_CL  = Y.JYJ_CL;

    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_CLXZ_N;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_CLXZ_Y(O_N_CODE OUT INT,
                                                       O_S_NOTE OUT VARCHAR2,
                                                       I_N_TJRQ IN NUMBER,
                                                       I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_CLXZ_Y
         功能简述：   营业部存量、增量客户统计,特指在本月的活动
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
                 参照p_stat_ry_clxz_y取数

         注意事项：
                  组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
                  计算不限制关系的数据

         数据源：
                  主要有
                  1.T_STAT_KHZC_Y 客户_客户月资产表
                  2.T_STAT_KHJYSR_Y  客户_客户交易与收入月表


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         黄玉钰      2013/05/22                 创建
         胡阳明      2013/08/27                 修改：增加限定日期，防重跑出问题 AND KH.KHRQ < VN_TJRQ,KHS_CL 和KHS_ZL  增加销户判断
         刘官勤      2015/03/31                 修改：去掉关联客户关系表
         吴邦杰      2015/06/09                 修改：客户状态为字符串型，需加上引号。否则在某些情况下会报错
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '03';
    VS_PROC_NAME        VARCHAR2(100);
    VN_LOGID            INT; --LOG 表记录ID
    VN_ROWCOUNT         INT; --记录数
    VN_STEP             INT; --动作步数
    VN_PROC_NO          NUMBER(10);
    VS_USER             VARCHAR2(30);
    VN_TJRQ             NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF             NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6);
    VN_FIRSTDAY_OF_YEAR NUMBER(8); --本年第一天
    VS_TABNAME          VARCHAR2(100) := 'DSC_STAT.T_STAT_YYB_CLXZ_Y';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    VN_FIRSTDAY_OF_YEAR := SUBSTR(VN_TJRQ, 1, 4) * 10000 + 101;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_YYB_CLXZ_Y WHERE YF = VN_TJYF;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_STAT_YYB_CLXZ_Y
        (YF,
         U_ID,
         YYB,
         KHS_CL,
         JYL_CL,
         YJ_CL,
         JYJ_CL,
         KHZC_CL,
         ZRZC_CL,
         ZCZC_CL,
         ZRSZ_CL,
         ZCSZ_CL,
         KHS_ZL,
         JYL_ZL,
         YJ_ZL,
         JYJ_ZL,
         KHZC_ZL,
         ZRZC_ZL,
         ZCZC_ZL,
         ZRSZ_ZL,
         ZCSZ_ZL)
        SELECT VN_TJYF,
               CON_ORG_LVL || '-' || KH.YYB U_ID,
               KH.YYB AS YYB,
               COUNT(CASE
                         WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR AND
                              (KH.KHZT != '3' OR (KH.KHZT = '3' AND KH.XHRQ >= VN_TJRQ)) THEN --限定统计时为非注销客户
                          A.KHH
                         ELSE
                          NULL
                     END) KHS_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR AND KH.KHRQ < VN_TJRQ THEN
                            NVL(JY.JYL, 0)
                           ELSE
                            0
                       END),
                   0) JYL_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR AND KH.KHRQ < VN_TJRQ THEN
                            NVL(JY.YJSR, 0)
                           ELSE
                            0
                       END),
                   0) YJ_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR AND KH.KHRQ < VN_TJRQ THEN
                            NVL(JY.JYJ, 0)
                           ELSE
                            0
                       END),
                   0) JYJ_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR AND KH.KHRQ < VN_TJRQ THEN
                            A.YMZZC
                           ELSE
                            0
                       END),
                   0) KHZC_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR AND KH.KHRQ < VN_TJRQ THEN
                            (A.CRJE + A.ZRZQSZ)
                           ELSE
                            0
                       END),
                   0) ZRZC_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR AND KH.KHRQ < VN_TJRQ THEN
                            (A.QCJE + A.ZCZQSZ)
                           ELSE
                            0
                       END),
                   0) ZCZC_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR AND KH.KHRQ < VN_TJRQ THEN
                            A.ZRZQSZ
                           ELSE
                            0
                       END),
                   0) ZRSZ_CL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ < VN_FIRSTDAY_OF_YEAR AND KH.KHRQ < VN_TJRQ THEN
                            A.ZCZQSZ
                           ELSE
                            0
                       END),
                   0) ZCSZ_CL,
               COUNT(CASE
                         WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR AND KH.KHRQ < VN_TJRQ AND
                              (KH.KHZT != '3' OR (KH.KHZT = '3' AND KH.XHRQ >= VN_TJRQ)) THEN --限定统计时为非注销客户
                          A.KHH
                         ELSE
                          NULL
                     END) KHS_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR AND KH.KHRQ < VN_TJRQ THEN
                            NVL(JY.JYL, 0)
                           ELSE
                            0
                       END),
                   0) JYL_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR AND KH.KHRQ < VN_TJRQ THEN
                            NVL(JY.YJSR, 0)
                           ELSE
                            0
                       END),
                   0) YJ_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR AND KH.KHRQ < VN_TJRQ THEN
                            NVL(JY.JYJ, 0)
                           ELSE
                            0
                       END),
                   0) JYJ_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR AND KH.KHRQ < VN_TJRQ THEN
                            A.YMZZC
                           ELSE
                            0
                       END),
                   0) KHZC_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR AND KH.KHRQ < VN_TJRQ THEN
                            (A.CRJE + A.ZRZQSZ)
                           ELSE
                            0
                       END),
                   0) ZRZC_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR AND KH.KHRQ < VN_TJRQ THEN
                            (A.QCJE + A.ZCZQSZ)
                           ELSE
                            0
                       END),
                   0) ZCZC_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR AND KH.KHRQ < VN_TJRQ THEN
                            A.ZRZQSZ
                           ELSE
                            0
                       END),
                   0) ZRSZ_ZL,
               NVL(SUM(CASE
                           WHEN KH.KHRQ >= VN_FIRSTDAY_OF_YEAR AND KH.KHRQ < VN_TJRQ THEN
                            A.ZCZQSZ
                           ELSE
                            0
                       END),
                   0) ZCSZ_ZL
          FROM DSC_STAT.T_STAT_KHZC_Y A
          JOIN DSC_BAS.T_KHXX_JJYW KH ON KH.KHH = A.KHH
          LEFT JOIN DSC_STAT.T_STAT_KHJYSR_Y JY ON JY.KHH = A.KHH
                                               AND JY.YF = A.YF
         WHERE A.YF = VN_TJYF
         GROUP BY KH.YYB;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_CLXZ_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_GGQQ_R(O_N_CODE OUT INT,
                                                       O_S_NOTE OUT VARCHAR2,
                                                       I_N_TJRQ IN NUMBER,
                                                       I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_GGQQ_R
         功能简述：   营业部个股期权日统计表统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
                 参照p_stat_yyb_rzrq_y取数

         注意事项：
                  组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
                  计算不限制关系的数据

         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡丹丹      2015/01/06     2.0.0.1     创建
         胡丹丹      2015/04/27     2.0.0.2     修改：更正KHS_XK的取法
         刘官勤      2016/11/04     2.0.0.3     修改：对DSC_STAT.T_STAT_YYB_GGQQ_R表中后期新增的字段增加赋值处理
    */
    --CON_ORG_LVL CONSTANT VARCHAR2(2) := '03';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_YYB_GGQQ_R';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_YYB_GGQQ_R WHERE RQ = VN_TJRQ;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_YYB_GGQQ_R
        (RQ,
         YYB,
         KHS,
         KHS_XK,
         JYL,
         YJSR,
         JYJ,
         JYBS,
         JYFY,
         ZZC,
         ZQSZ,
         ZJYE,
         CCCB,
         ZYBZJ,
         SXYK,
         CRJE,
         QCJE,
         ZQSZ_QLC,
         ZQSZ_YWC,
         CJSL_MRKC,
         CJSL_MCKC,
         CJSL_MCPC,
         CJSL_MRPC,
         CJSL_BDKC,
         CJSL_BDPC,
         CJSL,
         ZQSL_QLC,
         ZQSL_YWC,
         JYL_MRKC,
         JYL_MCKC,
         JYL_MCPC,
         JYL_MRPC,
         JYL_BDKC,
         JYL_BDPC)
        SELECT VN_TJRQ,
               A.YYB,
               COUNT(A.KHH) AS KHS,
               COUNT(CASE
                         WHEN KH.KHRQ = VN_TJRQ THEN
                          A.KHH
                         ELSE
                          NULL
                     END) AS KHS_XK,
               NVL(SUM(A.JYL), 0) AS JYL,
               NVL(SUM(A.YJSR), 0) AS YJSR,
               NVL(SUM(A.JYJ), 0) AS JYJ,
               NVL(SUM(A.JYBS), 0) AS JYBS,
               NVL(SUM(A.JYFY), 0) AS JYFY,
               NVL(SUM(A.ZZC), 0) AS ZZC,
               NVL(SUM(A.ZQSZ), 0) AS ZQSZ,
               NVL(SUM(A.ZJYE), 0) AS ZJYE,
               NVL(SUM(A.CCCB), 0) AS CCCB,
               NVL(SUM(A.ZYBZJ), 0) AS ZYBZJ,
               NVL(SUM(A.SXYK), 0) AS SXYK,
               NVL(SUM(A.CRJE), 0) AS CRJE,
               NVL(SUM(A.QCJE), 0) AS QCJE,
               NVL(SUM(A.ZQSZ_QLC), 0) AS ZQSZ_QLC,
               NVL(SUM(A.ZQSZ_YWC), 0) AS ZQSZ_YWC,
               NVL(SUM(A.CJSL_MRKC), 0) AS CJSL_MRKC,
               NVL(SUM(A.CJSL_MCKC), 0) AS CJSL_MCKC,
               NVL(SUM(A.CJSL_MCPC), 0) AS CJSL_MCPC,
               NVL(SUM(A.CJSL_MRPC), 0) AS CJSL_MRPC,
               NVL(SUM(A.CJSL_BDKC), 0) AS CJSL_BDKC,
               NVL(SUM(A.CJSL_BDPC), 0) AS CJSL_BDPC,
               NVL(SUM(A.CJSL), 0) AS CJSL,
               NVL(SUM(A.ZQSL_QLC), 0) AS ZQSL_QLC,
               NVL(SUM(A.ZQSL_YWC), 0) AS ZQSL_YWC,
               NVL(SUM(A.JYL_MRKC), 0) AS JYL_MRKC,
               NVL(SUM(A.JYL_MCKC), 0) AS JYL_MCKC,
               NVL(SUM(A.JYL_MCPC), 0) AS JYL_MCPC,
               NVL(SUM(A.JYL_MRPC), 0) AS JYL_MRPC,
               NVL(SUM(A.JYL_BDKC), 0) AS JYL_BDKC,
               NVL(SUM(A.JYL_BDPC), 0) AS JYL_BDPC
          FROM DSC_STAT.T_STAT_GGQQ_R A
          JOIN (SELECT KHH, XHRQ, KHRQ FROM DSC_BAS.T_KHXX_GGQQ WHERE KHRQ <= VN_TJRQ) KH
            ON KH.KHH = A.KHH
         WHERE A.RQ = VN_TJRQ
         GROUP BY A.YYB;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_GGQQ_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_GGQQ_Y(O_N_CODE OUT INT,
                                                       O_S_NOTE OUT VARCHAR2,
                                                       I_N_TJRQ IN NUMBER,
                                                       I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_GGQQ_Y
         功能简述：   营业部个股期权月统计表统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
                 参照p_stat_ry_rzrq_y取数

         注意事项：
                  组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
                  计算不限制关系的数据

         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡丹丹      2015/01/06     2.0.0.1      创建
         胡丹丹      2015/04/27     2.0.0.2     修改：更正KHS_XK的取法
         刘官勤      2016/11/04     2.0.0.3     修改：对DSC_STAT.T_STAT_YYB_GGQQ_Y表中后期新增的字段增加赋值处理
    */
    --CON_ORG_LVL CONSTANT VARCHAR2(2) := '03';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_FIRST_DAY NUMBER(8);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_YYB_GGQQ_Y';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --月初
    VN_FIRST_DAY := PUB_SYS.F_GET_DATE(VN_TJRQ, 0);

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_YYB_GGQQ_Y WHERE YF = VN_TJYF;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --2.0 统计分组关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_YYB_GGQQ_Y
        (YF,
         YYB,
         KHS,
         KHS_XK,
         JYL,
         YJSR,
         JYJ,
         JYBS,
         JYFY,
         QMZZC,
         QCZZC,
         RJZZC,
         QMZQSZ,
         QMZJYE,
         CCCB,
         ZYBZJ,
         SXYK,
         CRJE,
         QCJE,
         QMZQSZ_QLC,
         QMZQSZ_YWC,
         CJSL_MRKC,
         CJSL_MCKC,
         CJSL_MCPC,
         CJSL_MRPC,
         CJSL_BDKC,
         CJSL_BDPC,
         CJSL,
         QMZQSL_QLC,
         QMZQSL_YWC,
         JYL_MRKC,
         JYL_MCKC,
         JYL_MCPC,
         JYL_MRPC,
         JYL_BDKC,
         JYL_BDPC)
        SELECT VN_TJYF,
               A.YYB,
               COUNT(A.KHH) AS KHS,
               COUNT(CASE
                         WHEN KH.KHRQ BETWEEN VN_FIRST_DAY AND VN_TJRQ THEN
                          A.KHH
                         ELSE
                          NULL
                     END) AS KHS_XK,
               NVL(SUM(A.JYL), 0) AS JYL,
               NVL(SUM(A.YJSR), 0) AS YJSR,
               NVL(SUM(A.JYJ), 0) AS JYJ,
               NVL(SUM(A.JYBS), 0) AS JYBS,
               NVL(SUM(A.JYFY), 0) AS JYFY,
               NVL(SUM(A.QMZZC), 0) AS QMZZC,
               NVL(SUM(A.QCZZC), 0) AS QCZZC,
               NVL(SUM(A.RJZZC), 0) AS RJZZC,
               NVL(SUM(A.QMZQSZ), 0) AS QMZQSZ,
               NVL(SUM(A.QMZJYE), 0) AS QMZJYE,
               NVL(SUM(A.CCCB), 0) AS CCCB,
               NVL(SUM(A.ZYBZJ), 0) AS ZYBZJ,
               NVL(SUM(A.SXYK), 0) AS SXYK,
               NVL(SUM(A.CRJE), 0) AS CRJE,
               NVL(SUM(A.QCJE), 0) AS QCJE,
               NVL(SUM(A.QMZQSZ_QLC), 0) AS QMZQSZ_QLC,
               NVL(SUM(A.QMZQSZ_YWC), 0) AS QMZQSZ_YWC,
               NVL(SUM(A.CJSL_MRKC), 0) AS CJSL_MRKC,
               NVL(SUM(A.CJSL_MCKC), 0) AS CJSL_MCKC,
               NVL(SUM(A.CJSL_MCPC), 0) AS CJSL_MCPC,
               NVL(SUM(A.CJSL_MRPC), 0) AS CJSL_MRPC,
               NVL(SUM(A.CJSL_BDKC), 0) AS CJSL_BDKC,
               NVL(SUM(A.CJSL_BDPC), 0) AS CJSL_BDPC,
               NVL(SUM(A.CJSL), 0) AS CJSL,
               NVL(SUM(A.QMZQSL_QLC), 0) AS QMZQSL_QLC,
               NVL(SUM(A.QMZQSL_YWC), 0) AS QMZQSL_YWC,
               NVL(SUM(A.JYL_MRKC), 0) AS JYL_MRKC,
               NVL(SUM(A.JYL_MCKC), 0) AS JYL_MCKC,
               NVL(SUM(A.JYL_MCPC), 0) AS JYL_MCPC,
               NVL(SUM(A.JYL_MRPC), 0) AS JYL_MRPC,
               NVL(SUM(A.JYL_BDKC), 0) AS JYL_BDKC,
               NVL(SUM(A.JYL_BDPC), 0) AS JYL_BDPC
          FROM DSC_STAT.T_STAT_GGQQ_Y A
          JOIN (SELECT KHH, XHRQ, KHRQ FROM DSC_BAS.T_KHXX_GGQQ WHERE KHRQ <= VN_TJRQ) KH
            ON KH.KHH = A.KHH
         WHERE A.YF = VN_TJYF
         GROUP BY A.YYB;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_GGQQ_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_GPZYHG_R(O_N_CODE OUT INT,
                                                         O_S_NOTE OUT VARCHAR2,
                                                         I_N_TJRQ IN INT,
                                                         I_N_REDO IN NUMBER DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_YYB_GPZYHG_R
         功能简述：   股票质押回购营业部日统计表
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：


         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                  操作
         黄玉钰      2013/09/25                创建

    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);
    --删除原数据
    IF I_N_REDO = 1 THEN
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YYB_GPZYHG_R]目标表，日期：=' ||
                                                        VN_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE DSC_STAT.T_STAT_YYB_GPZYHG_R WHERE RQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YYB_GPZYHG_R]目标表，日期：=' ||
                                                        VN_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_YYB_GPZYHG_R]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计股票质押回购客户日报表数据到[DSC_STAT.T_STAT_YYB_GPZYHG_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_YYB_GPZYHG_R
        (RQ,
         YYB,
         GPZYHGKHS,
         GPZYHGKHS_XZ,
         DYSZ,
         JYL_CS,
         JYL_HG,
         YJSR,
         LXSR,
         DHGZQSZ,
         DHGJE,
         DHGYJLXSR,
         SQED,
         SYED,
         XZDHGLX)
        SELECT VN_TJRQ,
               YYB,
               0 AS GPZYHGKHS,
               0 AS GPZYHGKHS_XZ,
               NVL(SUM(DYSZ), 0) AS DYSZ,
               NVL(SUM(JYL_CS), 0) AS JYL_CS,
               NVL(SUM(JYL_HG), 0) AS JYL_HG,
               NVL(SUM(YJSR), 0) AS YJSR,
               NVL(SUM(LXSR), 0) AS LXSR,
               NVL(SUM(DHGZQSZ), 0) AS DHGZQSZ,
               NVL(SUM(DHGJE), 0) AS DHGJE,
               NVL(SUM(DHGYJLXSR), 0) AS DHGYJLXSR,
               NVL(SUM(SQED), 0) AS SQED,
               NVL(SUM(SYED), 0) AS SYED,
               NVL(SUM(XZDHGLX), 0) AS XZDHGLX
          FROM DSC_STAT.T_STAT_GPZYHG_R A
         WHERE A.RQ = VN_TJRQ
         GROUP BY A.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计股票质押回购客户日报表数据到[DSC_STAT.T_STAT_YYB_GPZYHG_R]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计股票质押回购开户数/当日新增开户数到[DSC_STAT.T_STAT_YYB_GPZYHG_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    MERGE INTO DSC_STAT.T_STAT_YYB_GPZYHG_R A
    USING (SELECT YYB,
                  COUNT(DISTINCT KHH) AS KHS,
                  COUNT(DISTINCT CASE
                            WHEN KHRQ = VN_TJRQ THEN
                             KHH
                            ELSE
                             NULL
                        END) AS KHS_XZ
             FROM DSC_BAS.T_GDFJQX
            WHERE GDFJQX = '110'
              AND KHRQ <= VN_TJRQ
            GROUP BY YYB) B
    ON (A.YYB = B.YYB)
    WHEN MATCHED THEN
        UPDATE SET A.GPZYHGKHS = B.KHS, A.GPZYHGKHS_XZ = B.KHS_XZ WHERE A.RQ = VN_TJRQ
    WHEN NOT MATCHED THEN
        INSERT VALUES (VN_TJRQ, B.YYB, B.KHS, B.KHS_XZ, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计股票质押回购开户数/当日新增开户数到[DSC_STAT.T_STAT_YYB_GPZYHG_R]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_GPZYHG_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_GPZYHG_Y(O_N_CODE OUT INT,
                                                         O_S_NOTE OUT VARCHAR2,
                                                         I_N_TJRQ IN INT,
                                                         I_N_REDO IN NUMBER DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_YYB_GPZYHG_y
         功能简述：   股票质押回购营业部月统计表
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：
              1.对t_stat_GPZYHG_y进行按日期限制后统计

         注意事项：


         数据源：
              1. 股票质押回购营业部日统计表 t_stat_yyb_GPZYHG_r

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                  操作
         黄玉钰      2013/09/25                创建

    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_MONTH     NUMBER(6) := PUB_SYS.F_GET_DATE(VN_TJRQ, 2); --月份
    VN_KSRQ      NUMBER(8) := PUB_SYS.F_GET_DATE(VN_TJRQ, 0); --统计开始日期取月初
    VN_JSRQ      NUMBER(8) := VN_TJRQ; --统计结束日期取统计日期
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);
    --删除原数据
    O_S_NOTE := '【ERROR-10000】';
    IF I_N_REDO IN (0, 1, 2) THEN
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YYB_GPZYHG_Y]目标表，月份：=' ||
                                                        VN_MONTH || '数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        --删除数据
        DELETE DSC_STAT.T_STAT_YYB_GPZYHG_Y WHERE YF = VN_MONTH;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YYB_GPZYHG_Y]目标表，月份：=' ||
                                                        VN_MONTH || '数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_YYB_GPZYHG_Y]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计数据到[DSC_STAT.T_STAT_YYB_GPZYHG_Y]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --统计数据，写入表中
    INSERT INTO DSC_STAT.T_STAT_YYB_GPZYHG_Y
        (YF,
         YYB,
         GPZYHGKHS,
         GPZYHGKHS_XZ,
         YJDYSZ,
         JYL_CS,
         JYL_HG,
         YJSR,
         LXSR,
         DHGZQSZ,
         DHGJE,
         DHGYJLXSR,
         SQED,
         SYED,
         XZDHGLX)
        SELECT VN_MONTH AS YF,
               A.YYB AS YYB,
               0 AS GPZYHGKHS,
               0 AS GPZYHGKHS_XZ,
               NVL(SUM(A.DYSZ), 0) AS DYSZ,
               NVL(SUM(A.JYL_CS), 0) AS JYL_CS,
               NVL(SUM(A.JYL_HG), 0) AS JYL_HG,
               NVL(SUM(A.YJSR), 0) AS YJSR,
               NVL(SUM(A.LXSR), 0) AS LXSR,
               SUM(CASE RQ --取期末相关数据
                       WHEN VN_JSRQ THEN
                        A.DHGZQSZ
                       ELSE
                        0
                   END) AS DHGZQSZ,
               SUM(CASE RQ
                       WHEN VN_JSRQ THEN
                        A.DHGJE
                       ELSE
                        0
                   END) AS DHGJE,
               SUM(CASE RQ
                       WHEN VN_JSRQ THEN
                        A.DHGYJLXSR
                       ELSE
                        0
                   END) AS DHGYJLXSR,
               SUM(CASE RQ
                       WHEN VN_JSRQ THEN
                        A.SQED
                       ELSE
                        0
                   END) AS SQED,
               SUM(CASE RQ
                       WHEN VN_JSRQ THEN
                        A.SYED
                       ELSE
                        0
                   END) AS SYED,
               NVL(SUM(A.XZDHGLX), 0) AS XZDHGLX
          FROM DSC_STAT.T_STAT_YYB_GPZYHG_R A
         WHERE A.RQ BETWEEN VN_KSRQ AND VN_JSRQ --限定日期，统计
         GROUP BY A.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计数据到[DSC_STAT.T_STAT_YYB_GPZYHG_Y]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计当日股票质押回购开户数到[DSC_STAT.T_STAT_YYB_GPZYHG_Y]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    MERGE INTO DSC_STAT.T_STAT_YYB_GPZYHG_Y A
    USING (SELECT YYB,
                  COUNT(DISTINCT KHH) AS KHS,
                  COUNT(DISTINCT CASE
                            WHEN KHRQ BETWEEN VN_KSRQ AND VN_JSRQ THEN
                             KHH
                            ELSE
                             NULL
                        END) AS KHS_XZ
             FROM DSC_BAS.T_GDFJQX
            WHERE GDFJQX = '110'
              AND KHRQ <= VN_TJRQ
            GROUP BY YYB) B
    ON (A.YYB = B.YYB)
    WHEN MATCHED THEN
        UPDATE SET A.GPZYHGKHS = B.KHS, A.GPZYHGKHS_XZ = B.KHS_XZ WHERE A.YF = VN_MONTH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计当日股票质押回购开户数到[DSC_STAT.T_STAT_YYB_GPZYHG_Y]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_GPZYHG_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_JRCP_R(O_N_CODE OUT INT,
                                                       O_S_NOTE OUT VARCHAR2,
                                                       I_N_TJRQ IN NUMBER,
                                                       I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_JRCP_R
         功能简述：   金融产品_营业部日统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做     1：重做
         返回：

         算法：
                 参照p_stat_yyb_rzrq_y取数

         注意事项：

         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡丹丹      2015/07/23     2.0.0.1     创建
    */
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_YYB_JRCP_R';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表' ||
                                                        VN_TJRQ || '数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_YYB_JRCP_R WHERE RQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;

        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表' ||
                                                        VN_TJRQ || '数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_YYB_JRCP_R
        (RQ,
         YYB,
         KHS,
         KHS_JG,
         KHS_GR,
         KHS_XKH,
         KHS_XKH_JG,
         KHS_XKH_GR,
         KHS_XH,
         KHS_XH_JG,
         KHS_XH_GR,
         CJBS,
         CJSL,
         CJJE,
         CJSL_RG,
         CJJE_RG,
         CJJG_RG,
         CJSL_SG,
         CJJE_SG,
         CJJG_SG,
         CJBS_SH,
         CJSL_SH,
         CJJE_SH,
         CJJG_SH,
         CJSL_QZ,
         CJJE_QZ,
         CJSL_QJ,
         CJJE_QJ,
         FHJE,
         ZRSL,
         ZRJE,
         ZCSL,
         ZCJE,
         CYRS,
         JGCYRS,
         GRCYRS,
         CYSL,
         JGCYSL,
         GRCYSL,
         CYSZ,
         JGCYSZ,
         GRCYSZ,
         CJSL_XYMR,
         CJJE_XYMR,
         CJBS_XYMR,
         CJSL_XYMC,
         CJJE_XYMC,
         CJBS_XYMC,
         CJSL_BJMR,
         CJJE_BJMR,
         CJBS_BJMR,
         CJSL_BJMC,
         CJJE_BJMC,
         CJBS_BJMC,
         CJSL_ZSSMR,
         CJJE_ZSSMR,
         CJBS_ZSSMR,
         CJSL_ZSSMC,
         CJJE_ZSSMC,
         CJBS_ZSSMC)
        SELECT VN_TJRQ RQ,
               A.YYB,
               NVL(B.KHS, 0) KHS,
               NVL(B.KHS_JG, 0) KHS_JG,
               NVL(B.KHS_GR, 0) KHS_GR,
               NVL(B.KHS_XKH, 0) KHS_XKH,
               NVL(B.KHS_XKH_JG, 0) KHS_XKH_JG,
               NVL(B.KHS_XKH_GR, 0) KHS_XKH_GR,
               NVL(B.KHS_XH, 0) KHS_XH,
               NVL(B.KHS_XH_JG, 0) KHS_XH_JG,
               NVL(B.KHS_XH_GR, 0) KHS_XH_GR,
               NVL(A.CJBS, 0) AS CJBS,
               NVL(A.CJSL, 0) AS CJSL,
               NVL(A.CJJE, 0) AS CJJE,
               NVL(A.CJSL_RG, 0) AS CJSL_RG,
               NVL(A.CJJE_RG, 0) AS CJJE_RG,
               NVL(A.CJJG_RG, 0) AS CJJG_RG,
               NVL(A.CJSL_SG, 0) AS CJSL_SG,
               NVL(A.CJJE_SG, 0) AS CJJE_SG,
               NVL(A.CJJG_SG, 0) AS CJJG_SG,
               NVL(A.CJBS_SH, 0) AS CJBS_SH,
               NVL(A.CJSL_SH, 0) AS CJSL_SH,
               NVL(A.CJJE_SH, 0) AS CJJE_SH,
               NVL(A.CJJG_SH, 0) AS CJJG_SH,
               NVL(A.CJSL_QZ, 0) AS CJSL_QZ,
               NVL(A.CJJE_QZ, 0) AS CJJE_QZ,
               NVL(A.CJSL_QJ, 0) AS CJSL_QJ,
               NVL(A.CJJE_QJ, 0) AS CJJE_QJ,
               NVL(A.FHJE, 0) AS FHJE,
               NVL(A.ZRSL, 0) AS ZRSL,
               NVL(A.ZRJE, 0) AS ZRJE,
               NVL(A.ZCSL, 0) AS ZCSL,
               NVL(A.ZCJE, 0) AS ZCJE,
               NVL(A.CYRS, 0) AS CYRS,
               NVL(A.JGCYRS, 0) AS JGCYRS,
               NVL(A.GRCYRS, 0) AS GRCYRS,
               NVL(A.CYSL, 0) AS CYSL,
               NVL(A.JGCYSL, 0) AS JGCYSL,
               NVL(A.GRCYSL, 0) AS GRCYSL,
               NVL(A.CYSZ, 0) AS CYSZ,
               NVL(A.JGCYSZ, 0) AS JGCYSZ,
               NVL(A.GRCYSZ, 0) AS GRCYSZ,
               NVL(A.CJSL_XYMR, 0) AS CJSL_XYMR,
               NVL(A.CJJE_XYMR, 0) AS CJJE_XYMR,
               NVL(A.CJBS_XYMR, 0) AS CJBS_XYMR,
               NVL(A.CJSL_XYMC, 0) AS CJSL_XYMC,
               NVL(A.CJJE_XYMC, 0) AS CJJE_XYMC,
               NVL(A.CJBS_XYMC, 0) AS CJBS_XYMC,
               NVL(A.CJSL_BJMR, 0) AS CJSL_BJMR,
               NVL(A.CJJE_BJMR, 0) AS CJJE_BJMR,
               NVL(A.CJBS_BJMR, 0) AS CJBS_BJMR,
               NVL(A.CJSL_BJMC, 0) AS CJSL_BJMC,
               NVL(A.CJJE_BJMC, 0) AS CJJE_BJMC,
               NVL(A.CJBS_BJMC, 0) AS CJBS_BJMC,
               NVL(A.CJSL_ZSSMR, 0) AS CJSL_ZSSMR,
               NVL(A.CJJE_ZSSMR, 0) AS CJJE_ZSSMR,
               NVL(A.CJBS_ZSSMR, 0) AS CJBS_ZSSMR,
               NVL(A.CJSL_ZSSMC, 0) AS CJSL_ZSSMC,
               NVL(A.CJJE_ZSSMC, 0) AS CJJE_ZSSMC,
               NVL(A.CJBS_ZSSMC, 0) AS CJBS_ZSSMC
          FROM (SELECT YYB,
                       SUM(NVL(CJBS, 0)) AS CJBS,
                       SUM(NVL(CJSL, 0)) AS CJSL,
                       SUM(NVL(CJJE, 0)) AS CJJE,
                       SUM(NVL(CJSL_RG, 0)) AS CJSL_RG,
                       SUM(NVL(CJJE_RG, 0)) AS CJJE_RG,
                       SUM(NVL(CJJG_RG, 0)) AS CJJG_RG,
                       SUM(NVL(CJSL_SG, 0)) AS CJSL_SG,
                       SUM(NVL(CJJE_SG, 0)) AS CJJE_SG,
                       SUM(NVL(CJJG_SG, 0)) AS CJJG_SG,
                       SUM(NVL(CJBS_SH, 0)) AS CJBS_SH,
                       SUM(NVL(CJSL_SH, 0)) AS CJSL_SH,
                       SUM(NVL(CJJE_SH, 0)) AS CJJE_SH,
                       SUM(NVL(CJJG_SH, 0)) AS CJJG_SH,
                       SUM(NVL(CJSL_QZ, 0)) AS CJSL_QZ,
                       SUM(NVL(CJJE_QZ, 0)) AS CJJE_QZ,
                       SUM(NVL(CJSL_QJ, 0)) AS CJSL_QJ,
                       SUM(NVL(CJJE_QJ, 0)) AS CJJE_QJ,
                       SUM(NVL(FHJE, 0)) AS FHJE,
                       SUM(NVL(ZRSL, 0)) AS ZRSL,
                       SUM(NVL(ZRJE, 0)) AS ZRJE,
                       SUM(NVL(ZCSL, 0)) AS ZCSL,
                       SUM(NVL(ZCJE, 0)) AS ZCJE,
                       SUM(NVL(CYRS, 0)) AS CYRS,
                       SUM(NVL(JGCYRS, 0)) AS JGCYRS,
                       SUM(NVL(GRCYRS, 0)) AS GRCYRS,
                       SUM(NVL(CYSL, 0)) AS CYSL,
                       SUM(NVL(JGCYSL, 0)) AS JGCYSL,
                       SUM(NVL(GRCYSL, 0)) AS GRCYSL,
                       SUM(NVL(CYSZ, 0)) AS CYSZ,
                       SUM(NVL(JGCYSZ, 0)) AS JGCYSZ,
                       SUM(NVL(GRCYSZ, 0)) AS GRCYSZ,
                       SUM(NVL(CJSL_XYMR, 0)) AS CJSL_XYMR,
                       SUM(NVL(CJJE_XYMR, 0)) AS CJJE_XYMR,
                       SUM(NVL(CJBS_XYMR, 0)) AS CJBS_XYMR,
                       SUM(NVL(CJSL_XYMC, 0)) AS CJSL_XYMC,
                       SUM(NVL(CJJE_XYMC, 0)) AS CJJE_XYMC,
                       SUM(NVL(CJBS_XYMC, 0)) AS CJBS_XYMC,
                       SUM(NVL(CJSL_BJMR, 0)) AS CJSL_BJMR,
                       SUM(NVL(CJJE_BJMR, 0)) AS CJJE_BJMR,
                       SUM(NVL(CJBS_BJMR, 0)) AS CJBS_BJMR,
                       SUM(NVL(CJSL_BJMC, 0)) AS CJSL_BJMC,
                       SUM(NVL(CJJE_BJMC, 0)) AS CJJE_BJMC,
                       SUM(NVL(CJBS_BJMC, 0)) AS CJBS_BJMC,
                       SUM(NVL(CJSL_ZSSMR, 0)) AS CJSL_ZSSMR,
                       SUM(NVL(CJJE_ZSSMR, 0)) AS CJJE_ZSSMR,
                       SUM(NVL(CJBS_ZSSMR, 0)) AS CJBS_ZSSMR,
                       SUM(NVL(CJSL_ZSSMC, 0)) AS CJSL_ZSSMC,
                       SUM(NVL(CJJE_ZSSMC, 0)) AS CJJE_ZSSMC,
                       SUM(NVL(CJBS_ZSSMC, 0)) AS CJBS_ZSSMC
                  FROM DSC_STAT.T_STAT_CPDM_JRCP_R
                 WHERE RQ = VN_TJRQ
                 GROUP BY YYB) A,
               (SELECT T1.YYB,
                       COUNT(T1.KHH) KHS,
                       COUNT(CASE
                                 WHEN T1.GRJG = 1 THEN
                                  T1.KHH
                                 ELSE
                                  NULL
                             END) KHS_JG,
                       COUNT(CASE
                                 WHEN NVL(T1.GRJG, 0) = 0 THEN
                                  T1.KHH
                                 ELSE
                                  NULL
                             END) KHS_GR,
                       COUNT(CASE
                                 WHEN T2.KHRQ = VN_TJRQ THEN
                                  T1.KHH
                                 ELSE
                                  NULL
                             END) KHS_XKH,
                       COUNT(CASE
                                 WHEN T2.KHRQ = VN_TJRQ AND T1.GRJG = 1 THEN
                                  T1.KHH
                                 ELSE
                                  NULL
                             END) KHS_XKH_JG,
                       COUNT(CASE
                                 WHEN T2.KHRQ = VN_TJRQ AND NVL(T1.GRJG, 0) = 0 THEN
                                  T1.KHH
                                 ELSE
                                  NULL
                             END) KHS_XKH_GR,
                       COUNT(CASE
                                 WHEN T2.XHRQ = VN_TJRQ THEN
                                  T1.KHH
                                 ELSE
                                  NULL
                             END) KHS_XH,
                       COUNT(CASE
                                 WHEN T2.XHRQ = VN_TJRQ AND T1.GRJG = 1 THEN
                                  T1.KHH
                                 ELSE
                                  NULL
                             END) KHS_XH_JG,
                       COUNT(CASE
                                 WHEN T2.XHRQ = VN_TJRQ AND NVL(T1.GRJG, 0) = 0 THEN
                                  T2.KHH
                                 ELSE
                                  NULL
                             END) KHS_XH_GR
                  FROM DSC_BAS.T_KHXX T1,
                       (SELECT KHH, MIN(KHRQ) KHRQ, MAX(NVL(XHRQ, 30001231)) XHRQ
                          FROM DSC_BAS.T_FP_JRCPZH
                         GROUP BY KHH) T2
                 WHERE T1.KHH = T2.KHH
                 GROUP BY T1.YYB) B
         WHERE A.YYB = B.YYB(+);

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_JRCP_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_JRCP_Y(O_N_CODE OUT INT,
                                                       O_S_NOTE OUT VARCHAR2,
                                                       I_N_TJRQ IN INT,
                                                       I_N_REDO IN NUMBER DEFAULT 0) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_JRCP_Y
         功能简述：   金融产品_营业部月统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做     1：重做
        返回：

         算法：

         注意事项：

         数据源：
                 DSC_STAT.T_STAT_YYB_JRCP_R：金融产品_营业部日统计


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡丹丹      2015/07/23                 创建
    */
    VS_PROC_NAME       VARCHAR2(100) := $$PLSQL_UNIT;
    VN_TJRQ            NUMBER(8) := I_N_TJRQ;
    VN_YF              NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --月份
    VN_FIRSTDAY_OF_MON NUMBER(8) := VN_YF * 100 + 1; --月初
    VN_LOGID           INT; --LOG 表记录ID
    VN_ROWCOUNT        INT; --记录数
    VN_STEP            INT; --动作步数
    VN_PROC_NO         PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER            VARCHAR2(30);

BEGIN

    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);

    O_S_NOTE := '【ERROR-10000】';
    --重做删除原数据
    IF I_N_REDO IN (0, 1, 2) THEN
        --分区删除
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YYB_JRCP_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        EXECUTE IMMEDIATE 'ALTER TABLE DSC_STAT.T_STAT_YYB_JRCP_Y TRUNCATE PARTITION PY_' ||
                          VN_YF || '  UPDATE GLOBAL INDEXES';
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YYB_JRCP_Y]分PY_' ||
                                                        VN_YF || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_YYB_JRCP_Y]分区数据删除成功！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    O_S_NOTE := '【ERROR-10001】';

    VN_STEP := VN_STEP + 1;
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_营业部日统计数据到表[DSC_STAT.T_STAT_YYB_JRCP_Y]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_STAT_YYB_JRCP_Y
        (YF,
         YYB,
         KHS,
         KHS_JG,
         KHS_GR,
         KHS_XKH,
         KHS_XKH_JG,
         KHS_XKH_GR,
         KHS_XH,
         KHS_XH_JG,
         KHS_XH_GR,
         CJBS,
         CJSL,
         CJJE,
         CJSL_RG,
         CJJE_RG,
         CJJG_RG,
         CJSL_SG,
         CJJE_SG,
         CJJG_SG,
         CJBS_SH,
         CJSL_SH,
         CJJE_SH,
         CJJG_SH,
         CJSL_QZ,
         CJJE_QZ,
         CJSL_QJ,
         CJJE_QJ,
         FHJE,
         ZRSL,
         ZRJE,
         ZCSL,
         ZCJE,
         CYRS,
         JGCYRS,
         GRCYRS,
         CYSL,
         JGCYSL,
         GRCYSL,
         CYSZ,
         JGCYSZ,
         GRCYSZ,
         CJSL_XYMR,
         CJJE_XYMR,
         CJBS_XYMR,
         CJSL_XYMC,
         CJJE_XYMC,
         CJBS_XYMC,
         CJSL_BJMR,
         CJJE_BJMR,
         CJBS_BJMR,
         CJSL_BJMC,
         CJJE_BJMC,
         CJBS_BJMC,
         CJSL_ZSSMR,
         CJJE_ZSSMR,
         CJBS_ZSSMR,
         CJSL_ZSSMC,
         CJJE_ZSSMC,
         CJBS_ZSSMC)
        SELECT VN_YF YF,
               YYB,
               SUM(CASE
                       WHEN RQ = I_N_TJRQ THEN
                        NVL(KHS, 0)
                       ELSE
                        0
                   END) AS KHS,
               SUM(CASE
                       WHEN RQ = I_N_TJRQ THEN
                        NVL(KHS_JG, 0)
                       ELSE
                        0
                   END) AS KHS_JG,
               SUM(CASE
                       WHEN RQ = I_N_TJRQ THEN
                        NVL(KHS_GR, 0)
                       ELSE
                        0
                   END) AS KHS_GR,
               SUM(NVL(KHS_XKH, 0)) AS KHS_XKH,
               SUM(NVL(KHS_XKH_JG, 0)) AS KHS_XKH_JG,
               SUM(NVL(KHS_XKH_GR, 0)) AS KHS_XKH_GR,
               SUM(NVL(KHS_XH, 0)) AS KHS_XH,
               SUM(NVL(KHS_XH_JG, 0)) AS KHS_XH_JG,
               SUM(NVL(KHS_XH_GR, 0)) AS KHS_XH_GR,
               SUM(NVL(CJBS, 0)) AS CJBS,
               SUM(NVL(CJSL, 0)) AS CJSL,
               SUM(NVL(CJJE, 0)) AS CJJE,
               SUM(NVL(CJSL_RG, 0)) AS CJSL_RG,
               SUM(NVL(CJJE_RG, 0)) AS CJJE_RG,
               SUM(NVL(CJJG_RG, 0)) AS CJJG_RG,
               SUM(NVL(CJSL_SG, 0)) AS CJSL_SG,
               SUM(NVL(CJJE_SG, 0)) AS CJJE_SG,
               SUM(NVL(CJJG_SG, 0)) AS CJJG_SG,
               SUM(NVL(CJBS_SH, 0)) AS CJBS_SH,
               SUM(NVL(CJSL_SH, 0)) AS CJSL_SH,
               SUM(NVL(CJJE_SH, 0)) AS CJJE_SH,
               SUM(NVL(CJJG_SH, 0)) AS CJJG_SH,
               SUM(NVL(CJSL_QZ, 0)) AS CJSL_QZ,
               SUM(NVL(CJJE_QZ, 0)) AS CJJE_QZ,
               SUM(NVL(CJSL_QJ, 0)) AS CJSL_QJ,
               SUM(NVL(CJJE_QJ, 0)) AS CJJE_QJ,
               SUM(NVL(FHJE, 0)) AS FHJE,
               SUM(NVL(ZRSL, 0)) AS ZRSL,
               SUM(NVL(ZRJE, 0)) AS ZRJE,
               SUM(NVL(ZCSL, 0)) AS ZCSL,
               SUM(NVL(ZCJE, 0)) AS ZCJE,
               SUM(NVL(CYRS, 0)) AS CYRS,
               SUM(NVL(JGCYRS, 0)) AS JGCYRS,
               SUM(NVL(GRCYRS, 0)) AS GRCYRS,
               SUM(NVL(CYSL, 0)) AS CYSL,
               SUM(NVL(JGCYSL, 0)) AS JGCYSL,
               SUM(NVL(GRCYSL, 0)) AS GRCYSL,
               SUM(NVL(CYSZ, 0)) AS CYSZ,
               SUM(NVL(JGCYSZ, 0)) AS JGCYSZ,
               SUM(NVL(GRCYSZ, 0)) AS GRCYSZ,
               SUM(NVL(CJSL_XYMR, 0)) AS CJSL_XYMR,
               SUM(NVL(CJJE_XYMR, 0)) AS CJJE_XYMR,
               SUM(NVL(CJBS_XYMR, 0)) AS CJBS_XYMR,
               SUM(NVL(CJSL_XYMC, 0)) AS CJSL_XYMC,
               SUM(NVL(CJJE_XYMC, 0)) AS CJJE_XYMC,
               SUM(NVL(CJBS_XYMC, 0)) AS CJBS_XYMC,
               SUM(NVL(CJSL_BJMR, 0)) AS CJSL_BJMR,
               SUM(NVL(CJJE_BJMR, 0)) AS CJJE_BJMR,
               SUM(NVL(CJBS_BJMR, 0)) AS CJBS_BJMR,
               SUM(NVL(CJSL_BJMC, 0)) AS CJSL_BJMC,
               SUM(NVL(CJJE_BJMC, 0)) AS CJJE_BJMC,
               SUM(NVL(CJBS_BJMC, 0)) AS CJBS_BJMC,
               SUM(NVL(CJSL_ZSSMR, 0)) AS CJSL_ZSSMR,
               SUM(NVL(CJJE_ZSSMR, 0)) AS CJJE_ZSSMR,
               SUM(NVL(CJBS_ZSSMR, 0)) AS CJBS_ZSSMR,
               SUM(NVL(CJSL_ZSSMC, 0)) AS CJSL_ZSSMC,
               SUM(NVL(CJJE_ZSSMC, 0)) AS CJJE_ZSSMC,
               SUM(NVL(CJBS_ZSSMC, 0)) AS CJBS_ZSSMC
          FROM DSC_STAT.T_STAT_YYB_JRCP_R
         WHERE RQ BETWEEN VN_FIRSTDAY_OF_MON AND VN_TJRQ
         GROUP BY YYB;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品_营业部日统计数据到表[DSC_STAT.T_STAT_YYB_JRCP_Y]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_JRCP_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_JYSR_R(O_N_CODE OUT INT,
                                              O_S_NOTE OUT VARCHAR2,
                                              I_N_TJRQ IN NUMBER,
                                              I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_JYSR_R
         功能简述：   营业部交易与收入日表（存原始币种）统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
                 参照p_stat_ry_jysr_r取数
                 1.计算有关系的数据
                 从DSC_STAT.T_STAT_RY_JYSR_R中获取主要信息，关联DSC_BAS.T_RYXX RY获取营业部信息
                 2.计算不限制关系的数据(实际上是计算所有的数据)
                 从DSC_STAT.T_STAT_KHJYSR_R中获取信息，关联DSC_CFG.T_JGGL获取营业部信息

         注意事项：
                  组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
                  计算有关系的数据及不限制关系的数据

         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         黄玉钰      2013/05/22                 创建
         黄玉钰      2013/09/10                 修改：NVL(SUM(,0))改为NVL(SUM(),0)
         黄玉钰      2013/09/22                 修改：有关系的数据乘以GX.SYQZ
         吴邦杰      2014/09/09                 修改，增加港股通，YJSR_GGT，JYJ_GGT，JYL_GGT
		     张功德      2016/09/07                 修改，增加深港通，YJSR_SGT，JYJ_SGT，JYL_SGT
         zhangbc     2019/06/27                 修改：增加科创板数据统计
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '03';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_YYB_JYSR_R';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_YYB_JYSR_R WHERE RQ = VN_TJRQ;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --2.0 统计分组关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计有关系的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --插入数据
    INSERT INTO DSC_STAT.T_STAT_YYB_JYSR_R
        (RQ,
         U_ID,
         YYB,
         GXLX,
         ZSR,
         YJSR,
         YJSR_HAZB,
         YJSR_SAZB,
         YJSR_ZXB,
         YJSR_CYB,
         YJSR_HB,
         YJSR_SB,
         YJSR_SB_A,
         YJSR_SB_B,
         YJSR_FBSJJ,
         YJSR_ETF,
         YJSR_LOF,
         YJSR_SZJJT,
         YJSR_DXJJ,
         YJSR_QZ,
         YJSR_GZ,
         YJSR_GSQYZ,
         YJSR_KZZ,
         YJSR_HG,
         YJSR_SG,
         YJSR_JRCP,
         YJSR_QT,
         JYJ,
         JYJ_HAZB,
         JYJ_SAZB,
         JYJ_ZXB,
         JYJ_CYB,
         JYJ_HB,
         JYJ_SB,
         JYJ_SB_A,
         JYJ_SB_B,
         JYJ_FBSJJ,
         JYJ_ETF,
         JYJ_LOF,
         JYJ_SZJJT,
         JYJ_DXJJ,
         JYJ_QZ,
         JYJ_GZ,
         JYJ_GSQYZ,
         JYJ_KZZ,
         JYJ_HG,
         JYJ_SG,
         JYJ_JRCP,
         JYJ_QT,
         JYL,
         JYL_HAZB,
         JYL_SAZB,
         JYL_ZXB,
         JYL_CYB,
         JYL_HB,
         JYL_SB,
         JYL_SB_A,
         JYL_SB_B,
         JYL_FBSJJ,
         JYL_ETF,
         JYL_LOF,
         JYL_SZJJT,
         JYL_DXJJ,
         JYL_DXJJ_SG,
         JYL_DXJJ_RG,
         JYL_DXJJ_DSDT,
         JYL_DXJJ_SH,
         JYL_QZ,
         JYL_GZ,
         JYL_GSQYZ,
         JYL_KZZ,
         JYL_HG,
         JYL_SG,
         JYL_JRCP,
         JYL_QT,
         JYL_ST,
         JYL_XC,
         JYL_CK,
         JYL_RJ,
         JYL_GT,
         JYL_SJ,
         JYL_DH,
         JYL_HLW,
         JYL_YC,
         JYFY,
         JYBS,
         FWYJ,
         HLCS_HKD,
         HLCS_USD,
         YJSR_GGT, --港股通，吴邦杰，20140909
         JYJ_GGT, --港股通，吴邦杰，20140909
         JYL_GGT, --港股通，吴邦杰，20140909
         YJSR_SGT, --深港通，张功德，20160907
         JYJ_SGT, --深港通，张功德，20160907
         JYL_SGT, --深港通，张功德，20160907
         YJSR_KCB, --科创板，zhangbc，20190627
         JYJ_KCB, --科创板，zhangbc，20190627
         JYL_KCB --科创板，zhangbc，20190627
         )
        SELECT VN_TJRQ RQ, --对数据进行分组算总和
               CON_ORG_LVL || '-' || A.YYB U_ID,
               A.YYB AS YYB,
               GX.GXLX GXLX,
               NVL(SUM(A.ZSR * GX.SYQZ), 0) ZSR,
               NVL(SUM(A.YJSR * GX.SYQZ), 0) YJSR,
               NVL(SUM(A.YJSR_HAZB * GX.SYQZ), 0) YJSR_HAZB,
               NVL(SUM(A.YJSR_SAZB * GX.SYQZ), 0) YJSR_SAZB,
               NVL(SUM(A.YJSR_ZXB * GX.SYQZ), 0) YJSR_ZXB,
               NVL(SUM(A.YJSR_CYB * GX.SYQZ), 0) YJSR_CYB,
               NVL(SUM(A.YJSR_HB * GX.SYQZ), 0) YJSR_HB,
               NVL(SUM(A.YJSR_SB * GX.SYQZ), 0) YJSR_SB,
               NVL(SUM(A.YJSR_SB_A * GX.SYQZ), 0) YJSR_SB_A,
               NVL(SUM(A.YJSR_SB_B * GX.SYQZ), 0) YJSR_SB_B,
               NVL(SUM(A.YJSR_FBSJJ * GX.SYQZ), 0) YJSR_FBSJJ,
               NVL(SUM(A.YJSR_ETF * GX.SYQZ), 0) YJSR_ETF,
               NVL(SUM(A.YJSR_LOF * GX.SYQZ), 0) YJSR_LOF,
               NVL(SUM(A.YJSR_SZJJT * GX.SYQZ), 0) YJSR_SZJJT,
               NVL(SUM(A.YJSR_DXJJ * GX.SYQZ), 0) YJSR_DXJJ,
               NVL(SUM(A.YJSR_QZ * GX.SYQZ), 0) YJSR_QZ,
               NVL(SUM(A.YJSR_GZ * GX.SYQZ), 0) YJSR_GZ,
               NVL(SUM(A.YJSR_GSQYZ * GX.SYQZ), 0) YJSR_GSQYZ,
               NVL(SUM(A.YJSR_KZZ * GX.SYQZ), 0) YJSR_KZZ,
               NVL(SUM(A.YJSR_HG * GX.SYQZ), 0) YJSR_HG,
               NVL(SUM(A.YJSR_SG * GX.SYQZ), 0) YJSR_SG,
               NVL(SUM(A.YJSR_JRCP * GX.SYQZ), 0) YJSR_JRCP,
               NVL(SUM(A.YJSR_QT * GX.SYQZ), 0) YJSR_QT,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.JYJ_HAZB * GX.SYQZ), 0) JYJ_HAZB,
               NVL(SUM(A.JYJ_SAZB * GX.SYQZ), 0) JYJ_SAZB,
               NVL(SUM(A.JYJ_ZXB * GX.SYQZ), 0) JYJ_ZXB,
               NVL(SUM(A.JYJ_CYB * GX.SYQZ), 0) JYJ_CYB,
               NVL(SUM(A.JYJ_HB * GX.SYQZ), 0) JYJ_HB,
               NVL(SUM(A.JYJ_SB * GX.SYQZ), 0) JYJ_SB,
               NVL(SUM(A.JYJ_SB_A * GX.SYQZ), 0) JYJ_SB_A,
               NVL(SUM(A.JYJ_SB_B * GX.SYQZ), 0) JYJ_SB_B,
               NVL(SUM(A.JYJ_FBSJJ * GX.SYQZ), 0) JYJ_FBSJJ,
               NVL(SUM(A.JYJ_ETF * GX.SYQZ), 0) JYJ_ETF,
               NVL(SUM(A.JYJ_LOF * GX.SYQZ), 0) JYJ_LOF,
               NVL(SUM(A.JYJ_SZJJT * GX.SYQZ), 0) JYJ_SZJJT,
               NVL(SUM(A.JYJ_DXJJ * GX.SYQZ), 0) JYJ_DXJJ,
               NVL(SUM(A.JYJ_QZ * GX.SYQZ), 0) JYJ_QZ,
               NVL(SUM(A.JYJ_GZ * GX.SYQZ), 0) JYJ_GZ,
               NVL(SUM(A.JYJ_GSQYZ * GX.SYQZ), 0) JYJ_GSQYZ,
               NVL(SUM(A.JYJ_KZZ * GX.SYQZ), 0) JYJ_KZZ,
               NVL(SUM(A.JYJ_HG * GX.SYQZ), 0) JYJ_HG,
               NVL(SUM(A.JYJ_SG * GX.SYQZ), 0) JYJ_SG,
               NVL(SUM(A.JYJ_JRCP * GX.SYQZ), 0) JYJ_JRCP,
               NVL(SUM(A.JYJ_QT * GX.SYQZ), 0) JYJ_QT,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_HAZB * GX.SYQZ), 0) JYL_HAZB,
               NVL(SUM(A.JYL_SAZB * GX.SYQZ), 0) JYL_SAZB,
               NVL(SUM(A.JYL_ZXB * GX.SYQZ), 0) JYL_ZXB,
               NVL(SUM(A.JYL_CYB * GX.SYQZ), 0) JYL_CYB,
               NVL(SUM(A.JYL_HB * GX.SYQZ), 0) JYL_HB,
               NVL(SUM(A.JYL_SB * GX.SYQZ), 0) JYL_SB,
               NVL(SUM(A.JYL_SB_A * GX.SYQZ), 0) JYL_SB_A,
               NVL(SUM(A.JYL_SB_B * GX.SYQZ), 0) JYL_SB_B,
               NVL(SUM(A.JYL_FBSJJ * GX.SYQZ), 0) JYL_FBSJJ,
               NVL(SUM(A.JYL_ETF * GX.SYQZ), 0) JYL_ETF,
               NVL(SUM(A.JYL_LOF * GX.SYQZ), 0) JYL_LOF,
               NVL(SUM(A.JYL_SZJJT * GX.SYQZ), 0) JYL_SZJJT,
               NVL(SUM(A.JYL_DXJJ * GX.SYQZ), 0) JYL_DXJJ,
               NVL(SUM(A.JYL_DXJJ_SG * GX.SYQZ), 0) JYL_DXJJ_SG,
               NVL(SUM(A.JYL_DXJJ_RG * GX.SYQZ), 0) JYL_DXJJ_RG,
               NVL(SUM(A.JYL_DXJJ_DSDT * GX.SYQZ), 0) JYL_DXJJ_DSDT,
               NVL(SUM(A.JYL_DXJJ_SH * GX.SYQZ), 0) JYL_DXJJ_SH,
               NVL(SUM(A.JYL_QZ * GX.SYQZ), 0) JYL_QZ,
               NVL(SUM(A.JYL_GZ * GX.SYQZ), 0) JYL_GZ,
               NVL(SUM(A.JYL_GSQYZ * GX.SYQZ), 0) JYL_GSQYZ,
               NVL(SUM(A.JYL_KZZ * GX.SYQZ), 0) JYL_KZZ,
               NVL(SUM(A.JYL_HG * GX.SYQZ), 0) JYL_HG,
               NVL(SUM(A.JYL_SG * GX.SYQZ), 0) JYL_SG,
               NVL(SUM(A.JYL_JRCP * GX.SYQZ), 0) JYL_JRCP,
               NVL(SUM(A.JYL_QT * GX.SYQZ), 0) JYL_QT,
               NVL(SUM(A.JYL_ST * GX.SYQZ), 0) JYL_ST,
               NVL(SUM(A.JYL_XC * GX.SYQZ), 0) JYL_XC,
               NVL(SUM(A.JYL_CK * GX.SYQZ), 0) JYL_CK,
               NVL(SUM(A.JYL_RJ * GX.SYQZ), 0) JYL_RJ,
               NVL(SUM(A.JYL_GT * GX.SYQZ), 0) JYL_GT,
               NVL(SUM(A.JYL_SJ * GX.SYQZ), 0) JYL_SJ,
               NVL(SUM(A.JYL_DH * GX.SYQZ), 0) JYL_DH,
               NVL(SUM(A.JYL_HLW * GX.SYQZ), 0) JYL_HLW,
               NVL(SUM(A.JYL_YC * GX.SYQZ), 0) JYL_YC,
               NVL(SUM(A.JYFY * GX.SYQZ), 0) JYFY,
               NVL(SUM(A.JYBS * GX.SYQZ), 0) JYBS,
               NVL(SUM(A.FWYJ * GX.SYQZ), 0) FWYJ,
               A.HLCS_HKD HLCS_HKD,
               A.HLCS_USD HLCS_USD,
               NVL(SUM(A.YJSR_GGT * GX.SYQZ), 0) YJSR_GGT,
               NVL(SUM(A.JYJ_GGT * GX.SYQZ), 0) JYJ_GGT,
               NVL(SUM(A.JYL_GGT * GX.SYQZ), 0) JYL_GGT,
               NVL(SUM(A.YJSR_SGT * GX.SYQZ), 0) YJSR_SGT,
               NVL(SUM(A.JYJ_SGT * GX.SYQZ), 0) JYJ_SGT,
               NVL(SUM(A.JYL_SGT * GX.SYQZ), 0) JYL_SGT,
               NVL(SUM(A.YJSR_KCB * GX.SYQZ), 0) YJSR_KCB, --科创板，zhangbc，20190627
               NVL(SUM(A.JYJ_KCB * GX.SYQZ), 0) JYJ_KCB, --科创板，zhangbc，20190627
               NVL(SUM(A.JYL_KCB * GX.SYQZ), 0) JYL_KCB --科创板，zhangbc，20190627
          FROM DSC_STAT.T_STAT_KHJYSR_R A
          JOIN (SELECT A.YYB, A.GXLX, A.KHH, LEAST(SUM(A.SYQZ), 1) SYQZ
                  FROM DSC_STAT.TMP_T_KHGX A
                 WHERE A.JZRQ > VN_TJRQ
                 GROUP BY A.YYB, A.GXLX, A.KHH) GX ON GX.KHH = A.KHH
         WHERE A.RQ = VN_TJRQ
         GROUP BY A.YYB, GX.GXLX, A.HLCS_HKD, A.HLCS_USD;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计有关系的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3.0 统计无关系（所有）
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计不限制关系的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --取不限制关系的数据
    INSERT INTO DSC_STAT.T_STAT_YYB_JYSR_R
        (RQ,
         U_ID,
         YYB,
         GXLX,
         ZSR,
         YJSR,
         YJSR_HAZB,
         YJSR_SAZB,
         YJSR_ZXB,
         YJSR_CYB,
         YJSR_HB,
         YJSR_SB,
         YJSR_SB_A,
         YJSR_SB_B,
         YJSR_FBSJJ,
         YJSR_ETF,
         YJSR_LOF,
         YJSR_SZJJT,
         YJSR_DXJJ,
         YJSR_QZ,
         YJSR_GZ,
         YJSR_GSQYZ,
         YJSR_KZZ,
         YJSR_HG,
         YJSR_SG,
         YJSR_JRCP,
         YJSR_QT,
         JYJ,
         JYJ_HAZB,
         JYJ_SAZB,
         JYJ_ZXB,
         JYJ_CYB,
         JYJ_HB,
         JYJ_SB,
         JYJ_SB_A,
         JYJ_SB_B,
         JYJ_FBSJJ,
         JYJ_ETF,
         JYJ_LOF,
         JYJ_SZJJT,
         JYJ_DXJJ,
         JYJ_QZ,
         JYJ_GZ,
         JYJ_GSQYZ,
         JYJ_KZZ,
         JYJ_HG,
         JYJ_SG,
         JYJ_JRCP,
         JYJ_QT,
         JYL,
         JYL_HAZB,
         JYL_SAZB,
         JYL_ZXB,
         JYL_CYB,
         JYL_HB,
         JYL_SB,
         JYL_SB_A,
         JYL_SB_B,
         JYL_FBSJJ,
         JYL_ETF,
         JYL_LOF,
         JYL_SZJJT,
         JYL_DXJJ,
         JYL_DXJJ_SG,
         JYL_DXJJ_RG,
         JYL_DXJJ_DSDT,
         JYL_DXJJ_SH,
         JYL_QZ,
         JYL_GZ,
         JYL_GSQYZ,
         JYL_KZZ,
         JYL_HG,
         JYL_SG,
         JYL_JRCP,
         JYL_QT,
         JYL_ST,
         JYL_XC,
         JYL_CK,
         JYL_RJ,
         JYL_GT,
         JYL_SJ,
         JYL_DH,
         JYL_HLW,
         JYL_YC,
         JYFY,
         JYBS,
         FWYJ,
         HLCS_HKD,
         HLCS_USD,
         YJSR_GGT, --港股通，吴邦杰，20140909
         JYJ_GGT, --港股通，吴邦杰，20140909
         JYL_GGT, --港股通，吴邦杰，20140909
         YJSR_SGT, --深港通，张功德，20160907
         JYJ_SGT, --深港通，张功德，20160907
         JYL_SGT, --深港通，张功德，20160907
         YJSR_KCB, --科创板，zhangbc，20190627
         JYJ_KCB, --科创板，zhangbc，20190627
         JYL_KCB --科创板，zhangbc，20190627
         )
        SELECT VN_TJRQ RQ, --对数据进行分组算总和
               CON_ORG_LVL || '-' || A.YYB U_ID,
               A.YYB AS YYB,
               0 GXLX,
               NVL(SUM(A.ZSR), 0) ZSR,
               NVL(SUM(A.YJSR), 0) YJSR,
               NVL(SUM(A.YJSR_HAZB), 0) YJSR_HAZB,
               NVL(SUM(A.YJSR_SAZB), 0) YJSR_SAZB,
               NVL(SUM(A.YJSR_ZXB), 0) YJSR_ZXB,
               NVL(SUM(A.YJSR_CYB), 0) YJSR_CYB,
               NVL(SUM(A.YJSR_HB), 0) YJSR_HB,
               NVL(SUM(A.YJSR_SB), 0) YJSR_SB,
               NVL(SUM(A.YJSR_SB_A), 0) YJSR_SB_A,
               NVL(SUM(A.YJSR_SB_B), 0) YJSR_SB_B,
               NVL(SUM(A.YJSR_FBSJJ), 0) YJSR_FBSJJ,
               NVL(SUM(A.YJSR_ETF), 0) YJSR_ETF,
               NVL(SUM(A.YJSR_LOF), 0) YJSR_LOF,
               NVL(SUM(A.YJSR_SZJJT), 0) YJSR_SZJJT,
               NVL(SUM(A.YJSR_DXJJ), 0) YJSR_DXJJ,
               NVL(SUM(A.YJSR_QZ), 0) YJSR_QZ,
               NVL(SUM(A.YJSR_GZ), 0) YJSR_GZ,
               NVL(SUM(A.YJSR_GSQYZ), 0) YJSR_GSQYZ,
               NVL(SUM(A.YJSR_KZZ), 0) YJSR_KZZ,
               NVL(SUM(A.YJSR_HG), 0) YJSR_HG,
               NVL(SUM(A.YJSR_SG), 0) YJSR_SG,
               NVL(SUM(A.YJSR_JRCP), 0) YJSR_JRCP,
               NVL(SUM(A.YJSR_QT), 0) YJSR_QT,
               NVL(SUM(A.JYJ), 0) JYJ,
               NVL(SUM(A.JYJ_HAZB), 0) JYJ_HAZB,
               NVL(SUM(A.JYJ_SAZB), 0) JYJ_SAZB,
               NVL(SUM(A.JYJ_ZXB), 0) JYJ_ZXB,
               NVL(SUM(A.JYJ_CYB), 0) JYJ_CYB,
               NVL(SUM(A.JYJ_HB), 0) JYJ_HB,
               NVL(SUM(A.JYJ_SB), 0) JYJ_SB,
               NVL(SUM(A.JYJ_SB_A), 0) JYJ_SB_A,
               NVL(SUM(A.JYJ_SB_B), 0) JYJ_SB_B,
               NVL(SUM(A.JYJ_FBSJJ), 0) JYJ_FBSJJ,
               NVL(SUM(A.JYJ_ETF), 0) JYJ_ETF,
               NVL(SUM(A.JYJ_LOF), 0) JYJ_LOF,
               NVL(SUM(A.JYJ_SZJJT), 0) JYJ_SZJJT,
               NVL(SUM(A.JYJ_DXJJ), 0) JYJ_DXJJ,
               NVL(SUM(A.JYJ_QZ), 0) JYJ_QZ,
               NVL(SUM(A.JYJ_GZ), 0) JYJ_GZ,
               NVL(SUM(A.JYJ_GSQYZ), 0) JYJ_GSQYZ,
               NVL(SUM(A.JYJ_KZZ), 0) JYJ_KZZ,
               NVL(SUM(A.JYJ_HG), 0) JYJ_HG,
               NVL(SUM(A.JYJ_SG), 0) JYJ_SG,
               NVL(SUM(A.JYJ_JRCP), 0) JYJ_JRCP,
               NVL(SUM(A.JYJ_QT), 0) JYJ_QT,
               NVL(SUM(A.JYL), 0) JYL,
               NVL(SUM(A.JYL_HAZB), 0) JYL_HAZB,
               NVL(SUM(A.JYL_SAZB), 0) JYL_SAZB,
               NVL(SUM(A.JYL_ZXB), 0) JYL_ZXB,
               NVL(SUM(A.JYL_CYB), 0) JYL_CYB,
               NVL(SUM(A.JYL_HB), 0) JYL_HB,
               NVL(SUM(A.JYL_SB), 0) JYL_SB,
               NVL(SUM(A.JYL_SB_A), 0) JYL_SB_A,
               NVL(SUM(A.JYL_SB_B), 0) JYL_SB_B,
               NVL(SUM(A.JYL_FBSJJ), 0) JYL_FBSJJ,
               NVL(SUM(A.JYL_ETF), 0) JYL_ETF,
               NVL(SUM(A.JYL_LOF), 0) JYL_LOF,
               NVL(SUM(A.JYL_SZJJT), 0) JYL_SZJJT,
               NVL(SUM(A.JYL_DXJJ), 0) JYL_DXJJ,
               NVL(SUM(A.JYL_DXJJ_SG), 0) JYL_DXJJ_SG,
               NVL(SUM(A.JYL_DXJJ_RG), 0) JYL_DXJJ_RG,
               NVL(SUM(A.JYL_DXJJ_DSDT), 0) JYL_DXJJ_DSDT,
               NVL(SUM(A.JYL_DXJJ_SH), 0) JYL_DXJJ_SH,
               NVL(SUM(A.JYL_QZ), 0) JYL_QZ,
               NVL(SUM(A.JYL_GZ), 0) JYL_GZ,
               NVL(SUM(A.JYL_GSQYZ), 0) JYL_GSQYZ,
               NVL(SUM(A.JYL_KZZ), 0) JYL_KZZ,
               NVL(SUM(A.JYL_HG), 0) JYL_HG,
               NVL(SUM(A.JYL_SG), 0) JYL_SG,
               NVL(SUM(A.JYL_JRCP), 0) JYL_JRCP,
               NVL(SUM(A.JYL_QT), 0) JYL_QT,
               NVL(SUM(A.JYL_ST), 0) JYL_ST,
               NVL(SUM(A.JYL_XC), 0) JYL_XC,
               NVL(SUM(A.JYL_CK), 0) JYL_CK,
               NVL(SUM(A.JYL_RJ), 0) JYL_RJ,
               NVL(SUM(A.JYL_GT), 0) JYL_GT,
               NVL(SUM(A.JYL_SJ), 0) JYL_SJ,
               NVL(SUM(A.JYL_DH), 0) JYL_DH,
               NVL(SUM(A.JYL_HLW), 0) JYL_HLW,
               NVL(SUM(A.JYL_YC), 0) JYL_YC,
               NVL(SUM(A.JYFY), 0) JYFY,
               NVL(SUM(A.JYBS), 0) JYBS,
               NVL(SUM(A.FWYJ), 0) FWYJ,
               NVL(A.HLCS_HKD, 0) HLCS_HKD,
               NVL(A.HLCS_USD, 0) HLCS_USD,
               NVL(SUM(A.YJSR_GGT), 0) YJSR_GGT,
               NVL(SUM(A.JYJ_GGT), 0) JYJ_GGT,
               NVL(SUM(A.JYL_GGT), 0) JYL_GGT,
               NVL(SUM(A.YJSR_SGT), 0) YJSR_SGT,
               NVL(SUM(A.JYJ_SGT), 0) JYJ_SGT,
               NVL(SUM(A.JYL_SGT), 0) JYL_SGT,
               NVL(SUM(A.YJSR_KCB), 0) YJSR_KCB, --科创板，zhangbc，20190627
               NVL(SUM(A.JYJ_KCB), 0) JYJ_KCB, --科创板，zhangbc，20190627
               NVL(SUM(A.JYL_KCB), 0) JYL_KCB --科创板，zhangbc，20190627
          FROM DSC_STAT.T_STAT_KHJYSR_R A
        -- JOIN DSC_CFG.T_JGGL JG ON JG.ORGCODE = A.YYB
         WHERE A.RQ = VN_TJRQ
         GROUP BY A.YYB, A.HLCS_HKD, A.HLCS_USD;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计不限制关系的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_JYSR_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_JYSR_Y(O_N_CODE OUT INT,
                                              O_S_NOTE OUT VARCHAR2,
                                              I_N_TJRQ IN NUMBER,
                                              I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_JYSR_Y
         功能简述：   营业部交易与收入月表（存原始币种）统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
                 参照p_stat_ry_jysr_y取数
                 1.计算有关系的数据
                 从DSC_STAT.T_STAT_RY_JYSR_Y中获取主要信息，关联DSC_BAS.T_RYXX RY获取营业部信息
                 2.计算不限制关系的数据(实际上是计算所有的数据)
                 从DSC_STAT.T_STAT_KHJYSR_Y中获取信息，关联DSC_CFG.T_JGGL获取营业部信息

         注意事项：
                  组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
                  计算有关系的数据及不限制关系的数据

         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         黄玉钰      2013/05/22                 创建
         黄玉钰      2013/09/10                 修改：SUM(NVL(,0))改为NVL(SUM(),0)
         黄玉钰      2013/09/22                 修改：有关系的数据乘以GX.SYQZ
         吴邦杰      2014/09/09                 修改，增加港股通，YJSR_GGT，JYJ_GGT，JYL_GGT
         张功德      2016/09/07                 修改，增加深港通，YJSR_SGT，JYJ_SGT，JYL_SGT
         zhangbc     2019/06/27                 修改，科创板数据统计

 */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '03';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6);
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_YYB_JYSR_Y';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        -- DELETE FROM T_STAT_YYB_JYSR_Y WHERE YF = VN_TJYF;
        EXECUTE IMMEDIATE 'ALTER TABLE DSC_STAT.T_STAT_YYB_JYSR_Y TRUNCATE PARTITION PY_' ||
                          VN_TJYF || '  UPDATE GLOBAL INDEXES';
        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计有关系的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --插入数据
    INSERT INTO DSC_STAT.T_STAT_YYB_JYSR_Y
        (YF,
         U_ID,
         YYB,
         GXLX,
         ZSR,
         YJSR,
         YJSR_HAZB,
         YJSR_SAZB,
         YJSR_ZXB,
         YJSR_CYB,
         YJSR_HB,
         YJSR_SB,
         YJSR_SB_A,
         YJSR_SB_B,
         YJSR_FBSJJ,
         YJSR_ETF,
         YJSR_LOF,
         YJSR_SZJJT,
         YJSR_DXJJ,
         YJSR_QZ,
         YJSR_GZ,
         YJSR_GSQYZ,
         YJSR_KZZ,
         YJSR_HG,
         YJSR_SG,
         YJSR_JRCP,
         YJSR_QT,
         JYJ,
         JYJ_HAZB,
         JYJ_SAZB,
         JYJ_ZXB,
         JYJ_CYB,
         JYJ_HB,
         JYJ_SB,
         JYJ_SB_A,
         JYJ_SB_B,
         JYJ_FBSJJ,
         JYJ_ETF,
         JYJ_LOF,
         JYJ_SZJJT,
         JYJ_DXJJ,
         JYJ_QZ,
         JYJ_GZ,
         JYJ_GSQYZ,
         JYJ_KZZ,
         JYJ_HG,
         JYJ_SG,
         JYJ_JRCP,
         JYJ_QT,
         JYL,
         JYL_HAZB,
         JYL_SAZB,
         JYL_ZXB,
         JYL_CYB,
         JYL_HB,
         JYL_SB,
         JYL_SB_A,
         JYL_SB_B,
         JYL_FBSJJ,
         JYL_ETF,
         JYL_LOF,
         JYL_SZJJT,
         JYL_DXJJ,
         JYL_DXJJ_SG,
         JYL_DXJJ_RG,
         JYL_DXJJ_DSDT,
         JYL_DXJJ_SH,
         JYL_QZ,
         JYL_GZ,
         JYL_GSQYZ,
         JYL_KZZ,
         JYL_HG,
         JYL_SG,
         JYL_JRCP,
         JYL_QT,
         JYL_ST,
         JYL_XC,
         JYL_CK,
         JYL_RJ,
         JYL_GT,
         JYL_SJ,
         JYL_DH,
         JYL_HLW,
         JYL_YC,
         JYFY,
         JYBS,
         FWYJ,
         HLCS_HKD,
         HLCS_USD,
         YJSR_GGT, --港股通，吴邦杰，20140909
         JYJ_GGT, --港股通，吴邦杰，20140909
         JYL_GGT, --港股通，吴邦杰，20140909
         YJSR_SGT, --深港通，张功德，20160907
         JYJ_SGT, --深港通，张功德，20160907
         JYL_SGT, --深港通，张功德，20160907
         YJSR_KCB, --科创板，zhangbc，20190627
         JYJ_KCB, --科创板，zhangbc，20190627
         JYL_KCB --科创板，zhangbc，20190627
         )
        SELECT VN_TJYF YF, --对数据进行分组算总和
               CON_ORG_LVL || '-' || A.YYB AS U_ID,
               A.YYB AS YYB,
               GX.GXLX GXLX,
               NVL(SUM(A.ZSR * GX.SYQZ), 0) ZSR,
               NVL(SUM(A.YJSR * GX.SYQZ), 0) YJSR,
               NVL(SUM(A.YJSR_HAZB * GX.SYQZ), 0) YJSR_HAZB,
               NVL(SUM(A.YJSR_SAZB * GX.SYQZ), 0) YJSR_SAZB,
               NVL(SUM(A.YJSR_ZXB * GX.SYQZ), 0) YJSR_ZXB,
               NVL(SUM(A.YJSR_CYB * GX.SYQZ), 0) YJSR_CYB,
               NVL(SUM(A.YJSR_HB * GX.SYQZ), 0) YJSR_HB,
               NVL(SUM(A.YJSR_SB * GX.SYQZ), 0) YJSR_SB,
               NVL(SUM(A.YJSR_SB_A * GX.SYQZ), 0) YJSR_SB_A,
               NVL(SUM(A.YJSR_SB_B * GX.SYQZ), 0) YJSR_SB_B,
               NVL(SUM(A.YJSR_FBSJJ * GX.SYQZ), 0) YJSR_FBSJJ,
               NVL(SUM(A.YJSR_ETF * GX.SYQZ), 0) YJSR_ETF,
               NVL(SUM(A.YJSR_LOF * GX.SYQZ), 0) YJSR_LOF,
               NVL(SUM(A.YJSR_SZJJT * GX.SYQZ), 0) YJSR_SZJJT,
               NVL(SUM(A.YJSR_DXJJ * GX.SYQZ), 0) YJSR_DXJJ,
               NVL(SUM(A.YJSR_QZ * GX.SYQZ), 0) YJSR_QZ,
               NVL(SUM(A.YJSR_GZ * GX.SYQZ), 0) YJSR_GZ,
               NVL(SUM(A.YJSR_GSQYZ * GX.SYQZ), 0) YJSR_GSQYZ,
               NVL(SUM(A.YJSR_KZZ * GX.SYQZ), 0) YJSR_KZZ,
               NVL(SUM(A.YJSR_HG * GX.SYQZ), 0) YJSR_HG,
               NVL(SUM(A.YJSR_SG * GX.SYQZ), 0) YJSR_SG,
               NVL(SUM(A.YJSR_JRCP * GX.SYQZ), 0) YJSR_JRCP,
               NVL(SUM(A.YJSR_QT * GX.SYQZ), 0) YJSR_QT,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.JYJ_HAZB * GX.SYQZ), 0) JYJ_HAZB,
               NVL(SUM(A.JYJ_SAZB * GX.SYQZ), 0) JYJ_SAZB,
               NVL(SUM(A.JYJ_ZXB * GX.SYQZ), 0) JYJ_ZXB,
               NVL(SUM(A.JYJ_CYB * GX.SYQZ), 0) JYJ_CYB,
               NVL(SUM(A.JYJ_HB * GX.SYQZ), 0) JYJ_HB,
               NVL(SUM(A.JYJ_SB * GX.SYQZ), 0) JYJ_SB,
               NVL(SUM(A.JYJ_SB_A * GX.SYQZ), 0) JYJ_SB_A,
               NVL(SUM(A.JYJ_SB_B * GX.SYQZ), 0) JYJ_SB_B,
               NVL(SUM(A.JYJ_FBSJJ * GX.SYQZ), 0) JYJ_FBSJJ,
               NVL(SUM(A.JYJ_ETF * GX.SYQZ), 0) JYJ_ETF,
               NVL(SUM(A.JYJ_LOF * GX.SYQZ), 0) JYJ_LOF,
               NVL(SUM(A.JYJ_SZJJT * GX.SYQZ), 0) JYJ_SZJJT,
               NVL(SUM(A.JYJ_DXJJ * GX.SYQZ), 0) JYJ_DXJJ,
               NVL(SUM(A.JYJ_QZ * GX.SYQZ), 0) JYJ_QZ,
               NVL(SUM(A.JYJ_GZ * GX.SYQZ), 0) JYJ_GZ,
               NVL(SUM(A.JYJ_GSQYZ * GX.SYQZ), 0) JYJ_GSQYZ,
               NVL(SUM(A.JYJ_KZZ * GX.SYQZ), 0) JYJ_KZZ,
               NVL(SUM(A.JYJ_HG * GX.SYQZ), 0) JYJ_HG,
               NVL(SUM(A.JYJ_SG * GX.SYQZ), 0) JYJ_SG,
               NVL(SUM(A.JYJ_JRCP * GX.SYQZ), 0) JYJ_JRCP,
               NVL(SUM(A.JYJ_QT * GX.SYQZ), 0) JYJ_QT,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_HAZB * GX.SYQZ), 0) JYL_HAZB,
               NVL(SUM(A.JYL_SAZB * GX.SYQZ), 0) JYL_SAZB,
               NVL(SUM(A.JYL_ZXB * GX.SYQZ), 0) JYL_ZXB,
               NVL(SUM(A.JYL_CYB * GX.SYQZ), 0) JYL_CYB,
               NVL(SUM(A.JYL_HB * GX.SYQZ), 0) JYL_HB,
               NVL(SUM(A.JYL_SB * GX.SYQZ), 0) JYL_SB,
               NVL(SUM(A.JYL_SB_A * GX.SYQZ), 0) JYL_SB_A,
               NVL(SUM(A.JYL_SB_B * GX.SYQZ), 0) JYL_SB_B,
               NVL(SUM(A.JYL_FBSJJ * GX.SYQZ), 0) JYL_FBSJJ,
               NVL(SUM(A.JYL_ETF * GX.SYQZ), 0) JYL_ETF,
               NVL(SUM(A.JYL_LOF * GX.SYQZ), 0) JYL_LOF,
               NVL(SUM(A.JYL_SZJJT * GX.SYQZ), 0) JYL_SZJJT,
               NVL(SUM(A.JYL_DXJJ * GX.SYQZ), 0) JYL_DXJJ,
               NVL(SUM(A.JYL_DXJJ_SG * GX.SYQZ), 0) JYL_DXJJ_SG,
               NVL(SUM(A.JYL_DXJJ_RG * GX.SYQZ), 0) JYL_DXJJ_RG,
               NVL(SUM(A.JYL_DXJJ_DSDT * GX.SYQZ), 0) JYL_DXJJ_DSDT,
               NVL(SUM(A.JYL_DXJJ_SH * GX.SYQZ), 0) JYL_DXJJ_SH,
               NVL(SUM(A.JYL_QZ * GX.SYQZ), 0) JYL_QZ,
               NVL(SUM(A.JYL_GZ * GX.SYQZ), 0) JYL_GZ,
               NVL(SUM(A.JYL_GSQYZ * GX.SYQZ), 0) JYL_GSQYZ,
               NVL(SUM(A.JYL_KZZ * GX.SYQZ), 0) JYL_KZZ,
               NVL(SUM(A.JYL_HG * GX.SYQZ), 0) JYL_HG,
               NVL(SUM(A.JYL_SG * GX.SYQZ), 0) JYL_SG,
               NVL(SUM(A.JYL_JRCP * GX.SYQZ), 0) JYL_JRCP,
               NVL(SUM(A.JYL_QT * GX.SYQZ), 0) JYL_QT,
               NVL(SUM(A.JYL_ST * GX.SYQZ), 0) JYL_ST,
               NVL(SUM(A.JYL_XC * GX.SYQZ), 0) JYL_XC,
               NVL(SUM(A.JYL_CK * GX.SYQZ), 0) JYL_CK,
               NVL(SUM(A.JYL_RJ * GX.SYQZ), 0) JYL_RJ,
               NVL(SUM(A.JYL_GT * GX.SYQZ), 0) JYL_GT,
               NVL(SUM(A.JYL_SJ * GX.SYQZ), 0) JYL_SJ,
               NVL(SUM(A.JYL_DH * GX.SYQZ), 0) JYL_DH,
               NVL(SUM(A.JYL_HLW * GX.SYQZ), 0) JYL_HLW,
               NVL(SUM(A.JYL_YC * GX.SYQZ), 0) JYL_YC,
               NVL(SUM(A.JYFY * GX.SYQZ), 0) JYFY,
               NVL(SUM(A.JYBS * GX.SYQZ), 0) JYBS,
               NVL(SUM(A.FWYJ * GX.SYQZ), 0) FWYJ,
               A.HLCS_HKD HLCS_HKD,
               A.HLCS_USD HLCS_USD,
               NVL(SUM(A.YJSR_GGT * GX.SYQZ), 0) YJSR_GGT,
               NVL(SUM(A.JYJ_GGT * GX.SYQZ), 0) JYJ_GGT,
               NVL(SUM(A.JYL_GGT * GX.SYQZ), 0) JYL_GGT,
               NVL(SUM(A.YJSR_SGT * GX.SYQZ), 0) YJSR_SGT,
               NVL(SUM(A.JYJ_SGT * GX.SYQZ), 0) JYJ_SGT,
               NVL(SUM(A.JYL_SGT * GX.SYQZ), 0) JYL_SGT,
               NVL(SUM(A.YJSR_KCB * GX.SYQZ), 0) YJSR_KCB, --科创板，zhangbc，20190627
               NVL(SUM(A.JYJ_KCB * GX.SYQZ), 0) JYJ_KCB, --科创板，zhangbc，20190627
               NVL(SUM(A.JYL_KCB * GX.SYQZ), 0) JYL_KCB --科创板，zhangbc，20190627
          FROM DSC_STAT.T_STAT_KHJYSR_Y A
          JOIN (SELECT A.YYB, A.GXLX, A.KHH, LEAST(SUM(A.SYQZ), 1) SYQZ
                  FROM DSC_STAT.TMP_T_KHGX A
                 WHERE A.JZRQ > VN_TJRQ
                 GROUP BY A.YYB, A.GXLX, A.KHH) GX ON GX.KHH = A.KHH
         WHERE A.YF = VN_TJYF
         GROUP BY A.YYB, GX.GXLX, A.HLCS_HKD, A.HLCS_USD;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计有关系的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3.0 统计所有
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计不限制关系的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --取不限制关系的数据
    INSERT INTO DSC_STAT.T_STAT_YYB_JYSR_Y
        (YF,
         U_ID,
         YYB,
         GXLX,
         ZSR,
         YJSR,
         YJSR_HAZB,
         YJSR_SAZB,
         YJSR_ZXB,
         YJSR_CYB,
         YJSR_HB,
         YJSR_SB,
         YJSR_SB_A,
         YJSR_SB_B,
         YJSR_FBSJJ,
         YJSR_ETF,
         YJSR_LOF,
         YJSR_SZJJT,
         YJSR_DXJJ,
         YJSR_QZ,
         YJSR_GZ,
         YJSR_GSQYZ,
         YJSR_KZZ,
         YJSR_HG,
         YJSR_SG,
         YJSR_JRCP,
         YJSR_QT,
         JYJ,
         JYJ_HAZB,
         JYJ_SAZB,
         JYJ_ZXB,
         JYJ_CYB,
         JYJ_HB,
         JYJ_SB,
         JYJ_SB_A,
         JYJ_SB_B,
         JYJ_FBSJJ,
         JYJ_ETF,
         JYJ_LOF,
         JYJ_SZJJT,
         JYJ_DXJJ,
         JYJ_QZ,
         JYJ_GZ,
         JYJ_GSQYZ,
         JYJ_KZZ,
         JYJ_HG,
         JYJ_SG,
         JYJ_JRCP,
         JYJ_QT,
         JYL,
         JYL_HAZB,
         JYL_SAZB,
         JYL_ZXB,
         JYL_CYB,
         JYL_HB,
         JYL_SB,
         JYL_SB_A,
         JYL_SB_B,
         JYL_FBSJJ,
         JYL_ETF,
         JYL_LOF,
         JYL_SZJJT,
         JYL_DXJJ,
         JYL_DXJJ_SG,
         JYL_DXJJ_RG,
         JYL_DXJJ_DSDT,
         JYL_DXJJ_SH,
         JYL_QZ,
         JYL_GZ,
         JYL_GSQYZ,
         JYL_KZZ,
         JYL_HG,
         JYL_SG,
         JYL_JRCP,
         JYL_QT,
         JYL_ST,
         JYL_XC,
         JYL_CK,
         JYL_RJ,
         JYL_GT,
         JYL_SJ,
         JYL_DH,
         JYL_HLW,
         JYL_YC,
         JYFY,
         JYBS,
         FWYJ,
         HLCS_HKD,
         HLCS_USD,
         YJSR_GGT, --港股通，吴邦杰，20140909
         JYJ_GGT, --港股通，吴邦杰，20140909
         JYL_GGT, --港股通，吴邦杰，20140909
         YJSR_SGT, --深港通，张功德，20160907
         JYJ_SGT, --深港通，张功德，20160907
         JYL_SGT, --深港通，张功德，20160907
         YJSR_KCB, --科创板，zhangbc，20190627
         JYJ_KCB, --科创板，zhangbc，20190627
         JYL_KCB --科创板，zhangbc，20190627
         )
        SELECT VN_TJYF YF, --对数据进行分组算总和
               CON_ORG_LVL || '-' || A.YYB U_ID,
               A.YYB AS YYB,
               0 GXLX,
               NVL(SUM(A.ZSR), 0) ZSR,
               NVL(SUM(A.YJSR), 0) YJSR,
               NVL(SUM(A.YJSR_HAZB), 0) YJSR_HAZB,
               NVL(SUM(A.YJSR_SAZB), 0) YJSR_SAZB,
               NVL(SUM(A.YJSR_ZXB), 0) YJSR_ZXB,
               NVL(SUM(A.YJSR_CYB), 0) YJSR_CYB,
               NVL(SUM(A.YJSR_HB), 0) YJSR_HB,
               NVL(SUM(A.YJSR_SB), 0) YJSR_SB,
               NVL(SUM(A.YJSR_SB_A), 0) YJSR_SB_A,
               NVL(SUM(A.YJSR_SB_B), 0) YJSR_SB_B,
               NVL(SUM(A.YJSR_FBSJJ), 0) YJSR_FBSJJ,
               NVL(SUM(A.YJSR_ETF), 0) YJSR_ETF,
               NVL(SUM(A.YJSR_LOF), 0) YJSR_LOF,
               NVL(SUM(A.YJSR_SZJJT), 0) YJSR_SZJJT,
               NVL(SUM(A.YJSR_DXJJ), 0) YJSR_DXJJ,
               NVL(SUM(A.YJSR_QZ), 0) YJSR_QZ,
               NVL(SUM(A.YJSR_GZ), 0) YJSR_GZ,
               NVL(SUM(A.YJSR_GSQYZ), 0) YJSR_GSQYZ,
               NVL(SUM(A.YJSR_KZZ), 0) YJSR_KZZ,
               NVL(SUM(A.YJSR_HG), 0) YJSR_HG,
               NVL(SUM(A.YJSR_SG), 0) YJSR_SG,
               NVL(SUM(A.YJSR_JRCP), 0) YJSR_JRCP,
               NVL(SUM(A.YJSR_QT), 0) YJSR_QT,
               NVL(SUM(A.JYJ), 0) JYJ,
               NVL(SUM(A.JYJ_HAZB), 0) JYJ_HAZB,
               NVL(SUM(A.JYJ_SAZB), 0) JYJ_SAZB,
               NVL(SUM(A.JYJ_ZXB), 0) JYJ_ZXB,
               NVL(SUM(A.JYJ_CYB), 0) JYJ_CYB,
               NVL(SUM(A.JYJ_HB), 0) JYJ_HB,
               NVL(SUM(A.JYJ_SB), 0) JYJ_SB,
               NVL(SUM(A.JYJ_SB_A), 0) JYJ_SB_A,
               NVL(SUM(A.JYJ_SB_B), 0) JYJ_SB_B,
               NVL(SUM(A.JYJ_FBSJJ), 0) JYJ_FBSJJ,
               NVL(SUM(A.JYJ_ETF), 0) JYJ_ETF,
               NVL(SUM(A.JYJ_LOF), 0) JYJ_LOF,
               NVL(SUM(A.JYJ_SZJJT), 0) JYJ_SZJJT,
               NVL(SUM(A.JYJ_DXJJ), 0) JYJ_DXJJ,
               NVL(SUM(A.JYJ_QZ), 0) JYJ_QZ,
               NVL(SUM(A.JYJ_GZ), 0) JYJ_GZ,
               NVL(SUM(A.JYJ_GSQYZ), 0) JYJ_GSQYZ,
               NVL(SUM(A.JYJ_KZZ), 0) JYJ_KZZ,
               NVL(SUM(A.JYJ_HG), 0) JYJ_HG,
               NVL(SUM(A.JYJ_SG), 0) JYJ_SG,
               NVL(SUM(A.JYJ_JRCP), 0) JYJ_JRCP,
               NVL(SUM(A.JYJ_QT), 0) JYJ_QT,
               NVL(SUM(A.JYL), 0) JYL,
               NVL(SUM(A.JYL_HAZB), 0) JYL_HAZB,
               NVL(SUM(A.JYL_SAZB), 0) JYL_SAZB,
               NVL(SUM(A.JYL_ZXB), 0) JYL_ZXB,
               NVL(SUM(A.JYL_CYB), 0) JYL_CYB,
               NVL(SUM(A.JYL_HB), 0) JYL_HB,
               NVL(SUM(A.JYL_SB), 0) JYL_SB,
               NVL(SUM(A.JYL_SB_A), 0) JYL_SB_A,
               NVL(SUM(A.JYL_SB_B), 0) JYL_SB_B,
               NVL(SUM(A.JYL_FBSJJ), 0) JYL_FBSJJ,
               NVL(SUM(A.JYL_ETF), 0) JYL_ETF,
               NVL(SUM(A.JYL_LOF), 0) JYL_LOF,
               NVL(SUM(A.JYL_SZJJT), 0) JYL_SZJJT,
               NVL(SUM(A.JYL_DXJJ), 0) JYL_DXJJ,
               NVL(SUM(A.JYL_DXJJ_SG), 0) JYL_DXJJ_SG,
               NVL(SUM(A.JYL_DXJJ_RG), 0) JYL_DXJJ_RG,
               NVL(SUM(A.JYL_DXJJ_DSDT), 0) JYL_DXJJ_DSDT,
               NVL(SUM(A.JYL_DXJJ_SH), 0) JYL_DXJJ_SH,
               NVL(SUM(A.JYL_QZ), 0) JYL_QZ,
               NVL(SUM(A.JYL_GZ), 0) JYL_GZ,
               NVL(SUM(A.JYL_GSQYZ), 0) JYL_GSQYZ,
               NVL(SUM(A.JYL_KZZ), 0) JYL_KZZ,
               NVL(SUM(A.JYL_HG), 0) JYL_HG,
               NVL(SUM(A.JYL_SG), 0) JYL_SG,
               NVL(SUM(A.JYL_JRCP), 0) JYL_JRCP,
               NVL(SUM(A.JYL_QT), 0) JYL_QT,
               NVL(SUM(A.JYL_ST), 0) JYL_ST,
               NVL(SUM(A.JYL_XC), 0) JYL_XC,
               NVL(SUM(A.JYL_CK), 0) JYL_CK,
               NVL(SUM(A.JYL_RJ), 0) JYL_RJ,
               NVL(SUM(A.JYL_GT), 0) JYL_GT,
               NVL(SUM(A.JYL_SJ), 0) JYL_SJ,
               NVL(SUM(A.JYL_DH), 0) JYL_DH,
               NVL(SUM(A.JYL_HLW), 0) JYL_HLW,
               NVL(SUM(A.JYL_YC), 0) JYL_YC,
               NVL(SUM(A.JYFY), 0) JYFY,
               NVL(SUM(A.JYBS), 0) JYBS,
               NVL(SUM(A.FWYJ), 0) FWYJ,
               NVL(A.HLCS_HKD, 0) HLCS_HKD,
               NVL(A.HLCS_USD, 0) HLCS_USD,
               NVL(SUM(A.YJSR_GGT), 0) YJSR_GGT,
               NVL(SUM(A.JYJ_GGT), 0) JYJ_GGT,
               NVL(SUM(A.JYL_GGT), 0) JYL_GGT,
               NVL(SUM(A.YJSR_SGT), 0) YJSR_SGT,
               NVL(SUM(A.JYJ_SGT), 0) JYJ_SGT,
               NVL(SUM(A.JYL_SGT), 0) JYL_SGT,
               NVL(SUM(A.YJSR_KCB), 0) YJSR_KCB, --科创板，zhangbc，20190627
               NVL(SUM(A.JYJ_KCB), 0) JYJ_KCB, --科创板，zhangbc，20190627
               NVL(SUM(A.JYL_KCB), 0) JYL_KCB --科创板，zhangbc，20190627
          FROM DSC_STAT.T_STAT_KHJYSR_Y A
        --JOIN DSC_CFG.T_JGGL JG ON JG.ORGCODE = A.YYB
         WHERE A.YF = VN_TJYF
         GROUP BY A.YYB, A.HLCS_HKD, A.HLCS_USD;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计不限制关系的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_JYSR_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_RZRQ_R(O_N_CODE OUT INT,
                                                       O_S_NOTE OUT VARCHAR2,
                                                       I_N_TJRQ IN NUMBER,
                                                       I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_RZRQ_R
         功能简述：   营业部融资融券日统计表统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
                 参照p_stat_ry_rzrq_y取数

         注意事项：
                  组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
                  计算不限制关系的数据

         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         黄玉钰      2013/05/22                 创建
          LZF        2013/06/25 10:00:00        修改-统一是运用预先算好的数据vw_khgx_tjrq
          林伟       2013/09/02                 修改：增加融资余额和融券余额
         黄玉钰      2013/09/22                 修改：有关系的数据乘以GX.SYQZ
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '03';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_YYB_RZRQ_R';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        --SELECT COUNT(*) INTO VN_COUNT FROM T_STAT_YYBZC_R WHERE RQ=VN_TJRQ;
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_YYB_RZRQ_R WHERE RQ = VN_TJRQ;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --2.0 统计分组关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_YYB_RZRQ_R
        (RQ,
         U_ID,
         YYB,
         GXLX,
         KHS,
         ZZC,
         ZFZ,
         ZJYE,
         ZQSZ,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         YJ,
         JYJ,
         RZFZ,
         RQFZ,
         GHBJ,
         XZFZ,
         GHLX,
         XZLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         XZRQLX,
         XZRZLX,
         RZFY,
         RQFY,
         PCCS,
         ZBCS,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ_PT,
         JYJ_XY,
         YK,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         XZRZFZ,
         XZRQFZ,
         RZJE,
         RQJE)
        SELECT VN_TJRQ,
               CON_ORG_LVL || '-' || A.YYB U_ID,
               A.YYB YYB,
               GX.GXLX GXLX,
               COUNT(A.KHH) KHS, --应该是唯一的客户数，排除共有的
               NVL(SUM(A.ZZC * GX.SYQZ), 0) ZZC,
               NVL(SUM(A.ZFZ * GX.SYQZ), 0) FZ,
               NVL(SUM(A.ZJYE * GX.SYQZ), 0) ZJYE,
               NVL(SUM(A.ZQSZ * GX.SYQZ), 0) ZQSZ,
               NVL(SUM(A.RZSXED * GX.SYQZ), 0) RZSXED,
               NVL(SUM(A.RQSXED * GX.SYQZ), 0) RQSXED,
               NVL(SUM(A.JYL_RZ * GX.SYQZ), 0) JYL_RZ,
               NVL(SUM(A.JYL_RQ * GX.SYQZ), 0) JYL_RQ,
               NVL(SUM(A.YJ * GX.SYQZ), 0) YJ,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.RZFZ * GX.SYQZ), 0) RZFZ,
               NVL(SUM(A.RQFZ * GX.SYQZ), 0) RQFZ,
               NVL(SUM(A.GHBJ * GX.SYQZ), 0) GHBJ,
               NVL(SUM(A.XZFZ * GX.SYQZ), 0) XZFZ,
               NVL(SUM(A.GHLX * GX.SYQZ), 0) GHLX,
               NVL(SUM(A.XZLX * GX.SYQZ), 0) XZLX,
               NVL(SUM(A.YJLX * GX.SYQZ), 0) YJLX,
               NVL(SUM(A.RZYJLX * GX.SYQZ), 0) RZYJLX,
               NVL(SUM(A.RQYJLX * GX.SYQZ), 0) RQYJLX,
               NVL(SUM(A.XZRQLX * GX.SYQZ), 0) XZRQLX,
               NVL(SUM(A.XZRZLX * GX.SYQZ), 0) XZRZLX,
               NVL(SUM(A.RZFY * GX.SYQZ), 0) RZFY,
               NVL(SUM(A.RQFY * GX.SYQZ), 0) RQFY,
               NVL(SUM(A.PCCS * GX.SYQZ), 0) PCCS,
               NVL(SUM(A.ZBCS * GX.SYQZ), 0) ZBCS,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_PT * GX.SYQZ), 0) JYL_PT,
               NVL(SUM(A.JYL_XY * GX.SYQZ), 0) JYL_XY,
               NVL(SUM(A.YJ_PT * GX.SYQZ), 0) YJ_PT,
               NVL(SUM(A.YJ_XY * GX.SYQZ), 0) YJ_XY,
               NVL(SUM(A.JYJ_PT * GX.SYQZ), 0) JYJ_PT,
               NVL(SUM(A.JYJ_XY * GX.SYQZ), 0) JYJ_XY,
               NVL(SUM(A.YK * GX.SYQZ), 0) YK,
               NVL(SUM(A.KYBZJ * GX.SYQZ), 0) KYBZJ,
               NVL(SUM(A.ZRJE * GX.SYQZ), 0) ZRJE,
               NVL(SUM(A.ZCJE * GX.SYQZ), 0) ZCJE,
               NVL(SUM(A.ZRSZ * GX.SYQZ), 0) ZRSZ,
               NVL(SUM(A.ZCSZ * GX.SYQZ), 0) ZCSZ,
               NVL(SUM(A.FWYJ * GX.SYQZ), 0) FWYJ,
               NVL(SUM(A.XZRZFZ * GX.SYQZ), 0) XZRZFZ,
               NVL(SUM(A.XZRQFZ * GX.SYQZ), 0) XZRQFZ,
               NVL(SUM(A.RZJE * GX.SYQZ), 0) RZJE,
               NVL(SUM(A.RQJE * GX.SYQZ), 0) RQJE
          FROM DSC_STAT.T_STAT_RZRQ_R A
          JOIN (SELECT A.YYB, A.GXLX, A.KHH, LEAST(SUM(A.SYQZ), 1) SYQZ
                  FROM DSC_STAT.TMP_T_KHGX A
                 WHERE A.JZRQ > VN_TJRQ
                 GROUP BY A.YYB, A.GXLX, A.KHH) GX ON GX.KHH = A.KHH
         WHERE A.RQ = VN_TJRQ
         GROUP BY A.YYB, GX.GXLX;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3.0 统计唯一关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_YYB_RZRQ_R
        (RQ,
         U_ID,
         YYB,
         GXLX,
         KHS,
         ZZC,
         ZFZ,
         ZJYE,
         ZQSZ,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         YJ,
         JYJ,
         RZFZ,
         RQFZ,
         GHBJ,
         XZFZ,
         GHLX,
         XZLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         XZRQLX,
         XZRZLX,
         RZFY,
         RQFY,
         PCCS,
         ZBCS,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ_PT,
         JYJ_XY,
         YK,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         XZRZFZ,
         XZRQFZ,
         RZJE,
         RQJE)
        SELECT VN_TJRQ,
               CON_ORG_LVL || '-' || A.YYB U_ID,
               A.YYB AS YYB,
               0 GXLX,
               COUNT(A.KHH) KHS,
               NVL(SUM(A.ZZC), 0) ZZC,
               NVL(SUM(A.ZFZ), 0) FZ,
               NVL(SUM(A.ZJYE), 0) ZJYE,
               NVL(SUM(A.ZQSZ), 0) ZQSZ,
               NVL(SUM(A.RZSXED), 0) RZSXED,
               NVL(SUM(A.RQSXED), 0) RQSXED,
               NVL(SUM(A.JYL_RZ), 0) JYL_RZ,
               NVL(SUM(A.JYL_RQ), 0) JYL_RQ,
               NVL(SUM(A.YJ), 0) YJ,
               NVL(SUM(A.JYJ), 0) JYJ,
               NVL(SUM(A.RZFZ), 0) RZFZ,
               NVL(SUM(A.RQFZ), 0) RQFZ,
               NVL(SUM(A.GHBJ), 0) GHBJ,
               NVL(SUM(A.XZFZ), 0) XZFZ,
               NVL(SUM(A.GHLX), 0) GHLX,
               NVL(SUM(A.XZLX), 0) XZLX,
               NVL(SUM(A.YJLX), 0) YJLX,
               NVL(SUM(A.RZYJLX), 0) RZYJLX,
               NVL(SUM(A.RQYJLX), 0) RQYJLX,
               NVL(SUM(A.XZRQLX), 0) XZRQLX,
               NVL(SUM(A.XZRZLX), 0) XZRZLX,
               NVL(SUM(A.RZFY), 0) RZFY,
               NVL(SUM(A.RQFY), 0) RQFY,
               NVL(SUM(A.PCCS), 0) PCCS,
               NVL(SUM(A.ZBCS), 0) ZBCS,
               NVL(SUM(A.JYL), 0) JYL,
               NVL(SUM(A.JYL_PT), 0) JYL_PT,
               NVL(SUM(A.JYL_XY), 0) JYL_XY,
               NVL(SUM(A.YJ_PT), 0) YJ_PT,
               NVL(SUM(A.YJ_XY), 0) YJ_XY,
               NVL(SUM(A.JYJ_PT), 0) JYJ_PT,
               NVL(SUM(A.JYJ_XY), 0) JYJ_XY,
               NVL(SUM(A.YK), 0) YK,
               NVL(SUM(A.KYBZJ), 0) KYBZJ,
               NVL(SUM(A.ZRJE), 0) ZRJE,
               NVL(SUM(A.ZCJE), 0) ZCJE,
               NVL(SUM(A.ZRSZ), 0) ZRSZ,
               NVL(SUM(A.ZCSZ), 0) ZCSZ,
               NVL(SUM(A.FWYJ), 0) FWYJ,
               NVL(SUM(A.XZRZFZ), 0) XZRZFZ,
               NVL(SUM(A.XZRQFZ), 0) XZRQFZ,
               NVL(SUM(A.RZJE), 0) RZJE,
               NVL(SUM(A.RQJE), 0) RQJE
          FROM DSC_STAT.T_STAT_RZRQ_R A
        --JOIN DSC_CFG.T_JGGL JG ON A.YYB = JG.ORGCODE
         WHERE A.RQ = VN_TJRQ
         GROUP BY A.YYB;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_RZRQ_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_RZRQ_Y(O_N_CODE OUT INT,
                                                       O_S_NOTE OUT VARCHAR2,
                                                       I_N_TJRQ IN NUMBER,
                                                       I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_RZRQ_Y
         功能简述：   营业部融资融券月统计表统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
                 参照p_stat_ry_rzrq_y取数

         注意事项：
                  组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
                  计算不限制关系的数据

         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         黄玉钰      2013/05/22                 创建
         林伟        2013/09/02                 修改：增加融资金额和融券金额
         黄玉钰      2013/09/22                 修改：有关系的数据乘以GX.SYQZ
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '03';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_YYB_RZRQ_Y';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_YYB_RZRQ_Y WHERE YF = VN_TJYF;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --2.0 统计分组关系
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_YYB_RZRQ_Y
        (YF,
         U_ID,
         YYB,
         GXLX,
         KHS,
         ZZC,
         ZFZ,
         ZJYE,
         ZQSZ,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         YJ,
         JYJ,
         RZFZ,
         RQFZ,
         GHBJ,
         XZFZ,
         GHLX,
         XZLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         XZRQLX,
         XZRZLX,
         RZFY,
         RQFY,
         PCCS,
         ZBCS,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ_PT,
         JYJ_XY,
         YK,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         XZRZFZ,
         XZRQFZ,
         YMRZJE,
         YMRQJE)
        SELECT VN_TJYF,
               CON_ORG_LVL || '-' || A.YYB AS U_ID,
               A.YYB AS YYB,
               GX.GXLX GXLX,
               COUNT(A.KHH) KHS, --应该是唯一的客户数，排除共有的
               NVL(SUM(A.ZZC * GX.SYQZ), 0) ZZC,
               NVL(SUM(A.ZFZ * GX.SYQZ), 0) FZ,
               NVL(SUM(A.ZJYE * GX.SYQZ), 0) ZJYE,
               NVL(SUM(A.ZQSZ * GX.SYQZ), 0) ZQSZ,
               NVL(SUM(A.RZSXED * GX.SYQZ), 0) RZSXED,
               NVL(SUM(A.RQSXED * GX.SYQZ), 0) RQSXED,
               NVL(SUM(A.JYL_RZ * GX.SYQZ), 0) JYL_RZ,
               NVL(SUM(A.JYL_RQ * GX.SYQZ), 0) JYL_RQ,
               NVL(SUM(A.YJ * GX.SYQZ), 0) YJ,
               NVL(SUM(A.JYJ * GX.SYQZ), 0) JYJ,
               NVL(SUM(A.RZFZ * GX.SYQZ), 0) RZFZ,
               NVL(SUM(A.RQFZ * GX.SYQZ), 0) RQFZ,
               NVL(SUM(A.GHBJ * GX.SYQZ), 0) GHBJ,
               NVL(SUM(A.XZFZ * GX.SYQZ), 0) XZFZ,
               NVL(SUM(A.GHLX * GX.SYQZ), 0) GHLX,
               NVL(SUM(A.XZLX * GX.SYQZ), 0) XZLX,
               NVL(SUM(A.YJLX * GX.SYQZ), 0) YJLX,
               NVL(SUM(A.RZYJLX * GX.SYQZ), 0) RZYJLX,
               NVL(SUM(A.RQYJLX * GX.SYQZ), 0) RQYJLX,
               NVL(SUM(A.XZRQLX * GX.SYQZ), 0) XZRQLX,
               NVL(SUM(A.XZRZLX * GX.SYQZ), 0) XZRZLX,
               NVL(SUM(A.RZFY * GX.SYQZ), 0) RZFY,
               NVL(SUM(A.RQFY * GX.SYQZ), 0) RQFY,
               NVL(SUM(A.PCCS * GX.SYQZ), 0) PCCS,
               NVL(SUM(A.ZBCS * GX.SYQZ), 0) ZBCS,
               NVL(SUM(A.JYL * GX.SYQZ), 0) JYL,
               NVL(SUM(A.JYL_PT * GX.SYQZ), 0) JYL_PT,
               NVL(SUM(A.JYL_XY * GX.SYQZ), 0) JYL_XY,
               NVL(SUM(A.YJ_PT * GX.SYQZ), 0) YJ_PT,
               NVL(SUM(A.YJ_XY * GX.SYQZ), 0) YJ_XY,
               NVL(SUM(A.JYJ_PT * GX.SYQZ), 0) JYJ_PT,
               NVL(SUM(A.JYJ_XY * GX.SYQZ), 0) JYJ_XY,
               NVL(SUM(A.YK * GX.SYQZ), 0) YK,
               NVL(SUM(A.KYBZJ * GX.SYQZ), 0) KYBZJ,
               NVL(SUM(A.ZRJE * GX.SYQZ), 0) ZRJE,
               NVL(SUM(A.ZCJE * GX.SYQZ), 0) ZCJE,
               NVL(SUM(A.ZRSZ * GX.SYQZ), 0) ZRSZ,
               NVL(SUM(A.ZCSZ * GX.SYQZ), 0) ZCSZ,
               NVL(SUM(A.FWYJ * GX.SYQZ), 0) FWYJ,
               NVL(SUM(A.XZRZFZ * GX.SYQZ), 0) XZRZFZ,
               NVL(SUM(A.XZRQFZ * GX.SYQZ), 0) XZRQFZ,
               NVL(SUM(A.YMRZJE * GX.SYQZ), 0) YMRZJE,
               NVL(SUM(A.YMRQJE * GX.SYQZ), 0) YMRQJE
          FROM DSC_STAT.T_STAT_RZRQ_Y A
          JOIN (SELECT A.YYB, A.GXLX, A.KHH, LEAST(SUM(A.SYQZ), 1) SYQZ
                  FROM DSC_STAT.TMP_T_KHGX A
                 WHERE A.JZRQ > VN_TJRQ
                 GROUP BY A.YYB, A.GXLX, A.KHH) GX ON GX.KHH = A.KHH
         WHERE A.YF = VN_TJYF
         GROUP BY A.YYB, GX.GXLX;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3.0-统计所有
    -----------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_YYB_RZRQ_Y
        (YF,
         U_ID,
         YYB,
         GXLX,
         KHS,
         ZZC,
         ZFZ,
         ZJYE,
         ZQSZ,
         RZSXED,
         RQSXED,
         JYL_RZ,
         JYL_RQ,
         YJ,
         JYJ,
         RZFZ,
         RQFZ,
         GHBJ,
         XZFZ,
         XZRZFZ,
         XZRQFZ,
         GHLX,
         YJLX,
         RZYJLX,
         RQYJLX,
         XZLX,
         XZRQLX,
         XZRZLX,
         RZFY,
         RQFY,
         PCCS,
         ZBCS,
         JYL,
         JYL_PT,
         JYL_XY,
         YJ_PT,
         YJ_XY,
         JYJ_PT,
         JYJ_XY,
         YK,
         KYBZJ,
         ZRJE,
         ZCJE,
         ZRSZ,
         ZCSZ,
         FWYJ,
         QCZC,
         RJZC,
         RJRZRQ,
         RJRZFZ,
         RJRQFZ,
         RJZQSZ,
         YMRZJE,
         YMRQJE)
        SELECT VN_TJYF,
               CON_ORG_LVL || '-' || A.YYB AS U_ID,
               A.YYB AS YYB,
               0 GXLX,
               COUNT(A.KHH) KHS,
               NVL(SUM(A.ZZC), 0) ZZC,
               NVL(SUM(A.ZFZ), 0) ZFZ,
               NVL(SUM(A.ZJYE), 0) ZJYE,
               NVL(SUM(A.ZQSZ), 0) ZQSZ,
               NVL(SUM(A.RZSXED), 0) RZSXED,
               NVL(SUM(A.RQSXED), 0) RQSXED,
               NVL(SUM(A.JYL_RZ), 0) JYL_RZ,
               NVL(SUM(A.JYL_RQ), 0) JYL_RQ,
               NVL(SUM(A.YJ), 0) YJ,
               NVL(SUM(A.JYJ), 0) JYJ,
               NVL(SUM(A.RZFZ), 0) RZFZ,
               NVL(SUM(A.RQFZ), 0) RQFZ,
               NVL(SUM(A.GHBJ), 0) GHBJ,
               NVL(SUM(A.XZFZ), 0) XZFZ,
               NVL(SUM(A.XZRZFZ), 0) XZRZFZ,
               NVL(SUM(A.XZRQFZ), 0) XZRQFZ,
               NVL(SUM(A.GHLX), 0) GHLX,
               NVL(SUM(A.YJLX), 0) YJLX,
               NVL(SUM(A.RZYJLX), 0) RZYJLX,
               NVL(SUM(A.RQYJLX), 0) RQYJLX,
               NVL(SUM(A.XZLX), 0) XZLX,
               NVL(SUM(A.XZRQLX), 0) XZRQLX,
               NVL(SUM(A.XZRZLX), 0) XZRZLX,
               NVL(SUM(A.RZFY), 0) RZFY,
               NVL(SUM(A.RQFY), 0) RQFY,
               NVL(SUM(A.PCCS), 0) PCCS,
               NVL(SUM(A.ZBCS), 0) ZBCS,
               NVL(SUM(A.JYL), 0) JYL,
               NVL(SUM(A.JYL_PT), 0) JYL_PT,
               NVL(SUM(A.JYL_XY), 0) JYL_XY,
               NVL(SUM(A.YJ_PT), 0) YJ_PT,
               NVL(SUM(A.YJ_XY), 0) YJ_XY,
               NVL(SUM(A.JYJ_PT), 0) JYJ_PT,
               NVL(SUM(A.JYJ_XY), 0) JYJ_XY,
               NVL(SUM(A.YK), 0) YK,
               NVL(SUM(A.KYBZJ), 0) KYBZJ,
               NVL(SUM(A.ZRJE), 0) ZRJE,
               NVL(SUM(A.ZCJE), 0) ZCJE,
               NVL(SUM(A.ZRSZ), 0) ZRSZ,
               NVL(SUM(A.ZCSZ), 0) ZCSZ,
               NVL(SUM(A.FWYJ), 0) FWYJ,
               NVL(SUM(A.QCZC), 0) QCZC,
               NVL(SUM(A.RJZC), 0) RJZC,
               NVL(SUM(A.RJRZRQ), 0) RJRZRQ,
               NVL(SUM(A.RJRZFZ), 0) RJRZFZ,
               NVL(SUM(A.RJRQFZ), 0) RJRQFZ,
               NVL(SUM(A.RJZQSZ), 0) RJZQSZ,
               NVL(SUM(A.YMRZJE), 0) YMRZJE,
               NVL(SUM(A.YMRQJE), 0) YMRQJE
          FROM DSC_STAT.T_STAT_RZRQ_Y A
        --JOIN DSC_CFG.T_JGGL JG ON A.YYB = JG.ORGCODE
         WHERE A.YF = VN_TJYF
         GROUP BY A.YYB;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_RZRQ_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_WDTJ_FP_R(O_N_CODE OUT INT,
                                                 O_S_NOTE OUT VARCHAR2,
                                                 I_N_TJRQ IN NUMBER,
                                                 I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_WDTJ_FP_R
         功能简述：   营业部_维度统计_金融产品_日
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：

         注意事项：

         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间         版本          操作
         胡丹丹      2014/12/1        4.0.0.1      创建
    */
    VN_HL_HKD DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD DSC_CFG.T_HLCS.GSBL%TYPE;

    VS_PROC_NAME  VARCHAR2(100);
    VN_LOGID      INT; --LOG 表记录ID
    VN_ROWCOUNT   INT; --记录数
    VN_STEP       INT; --动作步数
    VN_PROC_NO    NUMBER(10);
    VS_USER       VARCHAR2(30);
    VN_TJRQ       NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME    VARCHAR2(100) := 'DSC_STAT.T_STAT_YYB_WDTJ_FP_R';
    VS_TABNAME_LS VARCHAR2(100) := 'DSC_STAT.TMP_STAT_YYB_WDTJ_FP_R';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表' ||
                                                        I_N_TJRQ || '的数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_YYB_WDTJ_FP_R WHERE RQ = VN_TJRQ;
        COMMIT;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表' ||
                                                        I_N_TJRQ || '的数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_STAT_YYB_WDTJ_FP_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_STAT_YYB_WDTJ_FP_R';
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_STAT_YYB_WDTJ_FP_R]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_STAT_YYB_WDTJ_FP_R]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;

    --2.0 统计交易
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计交易的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --插入数据
    INSERT INTO DSC_STAT.TMP_STAT_YYB_WDTJ_FP_R
        (RQ, YYB, CPFL, JRJGDM, CPDM, YWDM, BZ, CJBS, CJFE, CJJE, SXF, DLF, QTF)
        SELECT VN_TJRQ RQ,
               A.YYB,
               A.CPFL,
               A.JRJGDM,
               A.CPDM,
               A.YWDM,
               A.BZ,
               COUNT(1) AS CJBS,
               SUM(NVL(A.QRFE, 0)) AS CJFE,
               SUM(NVL(A.QRJE, 0)) AS CJJE,
               SUM(NVL(A.SXF, 0)) AS SXF,
               SUM(NVL(A.DLF, 0)) AS DLF,
               SUM(NVL(A.QTF, 0)) AS QTF
          FROM (SELECT QRRQ, YYB, CPDM, YWDM, BZ, QRFE, QRJE, SXF, DLF, QTF, CPFL, JRJGDM
                  FROM DSC_BAS.T_FP_JGMXLS
                UNION ALL
                SELECT QRRQ, YYB, CPDM, YWDM, BZ, QRFE, QRJE, SXF, DLF, QTF, CPFL, JRJGDM
                  FROM DSC_HIS.T_FP_JGMXLS_HIS) A
         WHERE A.YWDM IN ('121', '122', '123', '124', '125', '139', '142', '130')
           AND A.QRRQ = VN_TJRQ
         GROUP BY A.YYB, A.CPFL, A.JRJGDM, A.CPDM, A.YWDM, A.BZ;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计交易的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --2.1 统计市值
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计市值的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --插入数据
    INSERT INTO DSC_STAT.TMP_STAT_YYB_WDTJ_FP_R
        (RQ, YYB, CPFL, JRJGDM, CPDM, BZ, CPFE, ZXSZ)
        SELECT VN_TJRQ RQ,
               A.YYB,
               A.CPFL,
               A.JRJGDM,
               A.CPDM,
               A.BZ,
               SUM(NVL(CPSL, 0)) AS JJFE,
               SUM(NVL(A.ZXSZ, 0)) AS JJSZ
          FROM (SELECT RQ, YYB, CPDM, CPSL, ZXSZ, BZ, CPFL, JRJGDM
                  FROM DSC_BAS.T_FP_CPFE
                UNION ALL
                SELECT RQ, YYB, CPDM, CPSL, ZXSZ, BZ, CPFL, JRJGDM
                  FROM DSC_HIS.T_FP_CPFE_HIS) A
         WHERE A.RQ = VN_TJRQ
         GROUP BY A.YYB, A.CPFL, A.JRJGDM, A.CPDM, A.BZ;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计市值的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3 插入结果表
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表[' || VS_TABNAME_LS ||
                                                    ']结果汇总统计到[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --插入数据
    INSERT INTO DSC_STAT.T_STAT_YYB_WDTJ_FP_R
        (RQ,
         YYB,
         CPFL,
         JRJGDM,
         CPDM,
         YWDM,
         BZ,
         CPFE,
         ZXSZ,
         CJBS,
         CJFE,
         CJJE,
         SXF,
         DLF,
         QTF,
         HLCS)
        SELECT VN_TJRQ RQ,
               YYB,
               CPFL,
               JRJGDM,
               CPDM,
               YWDM,
               BZ,
               NVL(SUM(CPFE), 0) AS CPFE,
               NVL(SUM(ZXSZ), 0) AS ZXSZ,
               NVL(SUM(CJBS), 0) AS CJBS,
               NVL(SUM(CJFE), 0) AS CJFE,
               NVL(SUM(CJJE), 0) AS CJJE,
               NVL(SUM(SXF), 0) AS SXF,
               NVL(SUM(DLF), 0) AS DLF,
               NVL(SUM(QTF), 0) AS QTF,
               DECODE(BZ, '2', VN_HL_HKD, '3', VN_HL_USD, 1) AS HLCS
          FROM DSC_STAT.TMP_STAT_YYB_WDTJ_FP_R
         GROUP BY YYB, CPFL, JRJGDM, CPDM, YWDM, BZ;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表[' || VS_TABNAME_LS ||
                                                    ']结果汇总统计到[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_WDTJ_FP_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_WDTJ_KHZHS_R(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN NUMBER,
                                                    I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_WDTJ_KHZHS_R
         功能简述：   营业部_维度统计_客户账户数_日
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：

         注意事项：

         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间         版本          操作
         胡丹丹      2014/12/1        4.0.0.1      创建
         吴邦杰      2015/06/09       4.0.0.2      修改：客户状态为字符串型，需加上引号。否则在某些情况下会报错

    */
    VS_PROC_NAME  VARCHAR2(100);
    VN_LOGID      INT; --LOG 表记录ID
    VN_ROWCOUNT   INT; --记录数
    VN_STEP       INT; --动作步数
    VN_PROC_NO    NUMBER(10);
    VS_USER       VARCHAR2(30);
    VN_TJRQ       NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME    VARCHAR2(100) := 'DSC_STAT.T_STAT_YYB_WDTJ_KHZHS_R';
    VS_TABNAME_LS VARCHAR2(100) := 'DSC_STAT.TMP_STAT_YYB_WDTJ_KHZHS_R';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表' ||
                                                        I_N_TJRQ || '的数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_YYB_WDTJ_KHZHS_R WHERE RQ = VN_TJRQ;
        COMMIT;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表' ||
                                                        I_N_TJRQ || '的数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_STAT_YYB_WDTJ_KHZHS_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_STAT_YYB_WDTJ_KHZHS_R';
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_STAT_YYB_WDTJ_KHZHS_R]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_STAT_YYB_WDTJ_KHZHS_R]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --2.1统计股东数据
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计股东数据插入临时表[' || VS_TABNAME_LS || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --插入数据
    INSERT INTO DSC_STAT.TMP_STAT_YYB_WDTJ_KHZHS_R
        (RQ, YYB, JYS, RYLB, GRJG, ZHS, ZDZHS, DJHS, GSHS, BRKHS, BRXHS)
        SELECT VN_TJRQ RQ,
               GD.YYB,
               GD.JYS,
               1 AS RYLB,
               T.GRJG,
               SUM(CASE
                       WHEN (GD.GDZT <> '3' OR (GD.GDZT = '3' AND GD.XHRQ > VN_TJRQ)) THEN
                        1
                       ELSE
                        0
                   END) AS ZHS,
               SUM(CASE
                       WHEN GD.JYS = '2' AND
                            DECODE(INSTR(GD.GDZDSX, ';'),
                                   0,
                                   BITAND(GD.GDZDSX, 32),
                                   INSTR(';' || GD.GDZDSX || ';', ';32;')) > 0 THEN
                        1
                       ELSE
                        0
                   END) AS ZDZHS,
               SUM(CASE
                       WHEN GD.GDZT = '1' THEN
                        1
                       ELSE
                        0
                   END) AS DJHS,
               SUM(CASE
                       WHEN GD.GDZT = '2' THEN
                        1
                       ELSE
                        0
                   END) AS GSHS,
               SUM(CASE
                       WHEN GD.KHRQ = VN_TJRQ THEN
                        1
                       ELSE
                        0
                   END) AS BRKHS,
               SUM(CASE
                       WHEN GD.XHRQ = VN_TJRQ THEN
                        1
                       ELSE
                        0
                   END) AS BRXHS
          FROM DSC_BAS.T_KHXX_JJYW T, DSC_BAS.T_GDZH GD
         WHERE T.KHH = GD.KHH
           AND GD.KHRQ <= VN_TJRQ
         GROUP BY GD.YYB, GD.JYS, T.GRJG;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计股东数据插入临时表[' || VS_TABNAME_LS || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --2.2统计指定转托管数据
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计指定转托管数据插入临时表[' || VS_TABNAME_LS || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --插入数据
    INSERT INTO DSC_STAT.TMP_STAT_YYB_WDTJ_KHZHS_R
        (RQ, YYB, JYS, RYLB, GRJG, BRXZDHS, BRCZDHS, BRZTGZRHS, BRZTGZCHS)
        SELECT VN_TJRQ RQ,
               JY.YYB,
               JY.JYS,
               1 AS RYLB,
               T.GRJG,
               COUNT(DISTINCT CASE
                         WHEN JY.JYL_ZD > 0 THEN
                          JY.KHH
                         ELSE
                          NULL
                     END) BRXZDHS,
               COUNT(DISTINCT CASE
                         WHEN JY.JYL_CZD > 0 THEN
                          JY.KHH
                         ELSE
                          NULL
                     END) BRCZDHS,
               COUNT(DISTINCT CASE
                         WHEN JY.JYL_ZTGZR > 0 THEN
                          JY.KHH
                         ELSE
                          NULL
                     END) BRZTGZRHS,
               COUNT(DISTINCT CASE
                         WHEN JY.JYL_ZTGZC > 0 THEN
                          JY.KHH
                         ELSE
                          NULL
                     END) BRZTGZCHS
          FROM (SELECT KHH,
                       YYB,
                       JYS,
                       SUM(CASE
                               WHEN JYLB = '9' THEN
                                NVL(CJJE, 0)
                           END) AS JYL_ZD,
                       SUM(CASE
                               WHEN JYLB = '10' THEN
                                NVL(CJJE, 0)
                           END) AS JYL_CZD,
                       SUM(CASE
                               WHEN JYLB = '15' THEN
                                NVL(CJJE, 0)
                           END) AS JYL_ZTGZR,
                       SUM(CASE
                               WHEN JYLB = '7' THEN
                                NVL(CJJE, 0)
                           END) AS JYL_ZTGZC
                  FROM (SELECT KHH, YYB, JYS, JYLB, CJJE
                          FROM DSC_BAS.T_JGMXLS
                         WHERE JYLB IN ('7', '9', '10', '15')
                           AND CJRQ = VN_TJRQ
                        UNION ALL
                        SELECT KHH, YYB, JYS, JYLB, CJJE
                          FROM DSC_HIS.T_JGMXLS_HIS
                         WHERE JYLB IN ('7', '9', '10', '15')
                           AND CJRQ = VN_TJRQ)
                 GROUP BY KHH, YYB, JYS) JY,
               DSC_BAS.T_KHXX_JJYW T
         WHERE JY.KHH = T.KHH
         GROUP BY JY.YYB, JY.JYS, T.GRJG;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计指定转托管数据插入临时表[' || VS_TABNAME_LS || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --2.3统计客户数据
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计客户数据插入临时表[' || VS_TABNAME_LS || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --插入数据
    INSERT INTO DSC_STAT.TMP_STAT_YYB_WDTJ_KHZHS_R
        (RQ, YYB, RYLB, GRJG, ZHS, DJHS, GSHS, BRKHS, BRXHS)
        SELECT VN_TJRQ RQ,
               T.YYB,
               2 AS RYLB,
               T.GRJG,
               SUM(CASE
                       WHEN (KHZT <> '3' OR (KHZT = '3' AND XHRQ > VN_TJRQ)) THEN
                        1
                       ELSE
                        0
                   END) AS ZHS,
               SUM(CASE
                       WHEN T.KHZT = '1' THEN
                        1
                       ELSE
                        0
                   END) AS DJHS,
               SUM(CASE
                       WHEN T.KHZT = '2' THEN
                        1
                       ELSE
                        0
                   END) AS GSHS,
               SUM(CASE
                       WHEN KHRQ = VN_TJRQ THEN
                        1
                       ELSE
                        0
                   END) AS BRKHS,
               SUM(CASE
                       WHEN XHRQ = VN_TJRQ THEN
                        1
                       ELSE
                        0
                   END) AS BRXHS
          FROM DSC_BAS.T_KHXX_JJYW T
         WHERE T.KHRQ <= VN_TJRQ
         GROUP BY T.YYB, T.GRJG;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计客户数据插入临时表[' || VS_TABNAME_LS || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --2.4统计资金账户数据
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计资金账户数据插入临时表[' || VS_TABNAME_LS || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --插入数据
    INSERT INTO DSC_STAT.TMP_STAT_YYB_WDTJ_KHZHS_R
        (RQ, YYB, RYLB, GRJG, BZ, ZHS, BRKHS, BRXHS)
        SELECT VN_TJRQ RQ,
               T.YYB,
               3 AS RYLB,
               T.GRJG,
               ZJZH.BZ,
               SUM(CASE
                       WHEN (ZJZH.ZHZT <> '3' OR (ZJZH.ZHZT = '3' AND ZJZH.XHRQ > VN_TJRQ)) THEN
                        1
                       ELSE
                        0
                   END) ZHS,
               SUM(CASE
                       WHEN ZJZH.KHRQ = VN_TJRQ THEN
                        1
                       ELSE
                        0
                   END) BRKHS,
               SUM(CASE
                       WHEN ZJZH.XHRQ = VN_TJRQ THEN
                        1
                       ELSE
                        0
                   END) BRXHS
          FROM DSC_BAS.T_KHXX_JJYW T, DSC_BAS.T_ZJZH ZJZH
         WHERE T.KHH = ZJZH.KHH
           AND ZJZH.KHRQ <= VN_TJRQ
         GROUP BY T.YYB, T.GRJG, ZJZH.BZ;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计资金账户数据插入临时表[' || VS_TABNAME_LS || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3将临时表数据汇总到结果表
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表[' || VS_TABNAME_LS ||
                                                    ']结果汇总统计到[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --插入数据
    INSERT INTO DSC_STAT.T_STAT_YYB_WDTJ_KHZHS_R
        (RQ,
         YYB,
         JYS,
         RYLB,
         GRJG,
         BZ,
         ZHS,
         ZDZHS,
         DJHS,
         GSHS,
         BRKHS,
         BRXHS,
         BRXZDHS,
         BRCZDHS,
         BRZTGZRHS,
         BRZTGZCHS)
        SELECT VN_TJRQ RQ,
               YYB,
               JYS,
               RYLB,
               GRJG,
               BZ,
               NVL(SUM(ZHS), 0) AS ZHS,
               NVL(SUM(ZDZHS), 0) AS ZDZHS,
               NVL(SUM(DJHS), 0) AS DJHS,
               NVL(SUM(GSHS), 0) AS GSHS,
               NVL(SUM(BRKHS), 0) AS BRKHS,
               NVL(SUM(BRXHS), 0) AS BRXHS,
               NVL(SUM(BRXZDHS), 0) AS BRXZDHS,
               NVL(SUM(BRCZDHS), 0) AS BRCZDHS,
               NVL(SUM(BRZTGZRHS), 0) AS BRZTGZRHS,
               NVL(SUM(BRZTGZCHS), 0) AS BRZTGZCHS
          FROM DSC_STAT.TMP_STAT_YYB_WDTJ_KHZHS_R
         GROUP BY YYB, JYS, RYLB, GRJG, BZ;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表[' || VS_TABNAME_LS ||
                                                    ']结果汇总统计到[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_WDTJ_KHZHS_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_WDTJ_ZJ_R(O_N_CODE OUT INT,
                                                 O_S_NOTE OUT VARCHAR2,
                                                 I_N_TJRQ IN NUMBER,
                                                 I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_WDTJ_ZQZJ_R
         功能简述：   营业部_维度统计_证券资金_日
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：

         注意事项：

         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间         版本          操作
         胡丹丹      2014/12/1        4.0.0.1      创建
    */
    VN_HL_HKD DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD DSC_CFG.T_HLCS.GSBL%TYPE;

    VS_PROC_NAME  VARCHAR2(100);
    VN_LOGID      INT; --LOG 表记录ID
    VN_ROWCOUNT   INT; --记录数
    VN_STEP       INT; --动作步数
    VN_PROC_NO    NUMBER(10);
    VS_USER       VARCHAR2(30);
    VN_TJRQ       NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME    VARCHAR2(100) := 'DSC_STAT.T_STAT_YYB_WDTJ_ZJ_R';
    VS_TABNAME_LS VARCHAR2(100) := 'DSC_STAT.TMP_STAT_YYB_WDTJ_ZJ_R';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表' ||
                                                        I_N_TJRQ || '的数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_YYB_WDTJ_ZJ_R WHERE RQ = VN_TJRQ;
        COMMIT;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表' ||
                                                        I_N_TJRQ || '的数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    ----------清空临时表------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_STAT_YYB_WDTJ_ZJ_R]临时表！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.TMP_STAT_YYB_WDTJ_ZJ_R';
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '清空[DSC_STAT.TMP_STAT_YYB_WDTJ_ZJ_R]临时表！',
                              I_S_CHANGEDESC     => '[DSC_STAT.TMP_STAT_YYB_WDTJ_ZJ_R]表已清空',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;

    --2.1统计资金变动明细数据
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计资金变动明细数据插入临时表[' || VS_TABNAME_LS || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --插入数据
    INSERT INTO DSC_STAT.TMP_STAT_YYB_WDTJ_ZJ_R
        (RQ, YYB, GRJG, XYBZ, BZ, CRJE, QCJE, ZJBS)
        SELECT VN_TJRQ RQ,
               A.YYB,
               B.GRJG,
               A.XYBZ,
               A.BZ,
               SUM(CASE
                       WHEN YWKM IN (SELECT C.PARAM_VALUE
                                       FROM T_PARAM_VALUE C
                                      WHERE C.PARAM_KIND = '01') THEN
                        A.SRJE - A.FCJE
                       ELSE
                        0
                   END) AS CRJE,
               SUM(CASE
                       WHEN YWKM IN (SELECT C.PARAM_VALUE
                                       FROM T_PARAM_VALUE C
                                      WHERE C.PARAM_KIND = '02') THEN
                        A.FCJE - A.SRJE
                       ELSE
                        0
                   END) AS QCJE,
               COUNT(1) AS ZJBS
          FROM DSC_STAT.VW_ZJMXLS A, DSC_BAS.T_KHXX_JJYW B
         WHERE A.KHH = B.KHH
           AND A.RQ = VN_TJRQ
         GROUP BY A.YYB, GRJG, XYBZ, BZ;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计资金变动明细数据插入临时表[' || VS_TABNAME_LS || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --2.2统计普通账户资金余额数据
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计普通账户资金余额数据插入临时表[' || VS_TABNAME_LS || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --插入数据
    INSERT INTO DSC_STAT.TMP_STAT_YYB_WDTJ_ZJ_R
        (RQ, YYB, GRJG, XYBZ, BZ, ZJYE, WJSZJ)
        SELECT VN_TJRQ RQ,
               A.YYB,
               B.GRJG,
               0 AS XYBZ,
               A.BZ,
               SUM(NVL(A.ZHYE, 0)) AS ZJYE,
               SUM(NVL(A.WJSZJ, 0)) AS WJSZJ
          FROM (SELECT RQ, KHH, YYB, ZHYE, BZ, WJSZJ
                  FROM DSC_BAS.T_ZJYE
                UNION ALL
                SELECT RQ, KHH, YYB, ZHYE, BZ, WJSZJ FROM DSC_HIS.T_ZJYELS) A,
               DSC_BAS.T_KHXX_JJYW B
         WHERE A.KHH = B.KHH
           AND A.RQ = VN_TJRQ
         GROUP BY A.YYB, B.GRJG, A.BZ;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计普通账户资金余额数据插入临时表[' || VS_TABNAME_LS || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --2.3统计信用账户资金余额数据
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计信用账户资金余额数据插入临时表[' || VS_TABNAME_LS || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --插入数据
    INSERT INTO DSC_STAT.TMP_STAT_YYB_WDTJ_ZJ_R
        (RQ, YYB, GRJG, XYBZ, BZ, ZJYE, WJSZJ)
        SELECT VN_TJRQ RQ,
               A.YYB,
               B.GRJG,
               1 AS XYBZ,
               A.BZ,
               SUM(NVL(A.ZHYE, 0)) AS ZJYE,
               SUM(NVL(A.WJSZJ, 0)) AS WJSZJ
          FROM (SELECT RQ, KHH, YYB, ZHYE, BZ, WJSZJ
                  FROM DSC_BAS.T_XY_ZJYE
                UNION ALL
                SELECT RQ, KHH, YYB, ZHYE, BZ, WJSZJ FROM DSC_HIS.T_XY_ZJYELS) A,
               DSC_BAS.T_KHXX_JJYW B
         WHERE A.KHH = B.KHH
           AND A.RQ = VN_TJRQ
         GROUP BY A.YYB, B.GRJG, A.BZ;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计信用账户资金余额数据插入临时表[' || VS_TABNAME_LS || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3将临时表数据汇总到结果表
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表[' || VS_TABNAME_LS ||
                                                    ']结果汇总统计到[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --插入数据
    INSERT INTO DSC_STAT.T_STAT_YYB_WDTJ_ZJ_R
        (RQ, YYB, GRJG, XYBZ, BZ, CRJE, QCJE, ZJYE, WJSZJ, ZJBS, HLCS)
        SELECT VN_TJRQ RQ,
               YYB,
               GRJG,
               XYBZ,
               BZ,
               NVL(SUM(CRJE), 0) AS CRJE,
               NVL(SUM(QCJE), 0) AS QCJE,
               NVL(SUM(ZJYE), 0) AS ZJYE,
               NVL(SUM(WJSZJ), 0) AS WJSZJ,
               NVL(SUM(ZJBS), 0) AS ZJBS,
               DECODE(BZ, '2', VN_HL_HKD, '3', VN_HL_USD, 1) AS HLCS
          FROM DSC_STAT.TMP_STAT_YYB_WDTJ_ZJ_R
         GROUP BY YYB, GRJG, XYBZ, BZ;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将临时表[' || VS_TABNAME_LS ||
                                                    ']结果汇总统计到[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_WDTJ_ZJ_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_WDTJ_ZQJY_R(O_N_CODE OUT INT,
                                                            O_S_NOTE OUT VARCHAR2,
                                                            I_N_TJRQ IN NUMBER,
                                                            I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_WDTJ_ZQJY_R
         功能简述：   营业部_维度统计_证券交易_日
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：

         注意事项：

         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间         版本          操作
         胡丹丹      2014/12/1        4.0.0.1      创建
         陈德铸      2015/08/14       4.0.0.2      修改：前端数据展示需展示股票排行，增加ZQDM维度统计

    */
    VN_HL_HKD DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD DSC_CFG.T_HLCS.GSBL%TYPE;

    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_YYB_WDTJ_ZQJY_R';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表' ||
                                                        I_N_TJRQ || '的数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_YYB_WDTJ_ZQJY_R WHERE RQ = VN_TJRQ;
        COMMIT;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表' ||
                                                        I_N_TJRQ || '的数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;

    --2.0 统计数据
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计交易的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --插入数据
    INSERT INTO DSC_STAT.T_STAT_YYB_WDTJ_ZQJY_R
        (RQ,
         YYB,
         JYS,
         ZQLB,
         JYLB,
         ZQDM,
         BZ,
         WTFS,
         XYBZ,
         GRJG,
         CJJE,
         CJSL,
         CJBS,
         BZS1,
         FHYJ,
         S1,
         S2,
         S3,
         S4,
         S5,
         S6,
         S11,
         S12,
         S13,
         S15,
         S16,
         YSJE,
         HLCS)
        SELECT VN_TJRQ RQ, --对数据进行分组算总和
               A.YYB,
               A.JYS,
               A.ZQLB,
               A.JYLB,
               A.ZQDM,
               A.BZ,
               A.WTFS,
               A.XYBZ,
               B.GRJG,
               SUM(NVL(A.CJJE, 0)) AS CJJE,
               SUM(NVL(A.CJSL, 0)) AS CJSL,
               COUNT(1) AS CJBS,
               SUM(NVL(A.BZS1, 0)) AS BZS1,
               SUM(CASE
                       WHEN S1 < 0 THEN
                        -1 * S1
                       ELSE
                        0
                   END) AS FHYJ,
               SUM(NVL(A.S1, 0)) AS S1,
               SUM(NVL(A.S2, 0)) AS S2,
               SUM(NVL(A.S3, 0)) AS S3,
               SUM(NVL(A.S4, 0)) AS S4,
               SUM(NVL(A.S5, 0)) AS S5,
               SUM(NVL(A.S6, 0)) AS S6,
               SUM(NVL(A.S11, 0)) AS S11,
               SUM(NVL(A.S12, 0)) AS S12,
               SUM(NVL(A.S13, 0)) AS S13,
               SUM(NVL(A.S15, 0)) AS S15,
               SUM(NVL(A.S16, 0)) AS S16,
               SUM(NVL(A.YSJE, 0)) AS YSJE,
               DECODE(BZ, '2', VN_HL_HKD, '3', VN_HL_USD, 1) AS HLCS
          FROM DSC_STAT.VW_JGMXLS A, DSC_BAS.T_KHXX_JJYW B
         WHERE A.KHH = B.KHH
           AND A.CJRQ = VN_TJRQ
         GROUP BY A.YYB, A.JYS, A.ZQLB, A.JYLB, A.ZQDM, A.BZ, A.WTFS, A.XYBZ, B.GRJG;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计交易的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_WDTJ_ZQJY_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_WDTJ_ZQSZ_R(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN NUMBER,
                                                   I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_WDTJ_ZQSZ_R
         功能简述：   营业部_维度统计_证券市值_日
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：

         注意事项：

         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间         版本          操作
         胡丹丹      2014/12/1        4.0.0.1      创建
    */
    VN_HL_HKD DSC_CFG.T_HLCS.GSBL%TYPE;
    VN_HL_USD DSC_CFG.T_HLCS.GSBL%TYPE;

    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_YYB_WDTJ_ZQSZ_R';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表' ||
                                                        I_N_TJRQ || '的数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_YYB_WDTJ_ZQSZ_R WHERE RQ = VN_TJRQ;
        COMMIT;

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表' ||
                                                        I_N_TJRQ || '的数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    --获取汇率
    --港币
    SELECT A.GSBL
      INTO VN_HL_HKD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '2'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;
    --美元
    SELECT A.GSBL
      INTO VN_HL_USD
      FROM DSC_CFG.T_HLCS A
     WHERE A.BZ = '3'
       AND I_N_TJRQ BETWEEN A.KSRQ AND A.JSRQ;

    --2.0 统计数据
    ------------------------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计证券市值的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    --插入数据
    INSERT INTO DSC_STAT.T_STAT_YYB_WDTJ_ZQSZ_R
        (RQ, YYB, JYS, ZQLB, BZ, XYBZ, GRJG, ZQSL, ZQSZ, CCCB, HLCS)
        SELECT VN_TJRQ RQ, --对数据进行分组算总和
               A.YYB,
               A.JYS,
               A.ZQLB,
               A.BZ,
               A.XYBZ,
               B.GRJG,
               SUM(NVL(A.ZQSL, 0)) AS ZQSL,
               SUM(NVL(A.ZXSZ, 0)) AS ZXSZ,
               SUM(NVL(A.CCCB, 0)) AS CCCB,
               DECODE(BZ, '2', VN_HL_HKD, '3', VN_HL_USD, 1) AS HLCS
          FROM (SELECT RQ, KHH, YYB, JYS, ZQLB, BZ, ZQSL, ZXSZ, CCCB, 0 AS XYBZ
                  FROM DSC_BAS.T_ZQYE
                UNION ALL
                SELECT RQ, KHH, YYB, JYS, ZQLB, BZ, ZQSL, ZXSZ, CCCB, 0 AS XYBZ
                  FROM DSC_HIS.T_ZQYELS
                UNION ALL
                SELECT RQ, KHH, YYB, JYS, ZQLB, BZ, ZQSL, ZXSZ, CCCB, 1 AS XYBZ
                  FROM DSC_BAS.T_XY_ZQYE
                UNION ALL
                SELECT RQ, KHH, YYB, JYS, ZQLB, BZ, ZQSL, ZXSZ, CCCB, 1 AS XYBZ
                  FROM DSC_HIS.T_XY_ZQYELS) A,
               DSC_BAS.T_KHXX_JJYW B
         WHERE A.KHH = B.KHH
           AND A.RQ = VN_TJRQ
         GROUP BY A.YYB, A.JYS, A.ZQLB, A.BZ, A.XYBZ, B.GRJG;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计证券市值的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_WDTJ_ZQSZ_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_XKKH_Y(O_N_CODE OUT INT,
                                                       O_S_NOTE OUT VARCHAR2,
                                                       I_N_TJRQ IN NUMBER,
                                                       I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_XKKH_Y
         功能简述：   营业部新开户月统计(本月新增)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
                 参照p_stat_ry_xkkh_y取数

         注意事项：
                  组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
                  计算不限制关系的数据

         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         黄玉钰      2013/05/22                 创建
         黄玉钰      2013/08/27                 修改：关联t_khxx_jjyw限制为本月新开客户
         胡阳明      2013/08/29                 修改：相关的BUG
         黄玉钰      2013/09/10                 修改：SUM(NVL(,0))改为NVL(SUM(),0)，关联表查询出具体字段
         黄玉钰      2013/09/12                 修改：YYB字段来源于主表T_KHXX_JJYW（A.YYB->KH.YYB）
         黄玉钰      2013/09/22                 修改：获取资产/交易量等值时关联上T_STAT_RZRQ_Y表
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '03';
    --CON_GXLX_FW CONSTANT INTEGER := 1; --关系类型（服务关系，含主和辅助两种)
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_TJYF_KSRQ NUMBER(8) := PUB_SYS.F_GET_DATE(VN_TJRQ, 0); --统计日期所在的开始日期
    VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6); --统计月份
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_YYB_XKKH_Y';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;
    --VN_TJYF_KSRQ := VN_TJYF * 100 + 1;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        --DELETE FROM T_STAT_YYB_XKKH_Y WHERE YF = VN_TJYF;
        EXECUTE IMMEDIATE 'ALTER TABLE DSC_STAT.T_STAT_YYB_XKKH_Y TRUNCATE PARTITION PY_' ||
                          VN_TJYF || '  UPDATE GLOBAL INDEXES';

        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_YYB_XKKH_Y
        (YF,
         U_ID,
         YYB,
         BYXKKHS,
         BYXKKHZC,
         BYXKKHJYL,
         BYXKKHYJ,
         BYXKKHJYJ,
         BYXKKHZRZJ,
         BYXKKHZCZJ,
         BYXKKHJZRZJ,
         BYXKKHZRSZ,
         BYXKKHZCSZ,
         BYXKKHJZRSZ)
        SELECT VN_TJYF AS YF,
               CON_ORG_LVL || '-' || KH.YYB U_ID,
               KH.YYB,
               COUNT(KH.KHH) BYXKKHS,
               NVL(SUM(A.YMZZC), 0) BYXKKHZC,
               NVL(SUM(JY.JYL), 0) BYXKKHJYL,
               NVL(SUM(JY.YJSR), 0) BYXKKHYJ,
               NVL(SUM(JY.JYJ), 0) BYXKKHJYJ,
               NVL(SUM(A.CRJE), 0) ZRZJ,
               NVL(SUM(A.QCJE), 0) ZCZJ,
               NVL(SUM(A.CRJE - A.QCJE), 0) JZRZJ,
               NVL(SUM(A.ZRZQSZ), 0) ZRSZ,
               NVL(SUM(A.ZCZQSZ), 0) ZCSZ,
               NVL(SUM(A.ZRZQSZ - A.ZCZQSZ), 0) JZRSZ
          FROM DSC_BAS.T_KHXX_JJYW KH,
               (SELECT KHH,
                       NVL(SUM(YMZZC), 0) YMZZC,
                       NVL(SUM(CRJE), 0) CRJE,
                       NVL(SUM(QCJE), 0) QCJE,
                       NVL(SUM(ZRZQSZ), 0) ZRZQSZ,
                       NVL(SUM(ZCZQSZ), 0) ZCZQSZ
                  FROM (SELECT YF, KHH, YMZZC, CRJE, QCJE, ZRZQSZ, ZCZQSZ
                          FROM DSC_STAT.T_STAT_KHZC_Y
                        UNION ALL
                        SELECT YF, KHH, ZZC, ZRJE, ZCJE, ZRSZ, ZCSZ
                          FROM DSC_STAT.T_STAT_RZRQ_Y)
                 WHERE YF = VN_TJYF
                 GROUP BY KHH) A,
               (SELECT KHH,
                       NVL(SUM(JYL), 0) JYL,
                       NVL(SUM(YJSR), 0) YJSR,
                       NVL(SUM(JYJ), 0) JYJ
                  FROM (SELECT YF, KHH, JYL, YJSR, JYJ
                          FROM DSC_STAT.T_STAT_KHJYSR_Y
                        UNION ALL
                        SELECT YF, KHH, JYL, YJ, JYJ FROM DSC_STAT.T_STAT_RZRQ_Y)
                 WHERE YF = VN_TJYF
                 GROUP BY KHH) JY
         WHERE KH.KHRQ BETWEEN VN_TJYF_KSRQ AND VN_TJRQ --统计月开户
           AND KH.KHH = A.KHH(+)
           AND KH.KHH = JY.KHH(+)
         GROUP BY KH.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    O_S_NOTE    := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_XKKH_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_YDGH_R(O_N_CODE OUT INT,
                                                       O_S_NOTE OUT VARCHAR2,
                                                       I_N_TJRQ IN INT,
                                                       I_N_REDO IN NUMBER DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_YYB_YDGH_R
         功能简述：   约定购回营业部日统计表
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：


         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                  操作
         黄玉钰      2013/04/09                 创建

    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;
    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);
    --删除原数据
    IF I_N_REDO = 1 THEN
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YYB_YDGH_R]目标表，日期：=' ||
                                                        VN_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE DSC_STAT.T_STAT_YYB_YDGH_R WHERE RQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YYB_YDGH_R]目标表，日期：=' ||
                                                        VN_TJRQ || '的数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_YYB_YDGH_R]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计约定购回客户日报表数据到[DSC_STAT.T_STAT_YYB_YDGH_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_YYB_YDGH_R
        (RQ,
         YYB,
         YDGHKHS,
         YDGHGDKHS,
         DYSZ,
         JYL_CS,
         JYL_GH,
         YJSR,
         YJSR_CS,
         YJSR_GH,
         JYJSR,
         JYJSR_CS,
         JYJSR_GH,
         LXSR,
         DGHZQSZ,
         DGHJE,
         DGHYJLXSR,
         SQED,
         SYED,
         XZDGHLX)
        SELECT VN_TJRQ,
               A.YYB,
               0,
               0,
               SUM(NVL(A.DYSZ, 0)),
               SUM(NVL(A.JYL_CS, 0)),
               SUM(NVL(A.JYL_GH, 0)),
               SUM(NVL(A.YJSR, 0)),
               SUM(NVL(A.YJSR_CS, 0)),
               SUM(NVL(A.YJSR_GH, 0)),
               SUM(NVL(A.JYJSR, 0)),
               SUM(NVL(A.JYJSR_CS, 0)),
               SUM(NVL(A.JYJSR_GH, 0)),
               SUM(NVL(A.LXSR, 0)),
               SUM(NVL(A.DGHZQSZ, 0)),
               SUM(NVL(A.DGHJE, 0)),
               SUM(NVL(A.DGHYJLXSR, 0)),
               SUM(NVL(A.SQED, 0)),
               SUM(NVL(A.SYED, 0)),
               SUM(NVL(A.XZDGHLX, 0))
          FROM DSC_STAT.T_STAT_YDGH_R A
         WHERE A.RQ = VN_TJRQ
         GROUP BY A.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计约定购回客户日报表数据到[DSC_STAT.T_STAT_YYB_YDGH_R]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计当日约定购回开户数/股东开户数到[DSC_STAT.T_STAT_YYB_YDGH_R]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    MERGE INTO DSC_STAT.T_STAT_YYB_YDGH_R A
    USING (SELECT YYB, COUNT(DISTINCT KHH) KHS, COUNT(KHH) GDKHS
             FROM DSC_STAT.T_STAT_KHYWQXKTQK
            WHERE KTYWQX IN ('303', '304')
              AND KHRQ = VN_TJRQ
            GROUP BY YYB) B
    ON (A.YYB = B.YYB)
    WHEN MATCHED THEN
        UPDATE SET A.YDGHKHS = B.KHS, A.YDGHGDKHS = B.GDKHS WHERE A.RQ = VN_TJRQ
    WHEN NOT MATCHED THEN
        INSERT
        VALUES
            (VN_TJRQ,
             B.YYB,
             B.KHS,
             B.GDKHS,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0);
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计当日约定购回开户数/股东开户数到[DSC_STAT.T_STAT_YYB_YDGH_R]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_YDGH_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_YDGH_Y(O_N_CODE OUT INT,
                                                       O_S_NOTE OUT VARCHAR2,
                                                       I_N_TJRQ IN INT,
                                                       I_N_REDO IN NUMBER DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_YYB_YDGH_y
         功能简述：   约定购回营业部月统计表
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：
              1.对t_stat_ydgh_y进行按日期限制后统计

         注意事项：


         数据源：
              1. 3、 约定购回营业部日统计表 t_stat_yyb_ydgh_r

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                  操作
         黄玉钰      2013/04/09                 创建
         黄玉钰      2013/06/18                 修改：开户数取数，从DSC_STAT.T_STAT_KHYWQXKTQK中统计
                                                      限制本月之前未开过户


    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_MONTH     NUMBER(6) := PUB_SYS.F_GET_DATE(VN_TJRQ, 2); --月份
    VN_KSRQ      NUMBER(8) := PUB_SYS.F_GET_DATE(VN_TJRQ, 0); --统计开始日期取月初
    VN_JSRQ      NUMBER(8) := VN_TJRQ; --统计结束日期取统计日期
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志
    PUB_SYS.P_LOG_PROC(VN_PROC_NO,
                       VN_LOGID,
                       VS_USER,
                       VS_PROC_NAME,
                       I_N_TJRQ,
                       1,
                       '正在运行',
                       I_N_REDO,
                       0);
    --删除原数据
    O_S_NOTE := '【ERROR-10000】';
    IF I_N_REDO IN (0, 1, 2) THEN
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YYB_YDGH_Y]目标表，月份：=' ||
                                                        VN_MONTH || '数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        --删除数据
        DELETE DSC_STAT.T_STAT_YYB_YDGH_Y WHERE YF = VN_MONTH;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        COMMIT;
        --记录日志明细——结束
        O_S_NOTE := '运行正常';
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_YYB_YDGH_Y]目标表，月份：=' ||
                                                        VN_MONTH || '数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_YYB_YDGH_Y]表删除' ||
                                                        VN_ROWCOUNT || '条记录！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计数据到[DSC_STAT.T_STAT_YYB_YDGH_Y]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --统计数据，写入表中
    INSERT INTO DSC_STAT.T_STAT_YYB_YDGH_Y
        (YF,
         YYB,
         YDGHKHS,
         YDGHGDKHS,
         DYSZ,
         JYL_CS,
         JYL_GH,
         YJSR,
         YJSR_CS,
         YJSR_GH,
         JYJSR,
         JYJSR_CS,
         JYJSR_GH,
         LXSR,
         DGHZQSZ,
         DGHJE,
         DGHYJLXSR,
         SQED,
         SYED,
         XZDGHLX)
        SELECT VN_MONTH AS YF,
               A.YYB AS YYB,
               0 AS YDGHKHS,
               SUM(NVL(YDGHGDKHS, 0)) AS YDGHGDKHS,
               SUM(NVL(A.DYSZ, 0)) AS DYSZ,
               SUM(NVL(A.JYL_CS, 0)) AS JYL_CS,
               SUM(NVL(A.JYL_GH, 0)) AS JYL_GH,
               SUM(NVL(A.YJSR, 0)) AS YJSR,
               SUM(NVL(A.YJSR_CS, 0)) AS YJSR_CS,
               SUM(NVL(A.YJSR_GH, 0)) AS YJSR_GH,
               SUM(NVL(A.JYJSR, 0)) AS JYJSR,
               SUM(NVL(A.JYJSR_CS, 0)) AS JYJSR_CS,
               SUM(NVL(A.JYJSR_GH, 0)) AS JYJSR_GH,
               SUM(NVL(A.LXSR, 0)) AS LXSR,
               SUM(CASE RQ --取期末相关数据
                       WHEN VN_JSRQ THEN
                        A.DGHZQSZ
                       ELSE
                        0
                   END) AS DGHZQSZ,
               SUM(CASE RQ
                       WHEN VN_JSRQ THEN
                        A.DGHJE
                       ELSE
                        0
                   END) AS DGHJE,
               SUM(CASE RQ
                       WHEN VN_JSRQ THEN
                        A.DGHYJLXSR
                       ELSE
                        0
                   END) AS DGHYJLXSR,
               SUM(CASE RQ
                       WHEN VN_JSRQ THEN
                        A.SQED
                       ELSE
                        0
                   END) AS SQED,
               SUM(CASE RQ
                       WHEN VN_JSRQ THEN
                        A.SYED
                       ELSE
                        0
                   END) AS SYED,
               SUM(NVL(A.XZDGHLX, 0)) AS XZDGHLX
          FROM DSC_STAT.T_STAT_YYB_YDGH_R A
         WHERE A.RQ BETWEEN VN_KSRQ AND VN_JSRQ --限定日期，统计
         GROUP BY A.YYB;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计数据到[DSC_STAT.T_STAT_YYB_YDGH_Y]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计当日约定购回开户数到[DSC_STAT.T_STAT_YYB_YDGH_Y]！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    UPDATE DSC_STAT.T_STAT_YYB_YDGH_Y A
       SET A.YDGHKHS = NVL((SELECT COUNT(DISTINCT KHH) KHS
                             FROM DSC_STAT.T_STAT_KHYWQXKTQK B
                            WHERE KTYWQX IN ('303', '304')
                              AND KHRQ BETWEEN VN_KSRQ AND VN_JSRQ
                              AND NOT EXISTS (SELECT 1
                                     FROM DSC_STAT.T_STAT_KHYWQXKTQK TMP
                                    WHERE KTYWQX IN ('303', '304')
                                      AND TMP.KHH = B.KHH
                                      AND KHRQ < VN_KSRQ)
                              AND B.YYB = A.YYB),
                           0)
     WHERE A.YF = VN_MONTH;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计当日约定购回开户数到[DSC_STAT.T_STAT_YYB_YDGH_Y]！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_YDGH_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_ZC_R(O_N_CODE OUT INT,
                                                     O_S_NOTE OUT VARCHAR2,
                                                     I_N_TJRQ IN NUMBER,
                                                     I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_ZC_R
         功能简述：   营业部资产日表 （存原始币种）统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
                 参照p_stat_ry_zc_r取数
                 1.计算有关系的数据
                 从DSC_STAT.T_STAT_RY_ZC_R中获取主要信息，关联DSC_BAS.T_RYXX RY获取营业部信息
                 2.计算不限制关系的数据(实际上是计算所有的数据)
                 从DSC_STAT.T_STAT_KHZC_R中获取信息，关联DSC_CFG.T_JGGL获取营业部信息
         注意事项：
                  组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
                  计算有关系的数据及不限制关系的数据

         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         黄玉钰      2013/05/22                 创建
         黄玉钰      2013/09/10                 修改：SUM(NVL(,0))改为NVL(SUM(),0)
         黄玉钰      2013/09/22                 修改：有关系的数据乘以GX.SYQZ
         吴邦杰      2014/09/09                 修改，增加港股通证券市值
         刘官勤      2015/02/02                 修改：增加字段ZFZ_RZRQ总负债_融资融券
         吴邦杰      2016/09/07                 修改，增加深港通证券市值
         zhangbc     2019/06/27                 修改，科创板数据统计
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '03';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_YYB_ZC_R';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        DELETE FROM DSC_STAT.T_STAT_YYB_ZC_R WHERE RQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计有关系的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --2.0 统计分组关系
    ------------------------------------------------------------------------------------------
    INSERT INTO DSC_STAT.T_STAT_YYB_ZC_R
        (RQ,
         U_ID,
         YYB,
         GXLX,
         ZZC,
         FLTZC,
         ZTZC,
         ZQZC,
         DYPSZ,
         ZZC_RMB,
         ZZC_HKD,
         ZZC_USD,
         QTZC_RMB,
         QTZC_HKD,
         QTZC_USD,
         ZJYE_RMB,
         ZJYE_HKD,
         ZJYE_USD,
         ZQSZ,
         ZQSZ_RMB,
         ZQSZ_HKD,
         ZQSZ_USD,
         ZQSZ_ZB,
         ZQSZ_HAZB,
         ZQSZ_SAZB,
         ZQSZ_ZXB,
         ZQSZ_CYB,
         ZQSZ_HB,
         ZQSZ_SB,
         ZQSZ_SB_A,
         ZQSZ_SB_B,
         ZQSZ_FBSJJ,
         ZQSZ_ETF,
         ZQSZ_LOF,
         ZQSZ_SZJJT,
         ZQSZ_DXJJ,
         ZQSZ_JRCP,
         ZQSZ_QZ,
         ZQSZ_GZ,
         ZQSZ_GSQYZ,
         ZQSZ_KZZ,
         ZQSZ_SG,
         ZQSZ_QT,
         SZXZJE,
         ZYSHGRQ,
         CRJE_RMB,
         CRJE_HKD,
         CRJE_USD,
         QCJE_RMB,
         QCJE_HKD,
         QCJE_USD,
         ZRZQSZ,
         ZD_RMB,
         ZD_USD,
         ZTGZR_RMB,
         ZTGZR_HKD,
         ZCZQSZ,
         CZD_RMB,
         CZD_USD,
         ZTGZC_RMB,
         ZTGZC_HKD,
         DRYK,
         ZFZ,
         ZZC_RZRQ,
         DBXJ_RZRQ,
         DBGPSZ_RZRQ,
         HLCS_HKD,
         HLCS_USD,
         ZQSZ_GGT, --港股通，吴邦杰，20140909
         ZQSZ_SGT, --深港通，张功德，20160907
         ZFZ_RZRQ,
         ZQSZ_KCB)
        SELECT VN_TJRQ,
               CON_ORG_LVL || '-' || A.YYB AS U_ID,
               A.YYB AS YYB,
               GX.GXLX GXLX,
               NVL(SUM(A.ZZC * GX.SYQZ), 0) ZZC,
               NVL(SUM(A.FLTZC * GX.SYQZ), 0) FLTZC,
               NVL(SUM(A.ZTZC * GX.SYQZ), 0) ZTZC,
               NVL(SUM(A.ZQZC * GX.SYQZ), 0) ZQZC,
               NVL(SUM(A.DYPSZ * GX.SYQZ), 0) DYPSZ,
               NVL(SUM(A.ZZC_RMB * GX.SYQZ), 0) ZZC_RMB,
               NVL(SUM(A.ZZC_HKD * GX.SYQZ), 0) ZZC_HKD,
               NVL(SUM(A.ZZC_USD * GX.SYQZ), 0) ZZC_USD,
               NVL(SUM(A.QTZC_RMB * GX.SYQZ), 0) QTZC_RMB,
               NVL(SUM(A.QTZC_HKD * GX.SYQZ), 0) QTZC_HKD,
               NVL(SUM(A.QTZC_USD * GX.SYQZ), 0) QTZC_USD,
               NVL(SUM(A.ZJYE_RMB * GX.SYQZ), 0) ZJYE_RMB,
               NVL(SUM(A.ZJYE_HKD * GX.SYQZ), 0) ZJYE_HKD,
               NVL(SUM(A.ZJYE_USD * GX.SYQZ), 0) ZJYE_USD,
               NVL(SUM(A.ZQSZ * GX.SYQZ), 0) ZQSZ,
               NVL(SUM(A.ZQSZ_RMB * GX.SYQZ), 0) ZQSZ_RMB,
               NVL(SUM(A.ZQSZ_HKD * GX.SYQZ), 0) ZQSZ_HKD,
               NVL(SUM(A.ZQSZ_USD * GX.SYQZ), 0) ZQSZ_USD,
               NVL(SUM(A.ZQSZ_ZB * GX.SYQZ), 0) ZQSZ_ZB,
               NVL(SUM(A.ZQSZ_HAZB * GX.SYQZ), 0) ZQSZ_HAZB,
               NVL(SUM(A.ZQSZ_SAZB * GX.SYQZ), 0) ZQSZ_SAZB,
               NVL(SUM(A.ZQSZ_ZXB * GX.SYQZ), 0) ZQSZ_ZXB,
               NVL(SUM(A.ZQSZ_CYB * GX.SYQZ), 0) ZQSZ_CYB,
               NVL(SUM(A.ZQSZ_HB * GX.SYQZ), 0) ZQSZ_HB,
               NVL(SUM(A.ZQSZ_SB * GX.SYQZ), 0) ZQSZ_SB,
               NVL(SUM(A.ZQSZ_SB_A * GX.SYQZ), 0) ZQSZ_SB_A,
               NVL(SUM(A.ZQSZ_SB_B * GX.SYQZ), 0) ZQSZ_SB_B,
               NVL(SUM(A.ZQSZ_FBSJJ * GX.SYQZ), 0) ZQSZ_FBSJJ,
               NVL(SUM(A.ZQSZ_ETF * GX.SYQZ), 0) ZQSZ_ETF,
               NVL(SUM(A.ZQSZ_LOF * GX.SYQZ), 0) ZQSZ_LOF,
               NVL(SUM(A.ZQSZ_SZJJT * GX.SYQZ), 0) ZQSZ_SZJJT,
               NVL(SUM(A.ZQSZ_DXJJ * GX.SYQZ), 0) ZQSZ_DXJJ,
               NVL(SUM(A.ZQSZ_JRCP * GX.SYQZ), 0) ZQSZ_JRCP,
               NVL(SUM(A.ZQSZ_QZ * GX.SYQZ), 0) ZQSZ_QZ,
               NVL(SUM(A.ZQSZ_GZ * GX.SYQZ), 0) ZQSZ_GZ,
               NVL(SUM(A.ZQSZ_GSQYZ * GX.SYQZ), 0) ZQSZ_GSQYZ,
               NVL(SUM(A.ZQSZ_KZZ * GX.SYQZ), 0) ZQSZ_KZZ,
               NVL(SUM(A.ZQSZ_SG * GX.SYQZ), 0) ZQSZ_SG,
               NVL(SUM(A.ZQSZ_QT * GX.SYQZ), 0) ZQSZ_QT,
               NVL(SUM(A.SZXZJE * GX.SYQZ), 0) SZXZJE,
               0 ZYSHGRQ,
               NVL(SUM(A.CRJE_RMB * GX.SYQZ), 0) CRJE_RMB,
               NVL(SUM(A.CRJE_HKD * GX.SYQZ), 0) CRJE_HKD,
               NVL(SUM(A.CRJE_USD * GX.SYQZ), 0) CRJE_USD,
               NVL(SUM(A.QCJE_RMB * GX.SYQZ), 0) QCJE_RMB,
               NVL(SUM(A.QCJE_HKD * GX.SYQZ), 0) QCJE_HKD,
               NVL(SUM(A.QCJE_USD * GX.SYQZ), 0) QCJE_USD,
               NVL(SUM(A.ZRZQSZ * GX.SYQZ), 0) ZRZQSZ,
               NVL(SUM(A.ZD_RMB * GX.SYQZ), 0) ZD_RMB,
               NVL(SUM(A.ZD_USD * GX.SYQZ), 0) ZD_USD,
               NVL(SUM(A.ZTGZR_RMB * GX.SYQZ), 0) ZTGZR_RMB,
               NVL(SUM(A.ZTGZR_HKD * GX.SYQZ), 0) ZTGZR_HKD,
               NVL(SUM(A.ZCZQSZ * GX.SYQZ), 0) ZCZQSZ,
               NVL(SUM(A.CZD_RMB * GX.SYQZ), 0) CZD_RMB,
               NVL(SUM(A.CZD_USD * GX.SYQZ), 0) CZD_USD,
               NVL(SUM(A.ZTGZC_RMB * GX.SYQZ), 0) ZTGZC_RMB,
               NVL(SUM(A.ZTGZC_HKD * GX.SYQZ), 0) ZTGZC_HKD,
               NVL(SUM(A.DRYK * GX.SYQZ), 0) DRYK,
               NVL(SUM(A.ZFZ * GX.SYQZ), 0) ZFZ,
               NVL(SUM(A.ZZC_RZRQ * GX.SYQZ), 0) ZZC_RZRQ,
               NVL(SUM(A.DBXJ_RZRQ * GX.SYQZ), 0) DBXJ_RZRQ,
               NVL(SUM(A.DBGPSZ_RZRQ * GX.SYQZ), 0) DBGPSZ_RZRQ,
               A.HLCS_HKD,
               A.HLCS_USD,
               NVL(SUM(A.ZQSZ_GGT * GX.SYQZ), 0) ZQSZ_GGT,
               NVL(SUM(A.ZQSZ_SGT * GX.SYQZ), 0) ZQSZ_SGT,
               NVL(SUM(A.ZFZ_RZRQ * GX.SYQZ), 0) ZFZ_RZRQ,
               NVL(SUM(A.ZQSZ_KCB * GX.SYQZ), 0) ZQSZ_KCB
          FROM DSC_STAT.T_STAT_KHZC_R A
          JOIN (SELECT A.YYB, A.GXLX, A.KHH, LEAST(SUM(A.SYQZ), 1) SYQZ
                  FROM DSC_STAT.TMP_T_KHGX A
                 WHERE A.JZRQ > VN_TJRQ
                 GROUP BY A.YYB, A.GXLX, A.KHH) GX ON GX.KHH = A.KHH
         WHERE A.RQ = VN_TJRQ
         GROUP BY A.YYB, GX.GXLX, A.HLCS_HKD, A.HLCS_USD;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计有关系的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --3.0 统计无关系
    ---------------------------------------------------------------------------
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计不限制关系的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_YYB_ZC_R
        (RQ,
         U_ID,
         YYB,
         GXLX,
         ZZC,
         ZTZC,
         ZQZC,
         DYPSZ,
         ZZC_RMB,
         ZZC_HKD,
         ZZC_USD,
         QTZC_RMB,
         QTZC_HKD,
         QTZC_USD,
         ZJYE_RMB,
         ZJYE_HKD,
         ZJYE_USD,
         ZQSZ,
         ZQSZ_RMB,
         ZQSZ_HKD,
         ZQSZ_USD,
         ZQSZ_ZB,
         ZQSZ_HAZB,
         ZQSZ_SAZB,
         ZQSZ_ZXB,
         ZQSZ_CYB,
         ZQSZ_HB,
         ZQSZ_SB,
         ZQSZ_SB_A,
         ZQSZ_SB_B,
         ZQSZ_FBSJJ,
         ZQSZ_ETF,
         ZQSZ_LOF,
         ZQSZ_SZJJT,
         ZQSZ_DXJJ,
         ZQSZ_JRCP,
         ZQSZ_QZ,
         ZQSZ_GZ,
         ZQSZ_GSQYZ,
         ZQSZ_KZZ,
         ZQSZ_SG,
         ZQSZ_QT,
         SZXZJE,
         CRJE_RMB,
         CRJE_HKD,
         CRJE_USD,
         QCJE_RMB,
         QCJE_HKD,
         QCJE_USD,
         ZRZQSZ,
         ZD_RMB,
         ZD_USD,
         ZTGZR_RMB,
         ZTGZR_HKD,
         ZCZQSZ,
         CZD_RMB,
         CZD_USD,
         ZTGZC_RMB,
         ZTGZC_HKD,
         DRYK,
         ZFZ,
         FLTZC,
         ZZC_RZRQ,
         DBXJ_RZRQ,
         DBGPSZ_RZRQ,
         HLCS_HKD,
         HLCS_USD,
         ZQSZ_GGT, --港股通，吴邦杰，20140909
         ZQSZ_SGT, --深港通，张功德，20160907
         ZFZ_RZRQ,
         ZQSZ_KCB)
        SELECT VN_TJRQ,
               CON_ORG_LVL || '-' || A.YYB AS U_ID,
               A.YYB AS YYB,
               0 GXLX,
               NVL(SUM(A.ZZC), 0) ZZC,
               NVL(SUM(A.ZTZC), 0) ZTZC,
               NVL(SUM(A.ZQZC), 0) ZQZC,
               NVL(SUM(A.DYPSZ), 0) DYPSZ,
               NVL(SUM(A.ZZC_RMB), 0) ZZC_RMB,
               NVL(SUM(A.ZZC_HKD), 0) ZZC_HKD,
               NVL(SUM(A.ZZC_USD), 0) ZZC_USD,
               NVL(SUM(A.QTZC_RMB), 0) QTZC_RMB,
               NVL(SUM(A.QTZC_HKD), 0) QTZC_HKD,
               NVL(SUM(A.QTZC_USD), 0) QTZC_USD,
               NVL(SUM(A.ZJYE_RMB), 0) ZJYE_RMB,
               NVL(SUM(A.ZJYE_HKD), 0) ZJYE_HKD,
               NVL(SUM(A.ZJYE_USD), 0) ZJYE_USD,
               NVL(SUM(A.ZQSZ), 0) ZQSZ,
               NVL(SUM(A.ZQSZ_RMB), 0) ZQSZ_RMB,
               NVL(SUM(A.ZQSZ_HKD), 0) ZQSZ_HKD,
               NVL(SUM(A.ZQSZ_USD), 0) ZQSZ_USD,
               NVL(SUM(A.ZQSZ_ZB), 0) ZQSZ_ZB,
               NVL(SUM(A.ZQSZ_HAZB), 0) ZQSZ_HAZB,
               NVL(SUM(A.ZQSZ_SAZB), 0) ZQSZ_SAZB,
               NVL(SUM(A.ZQSZ_ZXB), 0) ZQSZ_ZXB,
               NVL(SUM(A.ZQSZ_CYB), 0) ZQSZ_CYB,
               NVL(SUM(A.ZQSZ_HB), 0) ZQSZ_HB,
               NVL(SUM(A.ZQSZ_SB), 0) ZQSZ_SB,
               NVL(SUM(A.ZQSZ_SB_A), 0) ZQSZ_SB_A,
               NVL(SUM(A.ZQSZ_SB_B), 0) ZQSZ_SB_B,
               NVL(SUM(A.ZQSZ_FBSJJ), 0) ZQSZ_FBSJJ,
               NVL(SUM(A.ZQSZ_ETF), 0) ZQSZ_ETF,
               NVL(SUM(A.ZQSZ_LOF), 0) ZQSZ_LOF,
               NVL(SUM(A.ZQSZ_SZJJT), 0) ZQSZ_SZJJT,
               NVL(SUM(A.ZQSZ_DXJJ), 0) ZQSZ_DXJJ,
               NVL(SUM(A.ZQSZ_JRCP), 0) ZQSZ_JRCP,
               NVL(SUM(A.ZQSZ_QZ), 0) ZQSZ_QZ,
               NVL(SUM(A.ZQSZ_GZ), 0) ZQSZ_GZ,
               NVL(SUM(A.ZQSZ_GSQYZ), 0) ZQSZ_GSQYZ,
               NVL(SUM(A.ZQSZ_KZZ), 0) ZQSZ_KZZ,
               NVL(SUM(A.ZQSZ_SG), 0) ZQSZ_SG,
               NVL(SUM(A.ZQSZ_QT), 0) ZQSZ_QT,
               NVL(SUM(A.SZXZJE), 0) SZXZJE,
               NVL(SUM(A.CRJE_RMB), 0) CRJE_RMB,
               NVL(SUM(A.CRJE_HKD), 0) CRJE_HKD,
               NVL(SUM(A.CRJE_USD), 0) CRJE_USD,
               NVL(SUM(A.QCJE_RMB), 0) QCJE_RMB,
               NVL(SUM(A.QCJE_HKD), 0) QCJE_HKD,
               NVL(SUM(A.QCJE_USD), 0) QCJE_USD,
               NVL(SUM(A.ZRZQSZ), 0) ZRZQSZ,
               NVL(SUM(A.ZD_RMB), 0) ZD_RMB,
               NVL(SUM(A.ZD_USD), 0) ZD_USD,
               NVL(SUM(A.ZTGZR_RMB), 0) ZTGZR_RMB,
               NVL(SUM(A.ZTGZR_HKD), 0) ZTGZR_HKD,
               NVL(SUM(A.ZCZQSZ), 0) ZCZQSZ,
               NVL(SUM(A.CZD_RMB), 0) CZD_RMB,
               NVL(SUM(A.CZD_USD), 0) CZD_USD,
               NVL(SUM(A.ZTGZC_RMB), 0) ZTGZC_RMB,
               NVL(SUM(A.ZTGZC_HKD), 0) ZTGZC_HKD,
               NVL(SUM(A.DRYK), 0) DRYK,
               NVL(SUM(A.ZFZ), 0) ZFZ,
               NVL(SUM(A.FLTZC), 0) FLTZC,
               NVL(SUM(A.ZZC_RZRQ), 0) ZZC_RZRQ,
               NVL(SUM(A.DBXJ_RZRQ), 0) DBXJ_RZRQ,
               NVL(SUM(A.DBGPSZ_RZRQ), 0) DBGPSZ_RZRQ,
               A.HLCS_HKD,
               A.HLCS_USD,
               NVL(SUM(A.ZQSZ_GGT), 0) ZQSZ_GGT,
               NVL(SUM(A.ZQSZ_SGT), 0) ZQSZ_SGT,
               NVL(SUM(A.ZFZ_RZRQ), 0) ZFZ_RZRQ,
               NVL(SUM(A.ZQSZ_KCB), 0) ZQSZ_KCB
          FROM DSC_STAT.T_STAT_KHZC_R A
         WHERE A.RQ = VN_TJRQ
         GROUP BY A.YYB, A.HLCS_HKD, A.HLCS_USD;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计不限制关系的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_ZC_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_YYB_ZC_Y(O_N_CODE OUT INT,
                                                     O_S_NOTE OUT VARCHAR2,
                                                     I_N_TJRQ IN NUMBER,
                                                     I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   P_STAT_YYB_ZC_Y
         功能简述：   营业部资产月表 （存原始币种）统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：
                 参照p_stat_ry_zc_y取数
                 1.计算有关系的数据
                 从DSC_STAT.T_STAT_RY_ZC_Y中获取主要信息，关联DSC_BAS.T_RYXX RY获取营业部信息
                 2.计算不限制关系的数据(实际上是计算所有的数据)
                 从DSC_STAT.T_STAT_KHZC_Y中获取信息，关联DSC_CFG.T_JGGL获取营业部信息
         注意事项：
                  组织层级：0 -市场，1 -总部，2 -FGS，3 -yyb，4--BM，5--TD，6--RY
                  计算有关系的数据及不限制关系的数据

         数据源：


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         黄玉钰      2013/05/22                 创建
         黄玉钰      2013/09/10                 修改：SUM(NVL(,0))改为NVL(SUM(),0)
         黄玉钰      2013/09/22                 修改：有关系的数据乘以GX.SYQZ
         吴邦杰      2014/09/09                 修改，增加港股通证券市值
         刘官勤      2015/02/02                 修改：增加字段YMZFZ_RZRQ月末总负债_融资融券
         洪国力      2015/12/24                 修改：新增字段YMZZC_RZRQ（月末总资产_融资融券）、
                                                       YMDBXJ_RZRQ（月末担保现金_融资融券）、
                                                       YMDBGPSZ_RZRQ（月末担保股票市值_融资融券）
         洪国力      2016/01/19                 修改：峰值取客户月最高资产错误，应从日表取数
         张功德      2016/09/07                 修改，增加深港通证券市值
         zhangbc     2019/06/27                 修改，科创板数据统计
    */
    CON_ORG_LVL CONSTANT VARCHAR2(2) := '03';
    VS_PROC_NAME VARCHAR2(100);
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   NUMBER(10);
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_FIRST_DAY NUMBER(8); --月初
    VN_TJYF      NUMBER(6) := SUBSTR(VN_TJRQ, 1, 6);
    VS_TABNAME   VARCHAR2(100) := 'DSC_STAT.T_STAT_YYB_ZC_Y';

BEGIN
    --变量初始化
    O_N_CODE     := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE     := '运行正常';
    VS_USER      := 'DSC_STAT';
    VS_PROC_NAME := $$PLSQL_UNIT;

    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --月初
    VN_FIRST_DAY := PUB_SYS.F_GET_DATE(VN_TJRQ, 0);

    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);
    --
    --1.0 删除旧数据
    IF I_N_REDO IN (0, 1) THEN
        VN_STEP := VN_STEP + 1;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);
        -- DELETE FROM T_STAT_YYB_ZC_Y WHERE YF = VN_TJYF;
        EXECUTE IMMEDIATE 'ALTER TABLE DSC_STAT.T_STAT_YYB_ZC_Y TRUNCATE PARTITION PY_' ||
                          VN_TJYF || '  UPDATE GLOBAL INDEXES';
        VN_ROWCOUNT := SQL%ROWCOUNT;
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[' || VS_TABNAME || ']表数据',
                                  I_S_CHANGEDESC     => '共删除数据:' || VN_ROWCOUNT || '条',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

    END IF;

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计有关系的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    INSERT INTO DSC_STAT.T_STAT_YYB_ZC_Y
        (YF,
         U_ID,
         YYB,
         GXLX,
         YCZZC,
         YCZZC_RMB,
         YCZZC_HKD,
         YCZZC_USD,
         YMZZC,
         YMZZC_RMB,
         YMZZC_HKD,
         YMZZC_USD,
         YMQTZC_RMB,
         YMQTZC_HKD,
         YMQTZC_USD,
         YMZJYE_RMB,
         YMZJYE_HKD,
         YMZJYE_USD,
         YMZQSZ,
         YMZQSZ_RMB,
         YMZQSZ_HKD,
         YMZQSZ_USD,
         YMZQSZ_ZB,
         YMZQSZ_HAZB,
         YMZQSZ_SAZB,
         YMZQSZ_ZXB,
         YMZQSZ_CYB,
         YMZQSZ_HB,
         YMZQSZ_SB,
         YMZQSZ_SB_A,
         YMZQSZ_SB_B,
         YMZQSZ_FBSJJ,
         YMZQSZ_ETF,
         YMZQSZ_LOF,
         YMZQSZ_SZJJT,
         YMZQSZ_DXJJ,
         YMZQSZ_JRCP,
         YMZQSZ_QZ,
         YMZQSZ_GZ,
         YMZQSZ_GSZ,
         YMZQSZ_KZZ,
         YMZQSZ_SG,
         YMZQSZ_QT,
         RJZZC,
         RJZC_RMB,
         RJZC_HKD,
         RJZC_USD,
         RJZQSZ,
         RJZQSZ_RMB,
         RJZQSZ_HKD,
         RJZQSZ_USD,
         RJZQSZ_ZB,
         RJZQSZ_HAZB,
         RJZQSZ_SAZB,
         RJZQSZ_ZXB,
         RJZQSZ_CYB,
         RJZQSZ_HB,
         RJZQSZ_SB,
         RJZQSZ_SB_A,
         RJZQSZ_SB_B,
         RJZQSZ_FBSJJ,
         RJZQSZ_ETF,
         RJZQSZ_LOF,
         RJZQSZ_SZJJT,
         RJZQSZ_DXJJ,
         RJZQSZ_JRCP,
         RJZQSZ_QZ,
         RJZQSZ_GZ,
         RJZQSZ_GSQYZ,
         RJZQSZ_KZZ,
         RJZQSZ_SG,
         RJZQSZ_QT,
         CRJE,
         CRJE_RMB,
         CRJE_USD,
         CRJE_HKD,
         QCJE,
         QCJE_RMB,
         QCJE_USD,
         QCJE_HKD,
         ZRZQSZ,
         ZD_RMB,
         ZD_USD,
         ZTGZR_RMB,
         ZTGZR_HKD,
         ZCZQSZ,
         CZD_RMB,
         CZD_USD,
         ZTGZC_RMB,
         ZTGZC_HKD,
         DYYK,
         FZZZC_30,
         BGZZC_30,
         LXJS,
         LCSR,
         RJZFZ,
         RJZZC_RZRQ,
         RJDBXJ_RZRQ,
         RJDBGPSZ_RZRQ,
         FLTZC,
         ZTZC,
         ZQZC,
         DYPSZ,
         SZXZJE,
         ZFZ,
         HLCS_HKD,
         HLCS_USD,
         YMZQSZ_GGT, --港股通，吴邦杰，20140909
         RJZQSZ_GGT, --港股通，吴邦杰，20140909
         YMZQSZ_SGT, --深港通，张功德，20160907
         RJZQSZ_SGT, --深港通，张功德，20160907
         YMZFZ_RZRQ,
         YMZZC_RZRQ,
         YMDBXJ_RZRQ,
         YMDBGPSZ_RZRQ,
         YMZQSZ_KCB, --科创板，zhangbc，20190627
         RJZQSZ_KCB --科创板，zhangbc，20190627
         ）
        SELECT B.YF,
               B.U_ID,
               B.YYB,
               B.GXLX,
               B.YCZZC,
               B.YCZZC_RMB,
               B.YCZZC_HKD,
               B.YCZZC_USD,
               B.YMZZC,
               B.YMZZC_RMB,
               B.YMZZC_HKD,
               B.YMZZC_USD,
               B.YMQTZC_RMB,
               B.YMQTZC_HKD,
               B.YMQTZC_USD,
               B.YMZJYE_RMB,
               B.YMZJYE_HKD,
               B.YMZJYE_USD,
               B.YMZQSZ,
               B.YMZQSZ_RMB,
               B.YMZQSZ_HKD,
               B.YMZQSZ_USD,
               B.YMZQSZ_ZB,
               B.YMZQSZ_HAZB,
               B.YMZQSZ_SAZB,
               B.YMZQSZ_ZXB,
               B.YMZQSZ_CYB,
               B.YMZQSZ_HB,
               B.YMZQSZ_SB,
               B.YMZQSZ_SB_A,
               B.YMZQSZ_SB_B,
               B.YMZQSZ_FBSJJ,
               B.YMZQSZ_ETF,
               B.YMZQSZ_LOF,
               B.YMZQSZ_SZJJT,
               B.YMZQSZ_DXJJ,
               B.YMZQSZ_JRCP,
               B.YMZQSZ_QZ,
               B.YMZQSZ_GZ,
               B.YMZQSZ_GSZ,
               B.YMZQSZ_KZZ,
               B.YMZQSZ_SG,
               B.YMZQSZ_QT,
               B.RJZZC,
               B.RJZC_RMB,
               B.RJZC_HKD,
               B.RJZC_USD,
               B.RJZQSZ,
               B.RJZQSZ_RMB,
               B.RJZQSZ_HKD,
               B.RJZQSZ_USD,
               B.RJZQSZ_ZB,
               B.RJZQSZ_HAZB,
               B.RJZQSZ_SAZB,
               B.RJZQSZ_ZXB,
               B.RJZQSZ_CYB,
               B.RJZQSZ_HB,
               B.RJZQSZ_SB,
               B.RJZQSZ_SB_A,
               B.RJZQSZ_SB_B,
               B.RJZQSZ_FBSJJ,
               B.RJZQSZ_ETF,
               B.RJZQSZ_LOF,
               B.RJZQSZ_SZJJT,
               B.RJZQSZ_DXJJ,
               B.RJZQSZ_JRCP,
               B.RJZQSZ_QZ,
               B.RJZQSZ_GZ,
               B.RJZQSZ_GSQYZ,
               B.RJZQSZ_KZZ,
               B.RJZQSZ_SG,
               B.RJZQSZ_QT,
               B.CRJE,
               B.CRJE_RMB,
               B.CRJE_USD,
               B.CRJE_HKD,
               B.QCJE,
               B.QCJE_RMB,
               B.QCJE_USD,
               B.QCJE_HKD,
               B.ZRZQSZ,
               B.ZD_RMB,
               B.ZD_USD,
               B.ZTGZR_RMB,
               B.ZTGZR_HKD,
               B.ZCZQSZ,
               B.CZD_RMB,
               B.CZD_USD,
               B.ZTGZC_RMB,
               B.ZTGZC_HKD,
               B.DYYK,
               NVL(C.FZ_ZZC, 0) AS FZZZC,
               NVL(C.BG_ZZC, 0) AS BGZZC,
               B.LXJS,
               B.LCSR,
               B.RJZFZ,
               B.RJZZC_RZRQ,
               B.RJDBXJ_RZRQ,
               B.RJDBGPSZ_RZRQ,
               B.FLTZC,
               B.ZTZC,
               B.ZQZC,
               B.DYPSZ,
               B.SZXZJE,
               B.ZFZ,
               B.HLCS_HKD,
               B.HLCS_USD,
               B.YMZQSZ_GGT,
               B.RJZQSZ_GGT,
               B.YMZQSZ_SGT,
               B.RJZQSZ_SGT,
               B.YMZFZ_RZRQ,
			         B.YMZZC_RZRQ,
			         B.YMDBXJ_RZRQ,
               B.YMDBGPSZ_RZRQ,
               B.YMZQSZ_KCB, --科创板，zhangbc，20190627
               B.RJZQSZ_KCB --科创板，zhangbc，20190627
          FROM (SELECT VN_TJYF AS YF,
               CON_ORG_LVL || '-' || A.YYB U_ID,
               A.YYB AS YYB,
               GX.GXLX,
               NVL(SUM(A.YCZZC * GX.SYQZ), 0) YCZZC,
               NVL(SUM(A.YCZZC_RMB * GX.SYQZ), 0) YCZZC_RMB,
               NVL(SUM(A.YCZZC_HKD * GX.SYQZ), 0) YCZZC_HKD,
               NVL(SUM(A.YCZZC_USD * GX.SYQZ), 0) YCZZC_USD,
               NVL(SUM(A.YMZZC * GX.SYQZ), 0) YMZZC,
               NVL(SUM(A.YMZZC_RMB * GX.SYQZ), 0) YMZZC_RMB,
               NVL(SUM(A.YMZZC_HKD * GX.SYQZ), 0) YMZZC_HKD,
               NVL(SUM(A.YMZZC_USD * GX.SYQZ), 0) YMZZC_USD,
               NVL(SUM(A.YMQTZC_RMB * GX.SYQZ), 0) YMQTZC_RMB,
               NVL(SUM(A.YMQTZC_HKD * GX.SYQZ), 0) YMQTZC_HKD,
               NVL(SUM(A.YMQTZC_USD * GX.SYQZ), 0) YMQTZC_USD,
               NVL(SUM(A.YMZJYE_RMB * GX.SYQZ), 0) YMZJYE_RMB,
               NVL(SUM(A.YMZJYE_HKD * GX.SYQZ), 0) YMZJYE_HKD,
               NVL(SUM(A.YMZJYE_USD * GX.SYQZ), 0) YMZJYE_USD,
               NVL(SUM(A.YMZQSZ * GX.SYQZ), 0) YMZQSZ,
               NVL(SUM(A.YMZQSZ_RMB * GX.SYQZ), 0) YMZQSZ_RMB,
               NVL(SUM(A.YMZQSZ_HKD * GX.SYQZ), 0) YMZQSZ_HKD,
               NVL(SUM(A.YMZQSZ_USD * GX.SYQZ), 0) YMZQSZ_USD,
               NVL(SUM(A.YMZQSZ_ZB * GX.SYQZ), 0) YMZQSZ_ZB,
               NVL(SUM(A.YMZQSZ_HAZB * GX.SYQZ), 0) YMZQSZ_HAZB,
               NVL(SUM(A.YMZQSZ_SAZB * GX.SYQZ), 0) YMZQSZ_SAZB,
               NVL(SUM(A.YMZQSZ_ZXB * GX.SYQZ), 0) YMZQSZ_ZXB,
               NVL(SUM(A.YMZQSZ_CYB * GX.SYQZ), 0) YMZQSZ_CYB,
               NVL(SUM(A.YMZQSZ_HB * GX.SYQZ), 0) YMZQSZ_HB,
               NVL(SUM(A.YMZQSZ_SB * GX.SYQZ), 0) YMZQSZ_SB,
               NVL(SUM(A.YMZQSZ_SB_A * GX.SYQZ), 0) YMZQSZ_SB_A,
               NVL(SUM(A.YMZQSZ_SB_B * GX.SYQZ), 0) YMZQSZ_SB_B,
               NVL(SUM(A.YMZQSZ_FBSJJ * GX.SYQZ), 0) YMZQSZ_FBSJJ,
               NVL(SUM(A.YMZQSZ_ETF * GX.SYQZ), 0) YMZQSZ_ETF,
               NVL(SUM(A.YMZQSZ_LOF * GX.SYQZ), 0) YMZQSZ_LOF,
               NVL(SUM(A.YMZQSZ_SZJJT * GX.SYQZ), 0) YMZQSZ_SZJJT,
               NVL(SUM(A.YMZQSZ_DXJJ * GX.SYQZ), 0) YMZQSZ_DXJJ,
               NVL(SUM(A.YMZQSZ_JRCP * GX.SYQZ), 0) YMZQSZ_JRCP,
               NVL(SUM(A.YMZQSZ_QZ * GX.SYQZ), 0) YMZQSZ_QZ,
               NVL(SUM(A.YMZQSZ_GZ * GX.SYQZ), 0) YMZQSZ_GZ,
               NVL(SUM(A.YMZQSZ_GSZ * GX.SYQZ), 0) YMZQSZ_GSZ,
               NVL(SUM(A.YMZQSZ_KZZ * GX.SYQZ), 0) YMZQSZ_KZZ,
               NVL(SUM(A.YMZQSZ_SG * GX.SYQZ), 0) YMZQSZ_SG,
               NVL(SUM(A.YMZQSZ_QT * GX.SYQZ), 0) YMZQSZ_QT,
               NVL(SUM(A.RJZZC * GX.SYQZ), 0) RJZZC,
               NVL(SUM(A.RJZC_RMB * GX.SYQZ), 0) RJZC_RMB,
               NVL(SUM(A.RJZC_HKD * GX.SYQZ), 0) RJZC_HKD,
               NVL(SUM(A.RJZC_USD * GX.SYQZ), 0) RJZC_USD,
               NVL(SUM(A.RJZQSZ * GX.SYQZ), 0) RJZQSZ,
               NVL(SUM(A.RJZQSZ_RMB * GX.SYQZ), 0) RJZQSZ_RMB,
               NVL(SUM(A.RJZQSZ_HKD * GX.SYQZ), 0) RJZQSZ_HKD,
               NVL(SUM(A.RJZQSZ_USD * GX.SYQZ), 0) RJZQSZ_USD,
               NVL(SUM(A.RJZQSZ_ZB * GX.SYQZ), 0) RJZQSZ_ZB,
               NVL(SUM(A.RJZQSZ_HAZB * GX.SYQZ), 0) RJZQSZ_HAZB,
               NVL(SUM(A.RJZQSZ_SAZB * GX.SYQZ), 0) RJZQSZ_SAZB,
               NVL(SUM(A.RJZQSZ_ZXB * GX.SYQZ), 0) RJZQSZ_ZXB,
               NVL(SUM(A.RJZQSZ_CYB * GX.SYQZ), 0) RJZQSZ_CYB,
               NVL(SUM(A.RJZQSZ_HB * GX.SYQZ), 0) RJZQSZ_HB,
               NVL(SUM(A.RJZQSZ_SB * GX.SYQZ), 0) RJZQSZ_SB,
               NVL(SUM(A.RJZQSZ_SB_A * GX.SYQZ), 0) RJZQSZ_SB_A,
               NVL(SUM(A.RJZQSZ_SB_B * GX.SYQZ), 0) RJZQSZ_SB_B,
               NVL(SUM(A.RJZQSZ_FBSJJ * GX.SYQZ), 0) RJZQSZ_FBSJJ,
               NVL(SUM(A.RJZQSZ_ETF * GX.SYQZ), 0) RJZQSZ_ETF,
               NVL(SUM(A.RJZQSZ_LOF * GX.SYQZ), 0) RJZQSZ_LOF,
               NVL(SUM(A.RJZQSZ_SZJJT * GX.SYQZ), 0) RJZQSZ_SZJJT,
               NVL(SUM(A.RJZQSZ_DXJJ * GX.SYQZ), 0) RJZQSZ_DXJJ,
               NVL(SUM(A.RJZQSZ_JRCP * GX.SYQZ), 0) RJZQSZ_JRCP,
               NVL(SUM(A.RJZQSZ_QZ * GX.SYQZ), 0) RJZQSZ_QZ,
               NVL(SUM(A.RJZQSZ_GZ * GX.SYQZ), 0) RJZQSZ_GZ,
               NVL(SUM(A.RJZQSZ_GSQYZ * GX.SYQZ), 0) RJZQSZ_GSQYZ,
               NVL(SUM(A.RJZQSZ_KZZ * GX.SYQZ), 0) RJZQSZ_KZZ,
               NVL(SUM(A.RJZQSZ_SG * GX.SYQZ), 0) RJZQSZ_SG,
               NVL(SUM(A.RJZQSZ_QT * GX.SYQZ), 0) RJZQSZ_QT,
               NVL(SUM(A.CRJE * GX.SYQZ), 0) CRJE,
               NVL(SUM(A.CRJE_RMB * GX.SYQZ), 0) CRJE_RMB,
               NVL(SUM(A.CRJE_USD * GX.SYQZ), 0) CRJE_USD,
               NVL(SUM(A.CRJE_HKD * GX.SYQZ), 0) CRJE_HKD,
               NVL(SUM(A.QCJE * GX.SYQZ), 0) QCJE,
               NVL(SUM(A.QCJE_RMB * GX.SYQZ), 0) QCJE_RMB,
               NVL(SUM(A.QCJE_USD * GX.SYQZ), 0) QCJE_USD,
               NVL(SUM(A.QCJE_HKD * GX.SYQZ), 0) QCJE_HKD,
               NVL(SUM(A.ZRZQSZ * GX.SYQZ), 0) ZRZQSZ,
               NVL(SUM(A.ZD_RMB * GX.SYQZ), 0) ZD_RMB,
               NVL(SUM(A.ZD_USD * GX.SYQZ), 0) ZD_USD,
               NVL(SUM(A.ZTGZR_RMB * GX.SYQZ), 0) ZTGZR_RMB,
               NVL(SUM(A.ZTGZR_HKD * GX.SYQZ), 0) ZTGZR_HKD,
               NVL(SUM(A.ZCZQSZ * GX.SYQZ), 0) ZCZQSZ,
               NVL(SUM(A.CZD_RMB * GX.SYQZ), 0) CZD_RMB,
               NVL(SUM(A.CZD_USD * GX.SYQZ), 0) CZD_USD,
               NVL(SUM(A.ZTGZC_RMB * GX.SYQZ), 0) ZTGZC_RMB,
               NVL(SUM(A.ZTGZC_HKD * GX.SYQZ), 0) ZTGZC_HKD,
               NVL(SUM(A.DYYK * GX.SYQZ), 0) DYYK,
               NVL(SUM(A.FZZZC_30 * GX.SYQZ), 0) FZZZC_30,
               NVL(SUM(A.BGZZC_30 * GX.SYQZ), 0) BGZZC_30,
               NVL(SUM(A.LXJS * GX.SYQZ), 0) LXJS,
               NVL(SUM(A.LCSR * GX.SYQZ), 0) LCSR,
               NVL(SUM(A.RJZFZ * GX.SYQZ), 0) RJZFZ,
               NVL(SUM(A.RJZZC_RZRQ * GX.SYQZ), 0) RJZZC_RZRQ,
               NVL(SUM(A.RJDBXJ_RZRQ * GX.SYQZ), 0) RJDBXJ_RZRQ,
               NVL(SUM(A.RJDBGPSZ_RZRQ * GX.SYQZ), 0) RJDBGPSZ_RZRQ,
               NVL(SUM(A.FLTZC * GX.SYQZ), 0) FLTZC,
               NVL(SUM(A.ZTZC * GX.SYQZ), 0) ZTZC,
               NVL(SUM(A.ZQZC * GX.SYQZ), 0) ZQZC,
               NVL(SUM(A.DYPSZ * GX.SYQZ), 0) DYPSZ,
               NVL(SUM(A.SZXZJE * GX.SYQZ), 0) SZXZJE,
               NVL(SUM(A.ZFZ * GX.SYQZ), 0) ZFZ,
               A.HLCS_HKD,
               A.HLCS_USD,
               NVL(SUM(A.YMZQSZ_GGT * GX.SYQZ), 0) YMZQSZ_GGT,
               NVL(SUM(A.RJZQSZ_GGT * GX.SYQZ), 0) RJZQSZ_GGT,
               NVL(SUM(A.YMZQSZ_SGT * GX.SYQZ), 0) YMZQSZ_SGT,
               NVL(SUM(A.RJZQSZ_SGT * GX.SYQZ), 0) RJZQSZ_SGT,
               NVL(SUM(A.YMZFZ_RZRQ * GX.SYQZ), 0) YMZFZ_RZRQ,
               NVL(SUM(A.YMZZC_RZRQ * GX.SYQZ), 0) YMZZC_RZRQ,
               NVL(SUM(A.YMDBXJ_RZRQ * GX.SYQZ), 0) YMDBXJ_RZRQ,
               NVL(SUM(A.YMDBGPSZ_RZRQ * GX.SYQZ), 0) YMDBGPSZ_RZRQ,
               NVL(SUM(A.YMZQSZ_KCB * GX.SYQZ), 0) YMZQSZ_KCB, --科创板，zhangbc，20190627
               NVL(SUM(A.RJZQSZ_KCB * GX.SYQZ), 0) RJZQSZ_KCB --科创板，zhangbc，20190627
          FROM DSC_STAT.T_STAT_KHZC_Y A
          JOIN (SELECT A.YYB, A.GXLX, A.KHH, LEAST(SUM(A.SYQZ), 1) SYQZ
                  FROM DSC_STAT.TMP_T_KHGX A
                 WHERE A.JZRQ > VN_TJRQ
                 GROUP BY A.YYB, A.GXLX, A.KHH) GX
            ON GX.KHH = A.KHH
         WHERE A.YF = VN_TJYF
         GROUP BY A.YYB, GX.GXLX, A.HLCS_HKD, A.HLCS_USD) B
         INNER JOIN (SELECT YYB, MAX(ZZC) FZ_ZZC, MIN(ZZC) BG_ZZC
                       FROM (SELECT A.RQ, GX.YYB, SUM(A.ZZC * GX.SYQZ) AS ZZC
                               FROM DSC_STAT.T_STAT_KHZC_R A
                              INNER JOIN (SELECT A.YYB,
                                                A.GXLX,
                                                A.KHH,
                                                LEAST(SUM(A.SYQZ), 1) SYQZ
                                           FROM DSC_STAT.TMP_T_KHGX A
                                          WHERE A.JZRQ > VN_TJRQ
                                          GROUP BY A.YYB, A.GXLX, A.KHH) GX
                                 ON GX.KHH = A.KHH
                              WHERE A.RQ < = VN_TJRQ
                                AND A.RQ > = VN_FIRST_DAY
                              GROUP BY A.RQ, GX.YYB)
                      GROUP BY YYB) C
            ON B.YYB = C.YYB;

    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计有关系的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计不限制关系的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_STAT_YYB_ZC_Y
        (YF,
         U_ID,
         YYB,
         GXLX,
         YCZZC,
         YCZZC_RMB,
         YCZZC_HKD,
         YCZZC_USD,
         YMZZC,
         YMZZC_RMB,
         YMZZC_HKD,
         YMZZC_USD,
         YMQTZC_RMB,
         YMQTZC_HKD,
         YMQTZC_USD,
         YMZJYE_RMB,
         YMZJYE_HKD,
         YMZJYE_USD,
         YMZQSZ,
         YMZQSZ_RMB,
         YMZQSZ_HKD,
         YMZQSZ_USD,
         YMZQSZ_ZB,
         YMZQSZ_HAZB,
         YMZQSZ_SAZB,
         YMZQSZ_ZXB,
         YMZQSZ_CYB,
         YMZQSZ_HB,
         YMZQSZ_SB,
         YMZQSZ_SB_A,
         YMZQSZ_SB_B,
         YMZQSZ_FBSJJ,
         YMZQSZ_ETF,
         YMZQSZ_LOF,
         YMZQSZ_SZJJT,
         YMZQSZ_DXJJ,
         YMZQSZ_JRCP,
         YMZQSZ_QZ,
         YMZQSZ_GZ,
         YMZQSZ_GSZ,
         YMZQSZ_KZZ,
         YMZQSZ_SG,
         YMZQSZ_QT,
         RJZZC,
         RJZC_RMB,
         RJZC_HKD,
         RJZC_USD,
         RJZQSZ,
         RJZQSZ_RMB,
         RJZQSZ_HKD,
         RJZQSZ_USD,
         RJZQSZ_ZB,
         RJZQSZ_HAZB,
         RJZQSZ_SAZB,
         RJZQSZ_ZXB,
         RJZQSZ_CYB,
         RJZQSZ_HB,
         RJZQSZ_SB,
         RJZQSZ_SB_A,
         RJZQSZ_SB_B,
         RJZQSZ_FBSJJ,
         RJZQSZ_ETF,
         RJZQSZ_LOF,
         RJZQSZ_SZJJT,
         RJZQSZ_DXJJ,
         RJZQSZ_JRCP,
         RJZQSZ_QZ,
         RJZQSZ_GZ,
         RJZQSZ_GSQYZ,
         RJZQSZ_KZZ,
         RJZQSZ_SG,
         RJZQSZ_QT,
         CRJE,
         CRJE_RMB,
         CRJE_USD,
         CRJE_HKD,
         QCJE,
         QCJE_RMB,
         QCJE_USD,
         QCJE_HKD,
         ZRZQSZ,
         ZD_RMB,
         ZD_USD,
         ZTGZR_RMB,
         ZTGZR_HKD,
         ZCZQSZ,
         CZD_RMB,
         CZD_USD,
         ZTGZC_RMB,
         ZTGZC_HKD,
         DYYK,
         FZZZC_30,
         BGZZC_30,
         LXJS,
         LCSR,
         RJZFZ,
         RJZZC_RZRQ,
         RJDBXJ_RZRQ,
         RJDBGPSZ_RZRQ,
         FLTZC,
         ZTZC,
         ZQZC,
         DYPSZ,
         SZXZJE,
         ZFZ,
         HLCS_HKD,
         HLCS_USD,
         YMZQSZ_GGT, --港股通，吴邦杰，20140909
         RJZQSZ_GGT, --港股通，吴邦杰，20140909
         YMZQSZ_SGT, --深港通，张功德，20160907
         RJZQSZ_SGT, --深港通，张功德，20160907
         YMZFZ_RZRQ,
         YMZZC_RZRQ,
         YMDBXJ_RZRQ,
         YMDBGPSZ_RZRQ,
         YMZQSZ_KCB, --科创板，zhangbc，20190627
         RJZQSZ_KCB --科创板，zhangbc，20190627
         )
        SELECT B.YF,
               B.U_ID,
               B.YYB,
               B.GXLX,
               B.YCZZC,
               B.YCZZC_RMB,
               B.YCZZC_HKD,
               B.YCZZC_USD,
               B.YMZZC,
               B.YMZZC_RMB,
               B.YMZZC_HKD,
               B.YMZZC_USD,
               B.YMQTZC_RMB,
               B.YMQTZC_HKD,
               B.YMQTZC_USD,
               B.YMZJYE_RMB,
               B.YMZJYE_HKD,
               B.YMZJYE_USD,
               B.YMZQSZ,
               B.YMZQSZ_RMB,
               B.YMZQSZ_HKD,
               B.YMZQSZ_USD,
               B.YMZQSZ_ZB,
               B.YMZQSZ_HAZB,
               B.YMZQSZ_SAZB,
               B.YMZQSZ_ZXB,
               B.YMZQSZ_CYB,
               B.YMZQSZ_HB,
               B.YMZQSZ_SB,
               B.YMZQSZ_SB_A,
               B.YMZQSZ_SB_B,
               B.YMZQSZ_FBSJJ,
               B.YMZQSZ_ETF,
               B.YMZQSZ_LOF,
               B.YMZQSZ_SZJJT,
               B.YMZQSZ_DXJJ,
               B.YMZQSZ_JRCP,
               B.YMZQSZ_QZ,
               B.YMZQSZ_GZ,
               B.YMZQSZ_GSZ,
               B.YMZQSZ_KZZ,
               B.YMZQSZ_SG,
               B.YMZQSZ_QT,
               B.RJZZC,
               B.RJZC_RMB,
               B.RJZC_HKD,
               B.RJZC_USD,
               B.RJZQSZ,
               B.RJZQSZ_RMB,
               B.RJZQSZ_HKD,
               B.RJZQSZ_USD,
               B.RJZQSZ_ZB,
               B.RJZQSZ_HAZB,
               B.RJZQSZ_SAZB,
               B.RJZQSZ_ZXB,
               B.RJZQSZ_CYB,
               B.RJZQSZ_HB,
               B.RJZQSZ_SB,
               B.RJZQSZ_SB_A,
               B.RJZQSZ_SB_B,
               B.RJZQSZ_FBSJJ,
               B.RJZQSZ_ETF,
               B.RJZQSZ_LOF,
               B.RJZQSZ_SZJJT,
               B.RJZQSZ_DXJJ,
               B.RJZQSZ_JRCP,
               B.RJZQSZ_QZ,
               B.RJZQSZ_GZ,
               B.RJZQSZ_GSQYZ,
               B.RJZQSZ_KZZ,
               B.RJZQSZ_SG,
               B.RJZQSZ_QT,
               B.CRJE,
               B.CRJE_RMB,
               B.CRJE_USD,
               B.CRJE_HKD,
               B.QCJE,
               B.QCJE_RMB,
               B.QCJE_USD,
               B.QCJE_HKD,
               B.ZRZQSZ,
               B.ZD_RMB,
               B.ZD_USD,
               B.ZTGZR_RMB,
               B.ZTGZR_HKD,
               B.ZCZQSZ,
               B.CZD_RMB,
               B.CZD_USD,
               B.ZTGZC_RMB,
               B.ZTGZC_HKD,
               B.DYYK,
               NVL(C.FZ_ZZC, 0) AS FZZZC,
               NVL(C.BG_ZZC, 0) AS BGZZC,
               B.LXJS,
               B.LCSR,
               B.RJZFZ,
               B.RJZZC_RZRQ,
               B.RJDBXJ_RZRQ,
               B.RJDBGPSZ_RZRQ,
               B.FLTZC,
               B.ZTZC,
               B.ZQZC,
               B.DYPSZ,
               B.SZXZJE,
               B.ZFZ,
               B.HLCS_HKD,
               B.HLCS_USD,
               B.YMZQSZ_GGT,
               B.RJZQSZ_GGT,
               B.YMZQSZ_SGT,
               B.RJZQSZ_SGT,
               B.YMZFZ_RZRQ,
			         B.YMZZC_RZRQ,
			         B.YMDBXJ_RZRQ,
               B.YMDBGPSZ_RZRQ,
               B.YMZQSZ_KCB, --科创板，zhangbc，20190627
               B.RJZQSZ_KCB --科创板，zhangbc，20190627
          FROM (SELECT VN_TJYF AS YF,
               CON_ORG_LVL || '-' || A.YYB AS U_ID,
               A.YYB AS YYB,
               0 GXLX,
               NVL(SUM(A.YCZZC), 0) YCZZC,
               NVL(SUM(A.YCZZC_RMB), 0) YCZZC_RMB,
               NVL(SUM(A.YCZZC_HKD), 0) YCZZC_HKD,
               NVL(SUM(A.YCZZC_USD), 0) YCZZC_USD,
               NVL(SUM(A.YMZZC), 0) YMZZC,
               NVL(SUM(A.YMZZC_RMB), 0) YMZZC_RMB,
               NVL(SUM(A.YMZZC_HKD), 0) YMZZC_HKD,
               NVL(SUM(A.YMZZC_USD), 0) YMZZC_USD,
               NVL(SUM(A.YMQTZC_RMB), 0) YMQTZC_RMB,
               NVL(SUM(A.YMQTZC_HKD), 0) YMQTZC_HKD,
               NVL(SUM(A.YMQTZC_USD), 0) YMQTZC_USD,
               NVL(SUM(A.YMZJYE_RMB), 0) YMZJYE_RMB,
               NVL(SUM(A.YMZJYE_HKD), 0) YMZJYE_HKD,
               NVL(SUM(A.YMZJYE_USD), 0) YMZJYE_USD,
               NVL(SUM(A.YMZQSZ), 0) YMZQSZ,
               NVL(SUM(A.YMZQSZ_RMB), 0) YMZQSZ_RMB,
               NVL(SUM(A.YMZQSZ_HKD), 0) YMZQSZ_HKD,
               NVL(SUM(A.YMZQSZ_USD), 0) YMZQSZ_USD,
               NVL(SUM(A.YMZQSZ_ZB), 0) YMZQSZ_ZB,
               NVL(SUM(A.YMZQSZ_HAZB), 0) YMZQSZ_HAZB,
               NVL(SUM(A.YMZQSZ_SAZB), 0) YMZQSZ_SAZB,
               NVL(SUM(A.YMZQSZ_ZXB), 0) YMZQSZ_ZXB,
               NVL(SUM(A.YMZQSZ_CYB), 0) YMZQSZ_CYB,
               NVL(SUM(A.YMZQSZ_HB), 0) YMZQSZ_HB,
               NVL(SUM(A.YMZQSZ_SB), 0) YMZQSZ_SB,
               NVL(SUM(A.YMZQSZ_SB_A), 0) YMZQSZ_SB_A,
               NVL(SUM(A.YMZQSZ_SB_B), 0) YMZQSZ_SB_B,
               NVL(SUM(A.YMZQSZ_FBSJJ), 0) YMZQSZ_FBSJJ,
               NVL(SUM(A.YMZQSZ_ETF), 0) YMZQSZ_ETF,
               NVL(SUM(A.YMZQSZ_LOF), 0) YMZQSZ_LOF,
               NVL(SUM(A.YMZQSZ_SZJJT), 0) YMZQSZ_SZJJT,
               NVL(SUM(A.YMZQSZ_DXJJ), 0) YMZQSZ_DXJJ,
               NVL(SUM(A.YMZQSZ_JRCP), 0) YMZQSZ_JRCP,
               NVL(SUM(A.YMZQSZ_QZ), 0) YMZQSZ_QZ,
               NVL(SUM(A.YMZQSZ_GZ), 0) YMZQSZ_GZ,
               NVL(SUM(A.YMZQSZ_GSZ), 0) YMZQSZ_GSZ,
               NVL(SUM(A.YMZQSZ_KZZ), 0) YMZQSZ_KZZ,
               NVL(SUM(A.YMZQSZ_SG), 0) YMZQSZ_SG,
               NVL(SUM(A.YMZQSZ_QT), 0) YMZQSZ_QT,
               NVL(SUM(A.RJZZC), 0) RJZZC,
               NVL(SUM(A.RJZC_RMB), 0) RJZC_RMB,
               NVL(SUM(A.RJZC_HKD), 0) RJZC_HKD,
               NVL(SUM(A.RJZC_USD), 0) RJZC_USD,
               NVL(SUM(A.RJZQSZ), 0) RJZQSZ,
               NVL(SUM(A.RJZQSZ_RMB), 0) RJZQSZ_RMB,
               NVL(SUM(A.RJZQSZ_HKD), 0) RJZQSZ_HKD,
               NVL(SUM(A.RJZQSZ_USD), 0) RJZQSZ_USD,
               NVL(SUM(A.RJZQSZ_ZB), 0) RJZQSZ_ZB,
               NVL(SUM(A.RJZQSZ_HAZB), 0) RJZQSZ_HAZB,
               NVL(SUM(A.RJZQSZ_SAZB), 0) RJZQSZ_SAZB,
               NVL(SUM(A.RJZQSZ_ZXB), 0) RJZQSZ_ZXB,
               NVL(SUM(A.RJZQSZ_CYB), 0) RJZQSZ_CYB,
               NVL(SUM(A.RJZQSZ_HB), 0) RJZQSZ_HB,
               NVL(SUM(A.RJZQSZ_SB), 0) RJZQSZ_SB,
               NVL(SUM(A.RJZQSZ_SB_A), 0) RJZQSZ_SB_A,
               NVL(SUM(A.RJZQSZ_SB_B), 0) RJZQSZ_SB_B,
               NVL(SUM(A.RJZQSZ_FBSJJ), 0) RJZQSZ_FBSJJ,
               NVL(SUM(A.RJZQSZ_ETF), 0) RJZQSZ_ETF,
               NVL(SUM(A.RJZQSZ_LOF), 0) RJZQSZ_LOF,
               NVL(SUM(A.RJZQSZ_SZJJT), 0) RJZQSZ_SZJJT,
               NVL(SUM(A.RJZQSZ_DXJJ), 0) RJZQSZ_DXJJ,
               NVL(SUM(A.RJZQSZ_JRCP), 0) RJZQSZ_JRCP,
               NVL(SUM(A.RJZQSZ_QZ), 0) RJZQSZ_QZ,
               NVL(SUM(A.RJZQSZ_GZ), 0) RJZQSZ_GZ,
               NVL(SUM(A.RJZQSZ_GSQYZ), 0) RJZQSZ_GSQYZ,
               NVL(SUM(A.RJZQSZ_KZZ), 0) RJZQSZ_KZZ,
               NVL(SUM(A.RJZQSZ_SG), 0) RJZQSZ_SG,
               NVL(SUM(A.RJZQSZ_QT), 0) RJZQSZ_QT,
               NVL(SUM(A.CRJE), 0) CRJE,
               NVL(SUM(A.CRJE_RMB), 0) CRJE_RMB,
               NVL(SUM(A.CRJE_USD), 0) CRJE_USD,
               NVL(SUM(A.CRJE_HKD), 0) CRJE_HKD,
               NVL(SUM(A.QCJE), 0) QCJE,
               NVL(SUM(A.QCJE_RMB), 0) QCJE_RMB,
               NVL(SUM(A.QCJE_USD), 0) QCJE_USD,
               NVL(SUM(A.QCJE_HKD), 0) QCJE_HKD,
               NVL(SUM(A.ZRZQSZ), 0) ZRZQSZ,
               NVL(SUM(A.ZD_RMB), 0) ZD_RMB,
               NVL(SUM(A.ZD_USD), 0) ZD_USD,
               NVL(SUM(A.ZTGZR_RMB), 0) ZTGZR_RMB,
               NVL(SUM(A.ZTGZR_HKD), 0) ZTGZR_HKD,
               NVL(SUM(A.ZCZQSZ), 0) ZCZQSZ,
               NVL(SUM(A.CZD_RMB), 0) CZD_RMB,
               NVL(SUM(A.CZD_USD), 0) CZD_USD,
               NVL(SUM(A.ZTGZC_RMB), 0) ZTGZC_RMB,
               NVL(SUM(A.ZTGZC_HKD), 0) ZTGZC_HKD,
               NVL(SUM(A.DYYK), 0) DYYK,
               NVL(SUM(A.FZZZC_30), 0) FZZZC_30,
               NVL(SUM(A.BGZZC_30), 0) BGZZC_30,
               NVL(SUM(A.LXJS), 0) LXJS,
               NVL(SUM(A.LCSR), 0) LCSR,
               NVL(SUM(A.RJZFZ), 0) RJZFZ,
               NVL(SUM(A.RJZZC_RZRQ), 0) RJZZC_RZRQ,
               NVL(SUM(A.RJDBXJ_RZRQ), 0) RJDBXJ_RZRQ,
               NVL(SUM(A.RJDBGPSZ_RZRQ), 0) RJDBGPSZ_RZRQ,
               NVL(SUM(A.FLTZC), 0) FLTZC,
               NVL(SUM(A.ZTZC), 0) ZTZC,
               NVL(SUM(A.ZQZC), 0) ZQZC,
               NVL(SUM(A.DYPSZ), 0) DYPSZ,
               NVL(SUM(A.SZXZJE), 0) SZXZJE,
               NVL(SUM(A.ZFZ), 0) ZFZ,
               A.HLCS_HKD,
               A.HLCS_USD,
               NVL(SUM(A.YMZQSZ_GGT), 0) YMZQSZ_GGT,
               NVL(SUM(A.RJZQSZ_GGT), 0) RJZQSZ_GGT,
               NVL(SUM(A.YMZQSZ_SGT), 0) YMZQSZ_SGT,
               NVL(SUM(A.RJZQSZ_SGT), 0) RJZQSZ_SGT,
               NVL(SUM(A.YMZFZ_RZRQ), 0) YMZFZ_RZRQ,
               NVL(SUM(A.YMZZC_RZRQ), 0) YMZZC_RZRQ,
               NVL(SUM(A.YMDBXJ_RZRQ), 0) YMDBXJ_RZRQ,
               NVL(SUM(A.YMDBGPSZ_RZRQ), 0) YMDBGPSZ_RZRQ,
               NVL(SUM(A.YMZQSZ_KCB), 0) YMZQSZ_KCB, --科创板，zhangbc，20190627
               NVL(SUM(A.RJZQSZ_KCB), 0) RJZQSZ_KCB --科创板，zhangbc，20190627
          FROM DSC_STAT.T_STAT_KHZC_Y A
         WHERE A.YF = VN_TJYF
         GROUP BY A.YYB, A.HLCS_HKD, A.HLCS_USD) B
         INNER JOIN (SELECT YYB, MAX(ZZC) FZ_ZZC, MIN(ZZC) BG_ZZC
                       FROM (SELECT A.RQ, A.YYB, SUM(A.ZZC) AS ZZC
                               FROM DSC_STAT.T_STAT_KHZC_R A
                              WHERE A.RQ < = VN_TJRQ
                                AND A.RQ > = VN_FIRST_DAY
                              GROUP BY A.RQ, A.YYB)
                      GROUP BY YYB) C
            ON B.YYB = C.YYB;
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计不限制关系的数据插入表[' || VS_TABNAME || ']',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '运行正常';
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_YYB_ZC_Y;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_1(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN INT,
                                                   I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_1
         功能简述：   资产修正1类统计(质押入库债券市值修正)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：
                  1、DSC_STAT.T_STAT_KHZCXZMX     表为资产修正类全量更新表。
                  2、EMC_PUB.F_GET_ETL_DIC_SQL  返回标准字典清洗SQL的函数


         数据源：
                 1、DSC_BAS.T_ZQDYMX             债券抵押明细
                 2、DSC_CFG.T_ZQDM               证券代码表
                 3、DSC_BAS.T_KHXX_JJYW          客户信息-经纪业务


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/03/14                 创建
         胡阳明      2012/03/20                 修改：资产修正时保存历史
         林伟        2013/05/13                 修改，修改ZXLX从DSC_STAT.VW_ZQHQ表出

    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_1';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，质押入库债券市值数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_KHZCXZMX T
         WHERE T.XZLB = 1
           AND KSRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，质押入库债券市值数据！',
                                  I_S_CHANGEDESC     => '质押入库债券市值数据已删除' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将源表[DSC_BAS.T_ZQDYMX]的数据统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
        (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
        SELECT C.KHH AS KHH,
               C.YYB AS YYB,
               1 AS XZLB,
               A.ZQDM AS ZQDM,
               SUM(B.DYSL * (CASE
                       WHEN A.ZXJ = 0 THEN
                        A.ZSP
                       ELSE
                        A.ZXJ
                   END + (1 * A.ZXLX))) AS XZJE,
               VN_TJRQ AS KSRQ,
               VN_TJRQ AS JSRQ,
               D.BZ AS BZ,
               2 AS APP_ID
          FROM DSC_STAT.VW_ZQHQ    A,
               DSC_BAS.T_ZQDYMX    B,
               DSC_BAS.T_KHXX_JJYW C,
               DSC_CFG.T_ZQDM      D
         WHERE B.RQ = VN_TJRQ
           AND A.RQ = VN_TJRQ
           AND A.ZQDM = B.ZQDM
           AND A.JYS = B.JYS
           AND B.KHH = C.KHH
           AND A.JYS = D.JYS
           AND A.ZQDM = D.ZQDM
         GROUP BY C.KHH, C.YYB, D.BZ, A.ZQDM;
    --执行SQL
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将源表[DSC_BAS.T_ZQDYMX]的数据统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_1;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_11(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN INT,
                                                    I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_11
         功能简述：   资产修正11类统计((场外基金)提前扣减的（认）申购款)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：
                  1、DSC_STAT.T_STAT_KHZCXZMX     表为分修正类全量更新表。
                  2、EMC_PUB.F_GET_ETL_DIC_SQL  返回标准字典清洗SQL的函数


         数据源：
                 1、DSC_BAS.T_FP_JRWTLS_DQS       基金委托待清算表
                 2、DSC_BAS.T_KHXX_JJYW         客户信息-经纪业务

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/03/14                 创建
         胡阳明      2012/03/20                 修改：资产修正时保存历史

    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_11';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，(场外基金)提前扣减的（认）申购款数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_KHZCXZMX T
         WHERE T.XZLB = 11
           AND KSRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，(场外基金)提前扣减的（认）申购款数据！',
                                  I_S_CHANGEDESC     => '(场外基金)提前扣减的（认）申购款数据已删除' ||
                                                        VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成(场外基金)提前扣减的（认）申购款到目标表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
        (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
        SELECT B.KHH AS KHH,
               B.YYB AS YYB,
               11 AS XZLB,
               NULL AS ZQDM,
               SUM(A.WTJE) AS XZJE,
               VN_TJRQ AS KSRQ,
               VN_TJRQ AS JSRQ,
               A.BZ AS BZ,
               2 AS APP_ID
          FROM DSC_BAS.T_FP_JRWTLS_DQS A, DSC_BAS.T_KHXX_JJYW B
         WHERE A.RQ = VN_TJRQ
           AND A.KHH = B.KHH
           AND A.YWDM IN ('020', '022') --020（认购），022（申购）
           --A72001不应该包含，不然资产重复
           AND a.cpdm NOT IN ('A72001')
         GROUP BY B.KHH, B.YYB, A.BZ;

    --执行SQL
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成(场外基金)提前扣减的（认）申购款到目标表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_11;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_12(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN INT,
                                                    I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_12
         功能简述：   资产修正12类统计((场外基金)赎回顺延交收的资金)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：
                  1、DSC_STAT.T_STAT_KHZCXZMX     表为分修正类全量更新表。
                  2、EMC_PUB.F_GET_ETL_DIC_SQL  返回标准字典清洗SQL的函数


         数据源：
                 1、DSC_BAS.T_FP_JRWTLS_DQS       基金委托待清算表
                 2、DSC_BAS.T_KHXX_JJYW         客户信息-经纪业务

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/03/14                 创建

    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_12';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，(场外基金)赎回顺延交收的资金数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_KHZCXZMX T
         WHERE T.XZLB = 12
           AND KSRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，(场外基金)赎回顺延交收的资金数据！',
                                  I_S_CHANGEDESC     => '(场外基金)赎回顺延交收的资金数据已删除' ||
                                                        VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成(场外基金)赎回顺延交收的资金到目标表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
        (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
        SELECT B.KHH AS KHH,
               B.YYB AS YYB,
               12 AS XZLB,
               NULL AS ZQDM,
               SUM(A.QRJE) AS XZJE,
               VN_TJRQ AS KSRQ,
               VN_TJRQ AS JSRQ,
               A.BZ AS BZ,
               2 AS APP_ID
          FROM DSC_BAS.T_FP_DJS A, DSC_BAS.T_KHXX_JJYW B
         WHERE VN_TJRQ >= QRRQ
           AND VN_TJRQ < SETTLE_DATE
           AND A.KHH = B.KHH
           AND A.YWDM IN ('124', '125', '142') -- 124-赎回， 125-预约赎回 ，142-强行赎回
         GROUP BY B.KHH, B.YYB, A.BZ;

    --执行SQL
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成(场外基金)赎回顺延交收的资金到目标表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_12;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_13(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN INT,
                                                    I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_13
         功能简述：   资产修正13类统计((场外基金)认购已确认在途资金)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：
                  1、DSC_STAT.T_STAT_KHZCXZMX     表为分修正类全量更新表。
                  2、EMC_PUB.F_GET_ETL_DIC_SQL  返回标准字典清洗SQL的函数


         数据源：
                 1、DSC_BAS.T_FP_JGMXLS         基金交割明细流水表
                 2、DSC_BAS.T_KHXX_JJYW         客户信息-经纪业务

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/03/14                 创建
         林伟        2013/04/19                 修改，由于当天的资产修正数据已经统计到客户资产表中，所以不需要再做删除操作
                                                另外QRJE是正值存储，所以资产修正时不用取负值处理，取原值

    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_13';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，(场外基金)认购已确认在途资金数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_KHZCXZMX T
         WHERE T.XZLB = 13
           AND KSRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，(场外基金)认购已确认在途资金数据！',
                                  I_S_CHANGEDESC     => '(场外基金)认购已确认在途资金已删除' ||
                                                        VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成(场外基金)认购已确认在途资金到目标表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
        (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
        SELECT A.KHH AS KHH,
               A.YYB AS YYB,
               13 AS XZLB,
               A.CPDM AS ZQDM,
               SUM(A.QRJE) AS XZJE,
               VN_TJRQ AS KSRQ,
               VN_TJRQ AS JSRQ,
               A.BZ AS BZ,
               2 AS APP_ID
          FROM DSC_BAS.T_FP_JGMXLS A
         WHERE A.QRRQ = VN_TJRQ
           AND A.YWDM = '120' --认购
           AND A.APP_ID=2
           --20180513 林振m明  只有场外才需修正
         GROUP BY A.KHH, A.YYB, A.BZ, A.CPDM;

    --执行SQL
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成(场外基金)认购已确认在途资金到目标表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_13;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_14(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN INT,
                                                    I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_14
         功能简述：   资产修正14类统计((场内基金)认购已确认在途资金)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：
                  1、DSC_STAT.T_STAT_KHZCXZMX     表为分修正类全量更新表。
                  2、EMC_PUB.F_GET_ETL_DIC_SQL  返回标准字典清洗SQL的函数


         数据源：
                 1、DSC_BAS.T_FP_JGMXLS         基金交割明细流水表
                 2、DSC_BAS.T_KHXX_JJYW         客户信息-经纪业务

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/03/14                 创建
         卢智飞      2012/12/14                 修改jyl的常量为字符，避免$开头的问题
         胡阳明      2012/03/20                 修改：资产修正时保存历史

    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_14';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，(场内基金)赎回顺延交收的资金数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_KHZCXZMX T
         WHERE T.XZLB = 14
           AND KSRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，(场内基金)赎回顺延交收的资金数据！',
                                  I_S_CHANGEDESC     => '(场内基金)赎回顺延交收的资金已删除' ||
                                                        VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成(场内基金)赎回顺延交收的资金到目标表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
        (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
        SELECT A.KHH AS KHH,
               A.YYB AS YYB,
               14 AS XZLB,
               NULL AS ZQDM,
               SUM(A.YSJE_2) AS XZJE,
               VN_TJRQ AS KSRQ,
               VN_TJRQ AS JSRQ,
               A.BZ AS BZ,
               2 AS APP_ID
          FROM DSC_BAS.T_DJSQSZL A
         WHERE VN_TJRQ >= CJRQ
           AND VN_TJRQ < SETTLE_DATE_2
           AND A.JYLB = '43' --基金赎回
         GROUP BY A.KHH, A.YYB, A.BZ;

    --执行SQL
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成(场内基金)赎回顺延交收的资金到目标表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_14;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_15(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN INT,
                                                    I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_15
         功能简述：   资产修正15类统计((场内基金)认购已确认在途资金)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：
                  1、DSC_STAT.T_STAT_KHZCXZMX     表为分修正类全量更新表。
                  2、EMC_PUB.F_GET_ETL_DIC_SQL  返回标准字典清洗SQL的函数


         数据源：
                 1、DSC_BAS.T_JGMXLS            交割明细流水表
                 2、DSC_BAS.T_KHXX_JJYW         客户信息-经纪业务

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/03/14                 创建
         卢智飞      2012/12/14                 修改jyl的常量为字符，避免$开头的问题
         林伟        2013/04/19                 修改，认购修正金额交割表是存放的-ysje，所以修正的时候要转为正值，
                                                另外将交易类别改为41，去掉删除的资产修正部分

    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_15';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，(场内基金)认购已确认在途资金数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_KHZCXZMX T
         WHERE T.XZLB = 15
           AND KSRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，(场内基金)认购已确认在途资金数据！',
                                  I_S_CHANGEDESC     => '(场内基金)认购已确认在途资金已删除' ||
                                                        VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成(场内基金)认购已确认在途资金到目标表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
        (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
        SELECT A.KHH AS KHH,
               A.YYB AS YYB,
               15 AS XZLB,
               A.ZQDM AS ZQDM,
               -SUM(A.YSJE) AS XZJE,
               VN_TJRQ AS KSRQ,
               VN_TJRQ AS JSRQ,
               A.BZ AS BZ,
               2 AS APP_ID
          FROM DSC_BAS.T_JGMXLS A
         WHERE A.CJRQ = VN_TJRQ
           AND A.ZQDM LIKE '519%'
           AND A.JYLB = '41' --基金申购
         GROUP BY A.KHH, A.YYB, A.BZ, A.ZQDM;

    --执行SQL
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成(场内基金)认购已确认在途资金到目标表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_15;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_2(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN INT,
                                                   I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_2
         功能简述：   资产修正2类统计(融资未购回金额)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：
                  1、DSC_STAT.T_STAT_KHZCXZMX     表为分修正类全量更新表。
                  2、EMC_PUB.F_GET_ETL_DIC_SQL  返回标准字典清洗SQL的函数


         数据源：
                 1、DSC_BAS.T_DJSQSZL           待交收清算资料表
                 2、DSC_BAS.T_KHXX_JJYW         客户信息-经纪业务


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/03/14                 创建
         卢智飞      2012/12/14                 修改jyl的常量为字符，避免$开头的问题
         黄玉钰      2013/03/28                 资产修正新增H4
         林伟        2013/05/10                 修改，修改资产修正保留历史
         zhengwu     2013/10/25                 修正判断条件去掉VN_TJRQ >= CJRQ AND VN_TJRQ < SETTLE_DATE_2
         黄玉钰      2014/07/23                 修改：待交收表全量采集，VN_TJRQ >= CJRQ AND VN_TJRQ < SETTLE_DATE_2这个条件保留
    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_2';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，融资未购回金额数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_KHZCXZMX T
         WHERE T.XZLB = 2
           AND KSRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，融资未购回金额数据！',
                                  I_S_CHANGEDESC     => '融资未购回金额数据已删除' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成融资未购回金额到目标表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
        (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
        SELECT B.KHH AS KHH,
               B.YYB AS YYB,
               2 AS XZLB,
               NULL AS ZQDM,
               SUM(A.YSJE_2) AS XZJE,
               VN_TJRQ AS KSRQ,
               VN_TJRQ AS JSRQ,
               A.BZ AS BZ,
               2 AS APP_ID
          FROM DSC_BAS.T_DJSQSZL A, DSC_BAS.T_KHXX_JJYW B
         WHERE VN_TJRQ >= CJRQ
           AND VN_TJRQ < SETTLE_DATE_2
           AND A.KHH = B.KHH
           AND ZQLB IN ('H0', 'H1', 'H3', 'H4')
           AND A.JYLB = '4'
         GROUP BY B.KHH, B.YYB, A.BZ;

    --执行SQL
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成融资未购回金额到目标表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_2;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_21(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN INT,
                                                    I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_21
         功能简述：   资产修正21类统计(B股卖出未交收资金修正)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：
                  1、DSC_STAT.T_STAT_KHZCXZMX     表为资产修正类全量更新表。
                  2、EMC_PUB.F_GET_ETL_DIC_SQL  返回标准字典清洗SQL的函数


         数据源：
                 1、DSC_BAS.T_ZQDYMX             债券抵押明细
                 2、DSC_CFG.T_ZQDM               证券代码表
                 3、DSC_BAS.T_KHXX_JJYW          客户信息-经纪业务


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/03/14                 创建
         卢智飞      2012/12/14                 修改jyl的常量为字符，避免$开头的问题
         胡阳明      2012/03/20                 修改：资产修正时保存历史

    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_21';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，B股卖出未交收资金数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_KHZCXZMX T
         WHERE T.XZLB = 21
           AND KSRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，B股卖出未交收资金数据！',
                                  I_S_CHANGEDESC     => 'B股卖出未交收资金数据已删除' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将B股卖出未交收资金数据统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
        (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
        SELECT A.KHH AS KHH,
               A.YYB AS YYB,
               21 AS XZLB,
               NULL AS ZQDM,
               SUM(A.YSJE_2) AS XZJE,
               VN_TJRQ AS KSRQ,
               VN_TJRQ AS JSRQ,
               A.BZ AS BZ,
               2 AS APP_ID
          FROM DSC_BAS.T_DJSQSZL A
         WHERE VN_TJRQ >= CJRQ
           AND VN_TJRQ < SETTLE_DATE_2
           AND JYLB = '2'
           AND ZQLB = 'B0' --B股
         GROUP BY A.KHH, A.YYB, A.BZ;
    --执行SQL
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将B股卖出未交收资金数据统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_21;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_22(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN INT,
                                                    I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_22
         功能简述：   资产修正22类统计(港股卖出未交收资金)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常； -1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：


         数据源：
                 1、DSC_STAT.T_STAT_KHZCXZMX      客户_客户资产修正明细
                 2、DSC_BAS.T_DJSQSZL             交易_待交收清算资料表


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         吴邦杰      20141121                   创建
         胡丹丹      20161206                   修改：新增深港通数据写入
    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_21';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，港股卖出未交收资金数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_KHZCXZMX T
         WHERE T.XZLB = 22
           AND KSRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，港股卖出未交收资金数据！',
                                  I_S_CHANGEDESC     => '港股卖出未交收资金数据已删除' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将港股卖出未交收资金数据统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
        (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
        SELECT A.KHH AS KHH,
               A.YYB AS YYB,
               22 AS XZLB,
               NULL AS ZQDM,
               SUM(A.YSJE_2) AS XZJE,
               VN_TJRQ AS KSRQ,
               VN_TJRQ AS JSRQ,
               A.BZ AS BZ,
               2 AS APP_ID
          FROM DSC_BAS.T_DJSQSZL A
         WHERE VN_TJRQ >= CJRQ
           AND VN_TJRQ < SETTLE_DATE_2
           AND JYLB = '2'
           AND JYS IN ('8','9') --港股交易
           AND ZQLB = 'A0' --A股
         GROUP BY A.KHH, A.YYB, A.BZ;
    --执行SQL
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将港股卖出未交收资金数据统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_22;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_23(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN INT,
                                                    I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_23
         功能简述：   资产修正23类统计(港股买入未交收资金)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常； -1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：


         数据源：
                 1、DSC_STAT.T_STAT_KHZCXZMX      客户_客户资产修正明细
                 2、DSC_BAS.T_DJSQSZL             交易_待交收清算资料表


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         吴邦杰      20141121                   创建
         胡丹丹      20161206                   修改：新增深港通数据写入
    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_21';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，港股买入未交收资金数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_KHZCXZMX T
         WHERE T.XZLB = 23
           AND KSRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，港股买入未交收资金数据！',
                                  I_S_CHANGEDESC     => '港股买入未交收资金数据已删除' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将港股买入未交收资金数据统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
        (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
        SELECT A.KHH AS KHH,
               A.YYB AS YYB,
               23 AS XZLB,
               NULL AS ZQDM,
               SUM(A.YSJE_2) AS XZJE,
               VN_TJRQ AS KSRQ,
               VN_TJRQ AS JSRQ,
               A.BZ AS BZ,
               2 AS APP_ID
          FROM DSC_BAS.T_DJSQSZL A
         WHERE VN_TJRQ >= CJRQ
           AND VN_TJRQ < SETTLE_DATE_2
           AND JYLB = '1'
           AND JYS IN ('8', '9') --港股交易
           AND ZQLB = 'A0' --A股
         GROUP BY A.KHH, A.YYB, A.BZ;
    --执行SQL
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将港股买入未交收资金数据统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_23;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_3(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN INT,
                                                   I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_3
         功能简述：   资产修正3类统计(融券未购回金额)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：
                  1、DSC_STAT.T_STAT_KHZCXZMX     表为分修正类全量更新表。
                  2、EMC_PUB.F_GET_ETL_DIC_SQL  返回标准字典清洗SQL的函数


         数据源：
                 1、DSC_BAS.T_DJSQSZL           待交收清算资料表
                 2、DSC_BAS.T_KHXX_JJYW         客户信息-经纪业务

         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/03/14                 创建
         卢智飞      2012/12/14                 修改jyl的常量为字符，避免$开头的问题
         黄玉钰      2013/03/28                 资产修正新增H4
         林伟        2013/05/07                 修改，资产修正保留历史
         zhengwu     2013/10/25                 修正判断条件去掉VN_TJRQ >= CJRQ AND VN_TJRQ < SETTLE_DATE_2
         黄玉钰      2014/07/23                 修改：待交收表全量采集，VN_TJRQ >= CJRQ AND VN_TJRQ < SETTLE_DATE_2这个条件保留
    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_3';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，融券未购回金额数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_KHZCXZMX T
         WHERE T.XZLB = 3
           AND KSRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，融券未购回金额数据！',
                                  I_S_CHANGEDESC     => '融券未购回金额数据已删除' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成融券未购回金额到目标表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
        (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
        SELECT B.KHH AS KHH,
               B.YYB AS YYB,
               3 AS XZLB,
               NULL AS ZQDM,
               SUM(A.YSJE_2) AS XZJE,
               VN_TJRQ AS KSRQ,
               VN_TJRQ AS JSRQ,
               A.BZ AS BZ,
               2 AS APP_ID
          FROM DSC_BAS.T_DJSQSZL A, DSC_BAS.T_KHXX_JJYW B
         WHERE VN_TJRQ >= CJRQ
           AND VN_TJRQ < SETTLE_DATE_2
           AND A.KHH = B.KHH
           AND ZQLB IN ('H0', 'H1', 'H3', 'H4')
           AND A.JYLB = '5'
         GROUP BY B.KHH, B.YYB, A.BZ;

    --执行SQL
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '生成融券未购回金额到目标表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_3;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_31(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN INT,
                                                    I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_31
         功能简述：   资产修正31类统计(红利未到帐金额修正)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：
                  1、DSC_STAT.T_STAT_KHZCXZMX     表为资产修正类全量更新表。
                  2、EMC_PUB.F_GET_ETL_DIC_SQL  返回标准字典清洗SQL的函数


         数据源：



         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/03/15                 创建

    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_31';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，红利未到帐金额数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_KHZCXZMX T
         WHERE T.XZLB = 31
           AND KSRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，红利未到帐金额数据！',
                                  I_S_CHANGEDESC     => '红利未到帐金额数据已删除' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将红利未到帐金额数据统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
        (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
        SELECT A.KHH AS KHH,
               A.YYB AS YYB,
               31 AS XZLB,
               A.ZQDM AS ZQDM,
               SUM(A.ZQSL * NVL(B.SQPXBL, 0)) AS XZJE,
               VN_TJRQ AS KSRQ,
               NVL(B.PXRQ, B.CQCXRQ) AS JSRQ, --红利到帐日期
               A.BZ AS BZ,
               2 AS APP_ID
          FROM DSC_BAS.T_ZQYE A,
               (SELECT *
                  FROM DSC_CFG.T_GP_GSFHKG D
                 WHERE D.GQDJRQ = VN_TJRQ
                   AND NVL(D.SQPXBL, 0) > 0) B
         WHERE A.RQ = VN_TJRQ
           AND A.ZQDM = B.ZQDM
         GROUP BY A.KHH, A.YYB, A.BZ, A.ZQDM, NVL(B.PXRQ, B.CQCXRQ);
    --执行SQL
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --删除过期数据
    DELETE DSC_STAT.T_STAT_KHZCXZMX A
     WHERE A.XZLB = 31
       AND A.JSRQ <= VN_TJRQ;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将红利未到帐金额数据统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_31;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_32(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN INT,
                                                    I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_32
         功能简述：   资产修正32类统计(送股未除权市值)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：
                  1、DSC_STAT.T_STAT_KHZCXZMX     表为资产修正类全量更新表。
                  2、EMC_PUB.F_GET_ETL_DIC_SQL  返回标准字典清洗SQL的函数


         数据源：



         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/03/15                 创建
         林伟        2013/05/13                 修改，修改ZXJ的获取方式从DSC_BAS.T_ZQHQ和DSC_HIS.T_ZQHQ_HIS表出

    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_32';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，送股未除权市值数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_KHZCXZMX T
         WHERE T.XZLB = 32
           AND KSRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，送股未除权市值数据！',
                                  I_S_CHANGEDESC     => '送股未除权市值数据已删除' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '送股未除权市值数据统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
        (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
        SELECT A.KHH AS KHH,
               A.YYB AS YYB,
               32 AS XZLB,
               A.ZQDM AS ZQDM,
               -SUM(A.ZQSL * (NVL(B.SGBL, 0) + NVL(B.ZZBL, 0)) * C.ZXJ) AS XZJE,
               VN_TJRQ AS KSRQ,
               B.SZGSSRQ AS JSRQ, --送股上市日期
               A.BZ AS BZ,
               2 AS APP_ID
          FROM DSC_BAS.T_ZQYE A,
               (SELECT *
                  FROM DSC_CFG.T_GP_GSFHKG D
                 WHERE D.GQDJRQ = VN_TJRQ
                   AND D.SZGSSRQ = D.CQCXRQ --送股上市日期等于除权日期
                   AND (NVL(D.SGBL, 0) + NVL(D.ZZBL, 0)) > 0) B,
               (SELECT *
                  FROM DSC_BAS.T_ZQHQ
                UNION ALL
                SELECT * FROM DSC_HIS.T_ZQHQ_HIS) C
         WHERE A.RQ = VN_TJRQ
           AND A.ZQDM = B.ZQDM
           AND B.ZQDM = C.ZQDM
           AND A.JYS = C.JYS
         GROUP BY A.KHH, A.YYB, A.BZ, A.ZQDM, B.SZGSSRQ;
    --执行SQL
    VN_ROWCOUNT := SQL%ROWCOUNT;
    --删除过期数据
    DELETE DSC_STAT.T_STAT_KHZCXZMX A
     WHERE A.XZLB = 32
       AND A.JSRQ <= VN_TJRQ;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '送股未除权市值数据统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_32;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_33(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN INT,
                                                    I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_33
         功能简述：   资产修正33类统计(送股未到帐市值)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：
                  1、DSC_STAT.T_STAT_KHZCXZMX     表为资产修正类全量更新表。
                  2、EMC_PUB.F_GET_ETL_DIC_SQL  返回标准字典清洗SQL的函数


         数据源：



         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/03/15                 创建
         林伟        2013/05/13                 修改，修改ZXJ的获取方式从DSC_BAS.T_ZQHQ和DSC_HIS.T_ZQHQ_HIS表出

    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_33';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，送股未到帐市值数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_KHZCXZMX T
         WHERE T.XZLB = 33
           AND KSRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，送股未到帐市值数据！',
                                  I_S_CHANGEDESC     => '送股未到帐市值数据已删除' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '送股未到帐市值统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
        (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
        SELECT A.KHH AS KHH,
               A.YYB AS YYB,
               33 AS XZLB,
               A.ZQDM AS ZQDM,
               SUM(A.ZQSL * (B.SGBL + B.ZZBL) * C.ZXJ) AS XZJE,
               VN_TJRQ AS KSRQ,
               B.SZGSSRQ AS JSRQ, --送股上市日期
               A.BZ AS BZ,
               2 AS APP_ID
          FROM DSC_BAS.T_ZQYE A,
               (SELECT *
                  FROM DSC_CFG.T_GP_GSFHKG D
                 WHERE D.GQDJRQ = VN_TJRQ
                   AND D.SZGSSRQ > D.CQCXRQ --送股上市日期大于除权日期
                   AND (D.SGBL + D.ZZBL) > 0) B,
               (SELECT *
                  FROM DSC_BAS.T_ZQHQ
                UNION ALL
                SELECT * FROM DSC_HIS.T_ZQHQ_HIS) C
         WHERE A.RQ = VN_TJRQ
           AND A.ZQDM = B.ZQDM
           AND B.ZQDM = C.ZQDM
           AND A.JYS = C.JYS
         GROUP BY A.KHH, A.YYB, A.BZ, A.ZQDM, B.SZGSSRQ;
    --执行SQL
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --删除过期数据
    DELETE DSC_STAT.T_STAT_KHZCXZMX A
     WHERE A.XZLB = 33
       AND A.JSRQ <= VN_TJRQ;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '送股未到帐市值统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_33;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_34(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN INT,
                                                    I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_34
         功能简述：   资产修正34类统计(配股已缴款未上市市值)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：
                除权价计算公式：
                除权(息)报价＝[(登记日的收盘价-现金红利)＋配(新)股价格×流通股份变动比例]÷(1＋流通股份变动比例)
                示例: 原来总共1000股,每股10元,市值10000。 10配10,配股价5元,除权价示例如下:
                      [(10-0)+5*1]/(1+1) = 7.5


         注意事项：
                  1、DSC_STAT.T_STAT_KHZCXZMX     表为资产修正类全量更新表。
                  2、EMC_PUB.F_GET_ETL_DIC_SQL  返回标准字典清洗SQL的函数


         数据源：



         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/03/15                 创建
         林伟        2013/05/13                 修改，修改ZXJ的获取方式从DSC_BAS.T_ZQHQ和DSC_HIS.T_ZQHQ_HIS表出


    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_34';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，配股已缴款未上市市值数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_KHZCXZMX T
         WHERE T.XZLB = 34
           AND KSRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，配股已缴款未上市市值数据！',
                                  I_S_CHANGEDESC     => '配股已缴款未上市市值数据已删除' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '配股已缴款未上市市值统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
        (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
        SELECT A.KHH AS KHH,
               A.YYB AS YYB,
               34 AS XZLB,
               A.ZQDM AS ZQDM,
               SUM(A.CJSL * (((C.ZXJ + B.PGJG * B.PGBL) / (1 + B.PGBL)) - B.PGJG)) AS XZJE, --按成交数量*（除权价-配股价）
               VN_TJRQ AS KSRQ,
               B.PGSSRQ AS JSRQ, --送股上市日期
               A.BZ AS BZ,
               2 AS APP_ID
          FROM DSC_BAS.T_JGMXLS A,
               (SELECT *
                  FROM DSC_CFG.T_GP_GPPG D
                 WHERE D.GQDJRQ = VN_TJRQ
                   AND D.SJPGSL > 0) B,
               (SELECT *
                  FROM DSC_BAS.T_ZQHQ
                UNION ALL
                SELECT * FROM DSC_HIS.T_ZQHQ_HIS) C
         WHERE A.CJRQ = VN_TJRQ
           AND A.JYLB = 3 --缴款
           AND A.ZQDM = B.ZQDM
           AND B.ZQDM = C.ZQDM
           AND A.JYS = C.JYS
         GROUP BY A.KHH, A.YYB, A.BZ, A.ZQDM, B.PGSSRQ;
    --执行SQL
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --删除过期数据
    DELETE DSC_STAT.T_STAT_KHZCXZMX A
     WHERE A.XZLB = 34
       AND A.JSRQ <= VN_TJRQ;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '配股已缴款未上市市值统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_34;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_4(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN INT,
                                                   I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_4
         功能简述：   资产修正4类统计(股票质押回购市值修正)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：
                  1、DSC_STAT.T_STAT_KHZCXZMX     表为资产修正类全量更新表。
                  2、EMC_PUB.F_GET_ETL_DIC_SQL  返回标准字典清洗SQL的函数


         数据源：
                 1、DSC_BAS.T_GPZY_DHGHY        股票质押回购_回购合约


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         黄玉钰      2013/09/29                 创建
         陈德铸      2015/04/29                 修改：JSBZ的条件由'JSBZ = 0'调整为'JSBZ = '0''
         张功德      2017/02/08                 修改：当柜台是金证W版时增加JYS判断，沪A的不做资产修正

    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_INT       INT;
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_4';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，股票质押回购市值数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_KHZCXZMX T
         WHERE T.XZLB = 4
           AND KSRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，股票质押回购市值数据！',
                                  I_S_CHANGEDESC     => '股票质押回购市值数据已删除' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将源表[DSC_BAS.T_GPZY_DHGHY]的数据统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    --判断是否是金证W版
    SELECT COUNT(*) INTO VN_INT FROM PUB_SYS.T_USER WHERE OWNER LIKE '%JZW';

    IF VN_INT > 0 THEN
        INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
            (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
            SELECT A.KHH AS KHH,
                   A.YYB AS YYB,
                   4 AS XZLB,
                   A.ZQDM AS ZQDM,
                   NVL(SUM(A.DYSZ), 0) AS XZJE,
                   VN_TJRQ AS KSRQ,
                   VN_TJRQ AS JSRQ,
                   1 AS BZ,
                   2 AS APP_ID
              FROM DSC_BAS.T_GPZY_DHGHY A
             WHERE A.JYLB IN (53, 54)
               AND A.JSBZ = '0'
               AND A.JYS = '1'
             GROUP BY A.KHH, A.YYB, A.ZQDM;
    ELSE
        INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
            (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
            SELECT A.KHH AS KHH,
                   A.YYB AS YYB,
                   4 AS XZLB,
                   A.ZQDM AS ZQDM,
                   NVL(SUM(A.DYSZ), 0) AS XZJE,
                   VN_TJRQ AS KSRQ,
                   VN_TJRQ AS JSRQ,
                   1 AS BZ,
                   2 AS APP_ID
              FROM DSC_BAS.T_GPZY_DHGHY A
             WHERE A.JYLB IN (53, 54)
               AND A.JSBZ = '0'
             GROUP BY A.KHH, A.YYB, A.ZQDM;
    END IF;
    --执行SQL
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将源表[DSC_BAS.T_GPZY_DHGHY]的数据统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_4;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_5(O_N_CODE OUT INT,
                                                   O_S_NOTE OUT VARCHAR2,
                                                   I_N_TJRQ IN INT,
                                                   I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_5
         功能简述：   资产修正5类统计(股票质押回购融资金额修正)
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：
                  1、DSC_STAT.T_STAT_KHZCXZMX     表为资产修正类全量更新表。
                  2、EMC_PUB.F_GET_ETL_DIC_SQL  返回标准字典清洗SQL的函数


         数据源：
                 1、DSC_BAS.T_GPZY_DHGHY        股票质押回购_回购合约


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         黄玉钰      2013/09/29                 创建
         陈德铸      2015/04/29                 修改：取股票质押回购的购回金额取正值处理
         林振明      2018/05/12                 修改:按照老系统方法进行修正

    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_5';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，股票质押回购融资金额数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_KHZCXZMX T
         WHERE T.XZLB = 5
           AND KSRQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_KHZCXZMX]表，股票质押回购融资金额数据！',
                                  I_S_CHANGEDESC     => '股票质押回购融资金额数据已删除' || VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将源表[DSC_BAS.T_GPZY_DHGHY]的数据统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_KHZCXZMX
        (KHH, YYB, XZLB, ZQDM, XZJE, KSRQ, JSRQ, BZ, APP_ID)
        SELECT A.KHH AS KHH,
               A.YYB AS YYB,
               5 AS XZLB,
               A.ZQDM AS ZQDM,
               ABS(NVL(SUM(WHBJ+DZLX+ROUND((CJJG/360)*WHBJ*WJXTS,2)), 0)) AS XZJE,
               VN_TJRQ AS KSRQ,
               VN_TJRQ AS JSRQ,
               1 AS BZ,
               2 AS APP_ID
          FROM (SELECT KHH,ZQDM,YYB,CJJE-(JSJE-JXJE) WHBJ
                   ,DZLX,CJJG
                   ,TRUNC(SYSDATE-TO_DATE((CASE WHEN JXRQ>0 THEN JXRQ ELSE CJRQ END),'YYYYMMDD')) WJXTS
                   ,CJJE,JSJE,JXJE,JXRQ,CJRQ
            FROM DSC_BAS.T_GPZY_DHGHY A
            WHERE JSBZ=0 AND QSRQ>0 AND jylb IN (53,54) ) A
         GROUP BY A.KHH, A.YYB, A.ZQDM;
        /*SELECT A.KHH AS KHH,
               A.YYB AS YYB,
               5 AS XZLB,
               A.ZQDM AS ZQDM,
               ABS(NVL(SUM(A.GHJE), 0)) AS XZJE,
               VN_TJRQ AS KSRQ,
               VN_TJRQ AS JSRQ,
               1 AS BZ,
               2 AS APP_ID
          FROM DSC_BAS.T_GPZY_DHGHY A
         WHERE A.JYLB IN ('53', '54')
           AND A.JSBZ = '0'
         GROUP BY A.KHH, A.YYB, A.ZQDM;*/
    --执行SQL
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将源表[DSC_BAS.T_GPZY_DHGHY]的数据统计到表[DSC_STAT.T_STAT_KHZCXZMX]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_5;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZCXZ_MAIN(O_N_CODE OUT INT,
                                                      O_S_NOTE OUT VARCHAR2,
                                                      I_N_TJRQ IN INT,
                                                      I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZCXZ_MAIN
         功能简述：   资产修正调用主过程
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：




         数据源：



         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/03/15                 创建
         胡阳明      2013/03/21                 修改：由于资产修正表改为保存历史，所以非当前统计日的资产修正不能进行运行，
                                                      因为DJS表和ZQDYMX表并没有保存历史。
         黄玉钰      2013/09/29                 修改：新增4-股票质押回购市值 5-股票质押回购融资金额 修正
         吴邦杰      2014/11/21                 修改：新增22-港股卖出未交收资金、23-港股买入未交收资金 资产修正

         陈德铸      2015/04/29                 修改：1）判断运行计算时间进行调整处理
                                                      2）资产修正类别哪些类别是否需要计算走参数表DSC_CFG.T_ZCXZLB中的IS_XZ(是否修正)


    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    --VN_ROWCOUNT  INT; --记录数
    VN_STEP     INT; --动作步数
    VN_TJRQ     NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO  PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER     VARCHAR2(30);
    VN_TJRQ_MAX NUMBER(8);
    --VS_SQL       VARCHAR2(20000);

    VN_JYR_MAX NUMBER(8); --取T-1交易日
    VN_IS_XZ   NUMBER(2); --判断是否进行修正处理

    FUNCTION F_GET_IS_XZ(VS_XZLB VARCHAR2) RETURN NUMBER IS
        VN_CNT INT;
    BEGIN
        SELECT COUNT(*)
          INTO VN_CNT
          FROM DSC_CFG.T_ZCXZLB T
         WHERE T.XZLB = VS_XZLB
           AND T.IS_XZ = '1';
        RETURN VN_CNT;
    END;
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';

    --取VN_JYR_MAX，防止现场跑未来日期的数据，导致资产修正数据有问题
    SELECT MAX(JYR)
      INTO VN_JYR_MAX
      FROM DSC_CFG.T_XTJYR
     WHERE ZRR < TO_CHAR(SYSDATE, 'YYYYMMDD');

    /*SELECT MAX(TJSJSJ)
     INTO VN_TJRQ_MAX
     FROM PUB_SYS.T_ETL_DATE
    WHERE TJLX = 1
      AND TJLD = 1;*/
   /* IF \*VN_TJRQ_MAX = VN_TJRQ*\
     VN_TJRQ = VN_JYR_MAX THEN*/
        --当统计时间是当前的ETL时间时才进行资产修正
        SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
        --获取ETL过程的编号
        VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                            I_S_PROC_NAME => VS_PROC_NAME);
        VN_STEP    := 0;

        --过程开始
        --记录日志——开始
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => 1,
                           I_S_RETNOTE        => '正在运行！',
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 0);
        --质押入库债券市值
        VN_IS_XZ := F_GET_IS_XZ('1');
        IF VN_IS_XZ > 0 THEN
            P_STAT_ZCXZ_1(O_N_CODE => O_N_CODE,
                          O_S_NOTE => O_S_NOTE,
                          I_N_TJRQ => VN_TJRQ,
                          I_N_REDO => I_N_REDO);
        END IF;

        --融资未购回金额
        VN_IS_XZ := F_GET_IS_XZ('2');
        IF VN_IS_XZ > 0 THEN
            P_STAT_ZCXZ_2(O_N_CODE => O_N_CODE,
                          O_S_NOTE => O_S_NOTE,
                          I_N_TJRQ => VN_TJRQ,
                          I_N_REDO => I_N_REDO);
        END IF;

        --融券未购回金额
        VN_IS_XZ := F_GET_IS_XZ('3');
        IF VN_IS_XZ > 0 THEN
            P_STAT_ZCXZ_3(O_N_CODE => O_N_CODE,
                          O_S_NOTE => O_S_NOTE,
                          I_N_TJRQ => VN_TJRQ,
                          I_N_REDO => I_N_REDO);
        END IF;

        --股票质押回购市值
        VN_IS_XZ := F_GET_IS_XZ('4');
        IF VN_IS_XZ > 0 THEN
            P_STAT_ZCXZ_4(O_N_CODE => O_N_CODE,
                          O_S_NOTE => O_S_NOTE,
                          I_N_TJRQ => VN_TJRQ,
                          I_N_REDO => I_N_REDO);
        END IF;

        --股票质押回购融资金额
        VN_IS_XZ := F_GET_IS_XZ('5');
        IF VN_IS_XZ > 0 THEN
            P_STAT_ZCXZ_5(O_N_CODE => O_N_CODE,
                          O_S_NOTE => O_S_NOTE,
                          I_N_TJRQ => VN_TJRQ,
                          I_N_REDO => I_N_REDO);
        END IF;

        --(场外基金)提前扣减的（认）申购款
        VN_IS_XZ := F_GET_IS_XZ('11');
        IF VN_IS_XZ > 0 THEN
            P_STAT_ZCXZ_11(O_N_CODE => O_N_CODE,
                           O_S_NOTE => O_S_NOTE,
                           I_N_TJRQ => VN_TJRQ,
                           I_N_REDO => I_N_REDO);
        END IF;

        --(场外基金)赎回顺延交收的资金
        VN_IS_XZ := F_GET_IS_XZ('12');
        IF VN_IS_XZ > 0 THEN
            P_STAT_ZCXZ_12(O_N_CODE => O_N_CODE,
                           O_S_NOTE => O_S_NOTE,
                           I_N_TJRQ => VN_TJRQ,
                           I_N_REDO => I_N_REDO);
        END IF;

        --(场外基金)认购已确认在途资金
        VN_IS_XZ := F_GET_IS_XZ('13');
        IF VN_IS_XZ > 0 THEN
            P_STAT_ZCXZ_13(O_N_CODE => O_N_CODE,
                           O_S_NOTE => O_S_NOTE,
                           I_N_TJRQ => VN_TJRQ,
                           I_N_REDO => I_N_REDO);
        END IF;

        --(场内基金)赎回顺延交收的资金
        VN_IS_XZ := F_GET_IS_XZ('14');
        IF VN_IS_XZ > 0 THEN
            P_STAT_ZCXZ_14(O_N_CODE => O_N_CODE,
                           O_S_NOTE => O_S_NOTE,
                           I_N_TJRQ => VN_TJRQ,
                           I_N_REDO => I_N_REDO);
        END IF;

        --(场内基金)认购已确认在途资金
        VN_IS_XZ := F_GET_IS_XZ('15');
        IF VN_IS_XZ > 0 THEN
            P_STAT_ZCXZ_15(O_N_CODE => O_N_CODE,
                           O_S_NOTE => O_S_NOTE,
                           I_N_TJRQ => VN_TJRQ,
                           I_N_REDO => I_N_REDO);
        END IF;

        --B股卖出未交收资金
        VN_IS_XZ := F_GET_IS_XZ('21');
        IF VN_IS_XZ > 0 THEN
            P_STAT_ZCXZ_21(O_N_CODE => O_N_CODE,
                           O_S_NOTE => O_S_NOTE,
                           I_N_TJRQ => VN_TJRQ,
                           I_N_REDO => I_N_REDO);
        END IF;

        --港股卖出未交收资金
        VN_IS_XZ := F_GET_IS_XZ('22');
        IF VN_IS_XZ > 0 THEN
            P_STAT_ZCXZ_22(O_N_CODE => O_N_CODE,
                           O_S_NOTE => O_S_NOTE,
                           I_N_TJRQ => VN_TJRQ,
                           I_N_REDO => I_N_REDO);
        END IF;

        --港股买入未交收资金
        VN_IS_XZ := F_GET_IS_XZ('23');
        IF VN_IS_XZ > 0 THEN
            P_STAT_ZCXZ_23(O_N_CODE => O_N_CODE,
                           O_S_NOTE => O_S_NOTE,
                           I_N_TJRQ => VN_TJRQ,
                           I_N_REDO => I_N_REDO);
        END IF;

        --红利未到帐金额
        VN_IS_XZ := F_GET_IS_XZ('31');
        IF VN_IS_XZ > 0 THEN
            P_STAT_ZCXZ_31(O_N_CODE => O_N_CODE,
                           O_S_NOTE => O_S_NOTE,
                           I_N_TJRQ => VN_TJRQ,
                           I_N_REDO => I_N_REDO);
        END IF;

        --送股未除权市值
        VN_IS_XZ := F_GET_IS_XZ('32');
        IF VN_IS_XZ > 0 THEN
            P_STAT_ZCXZ_32(O_N_CODE => O_N_CODE,
                           O_S_NOTE => O_S_NOTE,
                           I_N_TJRQ => VN_TJRQ,
                           I_N_REDO => I_N_REDO);
        END IF;

        --送股未到帐市值
        VN_IS_XZ := F_GET_IS_XZ('33');
        IF VN_IS_XZ > 0 THEN
            P_STAT_ZCXZ_33(O_N_CODE => O_N_CODE,
                           O_S_NOTE => O_S_NOTE,
                           I_N_TJRQ => VN_TJRQ,
                           I_N_REDO => I_N_REDO);
        END IF;

        --配股已缴款未上市市值
        VN_IS_XZ := F_GET_IS_XZ('34');
        IF VN_IS_XZ > 0 THEN
            P_STAT_ZCXZ_34(O_N_CODE => O_N_CODE,
                           O_S_NOTE => O_S_NOTE,
                           I_N_TJRQ => VN_TJRQ,
                           I_N_REDO => I_N_REDO);
        END IF;

        --记录日志——成功结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
   /* END IF;*/
EXCEPTION

    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZCXZ_MAIN;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZJCQK_R(O_N_CODE OUT INT,
                                                    O_S_NOTE OUT VARCHAR2,
                                                    I_N_TJRQ IN INT,
                                                    I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZJCQK_R
         功能简述：   资金存取款日统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：




         数据源：
                 1、DSC_BAS.T_ZJMXLS             资金明细流水



         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/03/14                 创建
         黄玉钰      2014/04/24                 修改：ywkm使用dsc_Stat.t_param_value来区分存取款

    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_ZJCQK_R]表，资金存取款数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_ZJCQK_R T WHERE T.RQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_ZJCQK_R]表，资金存取款数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_ZJCQK_R]已删除' ||
                                                        VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将源表[DSC_BAS.T_ZJMXLS]的存取款数据统计到表[DSC_STAT.T_STAT_ZJCQK_R]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_ZJCQK_R
        (RQ, KHH, YYB, GRJG, SJKM, YWKM, BZ, FSJE)
        SELECT RQ,
               A.KHH,
               A.YYB,
               B.GRJG,
               CASE
                   WHEN C.PARAM_KIND = '01' THEN
                    '101'
                   ELSE
                    '102'
               END AS SJKM,
               YWKM,
               BZ,
               SUM(CASE
                       WHEN C.PARAM_KIND = '01' THEN
                        SRJE - FCJE
                       WHEN C.PARAM_KIND = '02' THEN
                        FCJE - SRJE
                       ELSE
                        0
                   END) AS FSJE
          FROM (SELECT RQ, KHH, YYB, YWKM, BZ, FCJE, SRJE
                  FROM DSC_BAS.T_ZJMXLS
                UNION ALL
                SELECT RQ, KHH, YYB, YWKM, BZ, FCJE, SRJE FROM DSC_HIS.T_ZJMXLS_HIS) A,
               DSC_BAS.T_KHXX_JJYW B,
               DSC_STAT.T_PARAM_VALUE C
         WHERE RQ = I_N_TJRQ
           AND A.KHH = B.KHH
           AND A.YWKM = C.PARAM_VALUE
           AND C.PARAM_KIND IN ('01', '02')
         GROUP BY RQ, A.KHH, A.YYB, B.GRJG, C.PARAM_KIND, YWKM, BZ;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;

    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将源表[DSC_BAS.T_ZJMXLS]的存取款数据统计到表[DSC_STAT.T_STAT_ZJCQK_R]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZJCQK_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZJJYR(O_N_CODE OUT INT,
                                                  O_S_NOTE OUT VARCHAR2,
                                                  I_N_TJRQ IN INT,
                                                  I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZJJYR
         功能简述：   最近交易日统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：



         数据源：
                 1、DSC_BAS.T_JGMXLS             交割明细流水
                 2、DSC_HIS.T_JGMXLS_HIS         交割明细流水历史



         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/04/10                 创建
         陈德铸      2014/06/07                 修改：增加SSCJYRQ(上上次交易日期)，这里增加最合适
         陈德铸      2015/05/31                 修改：处理出现客户营业部内转在统计时候出现运行异常
         陈德铸      2015/07/22                 修改：1)增加信用交易的最近交易日期处理机制
                                                      2)增加个股期权交易的最近交易日期处理机制
         吴邦杰      2015/09/14                 修改：1)控制过程不允许跑历史日期数据、支持当天过程重跑
                                                      2)调整SSCJYRQ的取值逻辑



    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_ZJJYR     NUMBER(8); --最近交易日期
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    --VS_PROC_NAME := 'P_STAT_ZCXZ_1';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    SELECT NVL(MAX(JYR), 19000101)
      INTO VN_ZJJYR
      FROM DSC_CFG.T_XTJYR T
     WHERE T.ZRR < TO_CHAR(SYSDATE, 'YYYYMMDD');

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF VN_ZJJYR = VN_TJRQ THEN

        IF I_N_REDO IN (2) THEN
            --初始化时清空数据
            VN_STEP := VN_STEP + 1;
            --记录日志明细——开始
            PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                      I_N_LOGDETAILID    => VN_STEP,
                                      I_S_USER           => VS_USER,
                                      I_S_ACTIONDESC     => '初始化[DSC_STAT.T_STAT_ZJJYR]表！',
                                      I_S_CHANGEDESC     => NULL,
                                      I_N_TJRQ           => VN_TJRQ,
                                      I_N_RETCODE        => 1,
                                      I_S_RETNOTE        => '正在运行！',
                                      I_S_FLAG           => I_N_REDO,
                                      I_N_INSERTORUPDATE => 0);

            --事务处理
            EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.T_STAT_ZJJYR';
            --记录日志明细——结束
            PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                      I_N_LOGDETAILID    => VN_STEP,
                                      I_S_USER           => VS_USER,
                                      I_S_ACTIONDESC     => '初始化[DSC_STAT.T_STAT_ZJJYR]表！',
                                      I_S_CHANGEDESC     => '初始化结束，表被清空！',
                                      I_N_TJRQ           => VN_TJRQ,
                                      I_N_RETCODE        => O_N_CODE,
                                      I_S_RETNOTE        => O_S_NOTE,
                                      I_S_FLAG           => I_N_REDO,
                                      I_N_INSERTORUPDATE => 1);

            VN_STEP := VN_STEP + 1;
            --记录日志明细——开始
            PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                      I_N_LOGDETAILID    => VN_STEP,
                                      I_S_USER           => VS_USER,
                                      I_S_ACTIONDESC     => '处理【普通账户】的最近交易日！',
                                      I_S_CHANGEDESC     => NULL,
                                      I_N_TJRQ           => VN_TJRQ,
                                      I_N_RETCODE        => 1,
                                      I_S_RETNOTE        => '正在运行！',
                                      I_S_FLAG           => I_N_REDO,
                                      I_N_INSERTORUPDATE => 0);
            INSERT INTO DSC_STAT.T_STAT_ZJJYR
                (KHH, YYB, ZJJYR, ZHLB)
                SELECT B.KHH, B.YYB, MAX(CJRQ) AS ZJJYR, 1 AS ZHLB
                  FROM (SELECT KHH, YYB, CJRQ, JYLB
                          FROM DSC_BAS.T_JGMXLS
                        UNION ALL
                        SELECT KHH, YYB, CJRQ, JYLB FROM DSC_HIS.T_JGMXLS_HIS) A,
                       DSC_BAS.T_KHXX_JJYW B
                 WHERE A.KHH = B.KHH
                   AND A.JYLB IN (SELECT JYLB FROM DSC_CFG.T_JYLB B WHERE B.IS_JSJYL = 1)
                 GROUP BY B.KHH, B.YYB;
            VN_ROWCOUNT := SQL%ROWCOUNT;
            COMMIT;
            --记录日志明细——结束
            PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                      I_N_LOGDETAILID    => VN_STEP,
                                      I_S_USER           => VS_USER,
                                      I_S_ACTIONDESC     => '处理【普通账户】的最近交易日！',
                                      I_S_CHANGEDESC     => '成功插入客户最近交易日：' || VN_ROWCOUNT || '条！',
                                      I_N_TJRQ           => VN_TJRQ,
                                      I_N_RETCODE        => O_N_CODE,
                                      I_S_RETNOTE        => O_S_NOTE,
                                      I_S_FLAG           => I_N_REDO,
                                      I_N_INSERTORUPDATE => 1);

            VN_STEP := VN_STEP + 1;
            --记录日志明细——开始
            PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                      I_N_LOGDETAILID    => VN_STEP,
                                      I_S_USER           => VS_USER,
                                      I_S_ACTIONDESC     => '处理【信用账户】的最近交易日！',
                                      I_S_CHANGEDESC     => NULL,
                                      I_N_TJRQ           => VN_TJRQ,
                                      I_N_RETCODE        => 1,
                                      I_S_RETNOTE        => '正在运行！',
                                      I_S_FLAG           => I_N_REDO,
                                      I_N_INSERTORUPDATE => 0);
            INSERT INTO DSC_STAT.T_STAT_ZJJYR
                (KHH, YYB, ZJJYR, ZHLB)
                SELECT B.KHH, B.YYB, MAX(CJRQ) AS ZJJYR, 2 AS ZHLB
                  FROM (SELECT KHH, YYB, CJRQ, JYLB
                          FROM DSC_BAS.T_XY_JGMXLS
                        UNION ALL
                        SELECT KHH, YYB, CJRQ, JYLB FROM DSC_HIS.T_XY_JGMXLS_HIS) A,
                       DSC_BAS.T_KHXX_RZRQ B
                 WHERE A.KHH = B.KHH
                   AND A.JYLB IN (SELECT JYLB FROM DSC_CFG.T_JYLB B WHERE B.IS_JSJYL = 1)
                 GROUP BY B.KHH, B.YYB;
            VN_ROWCOUNT := SQL%ROWCOUNT;
            COMMIT;
            --记录日志明细——结束
            PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                      I_N_LOGDETAILID    => VN_STEP,
                                      I_S_USER           => VS_USER,
                                      I_S_ACTIONDESC     => '处理【信用账户】的最近交易日！',
                                      I_S_CHANGEDESC     => '成功插入客户最近交易日：' || VN_ROWCOUNT || '条！',
                                      I_N_TJRQ           => VN_TJRQ,
                                      I_N_RETCODE        => O_N_CODE,
                                      I_S_RETNOTE        => O_S_NOTE,
                                      I_S_FLAG           => I_N_REDO,
                                      I_N_INSERTORUPDATE => 1);

            VN_STEP := VN_STEP + 1;
            --记录日志明细——开始
            PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                      I_N_LOGDETAILID    => VN_STEP,
                                      I_S_USER           => VS_USER,
                                      I_S_ACTIONDESC     => '处理【个股期权账户】的最近交易日！',
                                      I_S_CHANGEDESC     => NULL,
                                      I_N_TJRQ           => VN_TJRQ,
                                      I_N_RETCODE        => 1,
                                      I_S_RETNOTE        => '正在运行！',
                                      I_S_FLAG           => I_N_REDO,
                                      I_N_INSERTORUPDATE => 0);
            INSERT INTO DSC_STAT.T_STAT_ZJJYR
                (KHH, YYB, ZJJYR, ZHLB)
                SELECT B.KHH, B.YYB, MAX(CJRQ) AS ZJJYR, 5 AS ZHLB
                  FROM (SELECT KHH, YYB, CJRQ, KPBZ
                          FROM DSC_BAS.T_SO_JGMXLS
                        UNION ALL
                        SELECT KHH, YYB, CJRQ, KPBZ FROM DSC_HIS.T_SO_JGMXLS_HIS) A,
                       DSC_BAS.T_KHXX_GGQQ B
                 WHERE A.KHH = B.KHH
                   AND A.KPBZ IN ('C', 'O') --目前认为开仓和平仓操作的算客户主动交易行为
                 GROUP BY B.KHH, B.YYB;
            VN_ROWCOUNT := SQL%ROWCOUNT;
            COMMIT;
            --记录日志明细——结束
            PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                      I_N_LOGDETAILID    => VN_STEP,
                                      I_S_USER           => VS_USER,
                                      I_S_ACTIONDESC     => '处理【个股期权账户】的最近交易日！',
                                      I_S_CHANGEDESC     => '成功插入客户最近交易日：' || VN_ROWCOUNT || '条！',
                                      I_N_TJRQ           => VN_TJRQ,
                                      I_N_RETCODE        => O_N_CODE,
                                      I_S_RETNOTE        => O_S_NOTE,
                                      I_S_FLAG           => I_N_REDO,
                                      I_N_INSERTORUPDATE => 1);
        ELSE
            ---------------------------------------------------------------------------------
            VN_STEP := VN_STEP + 1;
            --记录日志明细——开始
            PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                      I_N_LOGDETAILID    => VN_STEP,
                                      I_S_USER           => VS_USER,
                                      I_S_ACTIONDESC     => '更新[DSC_BAS.T_STAT_ZJJYR]的【普通账户】数据！',
                                      I_S_CHANGEDESC     => NULL,
                                      I_N_TJRQ           => VN_TJRQ,
                                      I_N_RETCODE        => 1,
                                      I_S_RETNOTE        => '正在运行！',
                                      I_S_FLAG           => I_N_REDO,
                                      I_N_INSERTORUPDATE => 0);

            --事务处理
            --生成统计数据
            MERGE INTO DSC_STAT.T_STAT_ZJJYR A
            USING (SELECT D.KHH, D.YYB, C.CJRQ, 1 AS ZHLB
                     FROM DSC_BAS.T_JGMXLS C, DSC_BAS.T_KHXX_JJYW D
                    WHERE C.KHH = D.KHH
                      AND C.JYLB IN (SELECT JYLB FROM DSC_CFG.T_JYLB D WHERE D.IS_JSJYL = 1)
                      AND C.CJRQ = VN_TJRQ
                    GROUP BY D.KHH, D.YYB, CJRQ) B
            ON (A.KHH = B.KHH AND A.ZHLB = '1')
            WHEN MATCHED THEN
                UPDATE
                   SET A.SSCJYRQ = CASE
                                       WHEN NVL(A.SSCJYRQ, '19000101') < A.ZJJYR AND NVL(A.ZJJYR, '19000101') < VN_TJRQ THEN
                                        A.ZJJYR
                                       ELSE
                                        A.SSCJYRQ
                                   END,
                       A.ZJJYR   = B.CJRQ
                 WHERE A.KHH = B.KHH
                   AND A.ZHLB = '1' WHEN NOT MATCHED THEN INSERT(A.KHH, A.YYB, A.ZJJYR, A.ZHLB) VALUES(B.KHH, B.YYB, B.CJRQ, B.ZHLB);
            --执行SQL
            VN_ROWCOUNT := SQL%ROWCOUNT;
            COMMIT;
            --记录日志明细——成功结束
            PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                      I_N_LOGDETAILID    => VN_STEP,
                                      I_S_USER           => VS_USER,
                                      I_S_ACTIONDESC     => '更新[DSC_BAS.T_STAT_ZJJYR]的【普通账户】数据！',
                                      I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                                      I_N_TJRQ           => VN_TJRQ,
                                      I_N_RETCODE        => O_N_CODE,
                                      I_S_RETNOTE        => O_S_NOTE,
                                      I_S_FLAG           => I_N_REDO,
                                      I_N_INSERTORUPDATE => 1);

            VN_STEP := VN_STEP + 1;
            --记录日志明细——开始
            PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                      I_N_LOGDETAILID    => VN_STEP,
                                      I_S_USER           => VS_USER,
                                      I_S_ACTIONDESC     => '更新[DSC_BAS.T_STAT_ZJJYR]的【信用账户】数据！',
                                      I_S_CHANGEDESC     => NULL,
                                      I_N_TJRQ           => VN_TJRQ,
                                      I_N_RETCODE        => 1,
                                      I_S_RETNOTE        => '正在运行！',
                                      I_S_FLAG           => I_N_REDO,
                                      I_N_INSERTORUPDATE => 0);

            --事务处理
            --生成统计数据
            MERGE INTO DSC_STAT.T_STAT_ZJJYR A
            USING (SELECT D.KHH, D.YYB, C.CJRQ, 2 AS ZHLB
                     FROM DSC_BAS.T_XY_JGMXLS C, DSC_BAS.T_KHXX_RZRQ D
                    WHERE C.KHH = D.KHH
                      AND C.JYLB IN (SELECT JYLB FROM DSC_CFG.T_JYLB D WHERE D.IS_JSJYL = 1)
                      AND C.CJRQ = VN_TJRQ
                    GROUP BY D.KHH, D.YYB, CJRQ) B
            ON (A.KHH = B.KHH AND A.ZHLB = '2')
            WHEN MATCHED THEN
                UPDATE
                   SET A.SSCJYRQ = CASE
                                       WHEN NVL(A.SSCJYRQ, '19000101') < A.ZJJYR AND NVL(A.ZJJYR, '19000101') < VN_TJRQ THEN
                                        A.ZJJYR
                                       ELSE
                                        A.SSCJYRQ
                                   END,
                       A.ZJJYR   = B.CJRQ
                 WHERE A.KHH = B.KHH
                   AND A.ZHLB = '2' WHEN NOT MATCHED THEN INSERT(A.KHH, A.YYB, A.ZJJYR, A.ZHLB) VALUES(B.KHH, B.YYB, B.CJRQ, B.ZHLB);
            --执行SQL
            VN_ROWCOUNT := SQL%ROWCOUNT;
            COMMIT;
            --记录日志明细——成功结束
            PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                      I_N_LOGDETAILID    => VN_STEP,
                                      I_S_USER           => VS_USER,
                                      I_S_ACTIONDESC     => '更新[DSC_BAS.T_STAT_ZJJYR]的【信用账户】数据！',
                                      I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                                      I_N_TJRQ           => VN_TJRQ,
                                      I_N_RETCODE        => O_N_CODE,
                                      I_S_RETNOTE        => O_S_NOTE,
                                      I_S_FLAG           => I_N_REDO,
                                      I_N_INSERTORUPDATE => 1);

            VN_STEP := VN_STEP + 1;
            --记录日志明细——开始
            PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                      I_N_LOGDETAILID    => VN_STEP,
                                      I_S_USER           => VS_USER,
                                      I_S_ACTIONDESC     => '更新[DSC_BAS.T_STAT_ZJJYR]的【个股期权账户】数据！',
                                      I_S_CHANGEDESC     => NULL,
                                      I_N_TJRQ           => VN_TJRQ,
                                      I_N_RETCODE        => 1,
                                      I_S_RETNOTE        => '正在运行！',
                                      I_S_FLAG           => I_N_REDO,
                                      I_N_INSERTORUPDATE => 0);

            --事务处理
            --生成统计数据
            MERGE INTO DSC_STAT.T_STAT_ZJJYR A
            USING (SELECT D.KHH, D.YYB, C.CJRQ, 5 AS ZHLB
                     FROM DSC_BAS.T_SO_JGMXLS C, DSC_BAS.T_KHXX_GGQQ D
                    WHERE C.KHH = D.KHH
                      AND C.KPBZ IN ('C', 'O') --目前认为开仓和平仓操作的算客户主动交易行为
                      AND C.CJRQ = VN_TJRQ
                    GROUP BY D.KHH, D.YYB, CJRQ) B
            ON (A.KHH = B.KHH AND A.ZHLB = '5')
            WHEN MATCHED THEN
                UPDATE
                   SET A.SSCJYRQ = CASE
                                       WHEN NVL(A.SSCJYRQ, '19000101') < A.ZJJYR AND NVL(A.ZJJYR, '19000101') < VN_TJRQ THEN
                                        A.ZJJYR
                                       ELSE
                                        A.SSCJYRQ
                                   END,
                       A.ZJJYR   = B.CJRQ
                 WHERE A.KHH = B.KHH
                   AND A.ZHLB = '5' WHEN NOT MATCHED THEN INSERT(A.KHH, A.YYB, A.ZJJYR, A.ZHLB) VALUES(B.KHH, B.YYB, B.CJRQ, B.ZHLB);
            --执行SQL
            VN_ROWCOUNT := SQL%ROWCOUNT;
            COMMIT;
            --记录日志明细——成功结束
            PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                      I_N_LOGDETAILID    => VN_STEP,
                                      I_S_USER           => VS_USER,
                                      I_S_ACTIONDESC     => '更新[DSC_BAS.T_STAT_ZJJYR]的【个股期权账户】数据！',
                                      I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                                      I_N_TJRQ           => VN_TJRQ,
                                      I_N_RETCODE        => O_N_CODE,
                                      I_S_RETNOTE        => O_S_NOTE,
                                      I_S_FLAG           => I_N_REDO,
                                      I_N_INSERTORUPDATE => 1);
        END IF;

    END IF;

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZJJYR;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZQDMPJ_R(O_N_CODE OUT INT,
                                                     O_S_NOTE OUT VARCHAR2,
                                                     I_N_TJRQ IN INT,
                                                     I_N_REDO IN NUMBER) IS
    /*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名  ：   DSC_STAT
         过程名称：   证券金融产品代码评级统计
         功能简述：   证券金融产品代码评级统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_TJRQ            统计日期
                  I_N_REDO            0：不重做    1：重做
         返回：

         算法：


         注意事项：目前风险评级只是简单计算，需要根据具体需求进行调整


         数据源：
                 DSC_CFG.T_ZQDM :客户_客户交易收入日统计
                 DSC_CFG.T_ZQPZ_DY:证券品种对应表
                 DSC_CFG.T_JRCPDM:融资融券_客户日统计表


         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                    操作
         林伟        2013/10/25                 创建
         胡阳明      2013/11/05                 修改:带ST的为高风险,同时修改基金,根据基金的类型进行分类
    */
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT;
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期

BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL;
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    --重做删除原数据
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '删除[DSC_STAT.T_ZQDMPJ]目标表的数据！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DSC_STAT.T_ZQDMPJ';
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '删除[DSC_STAT.T_ZQDMPJ]目标表的数据！',
                              I_S_CHANGEDESC     => '[DSC_STAT.T_ZQDMPJ]表删除' ||
                                                    VN_ROWCOUNT || '条记录！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    --记录日志明细——结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '删除[DSC_STAT.T_KHYJFL_LS]目标表的数据！',
                              I_S_CHANGEDESC     => '[DSC_STAT.T_KHYJFL]表删除' ||
                                                    VN_ROWCOUNT || '条记录！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    O_S_NOTE := '【ERROR-10001-1】';
    --统计证券代码评级数据
    --排除中小板部分
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计证券代码评级数据(排除中小板)到表[DSC_STAT.T_ZQDMPJ]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_ZQDMPJ
        SELECT T.JYS,
               T.ZQDM AS ZQCPDM,
               CASE
                   WHEN T.ZQDM LIKE '%ST%' THEN
                    3
                   WHEN T1.JB3_ZQPZ IN (131, 132, 311) THEN --三板，权证
                    3
                   WHEN T1.JB3_ZQPZ IN (110, 111, 112, 113, 121, 122, 211, 221, 231, 232) THEN --普通股票，基金
                    2
                   WHEN T1.JB3_ZQPZ IN (411, 431, 441, 511, 611) THEN --债券，回购
                    1
                   ELSE
                    1
               END AS ZQCPPJ
          FROM DSC_CFG.T_ZQDM T
          JOIN (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ FROM DSC_CFG.T_ZQPZ_DY) T1 ON T.JYS =
                                                                                  T1.JYS
                                                                              AND T.ZQLB =
                                                                                  T1.ZQLB
         WHERE T1.JB3_ZQPZ <> 112
           AND NOT (T.ZQDM LIKE '002%' AND T.ZQLB = 'A0' AND T.JYS = '1'); --排除中小板数据
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计证券代码评级数据(排除中小板)到表[DSC_STAT.T_ZQDMPJ]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '【ERROR-10001-2】';
    --统计证券代码评级数据
    --中小板部分
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计证券代码评级数据(排除中小板)到表[DSC_STAT.T_ZQDMPJ]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_ZQDMPJ
        SELECT T.JYS,
               T.ZQDM AS ZQCPDM,
               CASE
                   WHEN T.ZQDM LIKE '%ST%' THEN
                    3
                   WHEN T1.JB3_ZQPZ IN (131, 132, 311) THEN --三板，权证
                    3
                   WHEN T1.JB3_ZQPZ IN (110, 111, 112, 113, 121, 122, 211, 221, 231, 232) THEN --普通股票，基金
                    2
                   WHEN T1.JB3_ZQPZ IN (411, 431, 441, 511, 611) THEN --债券，回购
                    1
                   ELSE
                    1
               END AS ZQCPPJ
          FROM DSC_CFG.T_ZQDM T
          JOIN (SELECT DISTINCT JYS, ZQLB, JB3_ZQPZ FROM DSC_CFG.T_ZQPZ_DY) T1 ON T.JYS =
                                                                                  T1.JYS
                                                                              AND T.ZQLB =
                                                                                  T1.ZQLB
         WHERE T1.JB3_ZQPZ = 112
           AND (T.ZQDM LIKE '002%' AND T.ZQLB = 'A0' AND T.JYS = '1');
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计证券代码评级数据(排除中小板)到表[DSC_STAT.T_ZQDMPJ]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    O_S_NOTE := '【ERROR-10002】';
    --统计金融产品代码评级数据
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品代码评级数据[DSC_STAT.T_ZQDMPJ]',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);
    INSERT INTO DSC_STAT.T_ZQDMPJ
        SELECT 7 AS JYS,
               CPDM AS ZQCPDM,
               CASE
                   WHEN T.CPFL = 1 THEN
                    1
                   WHEN T.CPFL = 2 THEN
                    2
                   ELSE
                    3
               END AS ZQCPPJ
          FROM DSC_CFG.T_JRCPDM T;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;
    --记录日志明细——成功结束
    O_S_NOTE := '运行正常';
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '统计金融产品代码评级数据[DSC_STAT.T_ZQDMPJ]',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);
    --存储过程运行成功
    O_S_NOTE := '运行正常';
    --记录日志
    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);

EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := O_S_NOTE || SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZQDMPJ_R;

CREATE OR REPLACE PROCEDURE DSC_STAT.P_STAT_ZQZRZC_R(O_N_CODE OUT INT,
                                                     O_S_NOTE OUT VARCHAR2,
                                                     I_N_TJRQ IN INT,
                                                     I_N_REDO IN INT DEFAULT 0)
/*-----------------------------------------------------------------------
         项目名称：   NDSC-数据服务中心
         用户名：     DSC_STAT
         过程名称:    P_STAT_ZQZRZC_R
         功能简述：   证券转入转出日统计
         参数：
                  英文名称            中文名称                可能取值
                  O_N_CODE            返回代码                0 正常；-1 异常
                  O_S_NOTE            返回信息                字符串信息
                  I_N_STATDATE        统计日期
                  I_N_REDO            重做标识                0：不重做    1：重做   2:初始化

         返回：



         算法：



         注意事项：




         数据源：
                 1、DSC_BAS.T_JGMXLS             交割明细流水表



         修改记录;
         ------------------------------------------------------------------------
         操作人      操作时间                   操作
         胡阳明      2012/04/25                 创建

    */
 IS
    VS_PROC_NAME VARCHAR2(100) := $$PLSQL_UNIT; --过程名
    VN_LOGID     INT; --LOG 表记录ID
    VN_ROWCOUNT  INT; --记录数
    VN_STEP      INT; --动作步数
    VN_TJRQ      NUMBER(8) := I_N_TJRQ; --统计日期
    VN_PROC_NO   PUB_SYS.T_ETL_PROC_MANAGE.PROC_NO%TYPE;
    VS_USER      VARCHAR2(30);
    --VS_SQL       VARCHAR2(20000);
BEGIN
    --变量初始化
    O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTSUCCESSFUL; --初始化运行成功
    O_S_NOTE := '运行正常';
    VS_USER  := 'DSC_STAT';
    SELECT PUB_SYS.SEQ_T_PROC_LOG.NEXTVAL INTO VN_LOGID FROM DUAL; --日志序列号
    --获取ETL过程的编号
    VN_PROC_NO := PUB_SYS.F_GET_PROC_NO(I_S_OWNER     => VS_USER,
                                        I_S_PROC_NAME => VS_PROC_NAME);
    VN_STEP    := 0;

    --过程开始
    --记录日志——开始
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => 1,
                       I_S_RETNOTE        => '正在运行！',
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 0);

    IF I_N_REDO IN (0, 1, 2) THEN
        --初始化时清空数据
        VN_STEP := VN_STEP + 1;
        --记录日志明细——开始
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_ZQZRZC_R]表，证券转入转出数据！',
                                  I_S_CHANGEDESC     => NULL,
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => 1,
                                  I_S_RETNOTE        => '正在运行！',
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 0);

        --事务处理
        DELETE FROM DSC_STAT.T_STAT_ZQZRZC_R T WHERE T.RQ = VN_TJRQ;
        VN_ROWCOUNT := SQL%ROWCOUNT;
        --记录日志明细——结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '删除[DSC_STAT.T_STAT_ZQZRZC_R]表，证券转入转出数据！',
                                  I_S_CHANGEDESC     => '[DSC_STAT.T_STAT_ZQZRZC_R]已删除' ||
                                                        VN_ROWCOUNT || '条！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);
    END IF;

    --将 SRC层的数据写入DSC中
    VN_STEP := VN_STEP + 1;
    --记录日志明细——开始
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将源表[DSC_BAS.T_JGMXLS]的证券转入转出数据统计到表[DSC_STAT.T_STAT_ZQZRZC_R]中！',
                              I_S_CHANGEDESC     => NULL,
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => 1,
                              I_S_RETNOTE        => '正在运行！',
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 0);

    --事务处理
    --生成统计数据
    INSERT INTO DSC_STAT.T_STAT_ZQZRZC_R
        (RQ, KHH, YYB, GRJG, ZQDM, ZQLB, JYLB, BZ, CQFX, ZQSL, ZQSZ)
        SELECT T.CJRQ AS RQ,
               T.KHH,
               T.YYB,
               T1.GRJG,
               T. ZQDM,
               T. ZQLB,
               T.JYLB,
               T.BZ,
               CASE
                   WHEN T.JYLB IN ('9', '15') THEN
                    '1'
                   ELSE
                    '2'
               END CQFX,
               SUM(T.CJSL) AS ZQSL,
               SUM(T.CJJE) AS ZQSZ
          FROM (SELECT KHH, YYB, CJRQ, ZQDM, ZQLB, JYLB, BZ, CJJE, CJSL
                  FROM DSC_BAS.T_JGMXLS
                UNION ALL
                SELECT KHH, YYB, CJRQ, ZQDM, ZQLB, JYLB, BZ, CJJE, CJSL
                  FROM DSC_HIS.T_JGMXLS_HIS) T,
               DSC_BAS.T_KHXX_JJYW T1
         WHERE CJRQ = I_N_TJRQ
           AND T.KHH = T1.KHH
           AND JYLB IN ('7', '9', '10', '15')
         GROUP BY T.CJRQ,
                  T.KHH,
                  T.YYB,
                  T1.GRJG,
                  T. ZQDM,
                  T. ZQLB,
                  T.JYLB,
                  T.BZ,
                  CASE
                      WHEN T.JYLB IN ('9', '15') THEN
                       '1'
                      ELSE
                       '2'
                  END;
    VN_ROWCOUNT := SQL%ROWCOUNT;
    COMMIT;

    --记录日志明细——成功结束
    PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                              I_N_LOGDETAILID    => VN_STEP,
                              I_S_USER           => VS_USER,
                              I_S_ACTIONDESC     => '将源表[DSC_BAS.T_JGMXLS]的证券转入转出数据统计到表[DSC_STAT.T_STAT_ZQZRZC_R]中！',
                              I_S_CHANGEDESC     => '插入记录：' || VN_ROWCOUNT || '条！',
                              I_N_TJRQ           => VN_TJRQ,
                              I_N_RETCODE        => O_N_CODE,
                              I_S_RETNOTE        => O_S_NOTE,
                              I_S_FLAG           => I_N_REDO,
                              I_N_INSERTORUPDATE => 1);

    --记录日志——成功结束
    PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                       I_N_LOGID          => VN_LOGID,
                       I_S_USER           => VS_USER,
                       I_S_PROCNAME       => VS_PROC_NAME,
                       I_N_TJRQ           => VN_TJRQ,
                       I_N_RETCODE        => O_N_CODE,
                       I_S_RETNOTE        => O_S_NOTE,
                       I_S_FLAG           => I_N_REDO,
                       I_N_INSERTORUPDATE => 1);
EXCEPTION
    WHEN OTHERS THEN
        O_N_CODE := PUB_SYS.PKG_GCONST.PROCRUNRESULTFAILED; --运行失败
        O_S_NOTE := SQLERRM;
        ROLLBACK;
        --记录日志——失败结束
        PUB_SYS.P_LOG_PROC(I_N_PROCNO         => VN_PROC_NO,
                           I_N_LOGID          => VN_LOGID,
                           I_S_USER           => VS_USER,
                           I_S_PROCNAME       => VS_PROC_NAME,
                           I_N_TJRQ           => VN_TJRQ,
                           I_N_RETCODE        => O_N_CODE,
                           I_S_RETNOTE        => O_S_NOTE,
                           I_S_FLAG           => I_N_REDO,
                           I_N_INSERTORUPDATE => 1);
        --记录日志明细——失败结束
        PUB_SYS.P_LOG_PROC_DETAIL(I_N_LOGID          => VN_LOGID,
                                  I_N_LOGDETAILID    => VN_STEP,
                                  I_S_USER           => VS_USER,
                                  I_S_ACTIONDESC     => '运行失败！',
                                  I_S_CHANGEDESC     => '运行失败！',
                                  I_N_TJRQ           => VN_TJRQ,
                                  I_N_RETCODE        => O_N_CODE,
                                  I_S_RETNOTE        => O_S_NOTE,
                                  I_S_FLAG           => I_N_REDO,
                                  I_N_INSERTORUPDATE => 1);

END P_STAT_ZQZRZC_R;
